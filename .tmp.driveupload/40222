{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next.Pisces/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/images/icon-16-16.png","path":"images/icon-16-16.png","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/images/icon-32-32.png","path":"images/icon-32-32.png","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/images/worm.jpg","path":"images/worm.jpg","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next.Pisces/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/404/index.md","hash":"ce3a41d459ab5b1ec87e892fa88c4e9d096fd738","modified":1632399196702},{"_id":"source/.DS_Store","hash":"ea3eb66b2239028981a6aedced3842a822bbdadf","modified":1636786779516},{"_id":"source/_posts/APCS 2021.01.md","hash":"a2076d17ae02dfce8d4b6ff36b0b61ee6d7d87c0","modified":1632050805000},{"_id":"source/_posts/APCS 2021.09.md","hash":"4566044b64f902f900d2889b9759f5b9ab8300cf","modified":1632050805000},{"_id":"source/_posts/APCS 2021.11.md","hash":"fdf68b1aa61e0b99cb0aecb1aec074d3698256e2","modified":1636812208093},{"_id":"source/_posts/Geomertry.md","hash":"20c84de30116789b56264e4c60fc9345a343de36","modified":1632050805000},{"_id":"source/_posts/Geomertry_problem.md","hash":"29ba7fd2b9ecab90af90e8d849ac5079b3a57dfb","modified":1632050805000},{"_id":"source/_posts/Segment Tree.md","hash":"f425a9f86b61dd0f84e398a4f575a8696cec7de0","modified":1632050805000},{"_id":"source/_posts/Segment_Tree_problem.md","hash":"9bbd62217adbc252808f58b902204f92c6fab379","modified":1632050805000},{"_id":"source/_posts/Shortest_Path.md","hash":"e49e22f61d3f73034bccef5158b2b7c04cf15e5c","modified":1632050805000},{"_id":"source/_posts/Shortest_Path_problem.md","hash":"700f24754976eaecfffbe5192b2af488f6797311","modified":1632050805000},{"_id":"source/_posts/String.md","hash":"418b9d6a0cbb7b32189740c31331c3da21205b7b","modified":1632050805000},{"_id":"source/_posts/String_problems.md","hash":"ec7587d6c72d5f926d7cedf8edeeeb54571ef0aa","modified":1632050805000},{"_id":"source/_posts/三門問題.md","hash":"433e4807857cbe9f06987f827551b9a4302ed803","modified":1632050805000},{"_id":"source/_posts/個人部落格.md","hash":"e99f05fb42ce4e8e0ee1c820c8c090016f8bfed7","modified":1632396626205},{"_id":"source/_posts/最近點對.md","hash":"4d3a001463134368f9c758b824f0f22e715d4f81","modified":1636867549504},{"_id":"source/_posts/生日問題.md","hash":"d4e92c2992ffea0807f02460f25c23d7df085d8b","modified":1632050805000},{"_id":"source/_posts/錯排問題.md","hash":"a8d685ac06d0d6ba4d83d16b5a1fd2a4fe42ec36","modified":1632050805000},{"_id":"source/about/index.md","hash":"501269e03f570d24a822728b41122407e8411525","modified":1632050805000},{"_id":"source/categories/index.md","hash":"2d96618de0ffbeea275b4396545e6b7c2738c4c3","modified":1632050805000},{"_id":"source/tags/index.md","hash":"dce038d3bd132810e568ac2f8f7e970c0674e8d1","modified":1632050805000},{"_id":"themes/next.Pisces/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1632050805000},{"_id":"themes/next.Pisces/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1632050805000},{"_id":"themes/next.Pisces/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1632050805000},{"_id":"themes/next.Pisces/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1632050805000},{"_id":"themes/next.Pisces/.DS_Store","hash":"9bffaab8794176d66945c6095839a0136335a564","modified":1632396865182},{"_id":"themes/next.Pisces/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1632050805000},{"_id":"themes/next.Pisces/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1632050805000},{"_id":"themes/next.Pisces/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1632050805000},{"_id":"themes/next.Pisces/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1632050805000},{"_id":"themes/next.Pisces/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1632050805000},{"_id":"themes/next.Pisces/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1632050805000},{"_id":"themes/next.Pisces/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1632050805000},{"_id":"themes/next.Pisces/_config.yml","hash":"a01f37d957d3643d75d353b785def1830d912e80","modified":1632050805000},{"_id":"themes/next.Pisces/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1632050805000},{"_id":"themes/next.Pisces/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1632050805000},{"_id":"themes/next.Pisces/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1632050805000},{"_id":"themes/next.Pisces/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1632050805000},{"_id":"themes/next.Pisces/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1632050805000},{"_id":"themes/next.Pisces/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1632050805000},{"_id":"themes/next.Pisces/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1632050805000},{"_id":"themes/next.Pisces/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1632050805000},{"_id":"themes/next.Pisces/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1632050805000},{"_id":"themes/next.Pisces/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1632050805000},{"_id":"themes/next.Pisces/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1632050805000},{"_id":"themes/next.Pisces/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1632050805000},{"_id":"themes/next.Pisces/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1632050805000},{"_id":"themes/next.Pisces/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1632050805000},{"_id":"themes/next.Pisces/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1632050805000},{"_id":"themes/next.Pisces/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1632050805000},{"_id":"themes/next.Pisces/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1632050805000},{"_id":"themes/next.Pisces/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1632050805000},{"_id":"themes/next.Pisces/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1632050805000},{"_id":"themes/next.Pisces/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1632050805000},{"_id":"themes/next.Pisces/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1632050805000},{"_id":"themes/next.Pisces/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1632050805000},{"_id":"themes/next.Pisces/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1632050805000},{"_id":"themes/next.Pisces/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1632050805000},{"_id":"themes/next.Pisces/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1632050805000},{"_id":"themes/next.Pisces/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1632050805000},{"_id":"themes/next.Pisces/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1632050805000},{"_id":"themes/next.Pisces/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1632050805000},{"_id":"themes/next.Pisces/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1632050805000},{"_id":"themes/next.Pisces/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1632050805000},{"_id":"themes/next.Pisces/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1632050805000},{"_id":"themes/next.Pisces/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1632050805000},{"_id":"themes/next.Pisces/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1632050805000},{"_id":"themes/next.Pisces/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1632050805000},{"_id":"themes/next.Pisces/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1632050805000},{"_id":"themes/next.Pisces/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1632050805000},{"_id":"themes/next.Pisces/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1632050805000},{"_id":"themes/next.Pisces/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1632050805000},{"_id":"themes/next.Pisces/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1632050805000},{"_id":"themes/next.Pisces/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1632050805000},{"_id":"themes/next.Pisces/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1632050805000},{"_id":"themes/next.Pisces/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1632050805000},{"_id":"themes/next.Pisces/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1632050805000},{"_id":"themes/next.Pisces/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1632050805000},{"_id":"themes/next.Pisces/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1632050805000},{"_id":"themes/next.Pisces/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1632050805000},{"_id":"themes/next.Pisces/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1632050805000},{"_id":"themes/next.Pisces/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1632050805000},{"_id":"themes/next.Pisces/source/.DS_Store","hash":"ad04b66b1f1981d89e63011fea9f89f212d10190","modified":1632396865181},{"_id":"themes/next.Pisces/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1632050805000},{"_id":"themes/next.Pisces/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1632050805000},{"_id":"themes/next.Pisces/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1632050805000},{"_id":"themes/next.Pisces/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1632050805000},{"_id":"themes/next.Pisces/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1632050805000},{"_id":"themes/next.Pisces/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1632050805000},{"_id":"themes/next.Pisces/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1632050805000},{"_id":"themes/next.Pisces/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1632050805000},{"_id":"themes/next.Pisces/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1632050805000},{"_id":"themes/next.Pisces/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1632050805000},{"_id":"themes/next.Pisces/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1632050805000},{"_id":"themes/next.Pisces/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1632050805000},{"_id":"themes/next.Pisces/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1632050805000},{"_id":"themes/next.Pisces/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1632050805000},{"_id":"themes/next.Pisces/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1632050805000},{"_id":"themes/next.Pisces/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_macro/sidebar.swig","hash":"68ad6df789a30b818ec7b05f95db65aec59e8353","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1632050805000},{"_id":"themes/next.Pisces/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1632050805000},{"_id":"themes/next.Pisces/source/images/apple-touch-icon-next.png","hash":"418474ccd5fbc181c5ed9d7c7e6eab54ff5f4003","modified":1632050805000},{"_id":"themes/next.Pisces/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1632050805000},{"_id":"themes/next.Pisces/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1632050805000},{"_id":"themes/next.Pisces/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1632050805000},{"_id":"themes/next.Pisces/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1632050805000},{"_id":"themes/next.Pisces/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1632050805000},{"_id":"themes/next.Pisces/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1632050805000},{"_id":"themes/next.Pisces/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1632050805000},{"_id":"themes/next.Pisces/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1632050805000},{"_id":"themes/next.Pisces/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1632050805000},{"_id":"themes/next.Pisces/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1632050805000},{"_id":"themes/next.Pisces/source/images/icon-16-16.png","hash":"3b97eb731b0ab73af1c18f8e256d70530fd64cd4","modified":1632050805000},{"_id":"themes/next.Pisces/source/images/icon-32-32.png","hash":"7fd2586092adc7b0a339abb29a1e31da9a35fa26","modified":1632050805000},{"_id":"themes/next.Pisces/source/images/worm.jpg","hash":"446a095859daf06703544a4b25a52087473f90ce","modified":1632050805000},{"_id":"themes/next.Pisces/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1632050805000},{"_id":"themes/next.Pisces/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1632050805000},{"_id":"themes/next.Pisces/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1632050805000},{"_id":"themes/next.Pisces/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1632050805000},{"_id":"themes/next.Pisces/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1632050805000},{"_id":"themes/next.Pisces/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1632050805000},{"_id":"themes/next.Pisces/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1632050805000},{"_id":"themes/next.Pisces/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_partials/head/head.swig","hash":"98a22f695a6e56cc29910fe98db08cbe9cfeed34","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1632050805000},{"_id":"themes/next.Pisces/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1632050805000},{"_id":"themes/next.Pisces/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1632050805000},{"_id":"themes/next.Pisces/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1632050805000},{"_id":"themes/next.Pisces/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1632050805000},{"_id":"themes/next.Pisces/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1632050805000},{"_id":"themes/next.Pisces/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1632050805000},{"_id":"themes/next.Pisces/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1632050805000},{"_id":"themes/next.Pisces/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1632050805000},{"_id":"themes/next.Pisces/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1632050805000},{"_id":"themes/next.Pisces/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1632050805000},{"_id":"themes/next.Pisces/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1632050805000},{"_id":"public/search.xml","hash":"605b656e47c37b44e2f37fdf74964232e99ea8fa","modified":1636867607627},{"_id":"public/404.html","hash":"e72cd6ad59428ad8a19339c82742fa33d6d7761f","modified":1636867607627},{"_id":"public/about/index.html","hash":"ee668479064ebd771f0e15e36e2e4a6347be7736","modified":1636867607627},{"_id":"public/categories/index.html","hash":"0075a4e16b83abea1c6a6409bd0f543103852d8c","modified":1636867607627},{"_id":"public/tags/index.html","hash":"b8cfdabfbcead5bb0b25daeaf8238e0bdf7a501d","modified":1636867607627},{"_id":"public/archives/2021/01/index.html","hash":"c694213d77e060d9f620ab0fbac8b0d2fe460498","modified":1636867607627},{"_id":"public/archives/2021/07/index.html","hash":"55474daa561095337d6d4cd40940c080cbf3ec42","modified":1636867607627},{"_id":"public/archives/2021/09/index.html","hash":"933c0286e5d10721b3f86aa66e0e2e1f5e45a1bd","modified":1636867607627},{"_id":"public/archives/2021/11/index.html","hash":"7d70c066e7ec6ea8a15c8c5c54bca22b08a5eed7","modified":1636867607627},{"_id":"public/categories/APCS檢定/index.html","hash":"aedad965fba2926b33c2ae59887cff0d0b86b81b","modified":1636867607627},{"_id":"public/categories/數學筆記/index.html","hash":"fca8ac93c6f3d07ea6a7d718726baa3260fa32fb","modified":1636867607627},{"_id":"public/categories/部落格架設/index.html","hash":"090606e7c6e055205ad6eed02dcc2599bb411258","modified":1636867607627},{"_id":"public/categories/C-進階主題/計算幾何/index.html","hash":"f1cd916030906ce28c3647f4b97c40f73be46416","modified":1636867607627},{"_id":"public/categories/C-進階主題/線段樹/index.html","hash":"35b8a13960ffb5ccd2b5102322b528232e498e01","modified":1636867607627},{"_id":"public/categories/C-進階主題/最短路徑/index.html","hash":"42173c54cdb3a0d2981c092cd6bc547396d3d744","modified":1636867607627},{"_id":"public/categories/C-進階主題/最近點對/index.html","hash":"f7ca2d2875d2dfb8901ba3d17de8e93bc4d64177","modified":1636867607627},{"_id":"public/categories/C-進階主題/字串演算法/index.html","hash":"928dd4ec1acd863449456a3ed38785f8fe0fd966","modified":1636867607627},{"_id":"public/tags/APCS/index.html","hash":"b3fdf8f9d849a3f9173d3c87bc70dc23698e9c34","modified":1636867607627},{"_id":"public/tags/競賽筆記/index.html","hash":"8342b47d24123bb67f793ec1ba65d10552455071","modified":1636867607627},{"_id":"public/tags/計算幾何/index.html","hash":"de278fc7ce8857144a7a41cf558d3ae4302e5e60","modified":1636867607627},{"_id":"public/tags/暑期筆記/index.html","hash":"96b7f08a62cf9336913b8519120a1170fc435f5e","modified":1636867607627},{"_id":"public/tags/2020資訊之芽/index.html","hash":"8fae3dff3621e46e0bb09569f2078c6d6db03432","modified":1636867607627},{"_id":"public/tags/2021暑假筆記/index.html","hash":"6d55b5340f33664358c0ede5401535754a8f30db","modified":1636867607627},{"_id":"public/tags/2021暑期筆記/index.html","hash":"738f9b2e3c78c0834a83f5ef9be48a02b15e89db","modified":1636867607627},{"_id":"public/tags/數學/index.html","hash":"e2684ea8f8b10b00ef9ef1298c81f99235af5880","modified":1636867607627},{"_id":"public/tags/個人部落格/index.html","hash":"241274a34780db5c6886ba8442f42d3f1a0e981b","modified":1636867607627},{"_id":"public/tags/網站架設/index.html","hash":"d3d7570cd2d309b8b4a2fc02f3fbcbfaf998fa06","modified":1636867607627},{"_id":"public/tags/分治法/index.html","hash":"6120e6ba4147778547ebb993be3ccdfe01044ff8","modified":1636867607627},{"_id":"public/tags/暑假筆記/index.html","hash":"f8e7fdb9a2821491e1432908902a7fcafe59a4b5","modified":1636867607627},{"_id":"public/tags/字串/index.html","hash":"e33a14e6b3fe6fe2a21a483406f972ad5c79fe05","modified":1636867607627},{"_id":"public/tags/演算法/index.html","hash":"4c17d8a4fa0838dcbd57c7a7d62abfb280c454b8","modified":1636867607627},{"_id":"public/2021/11/07/APCS 2021.11/index.html","hash":"1b0c41b2b25281f4bf93fa4bc146ca206eba9549","modified":1636867607627},{"_id":"public/2021/09/05/APCS 2021.09/index.html","hash":"1fe5e5c408dc780d86bd441eac8e327ab50d0591","modified":1636867607627},{"_id":"public/2021/09/05/String_problems/index.html","hash":"0561f96dfea9e2ce63d0a8672608bb99a003df54","modified":1636867607627},{"_id":"public/2021/09/04/String/index.html","hash":"4c86241676ca57e6fc30150b3356237745f59549","modified":1636867607627},{"_id":"public/2021/08/27/個人部落格/index.html","hash":"008bf39e77bbdb3a385188622ff9018d903e2b8e","modified":1636867607627},{"_id":"public/2021/08/23/最近點對/index.html","hash":"1b22ff071f51c5440fda11d74afc4d9a504fc993","modified":1636867607627},{"_id":"public/2021/08/22/Geomertry_problem/index.html","hash":"9814cfcc909b2d0ed69eaca1e169e9a1bcd3021c","modified":1636867607627},{"_id":"public/2021/08/20/Geomertry/index.html","hash":"f2d4d71c9897ee87f331de8bd3be2e0c80526134","modified":1636867607627},{"_id":"public/2021/08/16/Shortest_Path_problem/index.html","hash":"3361291334db3eb49c59b6b79e9805e1f39787fa","modified":1636867607627},{"_id":"public/2021/08/15/Shortest_Path/index.html","hash":"44d590e16b0b34e75910e91c98e1aec5c82a8a6f","modified":1636867607627},{"_id":"public/2021/08/06/Segment_Tree_problem/index.html","hash":"42fd79b5e1fe6ca266a1d1a46110e8a85c392f4b","modified":1636867607627},{"_id":"public/2021/08/05/Segment Tree/index.html","hash":"e592d18cc3b17d4163c206bbd4ba5e38310eeebc","modified":1636867607627},{"_id":"public/2021/07/10/錯排問題/index.html","hash":"060a05ed4a771421476c3801afed23f9675ff2bf","modified":1636867607627},{"_id":"public/2021/07/05/生日問題/index.html","hash":"3ba566cd2547ab50f24d578d63520b99fee3bf15","modified":1636867607627},{"_id":"public/2021/07/02/三門問題/index.html","hash":"f615ad4f3e2ff833e28317720f4208594e44d540","modified":1636867607627},{"_id":"public/2021/01/09/APCS 2021.01/index.html","hash":"4854c482b7120c8456609bc6f6d9a4382db65d25","modified":1636867607627},{"_id":"public/archives/index.html","hash":"4f0641bd1638754f4b6142eb32ac4363ae595021","modified":1636867607627},{"_id":"public/archives/page/2/index.html","hash":"3305f5911542609c1c58ad5fcf4f54c5e664eae2","modified":1636867607627},{"_id":"public/archives/2021/index.html","hash":"ffbe32f946f72c147e667304af184c556efc0224","modified":1636867607627},{"_id":"public/archives/2021/page/2/index.html","hash":"a47033d4a13002a5593db94e8d4e3f05df263485","modified":1636867607627},{"_id":"public/archives/2021/08/index.html","hash":"1bf859ec6d9149dc39264068101f8cf3048ad2cb","modified":1636867607627},{"_id":"public/categories/C-進階主題/index.html","hash":"2c1ebd4c6129384864890b9a6c80246ae38d3d9f","modified":1636867607627},{"_id":"public/index.html","hash":"ad66e712321f498dcd489b95da583b46090f54ab","modified":1636867607627},{"_id":"public/page/2/index.html","hash":"c7d5c462d7301616160888b3cddf6bc2390ba02e","modified":1636867607627},{"_id":"public/page/3/index.html","hash":"5d722e2153999e942527498393228c17de50621f","modified":1636867607627},{"_id":"public/page/4/index.html","hash":"666c90c54097471eee40ecc0cc5ac94414ef18b9","modified":1636867607627},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1636867607627},{"_id":"public/images/apple-touch-icon-next.png","hash":"418474ccd5fbc181c5ed9d7c7e6eab54ff5f4003","modified":1636867607627},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1636867607627},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1636867607627},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1636867607627},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1636867607627},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1636867607627},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1636867607627},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1636867607627},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1636867607627},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1636867607627},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1636867607627},{"_id":"public/images/icon-16-16.png","hash":"3b97eb731b0ab73af1c18f8e256d70530fd64cd4","modified":1636867607627},{"_id":"public/images/icon-32-32.png","hash":"7fd2586092adc7b0a339abb29a1e31da9a35fa26","modified":1636867607627},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1636867607627},{"_id":"public/images/worm.jpg","hash":"446a095859daf06703544a4b25a52087473f90ce","modified":1636867607627},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1636867607627},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1636867607627},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1636867607627},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1636867607627},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1636867607627},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1636867607627},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1636867607627},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1636867607627},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1636867607627},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1636867607627},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1636867607627},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1636867607627},{"_id":"public/css/main.css","hash":"6066969b6c393944fb11975541c049fb02794942","modified":1636867607627},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1636867607627},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1636867607627},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1636867607627}],"Category":[{"name":"APCS檢定","_id":"ckvyspmgf0004muyxdh0852u1"},{"name":"C++進階主題","_id":"ckvyspmh5000lmuyx9rx65ndp"},{"name":"數學筆記","_id":"ckvyspmhn000ymuyx5sut3hkl"},{"name":"部落格架設","_id":"ckvyspmhp0012muyx4qmdfztl"},{"name":"計算幾何","parent":"ckvyspmh5000lmuyx9rx65ndp","_id":"ckvyspmi1001cmuyxcqet89f8"},{"name":"線段樹","parent":"ckvyspmh5000lmuyx9rx65ndp","_id":"ckvyspmi4001jmuyx2z9rdciy"},{"name":"最短路徑","parent":"ckvyspmh5000lmuyx9rx65ndp","_id":"ckvyspmi5001pmuyxauzb93ky"},{"name":"最近點對","parent":"ckvyspmh5000lmuyx9rx65ndp","_id":"ckvyspmic001tmuyxcm5r848b"},{"name":"字串演算法","parent":"ckvyspmh5000lmuyx9rx65ndp","_id":"ckvyspmiy002nmuyx9pef0qvf"}],"Data":[],"Page":[{"title":"糟糕，出現可悲 404 not found！","date":"2020-09-12T15:01:35.000Z","comments":0,"_content":"\n<!-- markdownlint-disable MD039 MD033 -->\n\n## 這是一個不存在的頁面\n\n好爛，怎麼會這樣，要告訴我這個壞消息嗎QAQ\n\n可以透過 **[FB](https://www.facebook.com/peien.wu.58/)** 傳訊息給我，感激不盡！\n\n![](https://i.imgur.com/FLdzRXc.png)\n\n預計將在約 <span id=\"timeout\">10</span> 秒後返回首頁。\n\n如果你很急著想看文章，你可以 **[點這裡](https://peienwu.com/)** 返回首頁。\n\n<script>\nlet countTime = 10;\n\nfunction count() {\n  \n  document.getElementById('timeout').textContent = countTime;\n  countTime -= 1;\n  if(countTime === 0){\n    location.href = 'http://peienwu.com/'; // 記得改成自己網址 Url\n  }\n  setTimeout(() => {\n    count();\n  }, 1000);\n}\n\ncount();\n</script>\n","source":"404/index.md","raw":"---\ntitle: '糟糕，出現可悲 404 not found！'\ndate: 2020-09-12 23:01:35\ncomments: false\npermalink: /404.html\n---\n\n<!-- markdownlint-disable MD039 MD033 -->\n\n## 這是一個不存在的頁面\n\n好爛，怎麼會這樣，要告訴我這個壞消息嗎QAQ\n\n可以透過 **[FB](https://www.facebook.com/peien.wu.58/)** 傳訊息給我，感激不盡！\n\n![](https://i.imgur.com/FLdzRXc.png)\n\n預計將在約 <span id=\"timeout\">10</span> 秒後返回首頁。\n\n如果你很急著想看文章，你可以 **[點這裡](https://peienwu.com/)** 返回首頁。\n\n<script>\nlet countTime = 10;\n\nfunction count() {\n  \n  document.getElementById('timeout').textContent = countTime;\n  countTime -= 1;\n  if(countTime === 0){\n    location.href = 'http://peienwu.com/'; // 記得改成自己網址 Url\n  }\n  setTimeout(() => {\n    count();\n  }, 1000);\n}\n\ncount();\n</script>\n","updated":"2021-09-23T12:13:16.702Z","path":"/404.html","layout":"page","_id":"ckvyspmfq0000muyxcv3s0kee","content":"<!-- markdownlint-disable MD039 MD033 -->\n<h2 id=\"這是一個不存在的頁面\"><a href=\"#這是一個不存在的頁面\" class=\"headerlink\" title=\"這是一個不存在的頁面\"></a>這是一個不存在的頁面</h2><p>好爛，怎麼會這樣，要告訴我這個壞消息嗎QAQ</p>\n<p>可以透過 <strong><a href=\"https://www.facebook.com/peien.wu.58/\">FB</a></strong> 傳訊息給我，感激不盡！</p>\n<p><img src=\"https://i.imgur.com/FLdzRXc.png\" alt=\"\"></p>\n<p>預計將在約 <span id=\"timeout\">10</span> 秒後返回首頁。</p>\n<p>如果你很急著想看文章，你可以 <strong><a href=\"https://peienwu.com/\">點這裡</a></strong> 返回首頁。</p>\n<script>\nlet countTime = 10;\n\nfunction count() {\n\n  document.getElementById('timeout').textContent = countTime;\n  countTime -= 1;\n  if(countTime === 0){\n    location.href = 'http://peienwu.com/'; // 記得改成自己網址 Url\n  }\n  setTimeout(() => {\n    count();\n  }, 1000);\n}\n\ncount();\n</script>\n","site":{"data":{}},"length":296,"excerpt":"","more":"<!-- markdownlint-disable MD039 MD033 -->\n<h2 id=\"這是一個不存在的頁面\"><a href=\"#這是一個不存在的頁面\" class=\"headerlink\" title=\"這是一個不存在的頁面\"></a>這是一個不存在的頁面</h2><p>好爛，怎麼會這樣，要告訴我這個壞消息嗎QAQ</p>\n<p>可以透過 <strong><a href=\"https://www.facebook.com/peien.wu.58/\">FB</a></strong> 傳訊息給我，感激不盡！</p>\n<p><img src=\"https://i.imgur.com/FLdzRXc.png\" alt=\"\"></p>\n<p>預計將在約 <span id=\"timeout\">10</span> 秒後返回首頁。</p>\n<p>如果你很急著想看文章，你可以 <strong><a href=\"https://peienwu.com/\">點這裡</a></strong> 返回首頁。</p>\n<script>\nlet countTime = 10;\n\nfunction count() {\n\n  document.getElementById('timeout').textContent = countTime;\n  countTime -= 1;\n  if(countTime === 0){\n    location.href = 'http://peienwu.com/'; // 記得改成自己網址 Url\n  }\n  setTimeout(() => {\n    count();\n  }, 1000);\n}\n\ncount();\n</script>\n"},{"title":"About","date":"2021-08-25T07:25:20.000Z","_content":"\n## 基本資料\n\n* 目前的高二\n* 學習C++與演算法\n* 這個網站用來記錄一些筆記和code\n* Handle: @peienwu\n* 一些筆記的[連結](https://hackmd.io/@peienwu)\n\n## Judge 的 Handle\n\n* [ZeroJudge](https://zerojudge.tw/UserStatistic?id=128355)\n* [TIOJ](https://tioj.ck.tp.edu.tw/users/peienwu)\n* [NEOJ](https://neoj.sprout.tw/profile/2631/)\n* [都沒在打的CF](https://codeforces.com/profile/peienwu)\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2021-08-25 15:25:20\n---\n\n## 基本資料\n\n* 目前的高二\n* 學習C++與演算法\n* 這個網站用來記錄一些筆記和code\n* Handle: @peienwu\n* 一些筆記的[連結](https://hackmd.io/@peienwu)\n\n## Judge 的 Handle\n\n* [ZeroJudge](https://zerojudge.tw/UserStatistic?id=128355)\n* [TIOJ](https://tioj.ck.tp.edu.tw/users/peienwu)\n* [NEOJ](https://neoj.sprout.tw/profile/2631/)\n* [都沒在打的CF](https://codeforces.com/profile/peienwu)\n","updated":"2021-09-19T11:26:45.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckvyspmg80002muyxh201aff6","content":"<h2 id=\"基本資料\"><a href=\"#基本資料\" class=\"headerlink\" title=\"基本資料\"></a>基本資料</h2><ul>\n<li>目前的高二</li>\n<li>學習C++與演算法</li>\n<li>這個網站用來記錄一些筆記和code</li>\n<li>Handle: @peienwu</li>\n<li>一些筆記的<a href=\"https://hackmd.io/@peienwu\">連結</a></li>\n</ul>\n<h2 id=\"Judge-的-Handle\"><a href=\"#Judge-的-Handle\" class=\"headerlink\" title=\"Judge 的 Handle\"></a>Judge 的 Handle</h2><ul>\n<li><a href=\"https://zerojudge.tw/UserStatistic?id=128355\">ZeroJudge</a></li>\n<li><a href=\"https://tioj.ck.tp.edu.tw/users/peienwu\">TIOJ</a></li>\n<li><a href=\"https://neoj.sprout.tw/profile/2631/\">NEOJ</a></li>\n<li><a href=\"https://codeforces.com/profile/peienwu\">都沒在打的CF</a></li>\n</ul>\n","site":{"data":{}},"length":93,"excerpt":"","more":"<h2 id=\"基本資料\"><a href=\"#基本資料\" class=\"headerlink\" title=\"基本資料\"></a>基本資料</h2><ul>\n<li>目前的高二</li>\n<li>學習C++與演算法</li>\n<li>這個網站用來記錄一些筆記和code</li>\n<li>Handle: @peienwu</li>\n<li>一些筆記的<a href=\"https://hackmd.io/@peienwu\">連結</a></li>\n</ul>\n<h2 id=\"Judge-的-Handle\"><a href=\"#Judge-的-Handle\" class=\"headerlink\" title=\"Judge 的 Handle\"></a>Judge 的 Handle</h2><ul>\n<li><a href=\"https://zerojudge.tw/UserStatistic?id=128355\">ZeroJudge</a></li>\n<li><a href=\"https://tioj.ck.tp.edu.tw/users/peienwu\">TIOJ</a></li>\n<li><a href=\"https://neoj.sprout.tw/profile/2631/\">NEOJ</a></li>\n<li><a href=\"https://codeforces.com/profile/peienwu\">都沒在打的CF</a></li>\n</ul>\n"},{"title":"Categories","date":"2021-08-25T07:23:08.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: Categories\ndate: 2021-08-25 15:23:08\ntype: \"categories\"\n---","updated":"2021-09-19T11:26:45.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckvyspmgj0006muyxca4k8kmz","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"Tags","date":"2021-08-25T07:24:46.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2021-08-25 15:24:46\ntype: \"tags\"\n---\n","updated":"2021-09-19T11:26:45.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckvyspmgm0008muyxhcsj4xg6","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"APCS 2021.01","date":"2021-01-08T16:00:00.000Z","mathjax":true,"_content":"\n\n![](https://i.imgur.com/YAk4Riy.png)\n第一次考APCS，拿到觀念4級、實作3級，希望在下一次可以更進步！（我是大廢廢\n## 110/01 實作題第一題 購買力\nAPCS的第一題都是應該要秒殺的，也順利拿到100分\n<!--more-->\n\n```cpp=\n#include <bits/stdc++.h>\n#define int long long\n#define ios ios::sync_with_stdio(0),cin.tie(0);\nusing namespace std;\nint n,d,cost = 0,total = 0;\n\nsigned main(){ \n    ios;\n    cin>>n>>d;\n    int arr[3];\n    for(int i=0;i<n;i++){\n        cin>>arr[0]>>arr[1]>>arr[2];\n        sort(arr, arr+3);\n        if(arr[2]-arr[0]>=d){\n            total++;\n            cost +=((arr[0]+arr[1]+arr[2])/3);\n        }\n    }\n    cout<<total<<\" \"<<cost<<endl;\n}\n```\n## 110/01 實作題第二題 流量\n這一題的題序有點複雜，看了幾次之後才看懂。但重點是在考試的時候沒有想到要怎麼合併流量，所以只用了一維陣列計算最小值，因此只有拿到50分...\n這是完整版的程式碼，主要是透過創建一個陣列r[i][j]，表示從城市i出發到城市j的總流量，再利用陣列r計算費用。\n```cpp=\n#include <bits/stdc++.h>\n#define ios ios::sync_with_stdio(0),cin.tie(0);\n#define int long long\nusing namespace std;\nint N,M,K,s[50][50],r[50][50];\n\nsigned main(){\n    ios;\n    cin>>N>>M>>K;\n    for(int i=0;i<N;i++){\n        for(int j=0;j<M;j++){\n            cin>>s[i][j];\n        }\n    }\n    int ans = 1e8;\n    \n    for(int k=0;k<K;k++){\n        memset(r, 0, sizeof(r));\n        \n        for(int q=0;q<N;q++){\n            int p;//第i個伺服器架設在p城市\n            cin>>p;\n            for(int j=0;j<M;j++)r[p][j]+=s[q][j];\n        }\n        //如果第0個跟第1個伺服器都架設在1的位置，則將流量相加，得到陣列r\n        int sum = 0;\n        for(int q=0;q<M;q++){//0<p<M\n            for(int j=0;j<M;j++){\n                if(q==j)sum+=r[q][j];\n                else if(r[q][j]<=1000)sum+=3*r[q][j];\n                else sum+=(r[q][j]-1000)*2+3000;\n            }\n        }\n        ans = min(ans,sum);\n    }\n    cout<<ans<<endl;\n}\n```\n## 110/01 實作題第三題 切割費用\n這一題雖然在考試中有想到利用二元樹的方法，於是開了一個陣列儲存樹的節點（前段時間寫了一些線段樹，所以用了這個方法！）但我沒有注意到這不是一棵完滿二元樹，**不會平衡啊**！把範例測資丟上去對了，結果半分都沒有拿到:cry:，以後必須注意！\n用*std::set*搭配 *next(),prev()* 指標，找出鄰近的切割點之差，就可以AC了！\n\n{% note info %}\n![](https://i.imgur.com/YqPsqDY.png)\n在 *set* 中使用*insert()* 函式會回傳*pair<iterator,bool>* 在使用的時候要變成：\n```cpp=\nauto pos = s.insert(arr[i]).first;\n```\n{% endnote %}\n\n這是考試送出的0分程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define int long long\n#define ios ios::sync_with_stdio(0),cin.tie(0);\nusing namespace std;\nint n,L,ans = 0;\nint seg[1000000] = {0};\n\nvoid build(int val,int cur){\n    if(seg[cur]==0){\n        seg[cur] = val;\n        return;\n    }\n    if(val>seg[cur])build(val, 2*cur+2);\n    else build(val, 2*cur+1);\n}//建立一個會爆掉的二元樹\nvoid func(int val,int cur){\n    int up = L,low = 0;\n    if(seg[cur]==val){\n        ans+=up-low;\n        return;\n    }\n    while(seg[cur]!=val){\n        if(val>seg[cur]){\n            low = seg[cur];\n            cur = 2*cur+2;\n        }\n        else{\n            up = seg[cur];\n            cur = 2*cur+1;\n        }\n    }\n    ans+=up-low;\n}\n\nsigned main(){\n    ios;    \n    cin>>n>>L;\n    int arr[n];\n    for(int i=0;i<n;i++){\n        int a,b;cin>>a>>b;\n        arr[b-1] = a;\n    }\n    for(int i=0;i<n;i++)build(arr[i], 0);\n    for(int i=0;i<n;i++)func(arr[i], 0);\n    cout<<ans<<endl;\n}\n```\n這是正解：\n```cpp=\n#include <bits/stdc++.h>\n#define int long long\n#define ios ios::sync_with_stdio(0),cin.tie(0);\nusing namespace std;\nint n,l,arr[200000];\n\nsigned main(){\n    ios;\n    cin>>n>>l;\n    set<int> s = {0,l};\n    for(int i=0;i<n;i++){\n        int ind,pos;cin>>pos>>ind;\n        arr[ind-1] = pos;\n    }\n    int ans = 0;\n    for(int i=0;i<n;i++){\n        auto pos = s.insert(arr[i]).first;\n        ans+= *next(pos)- *prev(pos);\n    }\n    cout<<ans<<endl;\n}\n```\n\n## 110/01 實作題第四題 飛黃騰達\n這是一題我在考試中根本沒有碰的題目（能力不足），聽到別人是說這是一題經典的LIS，所以寒假就開始了解[動態規劃的題目](https://hackmd.io/ytV5oL34TRyotshCcJHJ2g)。這一題關鍵是先把x座標排列好（可以想成是LIS中的數列順序），然後依照y座標做LIS。\n```cpp=\n#include <bits/stdc++.h>\n#define ios ios::sync_with_stdio(0),cin.tie(0);\n#define int long long\nusing namespace std;\nint n;\n\nsigned main(){\n    ios;\n    cin>>n;\n    pair<int, int> P[n];\n    for(int i=0;i<n;i++){\n        int x,y;cin>>x>>y;\n        P[i] = make_pair(x, y);\n    }\n    sort(P, P+n);//利用pair排序，會先依照x排序，如果x相同，則照y排序\n    vector<int>ans;//儲存LIS\n    ans.push_back(P[0].second);\n    for(int i=1;i<n;i++){\n        int now = P[i].second;\n        if(now>=ans.back())ans.push_back(now);\n        else{\n            int ind = upper_bound(ans.begin(),ans.end(),now)-ans.begin();\n            ans[ind] = now;\n        }\n    }\n    cout<<ans.size()<<endl;\n}\n```\n{% note success %}\n這裡有一點跟LIS不一樣，它不需要嚴格遞增，因此在第20使用 **>=** ，還有第22行使用**upper_bound**也是因為不需要嚴格遞增（如果要插入的值在LIS裡面就已經有了，兩者都可以保留，所以用**upper_bound**，取第一個大於它的數值更改掉。\n{% endnote %}\n\n\n---\n\n## 心得\n第一次參加APCS拿到4,3的成績，雖然沒有很好（這一次還是比較簡單的題目！），但還是在預期之內。希望透果補足一些不足的地方，下一次會有更好的成績！\n\n1. **IDE環境不熟悉**\n    平常都是在mac上打程式，而所有的比賽都只有windows的codeblocks，有時候debug的內容不小被我關掉就叫不出來，耗費許多時間。\n    解決方法：下載codeblocks來好好熟悉一下\n2. **題目練習不夠多**\n在考試之前大多是聽別人講怎麼做，實際練習題目的量太少，所以在實際的競賽中就寫不出東西。\n解決方法：每週固定寫一個主題的題目，反覆練習讓自己對這個主題更熟悉+寫APCS考古題。\n3. **懂得東西太少**\n    本次第三題就是很好的例子，自己寫二元樹出一堆問題，不如用std內建的set還比較快！雖然一直都知道set的存在，但實際的競賽中就不知道怎麼用。\n    解決方法：資訊之芽好好學！\n4. **實戰經驗不足**\n    這應該是參加過的第三場正式的競賽（或檢定），以後就慢慢累積比賽的經驗\n    解決方法：參加線上程式競賽，練手感。\n5. **打字速度太慢**\n    打字速度慢就拖慢整體的寫扣時間，必須加強！\n    解決方法：每天花10分鐘碰碰鍵盤，利用網路上[打字練習](https://typing.io/lessons)加快打字速度。","source":"_posts/APCS 2021.01.md","raw":"---\ntitle: APCS 2021.01\ndate: 2021-1-9\ntags: \n    - APCS\n    - 競賽筆記\ncategories: APCS檢定\nmathjax: true\n---\n\n\n![](https://i.imgur.com/YAk4Riy.png)\n第一次考APCS，拿到觀念4級、實作3級，希望在下一次可以更進步！（我是大廢廢\n## 110/01 實作題第一題 購買力\nAPCS的第一題都是應該要秒殺的，也順利拿到100分\n<!--more-->\n\n```cpp=\n#include <bits/stdc++.h>\n#define int long long\n#define ios ios::sync_with_stdio(0),cin.tie(0);\nusing namespace std;\nint n,d,cost = 0,total = 0;\n\nsigned main(){ \n    ios;\n    cin>>n>>d;\n    int arr[3];\n    for(int i=0;i<n;i++){\n        cin>>arr[0]>>arr[1]>>arr[2];\n        sort(arr, arr+3);\n        if(arr[2]-arr[0]>=d){\n            total++;\n            cost +=((arr[0]+arr[1]+arr[2])/3);\n        }\n    }\n    cout<<total<<\" \"<<cost<<endl;\n}\n```\n## 110/01 實作題第二題 流量\n這一題的題序有點複雜，看了幾次之後才看懂。但重點是在考試的時候沒有想到要怎麼合併流量，所以只用了一維陣列計算最小值，因此只有拿到50分...\n這是完整版的程式碼，主要是透過創建一個陣列r[i][j]，表示從城市i出發到城市j的總流量，再利用陣列r計算費用。\n```cpp=\n#include <bits/stdc++.h>\n#define ios ios::sync_with_stdio(0),cin.tie(0);\n#define int long long\nusing namespace std;\nint N,M,K,s[50][50],r[50][50];\n\nsigned main(){\n    ios;\n    cin>>N>>M>>K;\n    for(int i=0;i<N;i++){\n        for(int j=0;j<M;j++){\n            cin>>s[i][j];\n        }\n    }\n    int ans = 1e8;\n    \n    for(int k=0;k<K;k++){\n        memset(r, 0, sizeof(r));\n        \n        for(int q=0;q<N;q++){\n            int p;//第i個伺服器架設在p城市\n            cin>>p;\n            for(int j=0;j<M;j++)r[p][j]+=s[q][j];\n        }\n        //如果第0個跟第1個伺服器都架設在1的位置，則將流量相加，得到陣列r\n        int sum = 0;\n        for(int q=0;q<M;q++){//0<p<M\n            for(int j=0;j<M;j++){\n                if(q==j)sum+=r[q][j];\n                else if(r[q][j]<=1000)sum+=3*r[q][j];\n                else sum+=(r[q][j]-1000)*2+3000;\n            }\n        }\n        ans = min(ans,sum);\n    }\n    cout<<ans<<endl;\n}\n```\n## 110/01 實作題第三題 切割費用\n這一題雖然在考試中有想到利用二元樹的方法，於是開了一個陣列儲存樹的節點（前段時間寫了一些線段樹，所以用了這個方法！）但我沒有注意到這不是一棵完滿二元樹，**不會平衡啊**！把範例測資丟上去對了，結果半分都沒有拿到:cry:，以後必須注意！\n用*std::set*搭配 *next(),prev()* 指標，找出鄰近的切割點之差，就可以AC了！\n\n{% note info %}\n![](https://i.imgur.com/YqPsqDY.png)\n在 *set* 中使用*insert()* 函式會回傳*pair<iterator,bool>* 在使用的時候要變成：\n```cpp=\nauto pos = s.insert(arr[i]).first;\n```\n{% endnote %}\n\n這是考試送出的0分程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define int long long\n#define ios ios::sync_with_stdio(0),cin.tie(0);\nusing namespace std;\nint n,L,ans = 0;\nint seg[1000000] = {0};\n\nvoid build(int val,int cur){\n    if(seg[cur]==0){\n        seg[cur] = val;\n        return;\n    }\n    if(val>seg[cur])build(val, 2*cur+2);\n    else build(val, 2*cur+1);\n}//建立一個會爆掉的二元樹\nvoid func(int val,int cur){\n    int up = L,low = 0;\n    if(seg[cur]==val){\n        ans+=up-low;\n        return;\n    }\n    while(seg[cur]!=val){\n        if(val>seg[cur]){\n            low = seg[cur];\n            cur = 2*cur+2;\n        }\n        else{\n            up = seg[cur];\n            cur = 2*cur+1;\n        }\n    }\n    ans+=up-low;\n}\n\nsigned main(){\n    ios;    \n    cin>>n>>L;\n    int arr[n];\n    for(int i=0;i<n;i++){\n        int a,b;cin>>a>>b;\n        arr[b-1] = a;\n    }\n    for(int i=0;i<n;i++)build(arr[i], 0);\n    for(int i=0;i<n;i++)func(arr[i], 0);\n    cout<<ans<<endl;\n}\n```\n這是正解：\n```cpp=\n#include <bits/stdc++.h>\n#define int long long\n#define ios ios::sync_with_stdio(0),cin.tie(0);\nusing namespace std;\nint n,l,arr[200000];\n\nsigned main(){\n    ios;\n    cin>>n>>l;\n    set<int> s = {0,l};\n    for(int i=0;i<n;i++){\n        int ind,pos;cin>>pos>>ind;\n        arr[ind-1] = pos;\n    }\n    int ans = 0;\n    for(int i=0;i<n;i++){\n        auto pos = s.insert(arr[i]).first;\n        ans+= *next(pos)- *prev(pos);\n    }\n    cout<<ans<<endl;\n}\n```\n\n## 110/01 實作題第四題 飛黃騰達\n這是一題我在考試中根本沒有碰的題目（能力不足），聽到別人是說這是一題經典的LIS，所以寒假就開始了解[動態規劃的題目](https://hackmd.io/ytV5oL34TRyotshCcJHJ2g)。這一題關鍵是先把x座標排列好（可以想成是LIS中的數列順序），然後依照y座標做LIS。\n```cpp=\n#include <bits/stdc++.h>\n#define ios ios::sync_with_stdio(0),cin.tie(0);\n#define int long long\nusing namespace std;\nint n;\n\nsigned main(){\n    ios;\n    cin>>n;\n    pair<int, int> P[n];\n    for(int i=0;i<n;i++){\n        int x,y;cin>>x>>y;\n        P[i] = make_pair(x, y);\n    }\n    sort(P, P+n);//利用pair排序，會先依照x排序，如果x相同，則照y排序\n    vector<int>ans;//儲存LIS\n    ans.push_back(P[0].second);\n    for(int i=1;i<n;i++){\n        int now = P[i].second;\n        if(now>=ans.back())ans.push_back(now);\n        else{\n            int ind = upper_bound(ans.begin(),ans.end(),now)-ans.begin();\n            ans[ind] = now;\n        }\n    }\n    cout<<ans.size()<<endl;\n}\n```\n{% note success %}\n這裡有一點跟LIS不一樣，它不需要嚴格遞增，因此在第20使用 **>=** ，還有第22行使用**upper_bound**也是因為不需要嚴格遞增（如果要插入的值在LIS裡面就已經有了，兩者都可以保留，所以用**upper_bound**，取第一個大於它的數值更改掉。\n{% endnote %}\n\n\n---\n\n## 心得\n第一次參加APCS拿到4,3的成績，雖然沒有很好（這一次還是比較簡單的題目！），但還是在預期之內。希望透果補足一些不足的地方，下一次會有更好的成績！\n\n1. **IDE環境不熟悉**\n    平常都是在mac上打程式，而所有的比賽都只有windows的codeblocks，有時候debug的內容不小被我關掉就叫不出來，耗費許多時間。\n    解決方法：下載codeblocks來好好熟悉一下\n2. **題目練習不夠多**\n在考試之前大多是聽別人講怎麼做，實際練習題目的量太少，所以在實際的競賽中就寫不出東西。\n解決方法：每週固定寫一個主題的題目，反覆練習讓自己對這個主題更熟悉+寫APCS考古題。\n3. **懂得東西太少**\n    本次第三題就是很好的例子，自己寫二元樹出一堆問題，不如用std內建的set還比較快！雖然一直都知道set的存在，但實際的競賽中就不知道怎麼用。\n    解決方法：資訊之芽好好學！\n4. **實戰經驗不足**\n    這應該是參加過的第三場正式的競賽（或檢定），以後就慢慢累積比賽的經驗\n    解決方法：參加線上程式競賽，練手感。\n5. **打字速度太慢**\n    打字速度慢就拖慢整體的寫扣時間，必須加強！\n    解決方法：每天花10分鐘碰碰鍵盤，利用網路上[打字練習](https://typing.io/lessons)加快打字速度。","slug":"APCS 2021.01","published":1,"updated":"2021-09-19T11:26:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvyspmg30001muyxfnenbuqh","content":"<p><img src=\"https://i.imgur.com/YAk4Riy.png\" alt=\"\"><br>第一次考APCS，拿到觀念4級、實作3級，希望在下一次可以更進步！（我是大廢廢</p>\n<h2 id=\"110-01-實作題第一題-購買力\"><a href=\"#110-01-實作題第一題-購買力\" class=\"headerlink\" title=\"110/01 實作題第一題 購買力\"></a>110/01 實作題第一題 購買力</h2><p>APCS的第一題都是應該要秒殺的，也順利拿到100分<br><span id=\"more\"></span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0);</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,d,cost = <span class=\"number\">0</span>,total = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123; </span><br><span class=\"line\">    ios;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;d;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> arr[<span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        cin&gt;&gt;arr[<span class=\"number\">0</span>]&gt;&gt;arr[<span class=\"number\">1</span>]&gt;&gt;arr[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(arr, arr+<span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[<span class=\"number\">2</span>]-arr[<span class=\"number\">0</span>]&gt;=d)&#123;</span><br><span class=\"line\">            total++;</span><br><span class=\"line\">            cost +=((arr[<span class=\"number\">0</span>]+arr[<span class=\"number\">1</span>]+arr[<span class=\"number\">2</span>])/<span class=\"number\">3</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;total&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;cost&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"110-01-實作題第二題-流量\"><a href=\"#110-01-實作題第二題-流量\" class=\"headerlink\" title=\"110/01 實作題第二題 流量\"></a>110/01 實作題第二題 流量</h2><p>這一題的題序有點複雜，看了幾次之後才看懂。但重點是在考試的時候沒有想到要怎麼合併流量，所以只用了一維陣列計算最小值，因此只有拿到50分…<br>這是完整版的程式碼，主要是透過創建一個陣列r[i][j]，表示從城市i出發到城市j的總流量，再利用陣列r計算費用。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> N,M,K,s[<span class=\"number\">50</span>][<span class=\"number\">50</span>],r[<span class=\"number\">50</span>][<span class=\"number\">50</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios;</span><br><span class=\"line\">    cin&gt;&gt;N&gt;&gt;M&gt;&gt;K;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;N;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;M;j++)&#123;</span><br><span class=\"line\">            cin&gt;&gt;s[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">1e8</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;K;k++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(r, <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(r));</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> q=<span class=\"number\">0</span>;q&lt;N;q++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> p;<span class=\"comment\">//第i個伺服器架設在p城市</span></span><br><span class=\"line\">            cin&gt;&gt;p;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;M;j++)r[p][j]+=s[q][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果第0個跟第1個伺服器都架設在1的位置，則將流量相加，得到陣列r</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> q=<span class=\"number\">0</span>;q&lt;M;q++)&#123;<span class=\"comment\">//0&lt;p&lt;M</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;M;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(q==j)sum+=r[q][j];</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(r[q][j]&lt;=<span class=\"number\">1000</span>)sum+=<span class=\"number\">3</span>*r[q][j];</span><br><span class=\"line\">                <span class=\"keyword\">else</span> sum+=(r[q][j]<span class=\"number\">-1000</span>)*<span class=\"number\">2</span>+<span class=\"number\">3000</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans = <span class=\"built_in\">min</span>(ans,sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"110-01-實作題第三題-切割費用\"><a href=\"#110-01-實作題第三題-切割費用\" class=\"headerlink\" title=\"110/01 實作題第三題 切割費用\"></a>110/01 實作題第三題 切割費用</h2><p>這一題雖然在考試中有想到利用二元樹的方法，於是開了一個陣列儲存樹的節點（前段時間寫了一些線段樹，所以用了這個方法！）但我沒有注意到這不是一棵完滿二元樹，<strong>不會平衡啊</strong>！把範例測資丟上去對了，結果半分都沒有拿到:cry:，以後必須注意！<br>用<em>std::set</em>搭配 <em>next(),prev()</em> 指標，找出鄰近的切割點之差，就可以AC了！</p>\n<div class=\"note info\">\n            <p><img src=\"https://i.imgur.com/YqPsqDY.png\" alt=\"\"><br>在 <em>set</em> 中使用<em>insert()</em> 函式會回傳<em>pair<iterator,bool></em> 在使用的時候要變成：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> pos = s.<span class=\"built_in\">insert</span>(arr[i]).first;</span><br></pre></td></tr></table></figure></p>\n          </div>\n<p>這是考試送出的0分程式碼<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0);</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,L,ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> seg[<span class=\"number\">1000000</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> val,<span class=\"keyword\">int</span> cur)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(seg[cur]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        seg[cur] = val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(val&gt;seg[cur])<span class=\"built_in\">build</span>(val, <span class=\"number\">2</span>*cur+<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">build</span>(val, <span class=\"number\">2</span>*cur+<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;<span class=\"comment\">//建立一個會爆掉的二元樹</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> val,<span class=\"keyword\">int</span> cur)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> up = L,low = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(seg[cur]==val)&#123;</span><br><span class=\"line\">        ans+=up-low;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(seg[cur]!=val)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(val&gt;seg[cur])&#123;</span><br><span class=\"line\">            low = seg[cur];</span><br><span class=\"line\">            cur = <span class=\"number\">2</span>*cur+<span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            up = seg[cur];</span><br><span class=\"line\">            cur = <span class=\"number\">2</span>*cur+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans+=up-low;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios;    </span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;L;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> arr[n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a,b;cin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">        arr[b<span class=\"number\">-1</span>] = a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)<span class=\"built_in\">build</span>(arr[i], <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)<span class=\"built_in\">func</span>(arr[i], <span class=\"number\">0</span>);</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>這是正解：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0);</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,l,arr[<span class=\"number\">200000</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;l;</span><br><span class=\"line\">    set&lt;<span class=\"keyword\">int</span>&gt; s = &#123;<span class=\"number\">0</span>,l&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ind,pos;cin&gt;&gt;pos&gt;&gt;ind;</span><br><span class=\"line\">        arr[ind<span class=\"number\">-1</span>] = pos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> pos = s.<span class=\"built_in\">insert</span>(arr[i]).first;</span><br><span class=\"line\">        ans+= *<span class=\"built_in\">next</span>(pos)- *<span class=\"built_in\">prev</span>(pos);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"110-01-實作題第四題-飛黃騰達\"><a href=\"#110-01-實作題第四題-飛黃騰達\" class=\"headerlink\" title=\"110/01 實作題第四題 飛黃騰達\"></a>110/01 實作題第四題 飛黃騰達</h2><p>這是一題我在考試中根本沒有碰的題目（能力不足），聽到別人是說這是一題經典的LIS，所以寒假就開始了解<a href=\"https://hackmd.io/ytV5oL34TRyotshCcJHJ2g\">動態規劃的題目</a>。這一題關鍵是先把x座標排列好（可以想成是LIS中的數列順序），然後依照y座標做LIS。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; P[n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x,y;cin&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">        P[i] = <span class=\"built_in\">make_pair</span>(x, y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(P, P+n);<span class=\"comment\">//利用pair排序，會先依照x排序，如果x相同，則照y排序</span></span><br><span class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt;ans;<span class=\"comment\">//儲存LIS</span></span><br><span class=\"line\">    ans.<span class=\"built_in\">push_back</span>(P[<span class=\"number\">0</span>].second);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> now = P[i].second;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(now&gt;=ans.<span class=\"built_in\">back</span>())ans.<span class=\"built_in\">push_back</span>(now);</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ind = <span class=\"built_in\">upper_bound</span>(ans.<span class=\"built_in\">begin</span>(),ans.<span class=\"built_in\">end</span>(),now)-ans.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">            ans[ind] = now;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans.<span class=\"built_in\">size</span>()&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><div class=\"note success\">\n            <p>這裡有一點跟LIS不一樣，它不需要嚴格遞增，因此在第20使用 <strong>&gt;=</strong> ，還有第22行使用<strong>upper_bound</strong>也是因為不需要嚴格遞增（如果要插入的值在LIS裡面就已經有了，兩者都可以保留，所以用<strong>upper_bound</strong>，取第一個大於它的數值更改掉。</p>\n          </div></p>\n<hr>\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><p>第一次參加APCS拿到4,3的成績，雖然沒有很好（這一次還是比較簡單的題目！），但還是在預期之內。希望透果補足一些不足的地方，下一次會有更好的成績！</p>\n<ol>\n<li><strong>IDE環境不熟悉</strong><br> 平常都是在mac上打程式，而所有的比賽都只有windows的codeblocks，有時候debug的內容不小被我關掉就叫不出來，耗費許多時間。<br> 解決方法：下載codeblocks來好好熟悉一下</li>\n<li><strong>題目練習不夠多</strong><br>在考試之前大多是聽別人講怎麼做，實際練習題目的量太少，所以在實際的競賽中就寫不出東西。<br>解決方法：每週固定寫一個主題的題目，反覆練習讓自己對這個主題更熟悉+寫APCS考古題。</li>\n<li><strong>懂得東西太少</strong><br> 本次第三題就是很好的例子，自己寫二元樹出一堆問題，不如用std內建的set還比較快！雖然一直都知道set的存在，但實際的競賽中就不知道怎麼用。<br> 解決方法：資訊之芽好好學！</li>\n<li><strong>實戰經驗不足</strong><br> 這應該是參加過的第三場正式的競賽（或檢定），以後就慢慢累積比賽的經驗<br> 解決方法：參加線上程式競賽，練手感。</li>\n<li><strong>打字速度太慢</strong><br> 打字速度慢就拖慢整體的寫扣時間，必須加強！<br> 解決方法：每天花10分鐘碰碰鍵盤，利用網路上<a href=\"https://typing.io/lessons\">打字練習</a>加快打字速度。</li>\n</ol>\n","site":{"data":{}},"length":4385,"excerpt":"<p><img src=\"https://i.imgur.com/YAk4Riy.png\" alt=\"\"><br>第一次考APCS，拿到觀念4級、實作3級，希望在下一次可以更進步！（我是大廢廢</p>\n<h2 id=\"110-01-實作題第一題-購買力\"><a href=\"#110-01-實作題第一題-購買力\" class=\"headerlink\" title=\"110/01 實作題第一題 購買力\"></a>110/01 實作題第一題 購買力</h2><p>APCS的第一題都是應該要秒殺的，也順利拿到100分<br>","more":"</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0);</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,d,cost = <span class=\"number\">0</span>,total = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123; </span><br><span class=\"line\">    ios;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;d;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> arr[<span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        cin&gt;&gt;arr[<span class=\"number\">0</span>]&gt;&gt;arr[<span class=\"number\">1</span>]&gt;&gt;arr[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(arr, arr+<span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[<span class=\"number\">2</span>]-arr[<span class=\"number\">0</span>]&gt;=d)&#123;</span><br><span class=\"line\">            total++;</span><br><span class=\"line\">            cost +=((arr[<span class=\"number\">0</span>]+arr[<span class=\"number\">1</span>]+arr[<span class=\"number\">2</span>])/<span class=\"number\">3</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;total&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;cost&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"110-01-實作題第二題-流量\"><a href=\"#110-01-實作題第二題-流量\" class=\"headerlink\" title=\"110/01 實作題第二題 流量\"></a>110/01 實作題第二題 流量</h2><p>這一題的題序有點複雜，看了幾次之後才看懂。但重點是在考試的時候沒有想到要怎麼合併流量，所以只用了一維陣列計算最小值，因此只有拿到50分…<br>這是完整版的程式碼，主要是透過創建一個陣列r[i][j]，表示從城市i出發到城市j的總流量，再利用陣列r計算費用。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> N,M,K,s[<span class=\"number\">50</span>][<span class=\"number\">50</span>],r[<span class=\"number\">50</span>][<span class=\"number\">50</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios;</span><br><span class=\"line\">    cin&gt;&gt;N&gt;&gt;M&gt;&gt;K;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;N;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;M;j++)&#123;</span><br><span class=\"line\">            cin&gt;&gt;s[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">1e8</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;K;k++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(r, <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(r));</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> q=<span class=\"number\">0</span>;q&lt;N;q++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> p;<span class=\"comment\">//第i個伺服器架設在p城市</span></span><br><span class=\"line\">            cin&gt;&gt;p;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;M;j++)r[p][j]+=s[q][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果第0個跟第1個伺服器都架設在1的位置，則將流量相加，得到陣列r</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> q=<span class=\"number\">0</span>;q&lt;M;q++)&#123;<span class=\"comment\">//0&lt;p&lt;M</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;M;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(q==j)sum+=r[q][j];</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(r[q][j]&lt;=<span class=\"number\">1000</span>)sum+=<span class=\"number\">3</span>*r[q][j];</span><br><span class=\"line\">                <span class=\"keyword\">else</span> sum+=(r[q][j]<span class=\"number\">-1000</span>)*<span class=\"number\">2</span>+<span class=\"number\">3000</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans = <span class=\"built_in\">min</span>(ans,sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"110-01-實作題第三題-切割費用\"><a href=\"#110-01-實作題第三題-切割費用\" class=\"headerlink\" title=\"110/01 實作題第三題 切割費用\"></a>110/01 實作題第三題 切割費用</h2><p>這一題雖然在考試中有想到利用二元樹的方法，於是開了一個陣列儲存樹的節點（前段時間寫了一些線段樹，所以用了這個方法！）但我沒有注意到這不是一棵完滿二元樹，<strong>不會平衡啊</strong>！把範例測資丟上去對了，結果半分都沒有拿到:cry:，以後必須注意！<br>用<em>std::set</em>搭配 <em>next(),prev()</em> 指標，找出鄰近的切割點之差，就可以AC了！</p>\n<div class=\"note info\">\n            <p><img src=\"https://i.imgur.com/YqPsqDY.png\" alt=\"\"><br>在 <em>set</em> 中使用<em>insert()</em> 函式會回傳<em>pair<iterator,bool></em> 在使用的時候要變成：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> pos = s.<span class=\"built_in\">insert</span>(arr[i]).first;</span><br></pre></td></tr></table></figure></p>\n          </div>\n<p>這是考試送出的0分程式碼<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0);</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,L,ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> seg[<span class=\"number\">1000000</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> val,<span class=\"keyword\">int</span> cur)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(seg[cur]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        seg[cur] = val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(val&gt;seg[cur])<span class=\"built_in\">build</span>(val, <span class=\"number\">2</span>*cur+<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">build</span>(val, <span class=\"number\">2</span>*cur+<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;<span class=\"comment\">//建立一個會爆掉的二元樹</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> val,<span class=\"keyword\">int</span> cur)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> up = L,low = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(seg[cur]==val)&#123;</span><br><span class=\"line\">        ans+=up-low;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(seg[cur]!=val)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(val&gt;seg[cur])&#123;</span><br><span class=\"line\">            low = seg[cur];</span><br><span class=\"line\">            cur = <span class=\"number\">2</span>*cur+<span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            up = seg[cur];</span><br><span class=\"line\">            cur = <span class=\"number\">2</span>*cur+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans+=up-low;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios;    </span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;L;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> arr[n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a,b;cin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">        arr[b<span class=\"number\">-1</span>] = a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)<span class=\"built_in\">build</span>(arr[i], <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)<span class=\"built_in\">func</span>(arr[i], <span class=\"number\">0</span>);</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>這是正解：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0);</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,l,arr[<span class=\"number\">200000</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;l;</span><br><span class=\"line\">    set&lt;<span class=\"keyword\">int</span>&gt; s = &#123;<span class=\"number\">0</span>,l&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ind,pos;cin&gt;&gt;pos&gt;&gt;ind;</span><br><span class=\"line\">        arr[ind<span class=\"number\">-1</span>] = pos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> pos = s.<span class=\"built_in\">insert</span>(arr[i]).first;</span><br><span class=\"line\">        ans+= *<span class=\"built_in\">next</span>(pos)- *<span class=\"built_in\">prev</span>(pos);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"110-01-實作題第四題-飛黃騰達\"><a href=\"#110-01-實作題第四題-飛黃騰達\" class=\"headerlink\" title=\"110/01 實作題第四題 飛黃騰達\"></a>110/01 實作題第四題 飛黃騰達</h2><p>這是一題我在考試中根本沒有碰的題目（能力不足），聽到別人是說這是一題經典的LIS，所以寒假就開始了解<a href=\"https://hackmd.io/ytV5oL34TRyotshCcJHJ2g\">動態規劃的題目</a>。這一題關鍵是先把x座標排列好（可以想成是LIS中的數列順序），然後依照y座標做LIS。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; P[n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x,y;cin&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">        P[i] = <span class=\"built_in\">make_pair</span>(x, y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(P, P+n);<span class=\"comment\">//利用pair排序，會先依照x排序，如果x相同，則照y排序</span></span><br><span class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt;ans;<span class=\"comment\">//儲存LIS</span></span><br><span class=\"line\">    ans.<span class=\"built_in\">push_back</span>(P[<span class=\"number\">0</span>].second);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> now = P[i].second;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(now&gt;=ans.<span class=\"built_in\">back</span>())ans.<span class=\"built_in\">push_back</span>(now);</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ind = <span class=\"built_in\">upper_bound</span>(ans.<span class=\"built_in\">begin</span>(),ans.<span class=\"built_in\">end</span>(),now)-ans.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">            ans[ind] = now;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans.<span class=\"built_in\">size</span>()&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br><div class=\"note success\">\n            <p>這裡有一點跟LIS不一樣，它不需要嚴格遞增，因此在第20使用 <strong>&gt;=</strong> ，還有第22行使用<strong>upper_bound</strong>也是因為不需要嚴格遞增（如果要插入的值在LIS裡面就已經有了，兩者都可以保留，所以用<strong>upper_bound</strong>，取第一個大於它的數值更改掉。</p>\n          </div></p>\n<hr>\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><p>第一次參加APCS拿到4,3的成績，雖然沒有很好（這一次還是比較簡單的題目！），但還是在預期之內。希望透果補足一些不足的地方，下一次會有更好的成績！</p>\n<ol>\n<li><strong>IDE環境不熟悉</strong><br> 平常都是在mac上打程式，而所有的比賽都只有windows的codeblocks，有時候debug的內容不小被我關掉就叫不出來，耗費許多時間。<br> 解決方法：下載codeblocks來好好熟悉一下</li>\n<li><strong>題目練習不夠多</strong><br>在考試之前大多是聽別人講怎麼做，實際練習題目的量太少，所以在實際的競賽中就寫不出東西。<br>解決方法：每週固定寫一個主題的題目，反覆練習讓自己對這個主題更熟悉+寫APCS考古題。</li>\n<li><strong>懂得東西太少</strong><br> 本次第三題就是很好的例子，自己寫二元樹出一堆問題，不如用std內建的set還比較快！雖然一直都知道set的存在，但實際的競賽中就不知道怎麼用。<br> 解決方法：資訊之芽好好學！</li>\n<li><strong>實戰經驗不足</strong><br> 這應該是參加過的第三場正式的競賽（或檢定），以後就慢慢累積比賽的經驗<br> 解決方法：參加線上程式競賽，練手感。</li>\n<li><strong>打字速度太慢</strong><br> 打字速度慢就拖慢整體的寫扣時間，必須加強！<br> 解決方法：每天花10分鐘碰碰鍵盤，利用網路上<a href=\"https://typing.io/lessons\">打字練習</a>加快打字速度。</li>\n</ol>"},{"title":"APCS 2021.09","date":"2021-09-04T16:00:00.000Z","mathjax":true,"_content":"\n這次沒有報名APCS，因為報名手續有點麻煩，還要在學證明和教師簽名等等，所以就沒有報...。總之，利用ZeroJudge的測資來寫寫看，但在ZJ上面會過不能保證真的去考APCS的測資就一定會過！\n\n<!--more-->\n\n## P1 七言對聯\n[題目連結](https://zerojudge.tw/ShowProblem?problemid=g275)\n\n總共有ABC三種規則，就每一種都比對一次就可以了！\n\n**時間複雜度：** 共有 $n$ 組對聯，每一組都 $O(1)$ 檢查，時間 $O(n)$ 。（不過n最大也才50，不論什麼複雜度都可以吧）\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define int long long\n#define N 50\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define all(x) x.begin(),x.end()\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n;\nbool a[N],b[N],f = 1;\n\nsigned main(){\n    Orz;\n    cin>>n;\n    while(n--){\n        rep(i,1,7)cin>>a[i];\n        rep(i,1,7)cin>>b[i];\n        f = 1;\n        if(a[2]==a[4]||a[2]!=a[6]){\n                cout<<\"A\";f = 0;\n        }\n        else if(b[2]==b[4]||b[2]!=b[6]){\n                cout<<\"A\";f = 0;\n        }\n\n        if(a[7]!=1 || b[7]!=0){\n                cout<<\"B\";f = 0;\n        }\n\n        if(a[2]==b[2]||a[4]==b[4]||a[6]==b[6]){\n                cout<<\"C\";f = 0;\n        }\n        if(f)cout<<\"None\"<<endl;\n        else cout<<endl;\n    }\n\n}\n```\n\n## P2 魔王迷宮\n[題目連結](https://zerojudge.tw/ShowProblem?problemid=g276)\n\n這一題我好像太早寫了，題目還在整修階段，丟上去TLE，發現題目敘述又改了XD，從魔王踩到炸彈爆炸後，「炸彈不會消失」，到「炸彈會消失」，還有範測也有改變。\n\n這一題是去模擬每一個魔王移動的狀況，要特別注意每一輪的國王是同時移動的，沒有先後順序，也就是說一顆炸彈可以炸掉不只一位魔王，如果有多個魔王移動到同一個格子，則他們會一起被炸掉。\n\n**時間複雜度：** 有點難估計，因為很難確定每一個魔王的移動狀況次數，不過由於數字範圍不大，且 $k$ 只有到500，因此直接做複雜度是可行的。\n\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define int long long\n#define N 100\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define all(x) x.begin(),x.end()\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,m,k;\nbool maze[N][N],bomb[N][N];\n\nstruct node{\n    int x,y,s,t;\n    bool alive;\n}mp[505];\n\nsigned main(){\n    Orz;\n    memset(maze,0,sizeof(maze));\n    cin>>n>>m>>k;\n    rep(i,0,k-1){\n        cin>>mp[i].x>>mp[i].y;\n        cin>>mp[i].s>>mp[i].t;\n        mp[i].alive = 1;\n    }\n    \n    int now_alive = k;\n    while(now_alive){\n        memset(bomb,0,sizeof(bomb));\n        for(int p=0;p<k;p++){\n            if(mp[p].alive == 0)continue;\n            int i = mp[p].x,j = mp[p].y;\n            maze[i][j] = 1;\n        }\n        for(int p=0;p<k;p++){\n            if(mp[p].alive == 0)continue;\n            int i = mp[p].x,j = mp[p].y;\n            int nx = i + mp[p].s;\n            int ny = j + mp[p].t;\n            if(nx >= n || nx < 0 || ny >= m ||ny < 0){\n                now_alive--;\n                mp[p].alive = 0;\n            }\n            else if(maze[nx][ny]){\n                now_alive--;\n                mp[p].alive = 0;\n                bomb[nx][ny] = 1;\n            }\n            else{\n                mp[p].x = nx;\n                mp[p].y = ny;\n            }\n        }\n        for(int i=0;i<n;i++){\n            for(int j=0;j<m;j++){\n                if(bomb[i][j] == 1)\n                    maze[i][j] = 0;\n            }\n        }\n    }\n    int ans = 0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<m;j++){\n            if(maze[i][j])ans++;\n        }\n    }\n    cout<<ans<<endl;\n}\n```\n\n## P3 幸運數字\n[題目連結](https://zerojudge.tw/ShowProblem?problemid=g277)\n\n以區間最小值作為區分點將數列分成兩半，可以利用線段樹找區間最小值，利用迴圈模擬每一次範圍縮小的情況。\n\n不過這一題比較特別，他的區間範圍一定會越來越小，且區間外的數字也就不需要使用到，因此可以將數列做一次排序，從頭開始找如果遇上區間外的數字則不理他，否則使用它當作區間的分隔點（這一定會是最小值，因為由小到大排序），將區間範圍縮小。\n\n至於挑選左右區間的區間和，則可以透過前綴和 $O(1)$ 算出答案。\n\n**時間複雜度：** 如果是一個遞增或遞減的序列，則每一次區間大小只會縮減1，此時複雜度為 $O(n)$，加上最一開始的排序是 $O(n\\log n)$，總共為 $O(n\\log n)$。\n\n### 排序作法\n\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define int long long\n#define N 300005\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define all(x) x.begin(),x.end()\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,arr[N],pref[N];\npii sorted[N];\n\nsigned main(){\n    Orz;\n    cin>>n;\n    rep(i,1,n){\n        cin>>sorted[i-1].x;\n        arr[i] = sorted[i-1].x;\n        sorted[i-1].y = i;\n        pref[i] = pref[i-1]+arr[i];\n    }\n    sort(sorted,sorted+n);\n\n    int ind = 0,l = 1,r = n;\n\n    while(r>l){\n        while(sorted[ind].y > r || sorted[ind].y < l)ind++;\n        int left = pref[sorted[ind].y-1]-pref[l-1];\n        int right = pref[r]-pref[sorted[ind].y];\n        if(left > right){\n            r = sorted[ind].y-1;\n        }\n        else{\n            l = sorted[ind].y+1;\n        }\n    }\n    cout<<arr[l]<<endl;\n}\n```\n\n### 線段樹作法\n如果用線段樹實作，尋找區間最小值，可以在 $O(\\log n)$ 的時間內詢問。在最差的情況下，一共會詢問 $n$ 次，因此總時間複雜度一樣是 $O(n\\log n)$。實作上也不複雜，建立線段樹以及區間詢問，區間修改和懶標之類的東西。可以比較一下時間：\n\n![](https://i.imgur.com/JlsbyYf.png)\n\n線段樹的表現稍微好一點，不過其實是相當接近的！\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define int long long\n#define N 300005\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define all(x) x.begin(),x.end()\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,arr[N],pref[N];\npii seg[4*N];\n\n//建立線段樹[l,r)\nvoid build(int cur,int l,int r){\n    if(r <= l)return;\n    if(r - l <= 1){\n        seg[cur] = {arr[l],l};\n        return;\n    }\n    int mid = (l+r)/2;\n    build(2*cur,l,mid);\n    build(2*cur+1,mid,r);\n    if(seg[2*cur].x < seg[2*cur+1].x)\n        seg[cur] = seg[2*cur];\n    else\n        seg[cur] = seg[2*cur+1];\n}\n\n//詢問區間最小值，回傳pair\npii query(int cur,int l,int r,int ql,int qr){\n    if(r <= l || ql >= r || qr <= l)return {INT_MAX,INT_MAX};\n    if(ql <= l && qr >= r)return seg[cur];\n    int mid = (l+r)/2;\n    pii lft = query(2*cur,l,mid,ql,qr);\n    pii rgt = query(2*cur+1,mid,r,ql,qr);\n    if(lft.x < rgt.x)return lft;\n    return rgt;\n}\n\nsigned main(){\n    Orz;\n    cin>>n;\n    rep(i,1,n){\n        cin>>arr[i];\n        pref[i] = pref[i-1]+arr[i];\n    }\n    build(1,1,n+1);\n    int l = 1,r = n+1;\n    \n    while(r - l > 1){\n        int ind = query(1,1,n+1,l,r).y;\n        int left = pref[ind-1] - pref[l-1];\n        int right = pref[r-1] - pref[ind];\n        if(left > right)r = ind;\n        else l = ind + 1;\n    }\n    cout<<arr[l]<<\"\\n\";\n}\n```\n\n### 歐恩作法\n> BY thanksone\n\n有一種二元樹，我也不知道叫啥，根為全序列最小值，左節點為左邊序列最小值，右節點為右邊序列最小值。\n\n#### 建法\n紀錄每個位置左、右邊離自己最近、比自己小的，爸爸就是兩個之中比較大的那一個。\n\n**時間複雜度：** 種樹加跑答案總共 $O(n)$\n```cpp=\n#include <bits/stdc++.h>\n#define int long long\n#define pii pair<int, int>\n#define ff first\n#define ss second\nusing namespace std;\narray<int, 300004> A, S, L, R;\narray<pii, 300004> tree;\nvoid plant(int n){\n    for(int i = 1; i <= n; i++){\n        if(A[L[i]] > A[R[i]]) tree[L[i]].ss = i;\n        else tree[R[i]].ff = i;\n    }\n}\nint solve(int l, int r, int m){\n    if(l == r) return A[l];\n    if(S[m - 1] - S[l - 1] > S[r] - S[m]) return solve(l, m - 1, tree[m].ff);\n    else return solve(m + 1, r, tree[m].ss);\n}\nsigned main(){\n    int n;\n    cin >> n;\n    stack<pii> s;\n    pii m = {1e9, 0};\n    s.push({0, 0});\n    for(int i = 1; i <= n; i++){\n        cin >> A[i];\n        if(A[i] < m.ff) m = {A[i], i};\n        S[i] = A[i] + S[i - 1];\n        while(A[i] < s.top().ff){\n            R[s.top().ss] = i;\n            s.pop();\n        }\n        L[i] = s.top().ss;\n        s.push({A[i], i});\n    }\n    plant(n);\n    cout << solve(1, n, m.ss);\n    return 0;\n}\n```\n\n如果把範測的笛卡爾樹具象化，大概長這樣：\n> 8\n> 3 9 4 5 1 6 2 8\n\n![](https://i.imgur.com/lqvdW31.png)\n\n大致步驟就是：\n1. 用**單調隊列**建立函數 $L$ 以及 $R$，表示往左往右看第一個小於自己的數\n2. 建立笛卡爾樹（$L[i],R[i]$ 挑大的作為父節點）\n3. 從根節點開始走訪，左右節點就會分別是左右區間的最小值\n4. 利用前綴和計算區間大小，決定要走左還是右子樹\n5. 走訪到區間長度為 $1$ 時即答案！ \n\n{% note success %}\n總共有三個不同的作法，使用到排序、線段樹、笛卡兒樹的作法。其中，他們的間複雜度分別是 $O(n\\log n)$、$O(n\\log n)$、$O(n)$。\n\n1. 排序作法：AC (0.1s, 9.5MB)\n2. 線段樹作法：AC (84ms, 20.9MB)\n3. 歐恩作法：AC (82ms, 15.6MB)\n\n在笛卡兒樹的作法中，對每一個數字尋找兩側第一個小於它的數字（這可以用單調隊列完成），之後把每一個數字的父親節點設為找到的兩端數字中較大的那一個。\n\n此作法的概念是，假設序列中第 $i$ 個數字找到兩側數字分別是 $l_i$ 以及 $r_i$，當他如果是區間最小時，區間必須在 $[l_i+1:r_i-1]$ 之中，否則它就不會是最小值了。\n\n至於為何是選擇 $max(A[l_i],A[r_i])$ 當做父節點？則是因為如果選擇較小的那一個，在縮小區間範圍後，無法確定另外一個是否在區間外，如果包含區間內，則 $A[i]$ 便不會是最小值，違反了定義。換言之，選擇了較大的那一個當作父節點，按照定義當走到這個父節點時，它是區間的最小值，將它排除之後，$A[i]$ 就會是下一個區間的最小值！\n{% endnote %}\n\n\n## P4 美食博覽會\n[題目連結](https://zerojudge.tw/ShowProblem?problemid=g278)\n\n對於序列中k個連續的區間，每一個區間滿足區間內的元素皆不重複，區間範圍可以重疊（不過重疊部分只會算一次），找出這k個連續區間所能覆蓋到的最大長度。\n\n感覺跟背包問題的概念有點像，n個物品可以對應到k個區間，重量則對應到這裡的序列中的數字。這題用DP解。\n\n### 定義\n定義 $dp[i][j]$ 為 $i$ 個試吃員，看了前 $j$ 個攤位，最多可以吃到幾個攤位。\n\n### 轉移式\n維護一個函數 $f[i]$ 表示如果試吃員吃了第 $i$ 個攤位的美食，他所能吃到**最左端的攤位的索引值**。也就是說，試吃員可以吃 $f[i]$ 到 $i$ 攤位的美食。\n\n$$dp[i][j] = max(dp[i][j-1],dp[i-1][f[j]-1]+j-f[j]+1)$$\n\n轉移式代表了要使用第 $i$ 的攤位作為右端點，或是不要使用（直接用前一個），取兩者的最大值。後面一串加減是計算區間大小\n\n### 邊界\n\n$$dp[i][j] = 0,\\text{for all 0≤i≤k,0≤j≤n}$$\n\n從轉移式可以看到他空間可以用滾動DP優化！\n\n{% note success %}\n**GREEDY的作法？**\n如果每一次都選擇最大的區間，並將這個區間的值都改成0，做7次，得到答案，是正確的做法嗎？\n\n\n最大的區間不一定會被完全選到。以下測資：\n\n> 12 2\n> 5 4 3 2 1 3 4 5 6 4 3 2\n\n如果是Greedy會選擇 $2 \\,1\\, 3\\, 4\\, 5\\, 6$ ，然後從兩邊挑一邊。答案是 $9$。\n但是用DP做會是 $5\\, 4\\, 3\\, 2\\, 1$ 加上 $5\\, 6\\, 4\\, 3\\, 2$，答案是 $10$。\n\n{% endnote %}\n\n\n**時間複雜度：** 兩層迴圈總共是 $O(kn)$\n\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define int long long\n#define N 1000005\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define all(x) x.begin(),x.end()\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,k,dp[2][N],lft[N],arr[N];\nint mp[N];\n\nsigned main(){\n    Orz;\n    cin>>n>>k;\n    memset(dp,0,sizeof(dp));\n    memset(lft,0,sizeof(lft));\n    memset(mp,0,sizeof(mp));\n    rep(i,1,n)cin>>arr[i];\n    int maxn = 0;\n    for(int i=1;i<=n;i++){\n        if(mp[arr[i]]!=0){\n            lft[i] = mp[arr[i]]+1;\n            mp[arr[i]] = i;\n        }\n        else{\n            lft[i] = 1;\n            mp[arr[i]] = i;\n        }\n        lft[i] = max(maxn,lft[i]);\n        maxn = max(maxn,lft[i]);\n    }\n\n    \n    for(int i=0;i<k;i++){\n        for(int j=1;j<=n;j++){\n            dp[1][j] = max(dp[1][j-1],dp[0][lft[j]-1]+j-lft[j]+1);\n        }\n        for(int j=1;j<=n;j++){\n            dp[0][j] = dp[1][j];\n        }\n    }\n    cout<<dp[1][n]<<endl;\n}\n\n// 1 1 2 1 4 1 7 1 3 8\n// 1 1 2 2 4 4 7 7 7 8\n```\n\n### EXTRA 版本\n> BY thanksone\n\n![](https://i.imgur.com/srLyvYy.png)\n\n熟悉的題目，大的感人的k。如果依照上面$O(nk)$的做法肯定TLE。\n俗話說得好 : \"好的DP定義是AC的一半\"\n因此經過一系列通靈，我們得到了一個非常漂亮的定義\n\n#### 定義\n $dp[i] =$ 必須選第 $i$ 家，$($能吃最多的攤販數量，需要的人數$) (dp[i]$是一個$pair)$\n\n#### 轉移式\n維護一個函數 $L[i]$ ，其實就是樓上的 $f[i]$，但是我比較想要叫他 $L$\n\n$$dp[i] = max_{j<L[i]}(dp[j]) + i - L[i] + 1$$\n\n$max(a, b) = a, if(a.first > b.first\\ or\\ (a.first == b.first\\  and\\ a.second > b.second))$\n\n#### 優化\nAliens優化 : 利用penalty限制人數\n每當有一個人加入，便扣除 $p$ 個攤販的業績\n當總人數超過 $k$，表示 $p$ 不夠大，仍然有太多人利大於弊\n反之，當總人數小於 $k$，表示 $p$ 太大，有太多人弊大於利\n看出來了嗎? $p$ 可以二分搜喔!\n\n**時間複雜度：** 二分搜加每次DP $O(nlogn)$\n```cpp=\n#include <bits/stdc++.h>\n#define pii pair<int, int>\n#define ff first\n#define ss second\nusing namespace std;\nint n, k;\narray<int, 100004> A/*num of stands*/, L/*leftest stand can eat to*/, cnt/*count of each num*/;\narray<pii, 100004> dp;\npii add(pii p, int v){\n    p.ff += v;\n    p.ss++;\n    return p;\n}\npii max(pii a, pii b){\n    if(a.ff == b.ff) return a.ss > b.ss? a : b;\n    return a.ff > b.ff ? a : b;\n}\npii DP(int p){\n    //ff = stands visited, ss = people needed\n    pii ans = {0, 0};\n    int l = 0;\n    for(int i = 0; i < n; i++){\n        while(l < L[i]) ans = max(ans, dp[l++]);\n        dp[i] = add(ans, i - L[i] + 1 + p);\n    }\n    while(l < n) ans = max(ans, dp[l++]);\n    return ans;\n}\nint BIS(){\n    int l = -n, r = n, mid;\n    while(l != r){\n        //binary search penalty\n        mid = (l + r) >> 1;\n        if(DP(mid).ss < k) l = mid + 1;\n        else r = mid;\n    }\n    return DP(l).ff - l * k;\n}\nsigned main(){\n    cin >> n >> k;\n    int l = 0;\n    for(int i = 0; i < n; i++){\n        cin >> A[i];\n        cnt[A[i]]++;\n        while(cnt[A[i]] > 1) cnt[A[l++]]--;\n        L[i] = l;\n    }\n    cout << BIS();\n    return 0;\n}\n```","source":"_posts/APCS 2021.09.md","raw":"---\ntitle: APCS 2021.09\ndate: 2021-9-5\ntags: \n    - APCS\n    - 競賽筆記\ncategories: APCS檢定\nmathjax: true\n---\n\n這次沒有報名APCS，因為報名手續有點麻煩，還要在學證明和教師簽名等等，所以就沒有報...。總之，利用ZeroJudge的測資來寫寫看，但在ZJ上面會過不能保證真的去考APCS的測資就一定會過！\n\n<!--more-->\n\n## P1 七言對聯\n[題目連結](https://zerojudge.tw/ShowProblem?problemid=g275)\n\n總共有ABC三種規則，就每一種都比對一次就可以了！\n\n**時間複雜度：** 共有 $n$ 組對聯，每一組都 $O(1)$ 檢查，時間 $O(n)$ 。（不過n最大也才50，不論什麼複雜度都可以吧）\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define int long long\n#define N 50\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define all(x) x.begin(),x.end()\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n;\nbool a[N],b[N],f = 1;\n\nsigned main(){\n    Orz;\n    cin>>n;\n    while(n--){\n        rep(i,1,7)cin>>a[i];\n        rep(i,1,7)cin>>b[i];\n        f = 1;\n        if(a[2]==a[4]||a[2]!=a[6]){\n                cout<<\"A\";f = 0;\n        }\n        else if(b[2]==b[4]||b[2]!=b[6]){\n                cout<<\"A\";f = 0;\n        }\n\n        if(a[7]!=1 || b[7]!=0){\n                cout<<\"B\";f = 0;\n        }\n\n        if(a[2]==b[2]||a[4]==b[4]||a[6]==b[6]){\n                cout<<\"C\";f = 0;\n        }\n        if(f)cout<<\"None\"<<endl;\n        else cout<<endl;\n    }\n\n}\n```\n\n## P2 魔王迷宮\n[題目連結](https://zerojudge.tw/ShowProblem?problemid=g276)\n\n這一題我好像太早寫了，題目還在整修階段，丟上去TLE，發現題目敘述又改了XD，從魔王踩到炸彈爆炸後，「炸彈不會消失」，到「炸彈會消失」，還有範測也有改變。\n\n這一題是去模擬每一個魔王移動的狀況，要特別注意每一輪的國王是同時移動的，沒有先後順序，也就是說一顆炸彈可以炸掉不只一位魔王，如果有多個魔王移動到同一個格子，則他們會一起被炸掉。\n\n**時間複雜度：** 有點難估計，因為很難確定每一個魔王的移動狀況次數，不過由於數字範圍不大，且 $k$ 只有到500，因此直接做複雜度是可行的。\n\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define int long long\n#define N 100\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define all(x) x.begin(),x.end()\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,m,k;\nbool maze[N][N],bomb[N][N];\n\nstruct node{\n    int x,y,s,t;\n    bool alive;\n}mp[505];\n\nsigned main(){\n    Orz;\n    memset(maze,0,sizeof(maze));\n    cin>>n>>m>>k;\n    rep(i,0,k-1){\n        cin>>mp[i].x>>mp[i].y;\n        cin>>mp[i].s>>mp[i].t;\n        mp[i].alive = 1;\n    }\n    \n    int now_alive = k;\n    while(now_alive){\n        memset(bomb,0,sizeof(bomb));\n        for(int p=0;p<k;p++){\n            if(mp[p].alive == 0)continue;\n            int i = mp[p].x,j = mp[p].y;\n            maze[i][j] = 1;\n        }\n        for(int p=0;p<k;p++){\n            if(mp[p].alive == 0)continue;\n            int i = mp[p].x,j = mp[p].y;\n            int nx = i + mp[p].s;\n            int ny = j + mp[p].t;\n            if(nx >= n || nx < 0 || ny >= m ||ny < 0){\n                now_alive--;\n                mp[p].alive = 0;\n            }\n            else if(maze[nx][ny]){\n                now_alive--;\n                mp[p].alive = 0;\n                bomb[nx][ny] = 1;\n            }\n            else{\n                mp[p].x = nx;\n                mp[p].y = ny;\n            }\n        }\n        for(int i=0;i<n;i++){\n            for(int j=0;j<m;j++){\n                if(bomb[i][j] == 1)\n                    maze[i][j] = 0;\n            }\n        }\n    }\n    int ans = 0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<m;j++){\n            if(maze[i][j])ans++;\n        }\n    }\n    cout<<ans<<endl;\n}\n```\n\n## P3 幸運數字\n[題目連結](https://zerojudge.tw/ShowProblem?problemid=g277)\n\n以區間最小值作為區分點將數列分成兩半，可以利用線段樹找區間最小值，利用迴圈模擬每一次範圍縮小的情況。\n\n不過這一題比較特別，他的區間範圍一定會越來越小，且區間外的數字也就不需要使用到，因此可以將數列做一次排序，從頭開始找如果遇上區間外的數字則不理他，否則使用它當作區間的分隔點（這一定會是最小值，因為由小到大排序），將區間範圍縮小。\n\n至於挑選左右區間的區間和，則可以透過前綴和 $O(1)$ 算出答案。\n\n**時間複雜度：** 如果是一個遞增或遞減的序列，則每一次區間大小只會縮減1，此時複雜度為 $O(n)$，加上最一開始的排序是 $O(n\\log n)$，總共為 $O(n\\log n)$。\n\n### 排序作法\n\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define int long long\n#define N 300005\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define all(x) x.begin(),x.end()\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,arr[N],pref[N];\npii sorted[N];\n\nsigned main(){\n    Orz;\n    cin>>n;\n    rep(i,1,n){\n        cin>>sorted[i-1].x;\n        arr[i] = sorted[i-1].x;\n        sorted[i-1].y = i;\n        pref[i] = pref[i-1]+arr[i];\n    }\n    sort(sorted,sorted+n);\n\n    int ind = 0,l = 1,r = n;\n\n    while(r>l){\n        while(sorted[ind].y > r || sorted[ind].y < l)ind++;\n        int left = pref[sorted[ind].y-1]-pref[l-1];\n        int right = pref[r]-pref[sorted[ind].y];\n        if(left > right){\n            r = sorted[ind].y-1;\n        }\n        else{\n            l = sorted[ind].y+1;\n        }\n    }\n    cout<<arr[l]<<endl;\n}\n```\n\n### 線段樹作法\n如果用線段樹實作，尋找區間最小值，可以在 $O(\\log n)$ 的時間內詢問。在最差的情況下，一共會詢問 $n$ 次，因此總時間複雜度一樣是 $O(n\\log n)$。實作上也不複雜，建立線段樹以及區間詢問，區間修改和懶標之類的東西。可以比較一下時間：\n\n![](https://i.imgur.com/JlsbyYf.png)\n\n線段樹的表現稍微好一點，不過其實是相當接近的！\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define int long long\n#define N 300005\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define all(x) x.begin(),x.end()\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,arr[N],pref[N];\npii seg[4*N];\n\n//建立線段樹[l,r)\nvoid build(int cur,int l,int r){\n    if(r <= l)return;\n    if(r - l <= 1){\n        seg[cur] = {arr[l],l};\n        return;\n    }\n    int mid = (l+r)/2;\n    build(2*cur,l,mid);\n    build(2*cur+1,mid,r);\n    if(seg[2*cur].x < seg[2*cur+1].x)\n        seg[cur] = seg[2*cur];\n    else\n        seg[cur] = seg[2*cur+1];\n}\n\n//詢問區間最小值，回傳pair\npii query(int cur,int l,int r,int ql,int qr){\n    if(r <= l || ql >= r || qr <= l)return {INT_MAX,INT_MAX};\n    if(ql <= l && qr >= r)return seg[cur];\n    int mid = (l+r)/2;\n    pii lft = query(2*cur,l,mid,ql,qr);\n    pii rgt = query(2*cur+1,mid,r,ql,qr);\n    if(lft.x < rgt.x)return lft;\n    return rgt;\n}\n\nsigned main(){\n    Orz;\n    cin>>n;\n    rep(i,1,n){\n        cin>>arr[i];\n        pref[i] = pref[i-1]+arr[i];\n    }\n    build(1,1,n+1);\n    int l = 1,r = n+1;\n    \n    while(r - l > 1){\n        int ind = query(1,1,n+1,l,r).y;\n        int left = pref[ind-1] - pref[l-1];\n        int right = pref[r-1] - pref[ind];\n        if(left > right)r = ind;\n        else l = ind + 1;\n    }\n    cout<<arr[l]<<\"\\n\";\n}\n```\n\n### 歐恩作法\n> BY thanksone\n\n有一種二元樹，我也不知道叫啥，根為全序列最小值，左節點為左邊序列最小值，右節點為右邊序列最小值。\n\n#### 建法\n紀錄每個位置左、右邊離自己最近、比自己小的，爸爸就是兩個之中比較大的那一個。\n\n**時間複雜度：** 種樹加跑答案總共 $O(n)$\n```cpp=\n#include <bits/stdc++.h>\n#define int long long\n#define pii pair<int, int>\n#define ff first\n#define ss second\nusing namespace std;\narray<int, 300004> A, S, L, R;\narray<pii, 300004> tree;\nvoid plant(int n){\n    for(int i = 1; i <= n; i++){\n        if(A[L[i]] > A[R[i]]) tree[L[i]].ss = i;\n        else tree[R[i]].ff = i;\n    }\n}\nint solve(int l, int r, int m){\n    if(l == r) return A[l];\n    if(S[m - 1] - S[l - 1] > S[r] - S[m]) return solve(l, m - 1, tree[m].ff);\n    else return solve(m + 1, r, tree[m].ss);\n}\nsigned main(){\n    int n;\n    cin >> n;\n    stack<pii> s;\n    pii m = {1e9, 0};\n    s.push({0, 0});\n    for(int i = 1; i <= n; i++){\n        cin >> A[i];\n        if(A[i] < m.ff) m = {A[i], i};\n        S[i] = A[i] + S[i - 1];\n        while(A[i] < s.top().ff){\n            R[s.top().ss] = i;\n            s.pop();\n        }\n        L[i] = s.top().ss;\n        s.push({A[i], i});\n    }\n    plant(n);\n    cout << solve(1, n, m.ss);\n    return 0;\n}\n```\n\n如果把範測的笛卡爾樹具象化，大概長這樣：\n> 8\n> 3 9 4 5 1 6 2 8\n\n![](https://i.imgur.com/lqvdW31.png)\n\n大致步驟就是：\n1. 用**單調隊列**建立函數 $L$ 以及 $R$，表示往左往右看第一個小於自己的數\n2. 建立笛卡爾樹（$L[i],R[i]$ 挑大的作為父節點）\n3. 從根節點開始走訪，左右節點就會分別是左右區間的最小值\n4. 利用前綴和計算區間大小，決定要走左還是右子樹\n5. 走訪到區間長度為 $1$ 時即答案！ \n\n{% note success %}\n總共有三個不同的作法，使用到排序、線段樹、笛卡兒樹的作法。其中，他們的間複雜度分別是 $O(n\\log n)$、$O(n\\log n)$、$O(n)$。\n\n1. 排序作法：AC (0.1s, 9.5MB)\n2. 線段樹作法：AC (84ms, 20.9MB)\n3. 歐恩作法：AC (82ms, 15.6MB)\n\n在笛卡兒樹的作法中，對每一個數字尋找兩側第一個小於它的數字（這可以用單調隊列完成），之後把每一個數字的父親節點設為找到的兩端數字中較大的那一個。\n\n此作法的概念是，假設序列中第 $i$ 個數字找到兩側數字分別是 $l_i$ 以及 $r_i$，當他如果是區間最小時，區間必須在 $[l_i+1:r_i-1]$ 之中，否則它就不會是最小值了。\n\n至於為何是選擇 $max(A[l_i],A[r_i])$ 當做父節點？則是因為如果選擇較小的那一個，在縮小區間範圍後，無法確定另外一個是否在區間外，如果包含區間內，則 $A[i]$ 便不會是最小值，違反了定義。換言之，選擇了較大的那一個當作父節點，按照定義當走到這個父節點時，它是區間的最小值，將它排除之後，$A[i]$ 就會是下一個區間的最小值！\n{% endnote %}\n\n\n## P4 美食博覽會\n[題目連結](https://zerojudge.tw/ShowProblem?problemid=g278)\n\n對於序列中k個連續的區間，每一個區間滿足區間內的元素皆不重複，區間範圍可以重疊（不過重疊部分只會算一次），找出這k個連續區間所能覆蓋到的最大長度。\n\n感覺跟背包問題的概念有點像，n個物品可以對應到k個區間，重量則對應到這裡的序列中的數字。這題用DP解。\n\n### 定義\n定義 $dp[i][j]$ 為 $i$ 個試吃員，看了前 $j$ 個攤位，最多可以吃到幾個攤位。\n\n### 轉移式\n維護一個函數 $f[i]$ 表示如果試吃員吃了第 $i$ 個攤位的美食，他所能吃到**最左端的攤位的索引值**。也就是說，試吃員可以吃 $f[i]$ 到 $i$ 攤位的美食。\n\n$$dp[i][j] = max(dp[i][j-1],dp[i-1][f[j]-1]+j-f[j]+1)$$\n\n轉移式代表了要使用第 $i$ 的攤位作為右端點，或是不要使用（直接用前一個），取兩者的最大值。後面一串加減是計算區間大小\n\n### 邊界\n\n$$dp[i][j] = 0,\\text{for all 0≤i≤k,0≤j≤n}$$\n\n從轉移式可以看到他空間可以用滾動DP優化！\n\n{% note success %}\n**GREEDY的作法？**\n如果每一次都選擇最大的區間，並將這個區間的值都改成0，做7次，得到答案，是正確的做法嗎？\n\n\n最大的區間不一定會被完全選到。以下測資：\n\n> 12 2\n> 5 4 3 2 1 3 4 5 6 4 3 2\n\n如果是Greedy會選擇 $2 \\,1\\, 3\\, 4\\, 5\\, 6$ ，然後從兩邊挑一邊。答案是 $9$。\n但是用DP做會是 $5\\, 4\\, 3\\, 2\\, 1$ 加上 $5\\, 6\\, 4\\, 3\\, 2$，答案是 $10$。\n\n{% endnote %}\n\n\n**時間複雜度：** 兩層迴圈總共是 $O(kn)$\n\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define int long long\n#define N 1000005\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define all(x) x.begin(),x.end()\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,k,dp[2][N],lft[N],arr[N];\nint mp[N];\n\nsigned main(){\n    Orz;\n    cin>>n>>k;\n    memset(dp,0,sizeof(dp));\n    memset(lft,0,sizeof(lft));\n    memset(mp,0,sizeof(mp));\n    rep(i,1,n)cin>>arr[i];\n    int maxn = 0;\n    for(int i=1;i<=n;i++){\n        if(mp[arr[i]]!=0){\n            lft[i] = mp[arr[i]]+1;\n            mp[arr[i]] = i;\n        }\n        else{\n            lft[i] = 1;\n            mp[arr[i]] = i;\n        }\n        lft[i] = max(maxn,lft[i]);\n        maxn = max(maxn,lft[i]);\n    }\n\n    \n    for(int i=0;i<k;i++){\n        for(int j=1;j<=n;j++){\n            dp[1][j] = max(dp[1][j-1],dp[0][lft[j]-1]+j-lft[j]+1);\n        }\n        for(int j=1;j<=n;j++){\n            dp[0][j] = dp[1][j];\n        }\n    }\n    cout<<dp[1][n]<<endl;\n}\n\n// 1 1 2 1 4 1 7 1 3 8\n// 1 1 2 2 4 4 7 7 7 8\n```\n\n### EXTRA 版本\n> BY thanksone\n\n![](https://i.imgur.com/srLyvYy.png)\n\n熟悉的題目，大的感人的k。如果依照上面$O(nk)$的做法肯定TLE。\n俗話說得好 : \"好的DP定義是AC的一半\"\n因此經過一系列通靈，我們得到了一個非常漂亮的定義\n\n#### 定義\n $dp[i] =$ 必須選第 $i$ 家，$($能吃最多的攤販數量，需要的人數$) (dp[i]$是一個$pair)$\n\n#### 轉移式\n維護一個函數 $L[i]$ ，其實就是樓上的 $f[i]$，但是我比較想要叫他 $L$\n\n$$dp[i] = max_{j<L[i]}(dp[j]) + i - L[i] + 1$$\n\n$max(a, b) = a, if(a.first > b.first\\ or\\ (a.first == b.first\\  and\\ a.second > b.second))$\n\n#### 優化\nAliens優化 : 利用penalty限制人數\n每當有一個人加入，便扣除 $p$ 個攤販的業績\n當總人數超過 $k$，表示 $p$ 不夠大，仍然有太多人利大於弊\n反之，當總人數小於 $k$，表示 $p$ 太大，有太多人弊大於利\n看出來了嗎? $p$ 可以二分搜喔!\n\n**時間複雜度：** 二分搜加每次DP $O(nlogn)$\n```cpp=\n#include <bits/stdc++.h>\n#define pii pair<int, int>\n#define ff first\n#define ss second\nusing namespace std;\nint n, k;\narray<int, 100004> A/*num of stands*/, L/*leftest stand can eat to*/, cnt/*count of each num*/;\narray<pii, 100004> dp;\npii add(pii p, int v){\n    p.ff += v;\n    p.ss++;\n    return p;\n}\npii max(pii a, pii b){\n    if(a.ff == b.ff) return a.ss > b.ss? a : b;\n    return a.ff > b.ff ? a : b;\n}\npii DP(int p){\n    //ff = stands visited, ss = people needed\n    pii ans = {0, 0};\n    int l = 0;\n    for(int i = 0; i < n; i++){\n        while(l < L[i]) ans = max(ans, dp[l++]);\n        dp[i] = add(ans, i - L[i] + 1 + p);\n    }\n    while(l < n) ans = max(ans, dp[l++]);\n    return ans;\n}\nint BIS(){\n    int l = -n, r = n, mid;\n    while(l != r){\n        //binary search penalty\n        mid = (l + r) >> 1;\n        if(DP(mid).ss < k) l = mid + 1;\n        else r = mid;\n    }\n    return DP(l).ff - l * k;\n}\nsigned main(){\n    cin >> n >> k;\n    int l = 0;\n    for(int i = 0; i < n; i++){\n        cin >> A[i];\n        cnt[A[i]]++;\n        while(cnt[A[i]] > 1) cnt[A[l++]]--;\n        L[i] = l;\n    }\n    cout << BIS();\n    return 0;\n}\n```","slug":"APCS 2021.09","published":1,"updated":"2021-09-19T11:26:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvyspmg90003muyx7olt4rtq","content":"<p>這次沒有報名APCS，因為報名手續有點麻煩，還要在學證明和教師簽名等等，所以就沒有報…。總之，利用ZeroJudge的測資來寫寫看，但在ZJ上面會過不能保證真的去考APCS的測資就一定會過！</p>\n<span id=\"more\"></span>\n<h2 id=\"P1-七言對聯\"><a href=\"#P1-七言對聯\" class=\"headerlink\" title=\"P1 七言對聯\"></a>P1 七言對聯</h2><p><a href=\"https://zerojudge.tw/ShowProblem?problemid=g275\">題目連結</a></p>\n<p>總共有ABC三種規則，就每一種都比對一次就可以了！</p>\n<p><strong>時間複雜度：</strong> 共有 $n$ 組對聯，每一組都 $O(1)$ 檢查，時間 $O(n)$ 。（不過n最大也才50，不論什麼複雜度都可以吧）<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 50</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> a[N],b[N],f = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,<span class=\"number\">7</span>)cin&gt;&gt;a[i];</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,<span class=\"number\">7</span>)cin&gt;&gt;b[i];</span><br><span class=\"line\">        f = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[<span class=\"number\">2</span>]==a[<span class=\"number\">4</span>]||a[<span class=\"number\">2</span>]!=a[<span class=\"number\">6</span>])&#123;</span><br><span class=\"line\">                cout&lt;&lt;<span class=\"string\">&quot;A&quot;</span>;f = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(b[<span class=\"number\">2</span>]==b[<span class=\"number\">4</span>]||b[<span class=\"number\">2</span>]!=b[<span class=\"number\">6</span>])&#123;</span><br><span class=\"line\">                cout&lt;&lt;<span class=\"string\">&quot;A&quot;</span>;f = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[<span class=\"number\">7</span>]!=<span class=\"number\">1</span> || b[<span class=\"number\">7</span>]!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                cout&lt;&lt;<span class=\"string\">&quot;B&quot;</span>;f = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[<span class=\"number\">2</span>]==b[<span class=\"number\">2</span>]||a[<span class=\"number\">4</span>]==b[<span class=\"number\">4</span>]||a[<span class=\"number\">6</span>]==b[<span class=\"number\">6</span>])&#123;</span><br><span class=\"line\">                cout&lt;&lt;<span class=\"string\">&quot;C&quot;</span>;f = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f)cout&lt;&lt;<span class=\"string\">&quot;None&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> cout&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"P2-魔王迷宮\"><a href=\"#P2-魔王迷宮\" class=\"headerlink\" title=\"P2 魔王迷宮\"></a>P2 魔王迷宮</h2><p><a href=\"https://zerojudge.tw/ShowProblem?problemid=g276\">題目連結</a></p>\n<p>這一題我好像太早寫了，題目還在整修階段，丟上去TLE，發現題目敘述又改了XD，從魔王踩到炸彈爆炸後，「炸彈不會消失」，到「炸彈會消失」，還有範測也有改變。</p>\n<p>這一題是去模擬每一個魔王移動的狀況，要特別注意每一輪的國王是同時移動的，沒有先後順序，也就是說一顆炸彈可以炸掉不只一位魔王，如果有多個魔王移動到同一個格子，則他們會一起被炸掉。</p>\n<p><strong>時間複雜度：</strong> 有點難估計，因為很難確定每一個魔王的移動狀況次數，不過由於數字範圍不大，且 $k$ 只有到500，因此直接做複雜度是可行的。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,k;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> maze[N][N],bomb[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y,s,t;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> alive;</span><br><span class=\"line\">&#125;mp[<span class=\"number\">505</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(maze,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(maze));</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,k<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        cin&gt;&gt;mp[i].x&gt;&gt;mp[i].y;</span><br><span class=\"line\">        cin&gt;&gt;mp[i].s&gt;&gt;mp[i].t;</span><br><span class=\"line\">        mp[i].alive = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> now_alive = k;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(now_alive)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(bomb,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(bomb));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> p=<span class=\"number\">0</span>;p&lt;k;p++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mp[p].alive == <span class=\"number\">0</span>)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = mp[p].x,j = mp[p].y;</span><br><span class=\"line\">            maze[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> p=<span class=\"number\">0</span>;p&lt;k;p++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mp[p].alive == <span class=\"number\">0</span>)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = mp[p].x,j = mp[p].y;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = i + mp[p].s;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ny = j + mp[p].t;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= n || nx &lt; <span class=\"number\">0</span> || ny &gt;= m ||ny &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                now_alive--;</span><br><span class=\"line\">                mp[p].alive = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(maze[nx][ny])&#123;</span><br><span class=\"line\">                now_alive--;</span><br><span class=\"line\">                mp[p].alive = <span class=\"number\">0</span>;</span><br><span class=\"line\">                bomb[nx][ny] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                mp[p].x = nx;</span><br><span class=\"line\">                mp[p].y = ny;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;m;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(bomb[i][j] == <span class=\"number\">1</span>)</span><br><span class=\"line\">                    maze[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;m;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(maze[i][j])ans++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"P3-幸運數字\"><a href=\"#P3-幸運數字\" class=\"headerlink\" title=\"P3 幸運數字\"></a>P3 幸運數字</h2><p><a href=\"https://zerojudge.tw/ShowProblem?problemid=g277\">題目連結</a></p>\n<p>以區間最小值作為區分點將數列分成兩半，可以利用線段樹找區間最小值，利用迴圈模擬每一次範圍縮小的情況。</p>\n<p>不過這一題比較特別，他的區間範圍一定會越來越小，且區間外的數字也就不需要使用到，因此可以將數列做一次排序，從頭開始找如果遇上區間外的數字則不理他，否則使用它當作區間的分隔點（這一定會是最小值，因為由小到大排序），將區間範圍縮小。</p>\n<p>至於挑選左右區間的區間和，則可以透過前綴和 $O(1)$ 算出答案。</p>\n<p><strong>時間複雜度：</strong> 如果是一個遞增或遞減的序列，則每一次區間大小只會縮減1，此時複雜度為 $O(n)$，加上最一開始的排序是 $O(n\\log n)$，總共為 $O(n\\log n)$。</p>\n<h3 id=\"排序作法\"><a href=\"#排序作法\" class=\"headerlink\" title=\"排序作法\"></a>排序作法</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 300005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,arr[N],pref[N];</span><br><span class=\"line\">pii sorted[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,n)&#123;</span><br><span class=\"line\">        cin&gt;&gt;sorted[i<span class=\"number\">-1</span>].x;</span><br><span class=\"line\">        arr[i] = sorted[i<span class=\"number\">-1</span>].x;</span><br><span class=\"line\">        sorted[i<span class=\"number\">-1</span>].y = i;</span><br><span class=\"line\">        pref[i] = pref[i<span class=\"number\">-1</span>]+arr[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(sorted,sorted+n);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ind = <span class=\"number\">0</span>,l = <span class=\"number\">1</span>,r = n;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(r&gt;l)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(sorted[ind].y &gt; r || sorted[ind].y &lt; l)ind++;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = pref[sorted[ind].y<span class=\"number\">-1</span>]-pref[l<span class=\"number\">-1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = pref[r]-pref[sorted[ind].y];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left &gt; right)&#123;</span><br><span class=\"line\">            r = sorted[ind].y<span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            l = sorted[ind].y+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;arr[l]&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"線段樹作法\"><a href=\"#線段樹作法\" class=\"headerlink\" title=\"線段樹作法\"></a>線段樹作法</h3><p>如果用線段樹實作，尋找區間最小值，可以在 $O(\\log n)$ 的時間內詢問。在最差的情況下，一共會詢問 $n$ 次，因此總時間複雜度一樣是 $O(n\\log n)$。實作上也不複雜，建立線段樹以及區間詢問，區間修改和懶標之類的東西。可以比較一下時間：</p>\n<p><img src=\"https://i.imgur.com/JlsbyYf.png\" alt=\"\"></p>\n<p>線段樹的表現稍微好一點，不過其實是相當接近的！<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 300005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,arr[N],pref[N];</span><br><span class=\"line\">pii seg[<span class=\"number\">4</span>*N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//建立線段樹[l,r)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> cur,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= l)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r - l &lt;= <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        seg[cur] = &#123;arr[l],l&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">2</span>*cur,l,mid);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>,mid,r);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(seg[<span class=\"number\">2</span>*cur].x &lt; seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>].x)</span><br><span class=\"line\">        seg[cur] = seg[<span class=\"number\">2</span>*cur];</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        seg[cur] = seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//詢問區間最小值，回傳pair</span></span><br><span class=\"line\"><span class=\"function\">pii <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> cur,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> ql,<span class=\"keyword\">int</span> qr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= l || ql &gt;= r || qr &lt;= l)<span class=\"keyword\">return</span> &#123;INT_MAX,INT_MAX&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ql &lt;= l &amp;&amp; qr &gt;= r)<span class=\"keyword\">return</span> seg[cur];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    pii lft = <span class=\"built_in\">query</span>(<span class=\"number\">2</span>*cur,l,mid,ql,qr);</span><br><span class=\"line\">    pii rgt = <span class=\"built_in\">query</span>(<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>,mid,r,ql,qr);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lft.x &lt; rgt.x)<span class=\"keyword\">return</span> lft;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rgt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,n)&#123;</span><br><span class=\"line\">        cin&gt;&gt;arr[i];</span><br><span class=\"line\">        pref[i] = pref[i<span class=\"number\">-1</span>]+arr[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">1</span>,r = n+<span class=\"number\">1</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(r - l &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ind = <span class=\"built_in\">query</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,l,r).y;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = pref[ind<span class=\"number\">-1</span>] - pref[l<span class=\"number\">-1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = pref[r<span class=\"number\">-1</span>] - pref[ind];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left &gt; right)r = ind;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> l = ind + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;arr[l]&lt;&lt;<span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"歐恩作法\"><a href=\"#歐恩作法\" class=\"headerlink\" title=\"歐恩作法\"></a>歐恩作法</h3><blockquote>\n<p>BY thanksone</p>\n</blockquote>\n<p>有一種二元樹，我也不知道叫啥，根為全序列最小值，左節點為左邊序列最小值，右節點為右邊序列最小值。</p>\n<h4 id=\"建法\"><a href=\"#建法\" class=\"headerlink\" title=\"建法\"></a>建法</h4><p>紀錄每個位置左、右邊離自己最近、比自己小的，爸爸就是兩個之中比較大的那一個。</p>\n<p><strong>時間複雜度：</strong> 種樹加跑答案總共 $O(n)$<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int, int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ff first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ss second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">array&lt;<span class=\"keyword\">int</span>, 300004&gt; A, S, L, R;</span><br><span class=\"line\">array&lt;pii, 300004&gt; tree;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">plant</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[L[i]] &gt; A[R[i]]) tree[L[i]].ss = i;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> tree[R[i]].ff = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> m)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r) <span class=\"keyword\">return</span> A[l];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S[m - <span class=\"number\">1</span>] - S[l - <span class=\"number\">1</span>] &gt; S[r] - S[m]) <span class=\"keyword\">return</span> <span class=\"built_in\">solve</span>(l, m - <span class=\"number\">1</span>, tree[m].ff);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">solve</span>(m + <span class=\"number\">1</span>, r, tree[m].ss);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    stack&lt;pii&gt; s;</span><br><span class=\"line\">    pii m = &#123;<span class=\"number\">1e9</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    s.<span class=\"built_in\">push</span>(&#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">        cin &gt;&gt; A[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[i] &lt; m.ff) m = &#123;A[i], i&#125;;</span><br><span class=\"line\">        S[i] = A[i] + S[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(A[i] &lt; s.<span class=\"built_in\">top</span>().ff)&#123;</span><br><span class=\"line\">            R[s.<span class=\"built_in\">top</span>().ss] = i;</span><br><span class=\"line\">            s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        L[i] = s.<span class=\"built_in\">top</span>().ss;</span><br><span class=\"line\">        s.<span class=\"built_in\">push</span>(&#123;A[i], i&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">plant</span>(n);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">solve</span>(<span class=\"number\">1</span>, n, m.ss);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果把範測的笛卡爾樹具象化，大概長這樣：</p>\n<blockquote>\n<p>8<br>3 9 4 5 1 6 2 8</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/lqvdW31.png\" alt=\"\"></p>\n<p>大致步驟就是：</p>\n<ol>\n<li>用<strong>單調隊列</strong>建立函數 $L$ 以及 $R$，表示往左往右看第一個小於自己的數</li>\n<li>建立笛卡爾樹（$L[i],R[i]$ 挑大的作為父節點）</li>\n<li>從根節點開始走訪，左右節點就會分別是左右區間的最小值</li>\n<li>利用前綴和計算區間大小，決定要走左還是右子樹</li>\n<li>走訪到區間長度為 $1$ 時即答案！ </li>\n</ol>\n<div class=\"note success\">\n            <p>總共有三個不同的作法，使用到排序、線段樹、笛卡兒樹的作法。其中，他們的間複雜度分別是 $O(n\\log n)$、$O(n\\log n)$、$O(n)$。</p><ol><li>排序作法：AC (0.1s, 9.5MB)</li><li>線段樹作法：AC (84ms, 20.9MB)</li><li>歐恩作法：AC (82ms, 15.6MB)</li></ol><p>在笛卡兒樹的作法中，對每一個數字尋找兩側第一個小於它的數字（這可以用單調隊列完成），之後把每一個數字的父親節點設為找到的兩端數字中較大的那一個。</p><p>此作法的概念是，假設序列中第 $i$ 個數字找到兩側數字分別是 $l_i$ 以及 $r_i$，當他如果是區間最小時，區間必須在 $[l_i+1:r_i-1]$ 之中，否則它就不會是最小值了。</p><p>至於為何是選擇 $max(A[l_i],A[r_i])$ 當做父節點？則是因為如果選擇較小的那一個，在縮小區間範圍後，無法確定另外一個是否在區間外，如果包含區間內，則 $A[i]$ 便不會是最小值，違反了定義。換言之，選擇了較大的那一個當作父節點，按照定義當走到這個父節點時，它是區間的最小值，將它排除之後，$A[i]$ 就會是下一個區間的最小值！</p>\n          </div>\n<h2 id=\"P4-美食博覽會\"><a href=\"#P4-美食博覽會\" class=\"headerlink\" title=\"P4 美食博覽會\"></a>P4 美食博覽會</h2><p><a href=\"https://zerojudge.tw/ShowProblem?problemid=g278\">題目連結</a></p>\n<p>對於序列中k個連續的區間，每一個區間滿足區間內的元素皆不重複，區間範圍可以重疊（不過重疊部分只會算一次），找出這k個連續區間所能覆蓋到的最大長度。</p>\n<p>感覺跟背包問題的概念有點像，n個物品可以對應到k個區間，重量則對應到這裡的序列中的數字。這題用DP解。</p>\n<h3 id=\"定義\"><a href=\"#定義\" class=\"headerlink\" title=\"定義\"></a>定義</h3><p>定義 $dp[i][j]$ 為 $i$ 個試吃員，看了前 $j$ 個攤位，最多可以吃到幾個攤位。</p>\n<h3 id=\"轉移式\"><a href=\"#轉移式\" class=\"headerlink\" title=\"轉移式\"></a>轉移式</h3><p>維護一個函數 $f[i]$ 表示如果試吃員吃了第 $i$ 個攤位的美食，他所能吃到<strong>最左端的攤位的索引值</strong>。也就是說，試吃員可以吃 $f[i]$ 到 $i$ 攤位的美食。</p>\n<script type=\"math/tex; mode=display\">dp[i][j] = max(dp[i][j-1],dp[i-1][f[j]-1]+j-f[j]+1)</script><p>轉移式代表了要使用第 $i$ 的攤位作為右端點，或是不要使用（直接用前一個），取兩者的最大值。後面一串加減是計算區間大小</p>\n<h3 id=\"邊界\"><a href=\"#邊界\" class=\"headerlink\" title=\"邊界\"></a>邊界</h3><script type=\"math/tex; mode=display\">dp[i][j] = 0,\\text{for all 0≤i≤k,0≤j≤n}</script><p>從轉移式可以看到他空間可以用滾動DP優化！</p>\n<div class=\"note success\">\n            <p><strong>GREEDY的作法？</strong><br>如果每一次都選擇最大的區間，並將這個區間的值都改成0，做7次，得到答案，是正確的做法嗎？</p><p>最大的區間不一定會被完全選到。以下測資：</p><blockquote><p>12 2<br>5 4 3 2 1 3 4 5 6 4 3 2</p></blockquote><p>如果是Greedy會選擇 $2 \\,1\\, 3\\, 4\\, 5\\, 6$ ，然後從兩邊挑一邊。答案是 $9$。<br>但是用DP做會是 $5\\, 4\\, 3\\, 2\\, 1$ 加上 $5\\, 6\\, 4\\, 3\\, 2$，答案是 $10$。</p>\n          </div>\n<p><strong>時間複雜度：</strong> 兩層迴圈總共是 $O(kn)$</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 1000005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,k,dp[<span class=\"number\">2</span>][N],lft[N],arr[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> mp[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dp,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(dp));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(lft,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(lft));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(mp,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(mp));</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,n)cin&gt;&gt;arr[i];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxn = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mp[arr[i]]!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            lft[i] = mp[arr[i]]+<span class=\"number\">1</span>;</span><br><span class=\"line\">            mp[arr[i]] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            lft[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            mp[arr[i]] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        lft[i] = <span class=\"built_in\">max</span>(maxn,lft[i]);</span><br><span class=\"line\">        maxn = <span class=\"built_in\">max</span>(maxn,lft[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;k;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)&#123;</span><br><span class=\"line\">            dp[<span class=\"number\">1</span>][j] = <span class=\"built_in\">max</span>(dp[<span class=\"number\">1</span>][j<span class=\"number\">-1</span>],dp[<span class=\"number\">0</span>][lft[j]<span class=\"number\">-1</span>]+j-lft[j]+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)&#123;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][j] = dp[<span class=\"number\">1</span>][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;dp[<span class=\"number\">1</span>][n]&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 1 2 1 4 1 7 1 3 8</span></span><br><span class=\"line\"><span class=\"comment\">// 1 1 2 2 4 4 7 7 7 8</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"EXTRA-版本\"><a href=\"#EXTRA-版本\" class=\"headerlink\" title=\"EXTRA 版本\"></a>EXTRA 版本</h3><blockquote>\n<p>BY thanksone</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/srLyvYy.png\" alt=\"\"></p>\n<p>熟悉的題目，大的感人的k。如果依照上面$O(nk)$的做法肯定TLE。<br>俗話說得好 : “好的DP定義是AC的一半”<br>因此經過一系列通靈，我們得到了一個非常漂亮的定義</p>\n<h4 id=\"定義-1\"><a href=\"#定義-1\" class=\"headerlink\" title=\"定義\"></a>定義</h4><p> $dp[i] =$ 必須選第 $i$ 家，$($能吃最多的攤販數量，需要的人數$) (dp[i]$是一個$pair)$</p>\n<h4 id=\"轉移式-1\"><a href=\"#轉移式-1\" class=\"headerlink\" title=\"轉移式\"></a>轉移式</h4><p>維護一個函數 $L[i]$ ，其實就是樓上的 $f[i]$，但是我比較想要叫他 $L$</p>\n<script type=\"math/tex; mode=display\">dp[i] = max_{j<L[i]}(dp[j]) + i - L[i] + 1</script><p>$max(a, b) = a, if(a.first &gt; b.first\\ or\\ (a.first == b.first\\  and\\ a.second &gt; b.second))$</p>\n<h4 id=\"優化\"><a href=\"#優化\" class=\"headerlink\" title=\"優化\"></a>優化</h4><p>Aliens優化 : 利用penalty限制人數<br>每當有一個人加入，便扣除 $p$ 個攤販的業績<br>當總人數超過 $k$，表示 $p$ 不夠大，仍然有太多人利大於弊<br>反之，當總人數小於 $k$，表示 $p$ 太大，有太多人弊大於利<br>看出來了嗎? $p$ 可以二分搜喔!</p>\n<p><strong>時間複雜度：</strong> 二分搜加每次DP $O(nlogn)$<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int, int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ff first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ss second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, k;</span><br><span class=\"line\">array&lt;<span class=\"keyword\">int</span>, 100004&gt; A<span class=\"comment\">/*num of stands*/</span>, L<span class=\"comment\">/*leftest stand can eat to*/</span>, cnt<span class=\"comment\">/*count of each num*/</span>;</span><br><span class=\"line\">array&lt;pii, 100004&gt; dp;</span><br><span class=\"line\"><span class=\"function\">pii <span class=\"title\">add</span><span class=\"params\">(pii p, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    p.ff += v;</span><br><span class=\"line\">    p.ss++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">pii <span class=\"title\">max</span><span class=\"params\">(pii a, pii b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.ff == b.ff) <span class=\"keyword\">return</span> a.ss &gt; b.ss? a : b;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.ff &gt; b.ff ? a : b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">pii <span class=\"title\">DP</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ff = stands visited, ss = people needed</span></span><br><span class=\"line\">    pii ans = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l &lt; L[i]) ans = <span class=\"built_in\">max</span>(ans, dp[l++]);</span><br><span class=\"line\">        dp[i] = <span class=\"built_in\">add</span>(ans, i - L[i] + <span class=\"number\">1</span> + p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l &lt; n) ans = <span class=\"built_in\">max</span>(ans, dp[l++]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">BIS</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = -n, r = n, mid;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l != r)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//binary search penalty</span></span><br><span class=\"line\">        mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">DP</span>(mid).ss &lt; k) l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> r = mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">DP</span>(l).ff - l * k;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        cin &gt;&gt; A[i];</span><br><span class=\"line\">        cnt[A[i]]++;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cnt[A[i]] &gt; <span class=\"number\">1</span>) cnt[A[l++]]--;</span><br><span class=\"line\">        L[i] = l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">BIS</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"length":8803,"excerpt":"<p>這次沒有報名APCS，因為報名手續有點麻煩，還要在學證明和教師簽名等等，所以就沒有報…。總之，利用ZeroJudge的測資來寫寫看，但在ZJ上面會過不能保證真的去考APCS的測資就一定會過！</p>","more":"<h2 id=\"P1-七言對聯\"><a href=\"#P1-七言對聯\" class=\"headerlink\" title=\"P1 七言對聯\"></a>P1 七言對聯</h2><p><a href=\"https://zerojudge.tw/ShowProblem?problemid=g275\">題目連結</a></p>\n<p>總共有ABC三種規則，就每一種都比對一次就可以了！</p>\n<p><strong>時間複雜度：</strong> 共有 $n$ 組對聯，每一組都 $O(1)$ 檢查，時間 $O(n)$ 。（不過n最大也才50，不論什麼複雜度都可以吧）<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 50</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> a[N],b[N],f = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,<span class=\"number\">7</span>)cin&gt;&gt;a[i];</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,<span class=\"number\">7</span>)cin&gt;&gt;b[i];</span><br><span class=\"line\">        f = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[<span class=\"number\">2</span>]==a[<span class=\"number\">4</span>]||a[<span class=\"number\">2</span>]!=a[<span class=\"number\">6</span>])&#123;</span><br><span class=\"line\">                cout&lt;&lt;<span class=\"string\">&quot;A&quot;</span>;f = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(b[<span class=\"number\">2</span>]==b[<span class=\"number\">4</span>]||b[<span class=\"number\">2</span>]!=b[<span class=\"number\">6</span>])&#123;</span><br><span class=\"line\">                cout&lt;&lt;<span class=\"string\">&quot;A&quot;</span>;f = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[<span class=\"number\">7</span>]!=<span class=\"number\">1</span> || b[<span class=\"number\">7</span>]!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                cout&lt;&lt;<span class=\"string\">&quot;B&quot;</span>;f = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[<span class=\"number\">2</span>]==b[<span class=\"number\">2</span>]||a[<span class=\"number\">4</span>]==b[<span class=\"number\">4</span>]||a[<span class=\"number\">6</span>]==b[<span class=\"number\">6</span>])&#123;</span><br><span class=\"line\">                cout&lt;&lt;<span class=\"string\">&quot;C&quot;</span>;f = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f)cout&lt;&lt;<span class=\"string\">&quot;None&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> cout&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"P2-魔王迷宮\"><a href=\"#P2-魔王迷宮\" class=\"headerlink\" title=\"P2 魔王迷宮\"></a>P2 魔王迷宮</h2><p><a href=\"https://zerojudge.tw/ShowProblem?problemid=g276\">題目連結</a></p>\n<p>這一題我好像太早寫了，題目還在整修階段，丟上去TLE，發現題目敘述又改了XD，從魔王踩到炸彈爆炸後，「炸彈不會消失」，到「炸彈會消失」，還有範測也有改變。</p>\n<p>這一題是去模擬每一個魔王移動的狀況，要特別注意每一輪的國王是同時移動的，沒有先後順序，也就是說一顆炸彈可以炸掉不只一位魔王，如果有多個魔王移動到同一個格子，則他們會一起被炸掉。</p>\n<p><strong>時間複雜度：</strong> 有點難估計，因為很難確定每一個魔王的移動狀況次數，不過由於數字範圍不大，且 $k$ 只有到500，因此直接做複雜度是可行的。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,k;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> maze[N][N],bomb[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y,s,t;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> alive;</span><br><span class=\"line\">&#125;mp[<span class=\"number\">505</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(maze,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(maze));</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,k<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        cin&gt;&gt;mp[i].x&gt;&gt;mp[i].y;</span><br><span class=\"line\">        cin&gt;&gt;mp[i].s&gt;&gt;mp[i].t;</span><br><span class=\"line\">        mp[i].alive = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> now_alive = k;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(now_alive)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(bomb,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(bomb));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> p=<span class=\"number\">0</span>;p&lt;k;p++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mp[p].alive == <span class=\"number\">0</span>)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = mp[p].x,j = mp[p].y;</span><br><span class=\"line\">            maze[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> p=<span class=\"number\">0</span>;p&lt;k;p++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mp[p].alive == <span class=\"number\">0</span>)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = mp[p].x,j = mp[p].y;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = i + mp[p].s;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ny = j + mp[p].t;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx &gt;= n || nx &lt; <span class=\"number\">0</span> || ny &gt;= m ||ny &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                now_alive--;</span><br><span class=\"line\">                mp[p].alive = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(maze[nx][ny])&#123;</span><br><span class=\"line\">                now_alive--;</span><br><span class=\"line\">                mp[p].alive = <span class=\"number\">0</span>;</span><br><span class=\"line\">                bomb[nx][ny] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                mp[p].x = nx;</span><br><span class=\"line\">                mp[p].y = ny;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;m;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(bomb[i][j] == <span class=\"number\">1</span>)</span><br><span class=\"line\">                    maze[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;m;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(maze[i][j])ans++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"P3-幸運數字\"><a href=\"#P3-幸運數字\" class=\"headerlink\" title=\"P3 幸運數字\"></a>P3 幸運數字</h2><p><a href=\"https://zerojudge.tw/ShowProblem?problemid=g277\">題目連結</a></p>\n<p>以區間最小值作為區分點將數列分成兩半，可以利用線段樹找區間最小值，利用迴圈模擬每一次範圍縮小的情況。</p>\n<p>不過這一題比較特別，他的區間範圍一定會越來越小，且區間外的數字也就不需要使用到，因此可以將數列做一次排序，從頭開始找如果遇上區間外的數字則不理他，否則使用它當作區間的分隔點（這一定會是最小值，因為由小到大排序），將區間範圍縮小。</p>\n<p>至於挑選左右區間的區間和，則可以透過前綴和 $O(1)$ 算出答案。</p>\n<p><strong>時間複雜度：</strong> 如果是一個遞增或遞減的序列，則每一次區間大小只會縮減1，此時複雜度為 $O(n)$，加上最一開始的排序是 $O(n\\log n)$，總共為 $O(n\\log n)$。</p>\n<h3 id=\"排序作法\"><a href=\"#排序作法\" class=\"headerlink\" title=\"排序作法\"></a>排序作法</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 300005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,arr[N],pref[N];</span><br><span class=\"line\">pii sorted[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,n)&#123;</span><br><span class=\"line\">        cin&gt;&gt;sorted[i<span class=\"number\">-1</span>].x;</span><br><span class=\"line\">        arr[i] = sorted[i<span class=\"number\">-1</span>].x;</span><br><span class=\"line\">        sorted[i<span class=\"number\">-1</span>].y = i;</span><br><span class=\"line\">        pref[i] = pref[i<span class=\"number\">-1</span>]+arr[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(sorted,sorted+n);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ind = <span class=\"number\">0</span>,l = <span class=\"number\">1</span>,r = n;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(r&gt;l)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(sorted[ind].y &gt; r || sorted[ind].y &lt; l)ind++;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = pref[sorted[ind].y<span class=\"number\">-1</span>]-pref[l<span class=\"number\">-1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = pref[r]-pref[sorted[ind].y];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left &gt; right)&#123;</span><br><span class=\"line\">            r = sorted[ind].y<span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            l = sorted[ind].y+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;arr[l]&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"線段樹作法\"><a href=\"#線段樹作法\" class=\"headerlink\" title=\"線段樹作法\"></a>線段樹作法</h3><p>如果用線段樹實作，尋找區間最小值，可以在 $O(\\log n)$ 的時間內詢問。在最差的情況下，一共會詢問 $n$ 次，因此總時間複雜度一樣是 $O(n\\log n)$。實作上也不複雜，建立線段樹以及區間詢問，區間修改和懶標之類的東西。可以比較一下時間：</p>\n<p><img src=\"https://i.imgur.com/JlsbyYf.png\" alt=\"\"></p>\n<p>線段樹的表現稍微好一點，不過其實是相當接近的！<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 300005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,arr[N],pref[N];</span><br><span class=\"line\">pii seg[<span class=\"number\">4</span>*N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//建立線段樹[l,r)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> cur,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= l)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r - l &lt;= <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        seg[cur] = &#123;arr[l],l&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">2</span>*cur,l,mid);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>,mid,r);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(seg[<span class=\"number\">2</span>*cur].x &lt; seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>].x)</span><br><span class=\"line\">        seg[cur] = seg[<span class=\"number\">2</span>*cur];</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        seg[cur] = seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//詢問區間最小值，回傳pair</span></span><br><span class=\"line\"><span class=\"function\">pii <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> cur,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> ql,<span class=\"keyword\">int</span> qr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= l || ql &gt;= r || qr &lt;= l)<span class=\"keyword\">return</span> &#123;INT_MAX,INT_MAX&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ql &lt;= l &amp;&amp; qr &gt;= r)<span class=\"keyword\">return</span> seg[cur];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    pii lft = <span class=\"built_in\">query</span>(<span class=\"number\">2</span>*cur,l,mid,ql,qr);</span><br><span class=\"line\">    pii rgt = <span class=\"built_in\">query</span>(<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>,mid,r,ql,qr);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lft.x &lt; rgt.x)<span class=\"keyword\">return</span> lft;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rgt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,n)&#123;</span><br><span class=\"line\">        cin&gt;&gt;arr[i];</span><br><span class=\"line\">        pref[i] = pref[i<span class=\"number\">-1</span>]+arr[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">1</span>,r = n+<span class=\"number\">1</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(r - l &gt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ind = <span class=\"built_in\">query</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,l,r).y;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = pref[ind<span class=\"number\">-1</span>] - pref[l<span class=\"number\">-1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = pref[r<span class=\"number\">-1</span>] - pref[ind];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left &gt; right)r = ind;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> l = ind + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;arr[l]&lt;&lt;<span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"歐恩作法\"><a href=\"#歐恩作法\" class=\"headerlink\" title=\"歐恩作法\"></a>歐恩作法</h3><blockquote>\n<p>BY thanksone</p>\n</blockquote>\n<p>有一種二元樹，我也不知道叫啥，根為全序列最小值，左節點為左邊序列最小值，右節點為右邊序列最小值。</p>\n<h4 id=\"建法\"><a href=\"#建法\" class=\"headerlink\" title=\"建法\"></a>建法</h4><p>紀錄每個位置左、右邊離自己最近、比自己小的，爸爸就是兩個之中比較大的那一個。</p>\n<p><strong>時間複雜度：</strong> 種樹加跑答案總共 $O(n)$<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int, int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ff first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ss second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">array&lt;<span class=\"keyword\">int</span>, 300004&gt; A, S, L, R;</span><br><span class=\"line\">array&lt;pii, 300004&gt; tree;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">plant</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[L[i]] &gt; A[R[i]]) tree[L[i]].ss = i;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> tree[R[i]].ff = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> m)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r) <span class=\"keyword\">return</span> A[l];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S[m - <span class=\"number\">1</span>] - S[l - <span class=\"number\">1</span>] &gt; S[r] - S[m]) <span class=\"keyword\">return</span> <span class=\"built_in\">solve</span>(l, m - <span class=\"number\">1</span>, tree[m].ff);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">solve</span>(m + <span class=\"number\">1</span>, r, tree[m].ss);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    stack&lt;pii&gt; s;</span><br><span class=\"line\">    pii m = &#123;<span class=\"number\">1e9</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    s.<span class=\"built_in\">push</span>(&#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">        cin &gt;&gt; A[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[i] &lt; m.ff) m = &#123;A[i], i&#125;;</span><br><span class=\"line\">        S[i] = A[i] + S[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(A[i] &lt; s.<span class=\"built_in\">top</span>().ff)&#123;</span><br><span class=\"line\">            R[s.<span class=\"built_in\">top</span>().ss] = i;</span><br><span class=\"line\">            s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        L[i] = s.<span class=\"built_in\">top</span>().ss;</span><br><span class=\"line\">        s.<span class=\"built_in\">push</span>(&#123;A[i], i&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">plant</span>(n);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">solve</span>(<span class=\"number\">1</span>, n, m.ss);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果把範測的笛卡爾樹具象化，大概長這樣：</p>\n<blockquote>\n<p>8<br>3 9 4 5 1 6 2 8</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/lqvdW31.png\" alt=\"\"></p>\n<p>大致步驟就是：</p>\n<ol>\n<li>用<strong>單調隊列</strong>建立函數 $L$ 以及 $R$，表示往左往右看第一個小於自己的數</li>\n<li>建立笛卡爾樹（$L[i],R[i]$ 挑大的作為父節點）</li>\n<li>從根節點開始走訪，左右節點就會分別是左右區間的最小值</li>\n<li>利用前綴和計算區間大小，決定要走左還是右子樹</li>\n<li>走訪到區間長度為 $1$ 時即答案！ </li>\n</ol>\n<div class=\"note success\">\n            <p>總共有三個不同的作法，使用到排序、線段樹、笛卡兒樹的作法。其中，他們的間複雜度分別是 $O(n\\log n)$、$O(n\\log n)$、$O(n)$。</p><ol><li>排序作法：AC (0.1s, 9.5MB)</li><li>線段樹作法：AC (84ms, 20.9MB)</li><li>歐恩作法：AC (82ms, 15.6MB)</li></ol><p>在笛卡兒樹的作法中，對每一個數字尋找兩側第一個小於它的數字（這可以用單調隊列完成），之後把每一個數字的父親節點設為找到的兩端數字中較大的那一個。</p><p>此作法的概念是，假設序列中第 $i$ 個數字找到兩側數字分別是 $l_i$ 以及 $r_i$，當他如果是區間最小時，區間必須在 $[l_i+1:r_i-1]$ 之中，否則它就不會是最小值了。</p><p>至於為何是選擇 $max(A[l_i],A[r_i])$ 當做父節點？則是因為如果選擇較小的那一個，在縮小區間範圍後，無法確定另外一個是否在區間外，如果包含區間內，則 $A[i]$ 便不會是最小值，違反了定義。換言之，選擇了較大的那一個當作父節點，按照定義當走到這個父節點時，它是區間的最小值，將它排除之後，$A[i]$ 就會是下一個區間的最小值！</p>\n          </div>\n<h2 id=\"P4-美食博覽會\"><a href=\"#P4-美食博覽會\" class=\"headerlink\" title=\"P4 美食博覽會\"></a>P4 美食博覽會</h2><p><a href=\"https://zerojudge.tw/ShowProblem?problemid=g278\">題目連結</a></p>\n<p>對於序列中k個連續的區間，每一個區間滿足區間內的元素皆不重複，區間範圍可以重疊（不過重疊部分只會算一次），找出這k個連續區間所能覆蓋到的最大長度。</p>\n<p>感覺跟背包問題的概念有點像，n個物品可以對應到k個區間，重量則對應到這裡的序列中的數字。這題用DP解。</p>\n<h3 id=\"定義\"><a href=\"#定義\" class=\"headerlink\" title=\"定義\"></a>定義</h3><p>定義 $dp[i][j]$ 為 $i$ 個試吃員，看了前 $j$ 個攤位，最多可以吃到幾個攤位。</p>\n<h3 id=\"轉移式\"><a href=\"#轉移式\" class=\"headerlink\" title=\"轉移式\"></a>轉移式</h3><p>維護一個函數 $f[i]$ 表示如果試吃員吃了第 $i$ 個攤位的美食，他所能吃到<strong>最左端的攤位的索引值</strong>。也就是說，試吃員可以吃 $f[i]$ 到 $i$ 攤位的美食。</p>\n<script type=\"math/tex; mode=display\">dp[i][j] = max(dp[i][j-1],dp[i-1][f[j]-1]+j-f[j]+1)</script><p>轉移式代表了要使用第 $i$ 的攤位作為右端點，或是不要使用（直接用前一個），取兩者的最大值。後面一串加減是計算區間大小</p>\n<h3 id=\"邊界\"><a href=\"#邊界\" class=\"headerlink\" title=\"邊界\"></a>邊界</h3><script type=\"math/tex; mode=display\">dp[i][j] = 0,\\text{for all 0≤i≤k,0≤j≤n}</script><p>從轉移式可以看到他空間可以用滾動DP優化！</p>\n<div class=\"note success\">\n            <p><strong>GREEDY的作法？</strong><br>如果每一次都選擇最大的區間，並將這個區間的值都改成0，做7次，得到答案，是正確的做法嗎？</p><p>最大的區間不一定會被完全選到。以下測資：</p><blockquote><p>12 2<br>5 4 3 2 1 3 4 5 6 4 3 2</p></blockquote><p>如果是Greedy會選擇 $2 \\,1\\, 3\\, 4\\, 5\\, 6$ ，然後從兩邊挑一邊。答案是 $9$。<br>但是用DP做會是 $5\\, 4\\, 3\\, 2\\, 1$ 加上 $5\\, 6\\, 4\\, 3\\, 2$，答案是 $10$。</p>\n          </div>\n<p><strong>時間複雜度：</strong> 兩層迴圈總共是 $O(kn)$</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 1000005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,k,dp[<span class=\"number\">2</span>][N],lft[N],arr[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> mp[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dp,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(dp));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(lft,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(lft));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(mp,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(mp));</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,n)cin&gt;&gt;arr[i];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxn = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mp[arr[i]]!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            lft[i] = mp[arr[i]]+<span class=\"number\">1</span>;</span><br><span class=\"line\">            mp[arr[i]] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            lft[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            mp[arr[i]] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        lft[i] = <span class=\"built_in\">max</span>(maxn,lft[i]);</span><br><span class=\"line\">        maxn = <span class=\"built_in\">max</span>(maxn,lft[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;k;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)&#123;</span><br><span class=\"line\">            dp[<span class=\"number\">1</span>][j] = <span class=\"built_in\">max</span>(dp[<span class=\"number\">1</span>][j<span class=\"number\">-1</span>],dp[<span class=\"number\">0</span>][lft[j]<span class=\"number\">-1</span>]+j-lft[j]+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)&#123;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][j] = dp[<span class=\"number\">1</span>][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;dp[<span class=\"number\">1</span>][n]&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 1 2 1 4 1 7 1 3 8</span></span><br><span class=\"line\"><span class=\"comment\">// 1 1 2 2 4 4 7 7 7 8</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"EXTRA-版本\"><a href=\"#EXTRA-版本\" class=\"headerlink\" title=\"EXTRA 版本\"></a>EXTRA 版本</h3><blockquote>\n<p>BY thanksone</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/srLyvYy.png\" alt=\"\"></p>\n<p>熟悉的題目，大的感人的k。如果依照上面$O(nk)$的做法肯定TLE。<br>俗話說得好 : “好的DP定義是AC的一半”<br>因此經過一系列通靈，我們得到了一個非常漂亮的定義</p>\n<h4 id=\"定義-1\"><a href=\"#定義-1\" class=\"headerlink\" title=\"定義\"></a>定義</h4><p> $dp[i] =$ 必須選第 $i$ 家，$($能吃最多的攤販數量，需要的人數$) (dp[i]$是一個$pair)$</p>\n<h4 id=\"轉移式-1\"><a href=\"#轉移式-1\" class=\"headerlink\" title=\"轉移式\"></a>轉移式</h4><p>維護一個函數 $L[i]$ ，其實就是樓上的 $f[i]$，但是我比較想要叫他 $L$</p>\n<script type=\"math/tex; mode=display\">dp[i] = max_{j<L[i]}(dp[j]) + i - L[i] + 1</script><p>$max(a, b) = a, if(a.first &gt; b.first\\ or\\ (a.first == b.first\\  and\\ a.second &gt; b.second))$</p>\n<h4 id=\"優化\"><a href=\"#優化\" class=\"headerlink\" title=\"優化\"></a>優化</h4><p>Aliens優化 : 利用penalty限制人數<br>每當有一個人加入，便扣除 $p$ 個攤販的業績<br>當總人數超過 $k$，表示 $p$ 不夠大，仍然有太多人利大於弊<br>反之，當總人數小於 $k$，表示 $p$ 太大，有太多人弊大於利<br>看出來了嗎? $p$ 可以二分搜喔!</p>\n<p><strong>時間複雜度：</strong> 二分搜加每次DP $O(nlogn)$<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int, int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ff first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ss second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, k;</span><br><span class=\"line\">array&lt;<span class=\"keyword\">int</span>, 100004&gt; A<span class=\"comment\">/*num of stands*/</span>, L<span class=\"comment\">/*leftest stand can eat to*/</span>, cnt<span class=\"comment\">/*count of each num*/</span>;</span><br><span class=\"line\">array&lt;pii, 100004&gt; dp;</span><br><span class=\"line\"><span class=\"function\">pii <span class=\"title\">add</span><span class=\"params\">(pii p, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    p.ff += v;</span><br><span class=\"line\">    p.ss++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">pii <span class=\"title\">max</span><span class=\"params\">(pii a, pii b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.ff == b.ff) <span class=\"keyword\">return</span> a.ss &gt; b.ss? a : b;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.ff &gt; b.ff ? a : b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">pii <span class=\"title\">DP</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//ff = stands visited, ss = people needed</span></span><br><span class=\"line\">    pii ans = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l &lt; L[i]) ans = <span class=\"built_in\">max</span>(ans, dp[l++]);</span><br><span class=\"line\">        dp[i] = <span class=\"built_in\">add</span>(ans, i - L[i] + <span class=\"number\">1</span> + p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l &lt; n) ans = <span class=\"built_in\">max</span>(ans, dp[l++]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">BIS</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = -n, r = n, mid;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l != r)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//binary search penalty</span></span><br><span class=\"line\">        mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">DP</span>(mid).ss &lt; k) l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> r = mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">DP</span>(l).ff - l * k;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        cin &gt;&gt; A[i];</span><br><span class=\"line\">        cnt[A[i]]++;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cnt[A[i]] &gt; <span class=\"number\">1</span>) cnt[A[l++]]--;</span><br><span class=\"line\">        L[i] = l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">BIS</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"APCS 2021.11","date":"2021-11-06T16:00:00.000Z","mathjax":true,"_content":"\n## P1 修補圍籬\n[題目連結](https://zerojudge.tw/ShowProblem?problemid=g595)\n\n### 題解\n\n如果在兩端就直接取旁邊的高度，否則取跟左右邊高度的最小值。\n\n<!--more-->\n\n### 時間複雜度\n$O(n)$\n### AC程式碼\n\n```cpp=\n#include <bits/stdc++.h>\n#define int long long\n#define N 105\n#define IOS ios::sync_with_stdio(0),cin.tie(0)\nusing namespace std;\nint n,A[N];\n\nsigned main(){\n    IOS;\n    cin>>n;\n    for(int i=0;i<n;i++)cin>>A[i];\n    int ans = 0;\n    if(A[0] == 0)ans += A[1];\n    if(A[n-1] == 0)ans += A[n-2];\n    for(int i=1;i<n-1;i++){\n        if(A[i] == 0)ans += min(A[i-1],A[i+1]);\n    }\n    cout<<ans<<endl;\n}\n```\n> BY peienwu\n\n## P2 動線安排(魔王題)\n\n[題目連結](https://zerojudge.tw/ShowProblem?problemid=g596)\n\n### 題解\n把線分成橫的跟直的就可以好好處理交叉了!\n### 時間複雜度\n$O(h(n + m))$\n### AC程式碼\n\n```cpp=\n#include <bits/stdc++.h>\nusing namespace std;\nint n, m, cnt = 0, ans = 0;\narray<array<int, 104>, 104> R, C, I;\nvoid add(int r, int c){\n    bool ok;\n    I[r][c] = 1;\n    cnt++;\n    if(C[r][c] || R[r][c]) cnt--;\n    C[r][c] = R[r][c] = 0;\n    ok = 0;     //直下情況\n    for(int i = r + 1; i < n; i++){\n        if(I[i][c]) ok = 1;\n    }\n    if(ok){\n        for(int i = r + 1; i < n; i++){\n            if(I[i][c] || R[i][c]) break;\n            R[i][c]++;\n            cnt += C[i][c] == 0;\n        }\n    }\n    ok = 0;     //直上情況\n    for(int i = r - 1; i >= 0; i--){\n        if(I[i][c]) ok = 1;\n    }\n    if(ok){\n        for(int i = r - 1; i >= 0; i--){\n            if(I[i][c] || R[i][c]) break;\n            R[i][c]++;\n            cnt += C[i][c] == 0;\n        }\n    }\n    ok = 0;     //橫右情況\n    for(int i = c + 1; i < m; i++){\n        if(I[r][i]) ok = 1;\n    }\n    if(ok){\n        for(int i = c + 1; i < m; i++){\n            if(I[r][i] || C[r][i]) break;\n            C[r][i]++;\n            cnt += R[r][i] == 0;\n        }\n    }\n    ok = 0;     //橫左情況\n    for(int i = c - 1; i >= 0; i--){\n        if(I[r][i]) ok = 1;\n    }\n    if(ok){\n        for(int i = c - 1; i >= 0; i--){\n            if(I[r][i] || C[r][i]) break;\n            C[r][i]++;\n            cnt += R[r][i] == 0;\n        }\n    }\n}\nvoid pull(int r, int c){\n    I[r][c] = 0;\n    cnt--;\n    for(int i = r + 1; i < n; i++){     //直下情況\n        if(!R[i][c]) break;\n        R[i][c]--;\n        cnt -= C[i][c] == 0;\n    }\n    for(int i = r - 1; i >= 0; i--){    //直上情況\n        if(!R[i][c]) break;\n        R[i][c]--;\n        cnt -= C[i][c] == 0;\n    }\n    for(int i = c + 1; i < m; i++){     //橫右情況\n        if(!C[r][i]) break;\n        C[r][i]--;\n        cnt -= R[r][i] == 0;\n    }\n    for(int i = c - 1; i >= 0; i--){    //橫左情況\n        if(!C[r][i]) break;\n        C[r][i]--;\n        cnt -= R[r][i] == 0;\n    }\n}\nsigned main(){\n    int h, r, c, t;\n    cin >> n >> m >> h;\n    while(h--){\n        cin >> r >> c >> t;\n        if(t){\n            pull(r, c);\n        }else{\n            add(r, c);\n        }\n        ans = max(ans, cnt);\n    }\n    cout << ans << \"\\n\" << cnt;\n    return 0;\n}\n```\n> BY thanksone\n\n## P3 生產線\n\n[題目連結](https://zerojudge.tw/ShowProblem?problemid=g597)\n\n### 差分作法\n\n#### 題解\n用差分的想法加值，再用前綴還原，最後再排序。最後利用Greedy的想法，將每一項最小的工作量乘上最大的時間，總和即為答案。\n\n{% note success %}\n**差分**\n\n差分是前綴和的逆運算，也就是說，把兩項的差算出來就是差分。定義如下：\n$$b_i = \\begin{cases}a_i-a_{i-1}, &\\text{if }i\\gt 1 \\\\a_1, & \\text{if } i = 1\\end{cases}$$\n\n差分的使用時機是區間加值，一個區間內的數字都加上一個定值，這時候就可以使用到差分的技巧。使用方式如下，當我要在區間 $[l,r]$ 的每一個數字都加上一個值$v$，以下步驟：\n1. 定義一個新的陣列 $b_i$ 表示每一項差分\n2. 設 $b[l] =  b[l] + v,b[r+1] = b[r+1] - v$\n3. 將差分的每一項加上前一項（做前綴和 $b[i] = b[i]+b[i-1]$），即為原數列\n\n第二步驟可以重複好幾次做，這樣複雜度從原本的$O(n)$就變成了$O(1)$了！\n{% endnote %}\n\n#### 時間複雜度\n差分：$O(m)$ 、排序 $O(n\\log n)$\n\n總時間複雜度：$O(n\\log n + m)$\n\n#### AC程式碼\n\n```cpp=\n#include <bits/stdc++.h>\n#define int long long\n#define N 200005\n#define IOS ios::sync_with_stdio(0),cin.tie(0)\nusing namespace std;\nint n,m,A[N],B[N];\n\nsigned main(){\n    IOS;\n    memset(A,0,sizeof(A));\n    cin>>n>>m;\n    while(m--){\n        int x,y,w;cin>>x>>y>>w;\n        A[x] += w;\n        A[y+1] -= w;\n    }\n    for(int i=1;i<=n;i++)cin>>B[i];\n    for(int i=1;i<=n;i++)A[i] = A[i] + A[i-1];\n    sort(A+1,A+n+1);\n    sort(B+1,B+n+1);\n    int ans = 0;\n    for(int i=1;i<=n;i++){\n        ans += A[i] * B[n-i+1];\n    }\n    cout<<ans<<endl;\n}\n```\n> BY peienwu\n\n### 線段樹作法\n\n![](https://i.imgur.com/hePctby.png)\n\n很奇怪，最近兩次的APCS第三題都有人想要砸資結，特別是線段樹，可能有些人特別偏愛線段樹吧！\n\n#### 題解\n\n線段樹最原本的應該是區間詢問、單點修改，如果要區間修改的話就會用到[懶標](https://peienwu.com/2021/08/05/Segment%20Tree/)，所以實作上相對上比較複雜一點。這一題用線段樹的目的是區間加值，加值完過後的排序以及Greedy跟差分的作法是一樣的，用線段樹真的是多此兩舉（實作較複雜、較耗時）！\n\n當然，這一題比較特別只有最後一起做單點查詢，因此不用懶標，最侯直接計算一路去經過的答案也行！下面的程式碼就是把完全包含區間的節點加值，不用使用到懶標，最後一次查詢。\n\n#### 時間複雜度\n\n區間加值 $O(m\\log n)$，n個點的詢問 $O(n\\log n)$，排序 $O(n\\log n)$\n\n總時間複雜度：$O((n+m)\\log n)$\n\n#### AC程式碼\n\n```cpp=\n#include <bits/stdc++.h>\n#define int long long\n#define N 200005\n#define IOS ios::sync_with_stdio(0),cin.tie(0)\nusing namespace std;\nint n,m,t,A[N],B[N],ans = 0;\n\nstruct node{\n    int val = 0,sz;\n}seg[4*N];\n\nvoid build(int id,int l,int r){\n    seg[id].sz = r - l;\n    if(r - l <= 1)return;\n    int mid = (l + r) / 2;\n    build(id*2,l,mid);\n    build(id*2+1,mid,r);\n}\nvoid modify(int id,int l,int r,int ql,int qr,int val){\n    if(r <= l || r <= ql || l >= qr)return;\n    if(ql <= l && qr >= r){\n        seg[id].val += val;\n        return;\n    }\n    int mid = (l + r) / 2;\n    modify(id*2,l,mid,ql,qr,val);\n    modify(id*2+1,mid,r,ql,qr,val);\n}\nvoid query(int id,int l,int r,int val){\n    if(r <= l)return;\n    ans += seg[id].val;\n    if(r - l == 1)return;\n    int mid = (l + r) / 2;\n    if(val < mid)return query(id*2,l,mid,val);\n    else return query(id*2+1,mid,r,val);\n}\n\nsigned main(){\n    IOS;\n    cin>>n>>m;\n    build(1,1,n+1);\n    while(m--){\n        int x,y,w;cin>>x>>y>>w;\n        y++;\n        modify(1,1,n+1,x,y,w);\n    }\n    for(int i=1;i<=n;i++){\n        ans = 0;query(1,1,n+1,i);\n        A[i] = ans;\n    }\n    for(int i=1;i<=n;i++)cin>>B[i];\n    \n    sort(A+1,A + n + 1);\n    sort(B+1,B + n + 1);\n    int ans = 0;\n    for(int i=1;i<=n;i++)ans += A[i] * B[n-i+1];\n    cout<<ans<<endl;\n}\n```\n\n\n\n## P4 真假子圖\n\n[題目連結](https://zerojudge.tw/ShowProblem?problemid=g598)\n\n### 二分搜尋+DFS作法\n\n#### 題解\n\n一開始看到這題，應該很難通靈出二分搜這個作法（我覺得光把題目看懂就有點難度了）。這題有一個條件要特別注意：\n\n> 保證若調查員的 k 個 pair 的結果和組長存留的 m 個 pair 不會產生矛盾, 則保證調查員的資料一定和原本 A, B 分組吻合\n> \n這一題每一個觀察員並可看成不是獨立的（假如一個觀察員不產生矛盾，則他回傳的那一些邊都會被沿用），所以題目 $p$ 筆詢問可以聯集一起處理。\n\n將情報員當成點，合作關係當成邊，那麼合法的圖就會有兩個點集，點集中的點互不相鄰，也就是二分圖。\n\n二分搜第一個使得圖變得不二分的人，把它消失，**最多重複3次**就做完了。\n\n{% note info %}\n**為什麼可以二分搜？**\n二分搜是用來找一串01字串的分界點，並且必須具有單調性才能二分搜。這一題之所以會有單調性是因為，當我查詢觀察員$P_i$的回傳資料是否正確時，會將前面 $1$ 到 $i-1$ 的觀察員回傳的所有邊納入考慮。\n\n假設有一個觀察員 $P_j(1\\le j < i)$ 回傳的資料是錯誤的，這些邊會導致整張圖變成非二分圖，對於 $j$ 後面的所有點來說，都是非二分圖。這樣就有了以 $j$ 為分界點的單調性，即可二分搜。\n\n{% endnote %}\n\n二分圖判斷可以用 DFS 做，DFS 的時候把每個點塗上顏色，如果相鄰的點跟自己顏色一樣就表示這不是一張二分圖。\n\n#### 時間複雜度\n\n$O((n + m + pk)\\log p)$\n\n#### AC程式碼\n\n```cpp=\n#include <bits/stdc++.h>\n#define pb push_back\n#define mid (l + r) / 2\nusing namespace std;\nstruct e{\n    int u, v;\n};\nint n;\narray<bool, 10004> WA;          //不可行的觀察員編號\narray<int, 20004> vis;          //DFS是否走訪、二分圖顏色\narray<vector<e>, 10004> E;      //每一個觀察員的回傳邊\narray<vector<int>, 20004> G;    //存進行DFS的圖\n\nbool dfs(int u, int t){         //用DFS塗色、判斷二分圖\n    if(vis[u]) return 1;\n    bool ans = 1;\n    vis[u] = t;\n    for(int v : G[u]){\n        if(vis[v] == t) return 0;\n        ans &= dfs(v, 3 - t);\n    }\n    return ans;\n}\n\nbool check(int p){               //檢查第p個觀察員回傳是否正確\n    bool ans = 1;\n    for(int i = 0; i < n; i++){\n        G[i].clear();\n        vis[i] = 0;\n    }\n    for(int i = 0; i <= p; i++){\n        for(auto [u, v] : E[i]){ //將觀察員的邊推入G\n            G[u].pb(v);\n            G[v].pb(u);\n        }\n    }\n    for(int i = 0; i < n; i++){\n        ans &= dfs(i, 1);        //將每一個連通塊\n    }\n    return ans;\n}\nvoid BS(int l, int r){           //二分搜觀察員\n    if(check(r)) return;         //當邊的連集不會讓圖有問題，則回傳\n    while(l != r){\n        if(check(mid)) l = mid + 1;\n        else r = mid;\n    }\n    WA[l] = 1;\n    E[l].clear();                //剔除一錯誤觀察員\n}\nsigned main(){\n    int m, p, k, a, b;\n    cin >> n >> m;\n    while(m--){\n        cin >> a >> b;\n        E[0].pb({a, b});\n    }\n    cin >> p >> k;\n    for(int i = 1; i <= p; i++){\n        for(int j = 0; j < k; j++){\n            cin >> a >> b;\n            E[i].pb({a, b});\n        }\n    }\n    for(int i = 0; i < 3; i++){     //至多三個觀察員\n        BS(0, p);\n    }\n    for(int i = 1; i <= p; i++){\n        if(WA[i]) cout << i << \"\\n\";\n    }\n    return 0;\n}\n```\n> BY thanksone\n\n### DSU作法\n\n> Idea From Kennyfs\n\n#### 題解\n\n這一題的題目限制有說最多3個錯誤的情報員，因此我們可以用上面二分搜的方式做三次找到答案。如果題目**不限制錯誤調查員的數量**，也就是用二分搜時間會超時，但是用DSU可以在線性時間內完成！\n\nDSU的目的在處理集合問題，根據下面這個關鍵條件：\n\n> 保證若調查員的 k 個 pair 的結果和組長存留的 m 個 pair 不會產生矛盾, 則保證調查員的資料一定和原本 A, B 分組吻合\n\n我們只要對每一筆詢問看會不會與組長手中的pair矛盾即可。如果每一次都做DFS，會發現時間複雜度是 $O(pn)$，必然超時。\n\nDSU的想法是，我們將組長手中的圖中上每一個連通塊都分別塗上兩種顏色（必為二分圖，因此將兩邊各塗上不同顏色）。接著，把每個顏色當作初始的並查集中的集合，將每一筆觀察員回傳的邊的兩端指向的集合合併起來，過程中如果發生邊的兩端同屬一個集合，表示這是一個錯誤的觀察員。做完每一個觀察員之後，把所有變更過的還原成初始狀態（組長手中的圖）即可。\n\n{% note success %}\n**舉例**\n> 8 5\n> 0 2 1 3 1 2 4 6 5 6\n> 1 2 \n> 1 4 0 6\n\n整個過程就是下面這張GIF：\n![](https://i.imgur.com/gLpSD6p.gif)\n\n步驟：\n1. 利用DFS為組長手中的圖上色，每一個連通塊兩色（以編號1,2,3...）\n2. 將每一個顏色當作並查集元素\n3. 觀察員輸入的邊兩端 $(u,v)$非同色，表示不發生矛盾，則將u所在集合與v所在集合的對方（連通塊兩色的另一色）合併\n4. 重複 步驟3 共k次，如果發生$(u,v)$為同一色，則觀察員錯誤。\n{% endnote %}\n\n\n#### 時間複雜度\n\n$O(n + pk\\alpha)$\n\n#### AC程式碼\n\n```cpp=\n#include <bits/stdc++.h>\n#define IOS ios::sync_with_stdio(0),cin.tie(0)\n#define int long long\n#define N 20005\n#define M 10005\nusing namespace std;\nint n,m,p,k;\nint color[N],boss[N],num[N];\nbool WA[M],f;\nint other(int s){return (s%2)?s+1:s-1;} //other為同一連通塊另外一種顏色\nvector<int> edge[N],change;\n\nvoid init(){                            //初始化\n    memset(color,0,sizeof(color));\n    memset(WA,0,sizeof(WA));\n}\nvoid dfs(int id,int col){           //對所有點上色\n    color[id] = col;\n    for(auto i:edge[id]){\n        if(!color[i])dfs(i,other(col));\n    }\n}\nint find_boss(int id){              //尋找祖先、及路徑壓縮\n    if(boss[id] == id)return id;\n    change.push_back(id);\n    return boss[id] = find_boss(boss[id]);\n}\n\nsigned main(){\n    IOS;\n    init();\n    cin>>n>>m;\n    while(m--){\n        int x,y;cin>>x>>y;\n        edge[x].push_back(y);\n        edge[y].push_back(x);\n    }\n    int now = 1;\n    for(int i=0;i<n;i++){           //對所有點上色\n        if(!color[i]){\n            dfs(i,now);now += 2;\n        }\n    }\n    for(int i=1;i<=now;i++){boss[i] = i;num[i] = 1;}\n    cin>>p>>k;\n    for(int i=1;i<=p;i++){\n        change.clear();                                  //儲存待更改的點集f = 0;\n        for(int j=0;j<k;j++){\n            int x,y;cin>>x>>y;\n            if(f)continue;\n            x = color[x],y = color[y];                   //尋找邊兩端點的顏色所處的集合\n            int bx =  find_boss(x),by = find_boss(y);\n            int ox = find_boss(other(y)),oy = find_boss(other(x));\n            if(bx == by){WA[i] = 1;f = 1;continue;}     //位於同一集合，此觀察員是錯的\n            //以下是啟發式合併（小的集合並到大的集合）\n            if(num[bx] < num[ox]){\n                boss[bx] = ox;num[ox] += num[bx];\n                change.push_back(bx);\n            }\n            else{\n                boss[ox] = bx;num[bx] += num[ox];\n                change.push_back(ox);\n            }\n            if(num[by] < num[oy]){\n                boss[by] = oy;num[oy] += num[by];\n                change.push_back(by);\n            }\n            else{\n                boss[oy] = by;num[by] += num[oy];\n                change.push_back(oy);\n            }\n        }\n        for(auto i : change){boss[i] = i;num[i] = 1;}   //觀察員的邊結束，看完後復原\n    }\n    for(int i=1;i<=p;i++)if(WA[i])cout<<i<<endl;        //輸出最後錯誤觀察員答案\n}\n```\n> BY peienwu\n","source":"_posts/APCS 2021.11.md","raw":"---\ntitle: APCS 2021.11\ndate: 2021-11-7\ntags: \n    - APCS\n    - 競賽筆記\ncategories: APCS檢定\nmathjax: true\n---\n\n## P1 修補圍籬\n[題目連結](https://zerojudge.tw/ShowProblem?problemid=g595)\n\n### 題解\n\n如果在兩端就直接取旁邊的高度，否則取跟左右邊高度的最小值。\n\n<!--more-->\n\n### 時間複雜度\n$O(n)$\n### AC程式碼\n\n```cpp=\n#include <bits/stdc++.h>\n#define int long long\n#define N 105\n#define IOS ios::sync_with_stdio(0),cin.tie(0)\nusing namespace std;\nint n,A[N];\n\nsigned main(){\n    IOS;\n    cin>>n;\n    for(int i=0;i<n;i++)cin>>A[i];\n    int ans = 0;\n    if(A[0] == 0)ans += A[1];\n    if(A[n-1] == 0)ans += A[n-2];\n    for(int i=1;i<n-1;i++){\n        if(A[i] == 0)ans += min(A[i-1],A[i+1]);\n    }\n    cout<<ans<<endl;\n}\n```\n> BY peienwu\n\n## P2 動線安排(魔王題)\n\n[題目連結](https://zerojudge.tw/ShowProblem?problemid=g596)\n\n### 題解\n把線分成橫的跟直的就可以好好處理交叉了!\n### 時間複雜度\n$O(h(n + m))$\n### AC程式碼\n\n```cpp=\n#include <bits/stdc++.h>\nusing namespace std;\nint n, m, cnt = 0, ans = 0;\narray<array<int, 104>, 104> R, C, I;\nvoid add(int r, int c){\n    bool ok;\n    I[r][c] = 1;\n    cnt++;\n    if(C[r][c] || R[r][c]) cnt--;\n    C[r][c] = R[r][c] = 0;\n    ok = 0;     //直下情況\n    for(int i = r + 1; i < n; i++){\n        if(I[i][c]) ok = 1;\n    }\n    if(ok){\n        for(int i = r + 1; i < n; i++){\n            if(I[i][c] || R[i][c]) break;\n            R[i][c]++;\n            cnt += C[i][c] == 0;\n        }\n    }\n    ok = 0;     //直上情況\n    for(int i = r - 1; i >= 0; i--){\n        if(I[i][c]) ok = 1;\n    }\n    if(ok){\n        for(int i = r - 1; i >= 0; i--){\n            if(I[i][c] || R[i][c]) break;\n            R[i][c]++;\n            cnt += C[i][c] == 0;\n        }\n    }\n    ok = 0;     //橫右情況\n    for(int i = c + 1; i < m; i++){\n        if(I[r][i]) ok = 1;\n    }\n    if(ok){\n        for(int i = c + 1; i < m; i++){\n            if(I[r][i] || C[r][i]) break;\n            C[r][i]++;\n            cnt += R[r][i] == 0;\n        }\n    }\n    ok = 0;     //橫左情況\n    for(int i = c - 1; i >= 0; i--){\n        if(I[r][i]) ok = 1;\n    }\n    if(ok){\n        for(int i = c - 1; i >= 0; i--){\n            if(I[r][i] || C[r][i]) break;\n            C[r][i]++;\n            cnt += R[r][i] == 0;\n        }\n    }\n}\nvoid pull(int r, int c){\n    I[r][c] = 0;\n    cnt--;\n    for(int i = r + 1; i < n; i++){     //直下情況\n        if(!R[i][c]) break;\n        R[i][c]--;\n        cnt -= C[i][c] == 0;\n    }\n    for(int i = r - 1; i >= 0; i--){    //直上情況\n        if(!R[i][c]) break;\n        R[i][c]--;\n        cnt -= C[i][c] == 0;\n    }\n    for(int i = c + 1; i < m; i++){     //橫右情況\n        if(!C[r][i]) break;\n        C[r][i]--;\n        cnt -= R[r][i] == 0;\n    }\n    for(int i = c - 1; i >= 0; i--){    //橫左情況\n        if(!C[r][i]) break;\n        C[r][i]--;\n        cnt -= R[r][i] == 0;\n    }\n}\nsigned main(){\n    int h, r, c, t;\n    cin >> n >> m >> h;\n    while(h--){\n        cin >> r >> c >> t;\n        if(t){\n            pull(r, c);\n        }else{\n            add(r, c);\n        }\n        ans = max(ans, cnt);\n    }\n    cout << ans << \"\\n\" << cnt;\n    return 0;\n}\n```\n> BY thanksone\n\n## P3 生產線\n\n[題目連結](https://zerojudge.tw/ShowProblem?problemid=g597)\n\n### 差分作法\n\n#### 題解\n用差分的想法加值，再用前綴還原，最後再排序。最後利用Greedy的想法，將每一項最小的工作量乘上最大的時間，總和即為答案。\n\n{% note success %}\n**差分**\n\n差分是前綴和的逆運算，也就是說，把兩項的差算出來就是差分。定義如下：\n$$b_i = \\begin{cases}a_i-a_{i-1}, &\\text{if }i\\gt 1 \\\\a_1, & \\text{if } i = 1\\end{cases}$$\n\n差分的使用時機是區間加值，一個區間內的數字都加上一個定值，這時候就可以使用到差分的技巧。使用方式如下，當我要在區間 $[l,r]$ 的每一個數字都加上一個值$v$，以下步驟：\n1. 定義一個新的陣列 $b_i$ 表示每一項差分\n2. 設 $b[l] =  b[l] + v,b[r+1] = b[r+1] - v$\n3. 將差分的每一項加上前一項（做前綴和 $b[i] = b[i]+b[i-1]$），即為原數列\n\n第二步驟可以重複好幾次做，這樣複雜度從原本的$O(n)$就變成了$O(1)$了！\n{% endnote %}\n\n#### 時間複雜度\n差分：$O(m)$ 、排序 $O(n\\log n)$\n\n總時間複雜度：$O(n\\log n + m)$\n\n#### AC程式碼\n\n```cpp=\n#include <bits/stdc++.h>\n#define int long long\n#define N 200005\n#define IOS ios::sync_with_stdio(0),cin.tie(0)\nusing namespace std;\nint n,m,A[N],B[N];\n\nsigned main(){\n    IOS;\n    memset(A,0,sizeof(A));\n    cin>>n>>m;\n    while(m--){\n        int x,y,w;cin>>x>>y>>w;\n        A[x] += w;\n        A[y+1] -= w;\n    }\n    for(int i=1;i<=n;i++)cin>>B[i];\n    for(int i=1;i<=n;i++)A[i] = A[i] + A[i-1];\n    sort(A+1,A+n+1);\n    sort(B+1,B+n+1);\n    int ans = 0;\n    for(int i=1;i<=n;i++){\n        ans += A[i] * B[n-i+1];\n    }\n    cout<<ans<<endl;\n}\n```\n> BY peienwu\n\n### 線段樹作法\n\n![](https://i.imgur.com/hePctby.png)\n\n很奇怪，最近兩次的APCS第三題都有人想要砸資結，特別是線段樹，可能有些人特別偏愛線段樹吧！\n\n#### 題解\n\n線段樹最原本的應該是區間詢問、單點修改，如果要區間修改的話就會用到[懶標](https://peienwu.com/2021/08/05/Segment%20Tree/)，所以實作上相對上比較複雜一點。這一題用線段樹的目的是區間加值，加值完過後的排序以及Greedy跟差分的作法是一樣的，用線段樹真的是多此兩舉（實作較複雜、較耗時）！\n\n當然，這一題比較特別只有最後一起做單點查詢，因此不用懶標，最侯直接計算一路去經過的答案也行！下面的程式碼就是把完全包含區間的節點加值，不用使用到懶標，最後一次查詢。\n\n#### 時間複雜度\n\n區間加值 $O(m\\log n)$，n個點的詢問 $O(n\\log n)$，排序 $O(n\\log n)$\n\n總時間複雜度：$O((n+m)\\log n)$\n\n#### AC程式碼\n\n```cpp=\n#include <bits/stdc++.h>\n#define int long long\n#define N 200005\n#define IOS ios::sync_with_stdio(0),cin.tie(0)\nusing namespace std;\nint n,m,t,A[N],B[N],ans = 0;\n\nstruct node{\n    int val = 0,sz;\n}seg[4*N];\n\nvoid build(int id,int l,int r){\n    seg[id].sz = r - l;\n    if(r - l <= 1)return;\n    int mid = (l + r) / 2;\n    build(id*2,l,mid);\n    build(id*2+1,mid,r);\n}\nvoid modify(int id,int l,int r,int ql,int qr,int val){\n    if(r <= l || r <= ql || l >= qr)return;\n    if(ql <= l && qr >= r){\n        seg[id].val += val;\n        return;\n    }\n    int mid = (l + r) / 2;\n    modify(id*2,l,mid,ql,qr,val);\n    modify(id*2+1,mid,r,ql,qr,val);\n}\nvoid query(int id,int l,int r,int val){\n    if(r <= l)return;\n    ans += seg[id].val;\n    if(r - l == 1)return;\n    int mid = (l + r) / 2;\n    if(val < mid)return query(id*2,l,mid,val);\n    else return query(id*2+1,mid,r,val);\n}\n\nsigned main(){\n    IOS;\n    cin>>n>>m;\n    build(1,1,n+1);\n    while(m--){\n        int x,y,w;cin>>x>>y>>w;\n        y++;\n        modify(1,1,n+1,x,y,w);\n    }\n    for(int i=1;i<=n;i++){\n        ans = 0;query(1,1,n+1,i);\n        A[i] = ans;\n    }\n    for(int i=1;i<=n;i++)cin>>B[i];\n    \n    sort(A+1,A + n + 1);\n    sort(B+1,B + n + 1);\n    int ans = 0;\n    for(int i=1;i<=n;i++)ans += A[i] * B[n-i+1];\n    cout<<ans<<endl;\n}\n```\n\n\n\n## P4 真假子圖\n\n[題目連結](https://zerojudge.tw/ShowProblem?problemid=g598)\n\n### 二分搜尋+DFS作法\n\n#### 題解\n\n一開始看到這題，應該很難通靈出二分搜這個作法（我覺得光把題目看懂就有點難度了）。這題有一個條件要特別注意：\n\n> 保證若調查員的 k 個 pair 的結果和組長存留的 m 個 pair 不會產生矛盾, 則保證調查員的資料一定和原本 A, B 分組吻合\n> \n這一題每一個觀察員並可看成不是獨立的（假如一個觀察員不產生矛盾，則他回傳的那一些邊都會被沿用），所以題目 $p$ 筆詢問可以聯集一起處理。\n\n將情報員當成點，合作關係當成邊，那麼合法的圖就會有兩個點集，點集中的點互不相鄰，也就是二分圖。\n\n二分搜第一個使得圖變得不二分的人，把它消失，**最多重複3次**就做完了。\n\n{% note info %}\n**為什麼可以二分搜？**\n二分搜是用來找一串01字串的分界點，並且必須具有單調性才能二分搜。這一題之所以會有單調性是因為，當我查詢觀察員$P_i$的回傳資料是否正確時，會將前面 $1$ 到 $i-1$ 的觀察員回傳的所有邊納入考慮。\n\n假設有一個觀察員 $P_j(1\\le j < i)$ 回傳的資料是錯誤的，這些邊會導致整張圖變成非二分圖，對於 $j$ 後面的所有點來說，都是非二分圖。這樣就有了以 $j$ 為分界點的單調性，即可二分搜。\n\n{% endnote %}\n\n二分圖判斷可以用 DFS 做，DFS 的時候把每個點塗上顏色，如果相鄰的點跟自己顏色一樣就表示這不是一張二分圖。\n\n#### 時間複雜度\n\n$O((n + m + pk)\\log p)$\n\n#### AC程式碼\n\n```cpp=\n#include <bits/stdc++.h>\n#define pb push_back\n#define mid (l + r) / 2\nusing namespace std;\nstruct e{\n    int u, v;\n};\nint n;\narray<bool, 10004> WA;          //不可行的觀察員編號\narray<int, 20004> vis;          //DFS是否走訪、二分圖顏色\narray<vector<e>, 10004> E;      //每一個觀察員的回傳邊\narray<vector<int>, 20004> G;    //存進行DFS的圖\n\nbool dfs(int u, int t){         //用DFS塗色、判斷二分圖\n    if(vis[u]) return 1;\n    bool ans = 1;\n    vis[u] = t;\n    for(int v : G[u]){\n        if(vis[v] == t) return 0;\n        ans &= dfs(v, 3 - t);\n    }\n    return ans;\n}\n\nbool check(int p){               //檢查第p個觀察員回傳是否正確\n    bool ans = 1;\n    for(int i = 0; i < n; i++){\n        G[i].clear();\n        vis[i] = 0;\n    }\n    for(int i = 0; i <= p; i++){\n        for(auto [u, v] : E[i]){ //將觀察員的邊推入G\n            G[u].pb(v);\n            G[v].pb(u);\n        }\n    }\n    for(int i = 0; i < n; i++){\n        ans &= dfs(i, 1);        //將每一個連通塊\n    }\n    return ans;\n}\nvoid BS(int l, int r){           //二分搜觀察員\n    if(check(r)) return;         //當邊的連集不會讓圖有問題，則回傳\n    while(l != r){\n        if(check(mid)) l = mid + 1;\n        else r = mid;\n    }\n    WA[l] = 1;\n    E[l].clear();                //剔除一錯誤觀察員\n}\nsigned main(){\n    int m, p, k, a, b;\n    cin >> n >> m;\n    while(m--){\n        cin >> a >> b;\n        E[0].pb({a, b});\n    }\n    cin >> p >> k;\n    for(int i = 1; i <= p; i++){\n        for(int j = 0; j < k; j++){\n            cin >> a >> b;\n            E[i].pb({a, b});\n        }\n    }\n    for(int i = 0; i < 3; i++){     //至多三個觀察員\n        BS(0, p);\n    }\n    for(int i = 1; i <= p; i++){\n        if(WA[i]) cout << i << \"\\n\";\n    }\n    return 0;\n}\n```\n> BY thanksone\n\n### DSU作法\n\n> Idea From Kennyfs\n\n#### 題解\n\n這一題的題目限制有說最多3個錯誤的情報員，因此我們可以用上面二分搜的方式做三次找到答案。如果題目**不限制錯誤調查員的數量**，也就是用二分搜時間會超時，但是用DSU可以在線性時間內完成！\n\nDSU的目的在處理集合問題，根據下面這個關鍵條件：\n\n> 保證若調查員的 k 個 pair 的結果和組長存留的 m 個 pair 不會產生矛盾, 則保證調查員的資料一定和原本 A, B 分組吻合\n\n我們只要對每一筆詢問看會不會與組長手中的pair矛盾即可。如果每一次都做DFS，會發現時間複雜度是 $O(pn)$，必然超時。\n\nDSU的想法是，我們將組長手中的圖中上每一個連通塊都分別塗上兩種顏色（必為二分圖，因此將兩邊各塗上不同顏色）。接著，把每個顏色當作初始的並查集中的集合，將每一筆觀察員回傳的邊的兩端指向的集合合併起來，過程中如果發生邊的兩端同屬一個集合，表示這是一個錯誤的觀察員。做完每一個觀察員之後，把所有變更過的還原成初始狀態（組長手中的圖）即可。\n\n{% note success %}\n**舉例**\n> 8 5\n> 0 2 1 3 1 2 4 6 5 6\n> 1 2 \n> 1 4 0 6\n\n整個過程就是下面這張GIF：\n![](https://i.imgur.com/gLpSD6p.gif)\n\n步驟：\n1. 利用DFS為組長手中的圖上色，每一個連通塊兩色（以編號1,2,3...）\n2. 將每一個顏色當作並查集元素\n3. 觀察員輸入的邊兩端 $(u,v)$非同色，表示不發生矛盾，則將u所在集合與v所在集合的對方（連通塊兩色的另一色）合併\n4. 重複 步驟3 共k次，如果發生$(u,v)$為同一色，則觀察員錯誤。\n{% endnote %}\n\n\n#### 時間複雜度\n\n$O(n + pk\\alpha)$\n\n#### AC程式碼\n\n```cpp=\n#include <bits/stdc++.h>\n#define IOS ios::sync_with_stdio(0),cin.tie(0)\n#define int long long\n#define N 20005\n#define M 10005\nusing namespace std;\nint n,m,p,k;\nint color[N],boss[N],num[N];\nbool WA[M],f;\nint other(int s){return (s%2)?s+1:s-1;} //other為同一連通塊另外一種顏色\nvector<int> edge[N],change;\n\nvoid init(){                            //初始化\n    memset(color,0,sizeof(color));\n    memset(WA,0,sizeof(WA));\n}\nvoid dfs(int id,int col){           //對所有點上色\n    color[id] = col;\n    for(auto i:edge[id]){\n        if(!color[i])dfs(i,other(col));\n    }\n}\nint find_boss(int id){              //尋找祖先、及路徑壓縮\n    if(boss[id] == id)return id;\n    change.push_back(id);\n    return boss[id] = find_boss(boss[id]);\n}\n\nsigned main(){\n    IOS;\n    init();\n    cin>>n>>m;\n    while(m--){\n        int x,y;cin>>x>>y;\n        edge[x].push_back(y);\n        edge[y].push_back(x);\n    }\n    int now = 1;\n    for(int i=0;i<n;i++){           //對所有點上色\n        if(!color[i]){\n            dfs(i,now);now += 2;\n        }\n    }\n    for(int i=1;i<=now;i++){boss[i] = i;num[i] = 1;}\n    cin>>p>>k;\n    for(int i=1;i<=p;i++){\n        change.clear();                                  //儲存待更改的點集f = 0;\n        for(int j=0;j<k;j++){\n            int x,y;cin>>x>>y;\n            if(f)continue;\n            x = color[x],y = color[y];                   //尋找邊兩端點的顏色所處的集合\n            int bx =  find_boss(x),by = find_boss(y);\n            int ox = find_boss(other(y)),oy = find_boss(other(x));\n            if(bx == by){WA[i] = 1;f = 1;continue;}     //位於同一集合，此觀察員是錯的\n            //以下是啟發式合併（小的集合並到大的集合）\n            if(num[bx] < num[ox]){\n                boss[bx] = ox;num[ox] += num[bx];\n                change.push_back(bx);\n            }\n            else{\n                boss[ox] = bx;num[bx] += num[ox];\n                change.push_back(ox);\n            }\n            if(num[by] < num[oy]){\n                boss[by] = oy;num[oy] += num[by];\n                change.push_back(by);\n            }\n            else{\n                boss[oy] = by;num[by] += num[oy];\n                change.push_back(oy);\n            }\n        }\n        for(auto i : change){boss[i] = i;num[i] = 1;}   //觀察員的邊結束，看完後復原\n    }\n    for(int i=1;i<=p;i++)if(WA[i])cout<<i<<endl;        //輸出最後錯誤觀察員答案\n}\n```\n> BY peienwu\n","slug":"APCS 2021.11","published":1,"updated":"2021-11-13T14:03:28.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvyspmgk0007muyx74se8ieo","content":"<h2 id=\"P1-修補圍籬\"><a href=\"#P1-修補圍籬\" class=\"headerlink\" title=\"P1 修補圍籬\"></a>P1 修補圍籬</h2><p><a href=\"https://zerojudge.tw/ShowProblem?problemid=g595\">題目連結</a></p>\n<h3 id=\"題解\"><a href=\"#題解\" class=\"headerlink\" title=\"題解\"></a>題解</h3><p>如果在兩端就直接取旁邊的高度，否則取跟左右邊高度的最小值。</p>\n<span id=\"more\"></span>\n<h3 id=\"時間複雜度\"><a href=\"#時間複雜度\" class=\"headerlink\" title=\"時間複雜度\"></a>時間複雜度</h3><p>$O(n)$</p>\n<h3 id=\"AC程式碼\"><a href=\"#AC程式碼\" class=\"headerlink\" title=\"AC程式碼\"></a>AC程式碼</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 105</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IOS ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,A[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    IOS;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)cin&gt;&gt;A[i];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A[<span class=\"number\">0</span>] == <span class=\"number\">0</span>)ans += A[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A[n<span class=\"number\">-1</span>] == <span class=\"number\">0</span>)ans += A[n<span class=\"number\">-2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[i] == <span class=\"number\">0</span>)ans += <span class=\"built_in\">min</span>(A[i<span class=\"number\">-1</span>],A[i+<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>BY peienwu</p>\n</blockquote>\n<h2 id=\"P2-動線安排-魔王題\"><a href=\"#P2-動線安排-魔王題\" class=\"headerlink\" title=\"P2 動線安排(魔王題)\"></a>P2 動線安排(魔王題)</h2><p><a href=\"https://zerojudge.tw/ShowProblem?problemid=g596\">題目連結</a></p>\n<h3 id=\"題解-1\"><a href=\"#題解-1\" class=\"headerlink\" title=\"題解\"></a>題解</h3><p>把線分成橫的跟直的就可以好好處理交叉了!</p>\n<h3 id=\"時間複雜度-1\"><a href=\"#時間複雜度-1\" class=\"headerlink\" title=\"時間複雜度\"></a>時間複雜度</h3><p>$O(h(n + m))$</p>\n<h3 id=\"AC程式碼-1\"><a href=\"#AC程式碼-1\" class=\"headerlink\" title=\"AC程式碼\"></a>AC程式碼</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, cnt = <span class=\"number\">0</span>, ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">array&lt;array&lt;<span class=\"keyword\">int</span>, 104&gt;, 104&gt; R, C, I;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> ok;</span><br><span class=\"line\">    I[r][c] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    cnt++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(C[r][c] || R[r][c]) cnt--;</span><br><span class=\"line\">    C[r][c] = R[r][c] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ok = <span class=\"number\">0</span>;     <span class=\"comment\">//直下情況</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = r + <span class=\"number\">1</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(I[i][c]) ok = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ok)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = r + <span class=\"number\">1</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(I[i][c] || R[i][c]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            R[i][c]++;</span><br><span class=\"line\">            cnt += C[i][c] == <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ok = <span class=\"number\">0</span>;     <span class=\"comment\">//直上情況</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = r - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(I[i][c]) ok = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ok)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = r - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(I[i][c] || R[i][c]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            R[i][c]++;</span><br><span class=\"line\">            cnt += C[i][c] == <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ok = <span class=\"number\">0</span>;     <span class=\"comment\">//橫右情況</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = c + <span class=\"number\">1</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(I[r][i]) ok = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ok)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = c + <span class=\"number\">1</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(I[r][i] || C[r][i]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            C[r][i]++;</span><br><span class=\"line\">            cnt += R[r][i] == <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ok = <span class=\"number\">0</span>;     <span class=\"comment\">//橫左情況</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = c - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(I[r][i]) ok = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ok)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = c - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(I[r][i] || C[r][i]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            C[r][i]++;</span><br><span class=\"line\">            cnt += R[r][i] == <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pull</span><span class=\"params\">(<span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    I[r][c] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cnt--;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = r + <span class=\"number\">1</span>; i &lt; n; i++)&#123;     <span class=\"comment\">//直下情況</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!R[i][c]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        R[i][c]--;</span><br><span class=\"line\">        cnt -= C[i][c] == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = r - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;    <span class=\"comment\">//直上情況</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!R[i][c]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        R[i][c]--;</span><br><span class=\"line\">        cnt -= C[i][c] == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = c + <span class=\"number\">1</span>; i &lt; m; i++)&#123;     <span class=\"comment\">//橫右情況</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!C[r][i]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        C[r][i]--;</span><br><span class=\"line\">        cnt -= R[r][i] == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = c - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;    <span class=\"comment\">//橫左情況</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!C[r][i]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        C[r][i]--;</span><br><span class=\"line\">        cnt -= R[r][i] == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h, r, c, t;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; h;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(h--)&#123;</span><br><span class=\"line\">        cin &gt;&gt; r &gt;&gt; c &gt;&gt; t;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">pull</span>(r, c);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(r, c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans = <span class=\"built_in\">max</span>(ans, cnt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span> &lt;&lt; cnt;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>BY thanksone</p>\n</blockquote>\n<h2 id=\"P3-生產線\"><a href=\"#P3-生產線\" class=\"headerlink\" title=\"P3 生產線\"></a>P3 生產線</h2><p><a href=\"https://zerojudge.tw/ShowProblem?problemid=g597\">題目連結</a></p>\n<h3 id=\"差分作法\"><a href=\"#差分作法\" class=\"headerlink\" title=\"差分作法\"></a>差分作法</h3><h4 id=\"題解-2\"><a href=\"#題解-2\" class=\"headerlink\" title=\"題解\"></a>題解</h4><p>用差分的想法加值，再用前綴還原，最後再排序。最後利用Greedy的想法，將每一項最小的工作量乘上最大的時間，總和即為答案。</p>\n<div class=\"note success\">\n            <p><strong>差分</strong></p><p>差分是前綴和的逆運算，也就是說，把兩項的差算出來就是差分。定義如下：</p><script type=\"math/tex; mode=display\">b_i = \\begin{cases}a_i-a_{i-1}, &\\text{if }i\\gt 1 \\\\a_1, & \\text{if } i = 1\\end{cases}</script><p>差分的使用時機是區間加值，一個區間內的數字都加上一個定值，這時候就可以使用到差分的技巧。使用方式如下，當我要在區間 $[l,r]$ 的每一個數字都加上一個值$v$，以下步驟：</p><ol><li>定義一個新的陣列 $b_i$ 表示每一項差分</li><li>設 $b[l] =  b[l] + v,b[r+1] = b[r+1] - v$</li><li>將差分的每一項加上前一項（做前綴和 $b[i] = b[i]+b[i-1]$），即為原數列</li></ol><p>第二步驟可以重複好幾次做，這樣複雜度從原本的$O(n)$就變成了$O(1)$了！</p>\n          </div>\n<h4 id=\"時間複雜度-2\"><a href=\"#時間複雜度-2\" class=\"headerlink\" title=\"時間複雜度\"></a>時間複雜度</h4><p>差分：$O(m)$ 、排序 $O(n\\log n)$</p>\n<p>總時間複雜度：$O(n\\log n + m)$</p>\n<h4 id=\"AC程式碼-2\"><a href=\"#AC程式碼-2\" class=\"headerlink\" title=\"AC程式碼\"></a>AC程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 200005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IOS ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,A[N],B[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    IOS;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(A,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(A));</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x,y,w;cin&gt;&gt;x&gt;&gt;y&gt;&gt;w;</span><br><span class=\"line\">        A[x] += w;</span><br><span class=\"line\">        A[y+<span class=\"number\">1</span>] -= w;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)cin&gt;&gt;B[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)A[i] = A[i] + A[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(A+<span class=\"number\">1</span>,A+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(B+<span class=\"number\">1</span>,B+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        ans += A[i] * B[n-i+<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>BY peienwu</p>\n</blockquote>\n<h3 id=\"線段樹作法\"><a href=\"#線段樹作法\" class=\"headerlink\" title=\"線段樹作法\"></a>線段樹作法</h3><p><img src=\"https://i.imgur.com/hePctby.png\" alt=\"\"></p>\n<p>很奇怪，最近兩次的APCS第三題都有人想要砸資結，特別是線段樹，可能有些人特別偏愛線段樹吧！</p>\n<h4 id=\"題解-3\"><a href=\"#題解-3\" class=\"headerlink\" title=\"題解\"></a>題解</h4><p>線段樹最原本的應該是區間詢問、單點修改，如果要區間修改的話就會用到<a href=\"https://peienwu.com/2021/08/05/Segment%20Tree/\">懶標</a>，所以實作上相對上比較複雜一點。這一題用線段樹的目的是區間加值，加值完過後的排序以及Greedy跟差分的作法是一樣的，用線段樹真的是多此兩舉（實作較複雜、較耗時）！</p>\n<p>當然，這一題比較特別只有最後一起做單點查詢，因此不用懶標，最侯直接計算一路去經過的答案也行！下面的程式碼就是把完全包含區間的節點加值，不用使用到懶標，最後一次查詢。</p>\n<h4 id=\"時間複雜度-3\"><a href=\"#時間複雜度-3\" class=\"headerlink\" title=\"時間複雜度\"></a>時間複雜度</h4><p>區間加值 $O(m\\log n)$，n個點的詢問 $O(n\\log n)$，排序 $O(n\\log n)$</p>\n<p>總時間複雜度：$O((n+m)\\log n)$</p>\n<h4 id=\"AC程式碼-3\"><a href=\"#AC程式碼-3\" class=\"headerlink\" title=\"AC程式碼\"></a>AC程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 200005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IOS ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,t,A[N],B[N],ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>,sz;</span><br><span class=\"line\">&#125;seg[<span class=\"number\">4</span>*N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> id,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    seg[id].sz = r - l;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r - l &lt;= <span class=\"number\">1</span>)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(id*<span class=\"number\">2</span>,l,mid);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(id*<span class=\"number\">2</span>+<span class=\"number\">1</span>,mid,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"keyword\">int</span> id,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> ql,<span class=\"keyword\">int</span> qr,<span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= l || r &lt;= ql || l &gt;= qr)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ql &lt;= l &amp;&amp; qr &gt;= r)&#123;</span><br><span class=\"line\">        seg[id].val += val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">modify</span>(id*<span class=\"number\">2</span>,l,mid,ql,qr,val);</span><br><span class=\"line\">    <span class=\"built_in\">modify</span>(id*<span class=\"number\">2</span>+<span class=\"number\">1</span>,mid,r,ql,qr,val);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> id,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= l)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    ans += seg[id].val;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r - l == <span class=\"number\">1</span>)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(val &lt; mid)<span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(id*<span class=\"number\">2</span>,l,mid,val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(id*<span class=\"number\">2</span>+<span class=\"number\">1</span>,mid,r,val);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    IOS;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x,y,w;cin&gt;&gt;x&gt;&gt;y&gt;&gt;w;</span><br><span class=\"line\">        y++;</span><br><span class=\"line\">        <span class=\"built_in\">modify</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,x,y,w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        ans = <span class=\"number\">0</span>;<span class=\"built_in\">query</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,i);</span><br><span class=\"line\">        A[i] = ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)cin&gt;&gt;B[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(A+<span class=\"number\">1</span>,A + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(B+<span class=\"number\">1</span>,B + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)ans += A[i] * B[n-i+<span class=\"number\">1</span>];</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"P4-真假子圖\"><a href=\"#P4-真假子圖\" class=\"headerlink\" title=\"P4 真假子圖\"></a>P4 真假子圖</h2><p><a href=\"https://zerojudge.tw/ShowProblem?problemid=g598\">題目連結</a></p>\n<h3 id=\"二分搜尋-DFS作法\"><a href=\"#二分搜尋-DFS作法\" class=\"headerlink\" title=\"二分搜尋+DFS作法\"></a>二分搜尋+DFS作法</h3><h4 id=\"題解-4\"><a href=\"#題解-4\" class=\"headerlink\" title=\"題解\"></a>題解</h4><p>一開始看到這題，應該很難通靈出二分搜這個作法（我覺得光把題目看懂就有點難度了）。這題有一個條件要特別注意：</p>\n<blockquote>\n<p>保證若調查員的 k 個 pair 的結果和組長存留的 m 個 pair 不會產生矛盾, 則保證調查員的資料一定和原本 A, B 分組吻合</p>\n<p>這一題每一個觀察員並可看成不是獨立的（假如一個觀察員不產生矛盾，則他回傳的那一些邊都會被沿用），所以題目 $p$ 筆詢問可以聯集一起處理。</p>\n</blockquote>\n<p>將情報員當成點，合作關係當成邊，那麼合法的圖就會有兩個點集，點集中的點互不相鄰，也就是二分圖。</p>\n<p>二分搜第一個使得圖變得不二分的人，把它消失，<strong>最多重複3次</strong>就做完了。</p>\n<div class=\"note info\">\n            <p><strong>為什麼可以二分搜？</strong><br>二分搜是用來找一串01字串的分界點，並且必須具有單調性才能二分搜。這一題之所以會有單調性是因為，當我查詢觀察員$P_i$的回傳資料是否正確時，會將前面 $1$ 到 $i-1$ 的觀察員回傳的所有邊納入考慮。</p><p>假設有一個觀察員 $P_j(1\\le j &lt; i)$ 回傳的資料是錯誤的，這些邊會導致整張圖變成非二分圖，對於 $j$ 後面的所有點來說，都是非二分圖。這樣就有了以 $j$ 為分界點的單調性，即可二分搜。</p>\n          </div>\n<p>二分圖判斷可以用 DFS 做，DFS 的時候把每個點塗上顏色，如果相鄰的點跟自己顏色一樣就表示這不是一張二分圖。</p>\n<h4 id=\"時間複雜度-4\"><a href=\"#時間複雜度-4\" class=\"headerlink\" title=\"時間複雜度\"></a>時間複雜度</h4><p>$O((n + m + pk)\\log p)$</p>\n<h4 id=\"AC程式碼-4\"><a href=\"#AC程式碼-4\" class=\"headerlink\" title=\"AC程式碼\"></a>AC程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid (l + r) / 2</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">e</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\">array&lt;<span class=\"keyword\">bool</span>, 10004&gt; WA;          <span class=\"comment\">//不可行的觀察員編號</span></span><br><span class=\"line\">array&lt;<span class=\"keyword\">int</span>, 20004&gt; vis;          <span class=\"comment\">//DFS是否走訪、二分圖顏色</span></span><br><span class=\"line\">array&lt;vector&lt;e&gt;, 10004&gt; E;      <span class=\"comment\">//每一個觀察員的回傳邊</span></span><br><span class=\"line\">array&lt;vector&lt;<span class=\"keyword\">int</span>&gt;, 20004&gt; G;    <span class=\"comment\">//存進行DFS的圖</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> t)</span></span>&#123;         <span class=\"comment\">//用DFS塗色、判斷二分圖</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vis[u]) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">    vis[u] = t;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[v] == t) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        ans &amp;= <span class=\"built_in\">dfs</span>(v, <span class=\"number\">3</span> - t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;               <span class=\"comment\">//檢查第p個觀察員回傳是否正確</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        G[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        vis[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= p; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [u, v] : E[i])&#123; <span class=\"comment\">//將觀察員的邊推入G</span></span><br><span class=\"line\">            G[u].<span class=\"built_in\">pb</span>(v);</span><br><span class=\"line\">            G[v].<span class=\"built_in\">pb</span>(u);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        ans &amp;= <span class=\"built_in\">dfs</span>(i, <span class=\"number\">1</span>);        <span class=\"comment\">//將每一個連通塊</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BS</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;           <span class=\"comment\">//二分搜觀察員</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(r)) <span class=\"keyword\">return</span>;         <span class=\"comment\">//當邊的連集不會讓圖有問題，則回傳</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l != r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(mid)) l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> r = mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    WA[l] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    E[l].<span class=\"built_in\">clear</span>();                <span class=\"comment\">//剔除一錯誤觀察員</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m, p, k, a, b;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">        E[<span class=\"number\">0</span>].<span class=\"built_in\">pb</span>(&#123;a, b&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cin &gt;&gt; p &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= p; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; k; j++)&#123;</span><br><span class=\"line\">            cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">            E[i].<span class=\"built_in\">pb</span>(&#123;a, b&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)&#123;     <span class=\"comment\">//至多三個觀察員</span></span><br><span class=\"line\">        <span class=\"built_in\">BS</span>(<span class=\"number\">0</span>, p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= p; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(WA[i]) cout &lt;&lt; i &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>BY thanksone</p>\n</blockquote>\n<h3 id=\"DSU作法\"><a href=\"#DSU作法\" class=\"headerlink\" title=\"DSU作法\"></a>DSU作法</h3><blockquote>\n<p>Idea From Kennyfs</p>\n</blockquote>\n<h4 id=\"題解-5\"><a href=\"#題解-5\" class=\"headerlink\" title=\"題解\"></a>題解</h4><p>這一題的題目限制有說最多3個錯誤的情報員，因此我們可以用上面二分搜的方式做三次找到答案。如果題目<strong>不限制錯誤調查員的數量</strong>，也就是用二分搜時間會超時，但是用DSU可以在線性時間內完成！</p>\n<p>DSU的目的在處理集合問題，根據下面這個關鍵條件：</p>\n<blockquote>\n<p>保證若調查員的 k 個 pair 的結果和組長存留的 m 個 pair 不會產生矛盾, 則保證調查員的資料一定和原本 A, B 分組吻合</p>\n</blockquote>\n<p>我們只要對每一筆詢問看會不會與組長手中的pair矛盾即可。如果每一次都做DFS，會發現時間複雜度是 $O(pn)$，必然超時。</p>\n<p>DSU的想法是，我們將組長手中的圖中上每一個連通塊都分別塗上兩種顏色（必為二分圖，因此將兩邊各塗上不同顏色）。接著，把每個顏色當作初始的並查集中的集合，將每一筆觀察員回傳的邊的兩端指向的集合合併起來，過程中如果發生邊的兩端同屬一個集合，表示這是一個錯誤的觀察員。做完每一個觀察員之後，把所有變更過的還原成初始狀態（組長手中的圖）即可。</p>\n<div class=\"note success\">\n            <p><strong>舉例</strong></p><blockquote><p>8 5<br>0 2 1 3 1 2 4 6 5 6<br>1 2<br>1 4 0 6</p></blockquote><p>整個過程就是下面這張GIF：<br><img src=\"https://i.imgur.com/gLpSD6p.gif\" alt=\"\"></p><p>步驟：</p><ol><li>利用DFS為組長手中的圖上色，每一個連通塊兩色（以編號1,2,3…）</li><li>將每一個顏色當作並查集元素</li><li>觀察員輸入的邊兩端 $(u,v)$非同色，表示不發生矛盾，則將u所在集合與v所在集合的對方（連通塊兩色的另一色）合併</li><li>重複 步驟3 共k次，如果發生$(u,v)$為同一色，則觀察員錯誤。</li></ol>\n          </div>\n<h4 id=\"時間複雜度-5\"><a href=\"#時間複雜度-5\" class=\"headerlink\" title=\"時間複雜度\"></a>時間複雜度</h4><p>$O(n + pk\\alpha)$</p>\n<h4 id=\"AC程式碼-5\"><a href=\"#AC程式碼-5\" class=\"headerlink\" title=\"AC程式碼\"></a>AC程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IOS ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 20005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 10005</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,p,k;</span><br><span class=\"line\"><span class=\"keyword\">int</span> color[N],boss[N],num[N];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> WA[M],f;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">other</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span>&#123;<span class=\"keyword\">return</span> (s%<span class=\"number\">2</span>)?s+<span class=\"number\">1</span>:s<span class=\"number\">-1</span>;&#125; <span class=\"comment\">//other為同一連通塊另外一種顏色</span></span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; edge[N],change;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;                            <span class=\"comment\">//初始化</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(color,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(color));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(WA,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(WA));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> id,<span class=\"keyword\">int</span> col)</span></span>&#123;           <span class=\"comment\">//對所有點上色</span></span><br><span class=\"line\">    color[id] = col;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i:edge[id])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!color[i])<span class=\"built_in\">dfs</span>(i,<span class=\"built_in\">other</span>(col));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find_boss</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>&#123;              <span class=\"comment\">//尋找祖先、及路徑壓縮</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(boss[id] == id)<span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    change.<span class=\"built_in\">push_back</span>(id);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> boss[id] = <span class=\"built_in\">find_boss</span>(boss[id]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    IOS;</span><br><span class=\"line\">    <span class=\"built_in\">init</span>();</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x,y;cin&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">        edge[x].<span class=\"built_in\">push_back</span>(y);</span><br><span class=\"line\">        edge[y].<span class=\"built_in\">push_back</span>(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> now = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;           <span class=\"comment\">//對所有點上色</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!color[i])&#123;</span><br><span class=\"line\">            <span class=\"built_in\">dfs</span>(i,now);now += <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=now;i++)&#123;boss[i] = i;num[i] = <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">    cin&gt;&gt;p&gt;&gt;k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=p;i++)&#123;</span><br><span class=\"line\">        change.<span class=\"built_in\">clear</span>();                                  <span class=\"comment\">//儲存待更改的點集f = 0;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;k;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x,y;cin&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            x = color[x],y = color[y];                   <span class=\"comment\">//尋找邊兩端點的顏色所處的集合</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> bx =  <span class=\"built_in\">find_boss</span>(x),by = <span class=\"built_in\">find_boss</span>(y);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ox = <span class=\"built_in\">find_boss</span>(<span class=\"built_in\">other</span>(y)),oy = <span class=\"built_in\">find_boss</span>(<span class=\"built_in\">other</span>(x));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(bx == by)&#123;WA[i] = <span class=\"number\">1</span>;f = <span class=\"number\">1</span>;<span class=\"keyword\">continue</span>;&#125;     <span class=\"comment\">//位於同一集合，此觀察員是錯的</span></span><br><span class=\"line\">            <span class=\"comment\">//以下是啟發式合併（小的集合並到大的集合）</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(num[bx] &lt; num[ox])&#123;</span><br><span class=\"line\">                boss[bx] = ox;num[ox] += num[bx];</span><br><span class=\"line\">                change.<span class=\"built_in\">push_back</span>(bx);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                boss[ox] = bx;num[bx] += num[ox];</span><br><span class=\"line\">                change.<span class=\"built_in\">push_back</span>(ox);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(num[by] &lt; num[oy])&#123;</span><br><span class=\"line\">                boss[by] = oy;num[oy] += num[by];</span><br><span class=\"line\">                change.<span class=\"built_in\">push_back</span>(by);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                boss[oy] = by;num[by] += num[oy];</span><br><span class=\"line\">                change.<span class=\"built_in\">push_back</span>(oy);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : change)&#123;boss[i] = i;num[i] = <span class=\"number\">1</span>;&#125;   <span class=\"comment\">//觀察員的邊結束，看完後復原</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=p;i++)<span class=\"keyword\">if</span>(WA[i])cout&lt;&lt;i&lt;&lt;endl;        <span class=\"comment\">//輸出最後錯誤觀察員答案</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>BY peienwu</p>\n</blockquote>\n","site":{"data":{}},"length":9257,"excerpt":"<h2 id=\"P1-修補圍籬\"><a href=\"#P1-修補圍籬\" class=\"headerlink\" title=\"P1 修補圍籬\"></a>P1 修補圍籬</h2><p><a href=\"https://zerojudge.tw/ShowProblem?problemid=g595\">題目連結</a></p>\n<h3 id=\"題解\"><a href=\"#題解\" class=\"headerlink\" title=\"題解\"></a>題解</h3><p>如果在兩端就直接取旁邊的高度，否則取跟左右邊高度的最小值。</p>","more":"<h3 id=\"時間複雜度\"><a href=\"#時間複雜度\" class=\"headerlink\" title=\"時間複雜度\"></a>時間複雜度</h3><p>$O(n)$</p>\n<h3 id=\"AC程式碼\"><a href=\"#AC程式碼\" class=\"headerlink\" title=\"AC程式碼\"></a>AC程式碼</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 105</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IOS ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,A[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    IOS;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)cin&gt;&gt;A[i];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A[<span class=\"number\">0</span>] == <span class=\"number\">0</span>)ans += A[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A[n<span class=\"number\">-1</span>] == <span class=\"number\">0</span>)ans += A[n<span class=\"number\">-2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[i] == <span class=\"number\">0</span>)ans += <span class=\"built_in\">min</span>(A[i<span class=\"number\">-1</span>],A[i+<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>BY peienwu</p>\n</blockquote>\n<h2 id=\"P2-動線安排-魔王題\"><a href=\"#P2-動線安排-魔王題\" class=\"headerlink\" title=\"P2 動線安排(魔王題)\"></a>P2 動線安排(魔王題)</h2><p><a href=\"https://zerojudge.tw/ShowProblem?problemid=g596\">題目連結</a></p>\n<h3 id=\"題解-1\"><a href=\"#題解-1\" class=\"headerlink\" title=\"題解\"></a>題解</h3><p>把線分成橫的跟直的就可以好好處理交叉了!</p>\n<h3 id=\"時間複雜度-1\"><a href=\"#時間複雜度-1\" class=\"headerlink\" title=\"時間複雜度\"></a>時間複雜度</h3><p>$O(h(n + m))$</p>\n<h3 id=\"AC程式碼-1\"><a href=\"#AC程式碼-1\" class=\"headerlink\" title=\"AC程式碼\"></a>AC程式碼</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, cnt = <span class=\"number\">0</span>, ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">array&lt;array&lt;<span class=\"keyword\">int</span>, 104&gt;, 104&gt; R, C, I;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> ok;</span><br><span class=\"line\">    I[r][c] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    cnt++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(C[r][c] || R[r][c]) cnt--;</span><br><span class=\"line\">    C[r][c] = R[r][c] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ok = <span class=\"number\">0</span>;     <span class=\"comment\">//直下情況</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = r + <span class=\"number\">1</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(I[i][c]) ok = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ok)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = r + <span class=\"number\">1</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(I[i][c] || R[i][c]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            R[i][c]++;</span><br><span class=\"line\">            cnt += C[i][c] == <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ok = <span class=\"number\">0</span>;     <span class=\"comment\">//直上情況</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = r - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(I[i][c]) ok = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ok)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = r - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(I[i][c] || R[i][c]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            R[i][c]++;</span><br><span class=\"line\">            cnt += C[i][c] == <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ok = <span class=\"number\">0</span>;     <span class=\"comment\">//橫右情況</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = c + <span class=\"number\">1</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(I[r][i]) ok = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ok)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = c + <span class=\"number\">1</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(I[r][i] || C[r][i]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            C[r][i]++;</span><br><span class=\"line\">            cnt += R[r][i] == <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ok = <span class=\"number\">0</span>;     <span class=\"comment\">//橫左情況</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = c - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(I[r][i]) ok = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ok)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = c - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(I[r][i] || C[r][i]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            C[r][i]++;</span><br><span class=\"line\">            cnt += R[r][i] == <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pull</span><span class=\"params\">(<span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    I[r][c] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cnt--;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = r + <span class=\"number\">1</span>; i &lt; n; i++)&#123;     <span class=\"comment\">//直下情況</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!R[i][c]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        R[i][c]--;</span><br><span class=\"line\">        cnt -= C[i][c] == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = r - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;    <span class=\"comment\">//直上情況</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!R[i][c]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        R[i][c]--;</span><br><span class=\"line\">        cnt -= C[i][c] == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = c + <span class=\"number\">1</span>; i &lt; m; i++)&#123;     <span class=\"comment\">//橫右情況</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!C[r][i]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        C[r][i]--;</span><br><span class=\"line\">        cnt -= R[r][i] == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = c - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;    <span class=\"comment\">//橫左情況</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!C[r][i]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        C[r][i]--;</span><br><span class=\"line\">        cnt -= R[r][i] == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h, r, c, t;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; h;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(h--)&#123;</span><br><span class=\"line\">        cin &gt;&gt; r &gt;&gt; c &gt;&gt; t;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">pull</span>(r, c);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(r, c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans = <span class=\"built_in\">max</span>(ans, cnt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span> &lt;&lt; cnt;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>BY thanksone</p>\n</blockquote>\n<h2 id=\"P3-生產線\"><a href=\"#P3-生產線\" class=\"headerlink\" title=\"P3 生產線\"></a>P3 生產線</h2><p><a href=\"https://zerojudge.tw/ShowProblem?problemid=g597\">題目連結</a></p>\n<h3 id=\"差分作法\"><a href=\"#差分作法\" class=\"headerlink\" title=\"差分作法\"></a>差分作法</h3><h4 id=\"題解-2\"><a href=\"#題解-2\" class=\"headerlink\" title=\"題解\"></a>題解</h4><p>用差分的想法加值，再用前綴還原，最後再排序。最後利用Greedy的想法，將每一項最小的工作量乘上最大的時間，總和即為答案。</p>\n<div class=\"note success\">\n            <p><strong>差分</strong></p><p>差分是前綴和的逆運算，也就是說，把兩項的差算出來就是差分。定義如下：</p><script type=\"math/tex; mode=display\">b_i = \\begin{cases}a_i-a_{i-1}, &\\text{if }i\\gt 1 \\\\a_1, & \\text{if } i = 1\\end{cases}</script><p>差分的使用時機是區間加值，一個區間內的數字都加上一個定值，這時候就可以使用到差分的技巧。使用方式如下，當我要在區間 $[l,r]$ 的每一個數字都加上一個值$v$，以下步驟：</p><ol><li>定義一個新的陣列 $b_i$ 表示每一項差分</li><li>設 $b[l] =  b[l] + v,b[r+1] = b[r+1] - v$</li><li>將差分的每一項加上前一項（做前綴和 $b[i] = b[i]+b[i-1]$），即為原數列</li></ol><p>第二步驟可以重複好幾次做，這樣複雜度從原本的$O(n)$就變成了$O(1)$了！</p>\n          </div>\n<h4 id=\"時間複雜度-2\"><a href=\"#時間複雜度-2\" class=\"headerlink\" title=\"時間複雜度\"></a>時間複雜度</h4><p>差分：$O(m)$ 、排序 $O(n\\log n)$</p>\n<p>總時間複雜度：$O(n\\log n + m)$</p>\n<h4 id=\"AC程式碼-2\"><a href=\"#AC程式碼-2\" class=\"headerlink\" title=\"AC程式碼\"></a>AC程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 200005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IOS ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,A[N],B[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    IOS;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(A,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(A));</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x,y,w;cin&gt;&gt;x&gt;&gt;y&gt;&gt;w;</span><br><span class=\"line\">        A[x] += w;</span><br><span class=\"line\">        A[y+<span class=\"number\">1</span>] -= w;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)cin&gt;&gt;B[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)A[i] = A[i] + A[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(A+<span class=\"number\">1</span>,A+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(B+<span class=\"number\">1</span>,B+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        ans += A[i] * B[n-i+<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>BY peienwu</p>\n</blockquote>\n<h3 id=\"線段樹作法\"><a href=\"#線段樹作法\" class=\"headerlink\" title=\"線段樹作法\"></a>線段樹作法</h3><p><img src=\"https://i.imgur.com/hePctby.png\" alt=\"\"></p>\n<p>很奇怪，最近兩次的APCS第三題都有人想要砸資結，特別是線段樹，可能有些人特別偏愛線段樹吧！</p>\n<h4 id=\"題解-3\"><a href=\"#題解-3\" class=\"headerlink\" title=\"題解\"></a>題解</h4><p>線段樹最原本的應該是區間詢問、單點修改，如果要區間修改的話就會用到<a href=\"https://peienwu.com/2021/08/05/Segment%20Tree/\">懶標</a>，所以實作上相對上比較複雜一點。這一題用線段樹的目的是區間加值，加值完過後的排序以及Greedy跟差分的作法是一樣的，用線段樹真的是多此兩舉（實作較複雜、較耗時）！</p>\n<p>當然，這一題比較特別只有最後一起做單點查詢，因此不用懶標，最侯直接計算一路去經過的答案也行！下面的程式碼就是把完全包含區間的節點加值，不用使用到懶標，最後一次查詢。</p>\n<h4 id=\"時間複雜度-3\"><a href=\"#時間複雜度-3\" class=\"headerlink\" title=\"時間複雜度\"></a>時間複雜度</h4><p>區間加值 $O(m\\log n)$，n個點的詢問 $O(n\\log n)$，排序 $O(n\\log n)$</p>\n<p>總時間複雜度：$O((n+m)\\log n)$</p>\n<h4 id=\"AC程式碼-3\"><a href=\"#AC程式碼-3\" class=\"headerlink\" title=\"AC程式碼\"></a>AC程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 200005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IOS ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,t,A[N],B[N],ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> val = <span class=\"number\">0</span>,sz;</span><br><span class=\"line\">&#125;seg[<span class=\"number\">4</span>*N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> id,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    seg[id].sz = r - l;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r - l &lt;= <span class=\"number\">1</span>)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(id*<span class=\"number\">2</span>,l,mid);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(id*<span class=\"number\">2</span>+<span class=\"number\">1</span>,mid,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"keyword\">int</span> id,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> ql,<span class=\"keyword\">int</span> qr,<span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= l || r &lt;= ql || l &gt;= qr)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ql &lt;= l &amp;&amp; qr &gt;= r)&#123;</span><br><span class=\"line\">        seg[id].val += val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">modify</span>(id*<span class=\"number\">2</span>,l,mid,ql,qr,val);</span><br><span class=\"line\">    <span class=\"built_in\">modify</span>(id*<span class=\"number\">2</span>+<span class=\"number\">1</span>,mid,r,ql,qr,val);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> id,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= l)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    ans += seg[id].val;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r - l == <span class=\"number\">1</span>)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(val &lt; mid)<span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(id*<span class=\"number\">2</span>,l,mid,val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(id*<span class=\"number\">2</span>+<span class=\"number\">1</span>,mid,r,val);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    IOS;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x,y,w;cin&gt;&gt;x&gt;&gt;y&gt;&gt;w;</span><br><span class=\"line\">        y++;</span><br><span class=\"line\">        <span class=\"built_in\">modify</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,x,y,w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        ans = <span class=\"number\">0</span>;<span class=\"built_in\">query</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,i);</span><br><span class=\"line\">        A[i] = ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)cin&gt;&gt;B[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(A+<span class=\"number\">1</span>,A + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(B+<span class=\"number\">1</span>,B + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)ans += A[i] * B[n-i+<span class=\"number\">1</span>];</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"P4-真假子圖\"><a href=\"#P4-真假子圖\" class=\"headerlink\" title=\"P4 真假子圖\"></a>P4 真假子圖</h2><p><a href=\"https://zerojudge.tw/ShowProblem?problemid=g598\">題目連結</a></p>\n<h3 id=\"二分搜尋-DFS作法\"><a href=\"#二分搜尋-DFS作法\" class=\"headerlink\" title=\"二分搜尋+DFS作法\"></a>二分搜尋+DFS作法</h3><h4 id=\"題解-4\"><a href=\"#題解-4\" class=\"headerlink\" title=\"題解\"></a>題解</h4><p>一開始看到這題，應該很難通靈出二分搜這個作法（我覺得光把題目看懂就有點難度了）。這題有一個條件要特別注意：</p>\n<blockquote>\n<p>保證若調查員的 k 個 pair 的結果和組長存留的 m 個 pair 不會產生矛盾, 則保證調查員的資料一定和原本 A, B 分組吻合</p>\n<p>這一題每一個觀察員並可看成不是獨立的（假如一個觀察員不產生矛盾，則他回傳的那一些邊都會被沿用），所以題目 $p$ 筆詢問可以聯集一起處理。</p>\n</blockquote>\n<p>將情報員當成點，合作關係當成邊，那麼合法的圖就會有兩個點集，點集中的點互不相鄰，也就是二分圖。</p>\n<p>二分搜第一個使得圖變得不二分的人，把它消失，<strong>最多重複3次</strong>就做完了。</p>\n<div class=\"note info\">\n            <p><strong>為什麼可以二分搜？</strong><br>二分搜是用來找一串01字串的分界點，並且必須具有單調性才能二分搜。這一題之所以會有單調性是因為，當我查詢觀察員$P_i$的回傳資料是否正確時，會將前面 $1$ 到 $i-1$ 的觀察員回傳的所有邊納入考慮。</p><p>假設有一個觀察員 $P_j(1\\le j &lt; i)$ 回傳的資料是錯誤的，這些邊會導致整張圖變成非二分圖，對於 $j$ 後面的所有點來說，都是非二分圖。這樣就有了以 $j$ 為分界點的單調性，即可二分搜。</p>\n          </div>\n<p>二分圖判斷可以用 DFS 做，DFS 的時候把每個點塗上顏色，如果相鄰的點跟自己顏色一樣就表示這不是一張二分圖。</p>\n<h4 id=\"時間複雜度-4\"><a href=\"#時間複雜度-4\" class=\"headerlink\" title=\"時間複雜度\"></a>時間複雜度</h4><p>$O((n + m + pk)\\log p)$</p>\n<h4 id=\"AC程式碼-4\"><a href=\"#AC程式碼-4\" class=\"headerlink\" title=\"AC程式碼\"></a>AC程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid (l + r) / 2</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">e</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\">array&lt;<span class=\"keyword\">bool</span>, 10004&gt; WA;          <span class=\"comment\">//不可行的觀察員編號</span></span><br><span class=\"line\">array&lt;<span class=\"keyword\">int</span>, 20004&gt; vis;          <span class=\"comment\">//DFS是否走訪、二分圖顏色</span></span><br><span class=\"line\">array&lt;vector&lt;e&gt;, 10004&gt; E;      <span class=\"comment\">//每一個觀察員的回傳邊</span></span><br><span class=\"line\">array&lt;vector&lt;<span class=\"keyword\">int</span>&gt;, 20004&gt; G;    <span class=\"comment\">//存進行DFS的圖</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> t)</span></span>&#123;         <span class=\"comment\">//用DFS塗色、判斷二分圖</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vis[u]) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">    vis[u] = t;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[v] == t) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        ans &amp;= <span class=\"built_in\">dfs</span>(v, <span class=\"number\">3</span> - t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span>&#123;               <span class=\"comment\">//檢查第p個觀察員回傳是否正確</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        G[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        vis[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= p; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [u, v] : E[i])&#123; <span class=\"comment\">//將觀察員的邊推入G</span></span><br><span class=\"line\">            G[u].<span class=\"built_in\">pb</span>(v);</span><br><span class=\"line\">            G[v].<span class=\"built_in\">pb</span>(u);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        ans &amp;= <span class=\"built_in\">dfs</span>(i, <span class=\"number\">1</span>);        <span class=\"comment\">//將每一個連通塊</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BS</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span>&#123;           <span class=\"comment\">//二分搜觀察員</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(r)) <span class=\"keyword\">return</span>;         <span class=\"comment\">//當邊的連集不會讓圖有問題，則回傳</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l != r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(mid)) l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> r = mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    WA[l] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    E[l].<span class=\"built_in\">clear</span>();                <span class=\"comment\">//剔除一錯誤觀察員</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m, p, k, a, b;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">        E[<span class=\"number\">0</span>].<span class=\"built_in\">pb</span>(&#123;a, b&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cin &gt;&gt; p &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= p; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; k; j++)&#123;</span><br><span class=\"line\">            cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">            E[i].<span class=\"built_in\">pb</span>(&#123;a, b&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)&#123;     <span class=\"comment\">//至多三個觀察員</span></span><br><span class=\"line\">        <span class=\"built_in\">BS</span>(<span class=\"number\">0</span>, p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= p; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(WA[i]) cout &lt;&lt; i &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>BY thanksone</p>\n</blockquote>\n<h3 id=\"DSU作法\"><a href=\"#DSU作法\" class=\"headerlink\" title=\"DSU作法\"></a>DSU作法</h3><blockquote>\n<p>Idea From Kennyfs</p>\n</blockquote>\n<h4 id=\"題解-5\"><a href=\"#題解-5\" class=\"headerlink\" title=\"題解\"></a>題解</h4><p>這一題的題目限制有說最多3個錯誤的情報員，因此我們可以用上面二分搜的方式做三次找到答案。如果題目<strong>不限制錯誤調查員的數量</strong>，也就是用二分搜時間會超時，但是用DSU可以在線性時間內完成！</p>\n<p>DSU的目的在處理集合問題，根據下面這個關鍵條件：</p>\n<blockquote>\n<p>保證若調查員的 k 個 pair 的結果和組長存留的 m 個 pair 不會產生矛盾, 則保證調查員的資料一定和原本 A, B 分組吻合</p>\n</blockquote>\n<p>我們只要對每一筆詢問看會不會與組長手中的pair矛盾即可。如果每一次都做DFS，會發現時間複雜度是 $O(pn)$，必然超時。</p>\n<p>DSU的想法是，我們將組長手中的圖中上每一個連通塊都分別塗上兩種顏色（必為二分圖，因此將兩邊各塗上不同顏色）。接著，把每個顏色當作初始的並查集中的集合，將每一筆觀察員回傳的邊的兩端指向的集合合併起來，過程中如果發生邊的兩端同屬一個集合，表示這是一個錯誤的觀察員。做完每一個觀察員之後，把所有變更過的還原成初始狀態（組長手中的圖）即可。</p>\n<div class=\"note success\">\n            <p><strong>舉例</strong></p><blockquote><p>8 5<br>0 2 1 3 1 2 4 6 5 6<br>1 2<br>1 4 0 6</p></blockquote><p>整個過程就是下面這張GIF：<br><img src=\"https://i.imgur.com/gLpSD6p.gif\" alt=\"\"></p><p>步驟：</p><ol><li>利用DFS為組長手中的圖上色，每一個連通塊兩色（以編號1,2,3…）</li><li>將每一個顏色當作並查集元素</li><li>觀察員輸入的邊兩端 $(u,v)$非同色，表示不發生矛盾，則將u所在集合與v所在集合的對方（連通塊兩色的另一色）合併</li><li>重複 步驟3 共k次，如果發生$(u,v)$為同一色，則觀察員錯誤。</li></ol>\n          </div>\n<h4 id=\"時間複雜度-5\"><a href=\"#時間複雜度-5\" class=\"headerlink\" title=\"時間複雜度\"></a>時間複雜度</h4><p>$O(n + pk\\alpha)$</p>\n<h4 id=\"AC程式碼-5\"><a href=\"#AC程式碼-5\" class=\"headerlink\" title=\"AC程式碼\"></a>AC程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IOS ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 20005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 10005</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,p,k;</span><br><span class=\"line\"><span class=\"keyword\">int</span> color[N],boss[N],num[N];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> WA[M],f;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">other</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span>&#123;<span class=\"keyword\">return</span> (s%<span class=\"number\">2</span>)?s+<span class=\"number\">1</span>:s<span class=\"number\">-1</span>;&#125; <span class=\"comment\">//other為同一連通塊另外一種顏色</span></span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; edge[N],change;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;                            <span class=\"comment\">//初始化</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(color,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(color));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(WA,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(WA));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> id,<span class=\"keyword\">int</span> col)</span></span>&#123;           <span class=\"comment\">//對所有點上色</span></span><br><span class=\"line\">    color[id] = col;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i:edge[id])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!color[i])<span class=\"built_in\">dfs</span>(i,<span class=\"built_in\">other</span>(col));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find_boss</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>&#123;              <span class=\"comment\">//尋找祖先、及路徑壓縮</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(boss[id] == id)<span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    change.<span class=\"built_in\">push_back</span>(id);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> boss[id] = <span class=\"built_in\">find_boss</span>(boss[id]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    IOS;</span><br><span class=\"line\">    <span class=\"built_in\">init</span>();</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x,y;cin&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">        edge[x].<span class=\"built_in\">push_back</span>(y);</span><br><span class=\"line\">        edge[y].<span class=\"built_in\">push_back</span>(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> now = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;           <span class=\"comment\">//對所有點上色</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!color[i])&#123;</span><br><span class=\"line\">            <span class=\"built_in\">dfs</span>(i,now);now += <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=now;i++)&#123;boss[i] = i;num[i] = <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">    cin&gt;&gt;p&gt;&gt;k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=p;i++)&#123;</span><br><span class=\"line\">        change.<span class=\"built_in\">clear</span>();                                  <span class=\"comment\">//儲存待更改的點集f = 0;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;k;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x,y;cin&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            x = color[x],y = color[y];                   <span class=\"comment\">//尋找邊兩端點的顏色所處的集合</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> bx =  <span class=\"built_in\">find_boss</span>(x),by = <span class=\"built_in\">find_boss</span>(y);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ox = <span class=\"built_in\">find_boss</span>(<span class=\"built_in\">other</span>(y)),oy = <span class=\"built_in\">find_boss</span>(<span class=\"built_in\">other</span>(x));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(bx == by)&#123;WA[i] = <span class=\"number\">1</span>;f = <span class=\"number\">1</span>;<span class=\"keyword\">continue</span>;&#125;     <span class=\"comment\">//位於同一集合，此觀察員是錯的</span></span><br><span class=\"line\">            <span class=\"comment\">//以下是啟發式合併（小的集合並到大的集合）</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(num[bx] &lt; num[ox])&#123;</span><br><span class=\"line\">                boss[bx] = ox;num[ox] += num[bx];</span><br><span class=\"line\">                change.<span class=\"built_in\">push_back</span>(bx);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                boss[ox] = bx;num[bx] += num[ox];</span><br><span class=\"line\">                change.<span class=\"built_in\">push_back</span>(ox);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(num[by] &lt; num[oy])&#123;</span><br><span class=\"line\">                boss[by] = oy;num[oy] += num[by];</span><br><span class=\"line\">                change.<span class=\"built_in\">push_back</span>(by);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                boss[oy] = by;num[by] += num[oy];</span><br><span class=\"line\">                change.<span class=\"built_in\">push_back</span>(oy);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : change)&#123;boss[i] = i;num[i] = <span class=\"number\">1</span>;&#125;   <span class=\"comment\">//觀察員的邊結束，看完後復原</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=p;i++)<span class=\"keyword\">if</span>(WA[i])cout&lt;&lt;i&lt;&lt;endl;        <span class=\"comment\">//輸出最後錯誤觀察員答案</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>BY peienwu</p>\n</blockquote>"},{"title":"計算幾何(Computational Geometry)","date":"2021-08-19T16:00:00.000Z","mathjax":true,"_content":"\n暑假剩沒多少天了，趕緊追進度啊！\n\n## 課程內容\n\n### 座標與向量\n* 長度、角度、座標、向量\n* 最常以座標、向量表示\n<!-- more -->\n* Define x first, y second\n* 內積Dot：$A \\cdot B = A_xB_x+A_yB_y$\n* 外積Cross：$A \\times B = A_xB_y-A_yB_x$\n* 運算子重載：加減乘除、取純量（$abs()$）\n\n### 有向面積\n* 用外積算面積（有正負：有向面積）\n* 逆時針為正、順時針為負\n* 多邊形面積：任選平面上一點A，將所有點與A連線\n* 透過順、逆加總有向面積（p0,p1...pn,其中p0=pn）\n* AREA = $\\frac{1}{2}\\sum_{i=0}^{N-1}\\vec{P_i}\\times\\vec{P_{i+1}}$\n\n### 線段相交\n* 線段不平行：$P_1$ 與$P_2$ 會在線段$P_3$、$P_4$異側（方向函數）\n* 線段平行：檢驗是否共線、並確認某一個點是否在線段上\n\n### 誤差分析：EPS\n* 使用二進位儲存：必產生誤差\n* 精度：float $10^{-7}$, double $10^{-16}$, long double $10^{-19}$\n* 誤差容忍值$eps$，將 $x\\pm eps$視為 $x$\n* 重載運算子：==（視為相等）,>,<，加上誤差範圍\n* Eps大小：多落在 $10^{-6}$到 $10^{-12}$ 之間\n* 誤差：加減法，絕對誤差相加；乘除法，相對誤差相加\n* 下界：數字範圍為V內時，$eps$ 至少要VK 乘上資料型態本身誤差\n* 上界：題目一般會給\n* 避免誤差大法：非到最後關頭，否則都用整數運算！\n\n### 三角函數\n* 泰勒展開式逼近，時間並非O(1)\n* $atan2(y,x) = \\theta$，回傳值域$(-pi,pi]$\n* 回傳long double ：使用$atan2l(y,x)$\n* 常數大，不建議使用\n\n### IEEE 754\n* Sign, Exponent, Mantissa\n* 正負號、指數部分、小數部分\n\n### 極角排序\n* 給定很多點，依照與某特定點（原點）的角度進行排序\n* Sort by cross，依照內積排序\n* 題目：平面上n個點，問一條直線最多通過幾個點 \n \n### 凸包\n* 多邊形：簡單多邊形（邊不相交）、凸多邊形（內角都≤180）、凹多邊形（有內角>180）\n* 能包住所有點的凸多邊形\n* 凸包求法：Monotone Chain（二維平面）、DC（三維）\n* **Monotone Chain**\n    * 將所有點按照(x,y)排序\n    * 把下凸包、上凸包「圍」出來\n    * 合併下凸包、上凸包\n    * 開一個vector（功能為stack）紀錄當前下半凸包\n    * 檢查新加入的點會讓哪些點不再是凸包上的點\n\n### 模擬退火(SA)\n* 尋找空間中近似最優解\n* 一個隨機算法\n* 例題：給你平面上 N 個點，請你找出一個點，使得這個點連到這 N 個點的距離總和最短\n\n## 計算幾何函式模板\n\n計算幾何最重要的莫過於座標上的點，實作方式可以用 $std::pair$ 或是自己定義一個類別，將點的資訊以及相關的運算式定義出來。我們總共需要重載點的大於、等於、小於的運算子，以及加法減法、向量外積內積等，同時還有很多功能是可以繼續定義下去，例如向量乘上一個定值，可以繼續加入類別中。\n\n### 點的模板及運算子重載\n```cpp=\nstruct pt{\n    int x,y;\n    bool operator < (pt b){\n        if(x == b.x)return y < b.y;\n        return x < b.x;\n    }\n    bool operator > (pt b){\n        if(x == b.x)return y > b.y;\n        return x > b.x;\n    }\n    bool operator == (pt b){\n        if(abs(x-b.x)<=eps && abs(y-b.y)<=eps)return true;\n        return false;\n    }\n    pt operator+(pt b) {return {x + b.x, y + b.y};} //向量相加\n    pt operator-(pt b) {return {x - b.x, y - b.y};} //向量相減\n    int operator^(pt b) {return x * b.y - y * b.x;} //向量外積cross\n    int operator*(pt b) {return x * b.x + y * b.y;} //向量內積dot\n};\n```\n以上是預設點的x座標y座標都是整數的情況，如果要改成使用自定義型別，可以改用樣板(Template)自定義資料型別，根據題目的要求，使用整數或是浮點數進行運算。\n```cpp=+\ntemplate <typename T>\nclass pt{\n    T x,y;\n    //下方運算子重載與上方相同\n}\npt<int> p[N];        //點座標宣告為整數\npt<double> pp[N];    //點的不同資料型別宣告\n```\n\n### 方向函數\n針對 $\\vec a$ 以及 $\\vec b$ 外積的結果，可以知道兩者之間相對的方向。如果 $\\vec a$ 和 $\\vec b$ 共線，則回傳0，$\\vec a$ 轉向 $\\vec b$ 如果是順時針則回傳1，其餘回傳-1。\n\n```cpp=+\nint dir(pt a, pt b, pt o) {                         //方向函數\n    int cross = (a - o) ^ (b - o);\n    if(fabs(cross) <= eps) return 0;\n    else if(cross > 0) return 1;\n    else return -1;\n}\n```\n\n### 點與線段關係\n以下函式可以判斷點o是否在 $\\overline{AB}$ 上，首先利用外積是否為0判斷是 $\\overline{OA}$ 與 $\\overline{OB}$ 是否平行；接著以內積判斷是否在線段中，而非線段的兩側（平行的條件下內積只可能是1或是-1）。\n\n```cpp=+\nbool onseg(pt a, pt b, pt o){         //o是否在ab線段上\n    int cross = (a - o) ^ (b - o);    //是否平行\n    int dot = (a - o) * (b - o);      //是否在線段中\n    return (cross == 0)&&(dot <= 0);\n}\n```\n### 線段相交\n以下函式為給定四個點$A,B,C,D$，判斷 $\\overline{AB}$ 是否相交於 $\\overline{CD}$。首先是特例的判斷，線段的其中一端點在另一線段上，利用上方點與線段關係的函式完成這個判斷。\n\n特例判斷完成之後，我們需要用到上方方向函式判斷線段兩端點是否在另一條線段的異側，即以下的關係式：\n$$dir(A,B,C)\\times dir(A,B,D) < 0$$\n\n我們要檢查兩條線段，其相乘結果必須皆為負數，表示處於線段的異側！最後是平行線的判斷，如果兩線平行且相交，表示兩線共線，這可以在特例時就被判斷出來。\n\n```cpp=+\nbool Intersection(pt a, pt b, pt c, pt d){      //線段ab是否與cd相交\n    if(onseg(a,b,c)||onseg(a,b,d))return true;  //點c、d是否洽在線段ab上\n    if(onseg(c,d,a)||onseg(c,d,b))return true;  //點a、b是否洽在線段cd上\n    if(dir(a,b,c)*dir(a,b,d)==-1 && dir(c,d,a)*dir(c,d,b)==-1)\n        return true;                            //對於線段兩端點看另外兩端點必須方向相反\n    return false;\n}\n```\n### 極角排序\n在進行全點對線段共線問題的判斷時，使用極角排序通常會比單純暴力枚舉更快速。極角也就是極座標中每一個跟原點的夾角。如果兩個點位在左半平與右半平面，則先將其判斷出來，如此才能確定起始的角度為何。\n\n如果位在同一個左右半平面，則透過外積的方式比較兩個向量的先後順序。以下程式碼是從座標平面270度的地方開始逆時針掃一圈依序經過的點。\n\n```cpp=+\nbool cmp(pt a, pt b){\n    bool f1 = a < pt{0,0};\n    bool f2 = b < pt{0,0};\n    if(f1 != f2)return f1 < f2;\n    return (a ^ b) > 0;\n    //逆時針將點進行極角排序，從270度開始逆時針\n}\nsort(p.begin(),p.end(),cmp);     //以id為原點進行極角排序\n```\n\n### 凸包函數（使用Monotone Chain）\n首先先將所有點依照x座標進行排序，之後用掃描線由左而右的將符合要求的點推入維護的單調容器中，維護下凸包，接著利用reverse()函數將所有點逆序，也就是x座標由大到小讓掃描線由右而左掃過一遍，將上凸包也圍起來。時間複雜度為$O(n\\log n)$。\n\n```cpp=+\nbool check(pt a, pt b, pt o){\n    pt aa = a - o;\n    pt bb = b - o;\n    return (aa ^ bb) >= 0;\n}\n\nvector<pt> convex_hull(){\n    vector<pt> hull;\n    sort(p.begin(),p.end(),cmp);       //首先對x進行排序\n    for(auto i : p){                   //依序走訪，如果遇到外積<0則不在凸包上\n        while(hull.size() > 1 && check(i,hull[hull.size()-1],hull[hull.size()-2])){\n            hull.pop_back();\n        }\n        hull.push_back(i);             //在凸包hull的每一點都符合外積小於0\n    }\n    int down_hull = hull.size();\n    hull.pop_back();                   //x最大的點會在凸包上，不用做兩次先pop一次\n    reverse(p.begin(),p.end());        //將所有點逆序之後做一次上面的凸包\n    for(auto i: p){\n        while(hull.size() > down_hull && check(i,hull[hull.size()-1],hull[hull.size()-2])){\n            hull.pop_back();\n        }\n        hull.push_back(i);\n    }\n    return hull;                       //起點會經過兩次，剛好來算有向面積\n}\n```\n\n### 旋轉卡尺\n旋轉卡尺可以被應用在尋找最遠點對、面積最大三角形等問題。利用兩條平行的線中間夾著凸包，繞一圈的過程中更新需要求的數值。實作上來說就是使用兩個指針，分別指向旋轉卡尺的平行線所在的兩個點，依照旋轉的方向進行增減的動作！\n\n```cpp=+\nbool check2(pt a,pt b,pt c,pt d){\n    int aa = abs((a - c)^(b - c));\n    int bb = abs((a - d)^(b - d));\n    return aa < bb;\n}\n\nvoid solve(){\n    int ans = 0,d = h,sz = hull.size();\n    rep(i,0,sz-1){\n        while(check2(hull[i],hull[(i+1)%sz],hull[d],hull[(d+1)%sz]))\n            d = (d+1)%sz;\n        ans = max(ans,(hull[i]-hull[d]).dis());\n        ans = max(ans,(hull[(i+1)%sz]-hull[d]).dis());\n    }\n}\n```\n\n## 基本數學知識\n\n計算幾何圍繞著幾個主軸，向量運算、內積、外積，利用它們進行角度、共線與否、距離等等的判斷。之前有稍微接觸過向量，不過內積與外積是第一次碰到的主題。\n\n因為目前絕大部分的討論都是在二維平面上進行，因此以下都是以二維平面為前提所進行的討論！\n\n### 內積（點積）\n內積跟 $\\cos\\theta$ 有關，因此主要可以幫助我們判斷線段是否垂直（等於零）、以及共線時點位於正向或是反向的判斷（等於正負一）。兩個向量 $\\vec u$ 以及 $\\vec v$ 的內積可以寫成以下關係式：\n\n$$\\vec u\\cdot \\vec v = |\\vec u||\\vec v|\\cos\\theta = u_1v_1 + u_2v_2$$\n\n兩個向量做內積的正負號會跟餘弦函數的正負變化相同（如下圖），值域為 $[-|\\vec u||\\vec v|,|\\vec u||\\vec v|]$，並且在 $\\theta = 0,\\pi$ 有最大最小值，$\\theta = \\frac{\\pi}{2},\\frac{3\\pi}{2}$ 的值為零。\n\n![](https://i.imgur.com/Si0hlNr.png)\n\n\n### 外積（叉積）\n外積跟 $\\sin\\theta$ 有關，主要可以判斷兩向量方向關係（順逆時針旋轉）、是否平行、比較角度大小等。外積的應用十分廣泛，找凸包以及旋轉卡尺都會用到外積判斷兩個向量角度關係。兩個向量 $\\vec u$ 以及 $\\vec v$ 的外積可以寫成以下關係式：\n\n$$\\vec u\\times \\vec v = |\\vec u||\\vec v|\\sin\\theta = \\begin{bmatrix}u_1&u_2\\\\v_1&v_2\\end{bmatrix}=u_1v_2 - u_2v_1$$\n\n用更簡單的方式理解外積 $\\vec u\\times \\vec v$ ，其正負值可以想像成 $\\vec u$ 轉向 $\\vec v$ 所經的劣弧順逆時鐘方向。順時針為正、逆時針為負。\n\n關於外積的數值變化，與正弦函數的變化是一樣的（下圖），其值域跟內積一樣，不過最大最小值發生在 $\\theta = \\frac{\\pi}{2},\\frac{3\\pi}{2}$，並在 $\\theta = 0,\\pi$ 時兩向量叉積為零。\n\n![](https://i.imgur.com/ozKfaKL.png)\n\n\n### 面積\n#### 測量師公式（行列式）\n\n這是一個從給定多邊形的座標推得面積的公式，寫成很多個三角形有向面積的總和。以下圖來說，$\\triangle FBC$、$\\triangle FCD$ 、$\\triangle FDE$ 的有向面積皆大於零，而 $\\triangle FAB$、$\\triangle FEA$ 都會因為有向面積是負的（逆時針旋轉）而被扣除掉，運算的總和即是多邊形 $ABCDE$ 的面積！\n\n![](https://i.imgur.com/did2OzY.png)\n\n一般化的公式，多邊形上總共有 $N$ 個點，令第 $N+1$ 個點為第1個點（為了要繞一圈計算面積），多邊形面積為：\n$$AREA = \\frac{1}{2}\\sum_{i=1}^{N}\\vec{P_i}\\times\\vec{P_{i+1}}$$\n\n\n#### 三角形外積面積公式\n三角形面積有非常多算法，不過利用外積的公式還是第一次聽到。以下是公式推導過程：\n\n先從高中三角函數的三角形公式開始：\n$$\\begin{split}\\triangle ABC &= \\frac{1}{2}\\overline{AB}\\,\\overline{AC}\\cdot\\sin A\n\\\\&=\\frac{1}{2}\\sqrt{\\overline{AB}^2\\,\\overline{AC}^2\\,(1-\\cos^2A)}\n\\\\&=\\frac{1}{2}\\sqrt{\\overline{AB}^2\\,\\overline{AC}^2-(\\overline{AB}\\cdot\\overline{AC})^2}\n\\\\&=\\frac{1}{2}\\sqrt{(x_1^2+y_1^2)(x_2^2+y_2^2)-(x_1\\,x_2+y_1\\,y_2)^2}\n\\\\&=\\frac{1}{2}\\sqrt{(x_1^2\\,y_2^2)+(x_2^2\\,y_1^2)-2x_1\\,y_2\\,x_2\\,y_1}\n\\\\&=\\frac{1}{2}\\sqrt{[(x_1\\,y_2)-(x_2\\,y_1)]^2}\n\\\\&=\\frac{1}{2}|\\overrightarrow{AB}\\times \\overrightarrow{AC}|\\end{split}$$\n\n將三角形其中一點對另外兩點的向量做外積，除以2即為三角形面積。這個公式會在旋轉卡尺的地方使用到！\n\n#### 平行四邊形面積\n根據上面三角形面積公式的推導，可以相對應得知道兩向量所夾平行四邊形面積公式：\n$$AREA = |\\overrightarrow{AB}\\times \\overrightarrow{AC}|$$\n\n![](https://i.imgur.com/9mUdyV6.png)\n","source":"_posts/Geomertry.md","raw":"---\ntitle: 計算幾何(Computational Geometry)\ndate: 2021-8-20\ntags: \n    - 計算幾何\n    - 暑期筆記\ncategories:\n    - C++進階主題\n    - 計算幾何\nmathjax: true\n---\n\n暑假剩沒多少天了，趕緊追進度啊！\n\n## 課程內容\n\n### 座標與向量\n* 長度、角度、座標、向量\n* 最常以座標、向量表示\n<!-- more -->\n* Define x first, y second\n* 內積Dot：$A \\cdot B = A_xB_x+A_yB_y$\n* 外積Cross：$A \\times B = A_xB_y-A_yB_x$\n* 運算子重載：加減乘除、取純量（$abs()$）\n\n### 有向面積\n* 用外積算面積（有正負：有向面積）\n* 逆時針為正、順時針為負\n* 多邊形面積：任選平面上一點A，將所有點與A連線\n* 透過順、逆加總有向面積（p0,p1...pn,其中p0=pn）\n* AREA = $\\frac{1}{2}\\sum_{i=0}^{N-1}\\vec{P_i}\\times\\vec{P_{i+1}}$\n\n### 線段相交\n* 線段不平行：$P_1$ 與$P_2$ 會在線段$P_3$、$P_4$異側（方向函數）\n* 線段平行：檢驗是否共線、並確認某一個點是否在線段上\n\n### 誤差分析：EPS\n* 使用二進位儲存：必產生誤差\n* 精度：float $10^{-7}$, double $10^{-16}$, long double $10^{-19}$\n* 誤差容忍值$eps$，將 $x\\pm eps$視為 $x$\n* 重載運算子：==（視為相等）,>,<，加上誤差範圍\n* Eps大小：多落在 $10^{-6}$到 $10^{-12}$ 之間\n* 誤差：加減法，絕對誤差相加；乘除法，相對誤差相加\n* 下界：數字範圍為V內時，$eps$ 至少要VK 乘上資料型態本身誤差\n* 上界：題目一般會給\n* 避免誤差大法：非到最後關頭，否則都用整數運算！\n\n### 三角函數\n* 泰勒展開式逼近，時間並非O(1)\n* $atan2(y,x) = \\theta$，回傳值域$(-pi,pi]$\n* 回傳long double ：使用$atan2l(y,x)$\n* 常數大，不建議使用\n\n### IEEE 754\n* Sign, Exponent, Mantissa\n* 正負號、指數部分、小數部分\n\n### 極角排序\n* 給定很多點，依照與某特定點（原點）的角度進行排序\n* Sort by cross，依照內積排序\n* 題目：平面上n個點，問一條直線最多通過幾個點 \n \n### 凸包\n* 多邊形：簡單多邊形（邊不相交）、凸多邊形（內角都≤180）、凹多邊形（有內角>180）\n* 能包住所有點的凸多邊形\n* 凸包求法：Monotone Chain（二維平面）、DC（三維）\n* **Monotone Chain**\n    * 將所有點按照(x,y)排序\n    * 把下凸包、上凸包「圍」出來\n    * 合併下凸包、上凸包\n    * 開一個vector（功能為stack）紀錄當前下半凸包\n    * 檢查新加入的點會讓哪些點不再是凸包上的點\n\n### 模擬退火(SA)\n* 尋找空間中近似最優解\n* 一個隨機算法\n* 例題：給你平面上 N 個點，請你找出一個點，使得這個點連到這 N 個點的距離總和最短\n\n## 計算幾何函式模板\n\n計算幾何最重要的莫過於座標上的點，實作方式可以用 $std::pair$ 或是自己定義一個類別，將點的資訊以及相關的運算式定義出來。我們總共需要重載點的大於、等於、小於的運算子，以及加法減法、向量外積內積等，同時還有很多功能是可以繼續定義下去，例如向量乘上一個定值，可以繼續加入類別中。\n\n### 點的模板及運算子重載\n```cpp=\nstruct pt{\n    int x,y;\n    bool operator < (pt b){\n        if(x == b.x)return y < b.y;\n        return x < b.x;\n    }\n    bool operator > (pt b){\n        if(x == b.x)return y > b.y;\n        return x > b.x;\n    }\n    bool operator == (pt b){\n        if(abs(x-b.x)<=eps && abs(y-b.y)<=eps)return true;\n        return false;\n    }\n    pt operator+(pt b) {return {x + b.x, y + b.y};} //向量相加\n    pt operator-(pt b) {return {x - b.x, y - b.y};} //向量相減\n    int operator^(pt b) {return x * b.y - y * b.x;} //向量外積cross\n    int operator*(pt b) {return x * b.x + y * b.y;} //向量內積dot\n};\n```\n以上是預設點的x座標y座標都是整數的情況，如果要改成使用自定義型別，可以改用樣板(Template)自定義資料型別，根據題目的要求，使用整數或是浮點數進行運算。\n```cpp=+\ntemplate <typename T>\nclass pt{\n    T x,y;\n    //下方運算子重載與上方相同\n}\npt<int> p[N];        //點座標宣告為整數\npt<double> pp[N];    //點的不同資料型別宣告\n```\n\n### 方向函數\n針對 $\\vec a$ 以及 $\\vec b$ 外積的結果，可以知道兩者之間相對的方向。如果 $\\vec a$ 和 $\\vec b$ 共線，則回傳0，$\\vec a$ 轉向 $\\vec b$ 如果是順時針則回傳1，其餘回傳-1。\n\n```cpp=+\nint dir(pt a, pt b, pt o) {                         //方向函數\n    int cross = (a - o) ^ (b - o);\n    if(fabs(cross) <= eps) return 0;\n    else if(cross > 0) return 1;\n    else return -1;\n}\n```\n\n### 點與線段關係\n以下函式可以判斷點o是否在 $\\overline{AB}$ 上，首先利用外積是否為0判斷是 $\\overline{OA}$ 與 $\\overline{OB}$ 是否平行；接著以內積判斷是否在線段中，而非線段的兩側（平行的條件下內積只可能是1或是-1）。\n\n```cpp=+\nbool onseg(pt a, pt b, pt o){         //o是否在ab線段上\n    int cross = (a - o) ^ (b - o);    //是否平行\n    int dot = (a - o) * (b - o);      //是否在線段中\n    return (cross == 0)&&(dot <= 0);\n}\n```\n### 線段相交\n以下函式為給定四個點$A,B,C,D$，判斷 $\\overline{AB}$ 是否相交於 $\\overline{CD}$。首先是特例的判斷，線段的其中一端點在另一線段上，利用上方點與線段關係的函式完成這個判斷。\n\n特例判斷完成之後，我們需要用到上方方向函式判斷線段兩端點是否在另一條線段的異側，即以下的關係式：\n$$dir(A,B,C)\\times dir(A,B,D) < 0$$\n\n我們要檢查兩條線段，其相乘結果必須皆為負數，表示處於線段的異側！最後是平行線的判斷，如果兩線平行且相交，表示兩線共線，這可以在特例時就被判斷出來。\n\n```cpp=+\nbool Intersection(pt a, pt b, pt c, pt d){      //線段ab是否與cd相交\n    if(onseg(a,b,c)||onseg(a,b,d))return true;  //點c、d是否洽在線段ab上\n    if(onseg(c,d,a)||onseg(c,d,b))return true;  //點a、b是否洽在線段cd上\n    if(dir(a,b,c)*dir(a,b,d)==-1 && dir(c,d,a)*dir(c,d,b)==-1)\n        return true;                            //對於線段兩端點看另外兩端點必須方向相反\n    return false;\n}\n```\n### 極角排序\n在進行全點對線段共線問題的判斷時，使用極角排序通常會比單純暴力枚舉更快速。極角也就是極座標中每一個跟原點的夾角。如果兩個點位在左半平與右半平面，則先將其判斷出來，如此才能確定起始的角度為何。\n\n如果位在同一個左右半平面，則透過外積的方式比較兩個向量的先後順序。以下程式碼是從座標平面270度的地方開始逆時針掃一圈依序經過的點。\n\n```cpp=+\nbool cmp(pt a, pt b){\n    bool f1 = a < pt{0,0};\n    bool f2 = b < pt{0,0};\n    if(f1 != f2)return f1 < f2;\n    return (a ^ b) > 0;\n    //逆時針將點進行極角排序，從270度開始逆時針\n}\nsort(p.begin(),p.end(),cmp);     //以id為原點進行極角排序\n```\n\n### 凸包函數（使用Monotone Chain）\n首先先將所有點依照x座標進行排序，之後用掃描線由左而右的將符合要求的點推入維護的單調容器中，維護下凸包，接著利用reverse()函數將所有點逆序，也就是x座標由大到小讓掃描線由右而左掃過一遍，將上凸包也圍起來。時間複雜度為$O(n\\log n)$。\n\n```cpp=+\nbool check(pt a, pt b, pt o){\n    pt aa = a - o;\n    pt bb = b - o;\n    return (aa ^ bb) >= 0;\n}\n\nvector<pt> convex_hull(){\n    vector<pt> hull;\n    sort(p.begin(),p.end(),cmp);       //首先對x進行排序\n    for(auto i : p){                   //依序走訪，如果遇到外積<0則不在凸包上\n        while(hull.size() > 1 && check(i,hull[hull.size()-1],hull[hull.size()-2])){\n            hull.pop_back();\n        }\n        hull.push_back(i);             //在凸包hull的每一點都符合外積小於0\n    }\n    int down_hull = hull.size();\n    hull.pop_back();                   //x最大的點會在凸包上，不用做兩次先pop一次\n    reverse(p.begin(),p.end());        //將所有點逆序之後做一次上面的凸包\n    for(auto i: p){\n        while(hull.size() > down_hull && check(i,hull[hull.size()-1],hull[hull.size()-2])){\n            hull.pop_back();\n        }\n        hull.push_back(i);\n    }\n    return hull;                       //起點會經過兩次，剛好來算有向面積\n}\n```\n\n### 旋轉卡尺\n旋轉卡尺可以被應用在尋找最遠點對、面積最大三角形等問題。利用兩條平行的線中間夾著凸包，繞一圈的過程中更新需要求的數值。實作上來說就是使用兩個指針，分別指向旋轉卡尺的平行線所在的兩個點，依照旋轉的方向進行增減的動作！\n\n```cpp=+\nbool check2(pt a,pt b,pt c,pt d){\n    int aa = abs((a - c)^(b - c));\n    int bb = abs((a - d)^(b - d));\n    return aa < bb;\n}\n\nvoid solve(){\n    int ans = 0,d = h,sz = hull.size();\n    rep(i,0,sz-1){\n        while(check2(hull[i],hull[(i+1)%sz],hull[d],hull[(d+1)%sz]))\n            d = (d+1)%sz;\n        ans = max(ans,(hull[i]-hull[d]).dis());\n        ans = max(ans,(hull[(i+1)%sz]-hull[d]).dis());\n    }\n}\n```\n\n## 基本數學知識\n\n計算幾何圍繞著幾個主軸，向量運算、內積、外積，利用它們進行角度、共線與否、距離等等的判斷。之前有稍微接觸過向量，不過內積與外積是第一次碰到的主題。\n\n因為目前絕大部分的討論都是在二維平面上進行，因此以下都是以二維平面為前提所進行的討論！\n\n### 內積（點積）\n內積跟 $\\cos\\theta$ 有關，因此主要可以幫助我們判斷線段是否垂直（等於零）、以及共線時點位於正向或是反向的判斷（等於正負一）。兩個向量 $\\vec u$ 以及 $\\vec v$ 的內積可以寫成以下關係式：\n\n$$\\vec u\\cdot \\vec v = |\\vec u||\\vec v|\\cos\\theta = u_1v_1 + u_2v_2$$\n\n兩個向量做內積的正負號會跟餘弦函數的正負變化相同（如下圖），值域為 $[-|\\vec u||\\vec v|,|\\vec u||\\vec v|]$，並且在 $\\theta = 0,\\pi$ 有最大最小值，$\\theta = \\frac{\\pi}{2},\\frac{3\\pi}{2}$ 的值為零。\n\n![](https://i.imgur.com/Si0hlNr.png)\n\n\n### 外積（叉積）\n外積跟 $\\sin\\theta$ 有關，主要可以判斷兩向量方向關係（順逆時針旋轉）、是否平行、比較角度大小等。外積的應用十分廣泛，找凸包以及旋轉卡尺都會用到外積判斷兩個向量角度關係。兩個向量 $\\vec u$ 以及 $\\vec v$ 的外積可以寫成以下關係式：\n\n$$\\vec u\\times \\vec v = |\\vec u||\\vec v|\\sin\\theta = \\begin{bmatrix}u_1&u_2\\\\v_1&v_2\\end{bmatrix}=u_1v_2 - u_2v_1$$\n\n用更簡單的方式理解外積 $\\vec u\\times \\vec v$ ，其正負值可以想像成 $\\vec u$ 轉向 $\\vec v$ 所經的劣弧順逆時鐘方向。順時針為正、逆時針為負。\n\n關於外積的數值變化，與正弦函數的變化是一樣的（下圖），其值域跟內積一樣，不過最大最小值發生在 $\\theta = \\frac{\\pi}{2},\\frac{3\\pi}{2}$，並在 $\\theta = 0,\\pi$ 時兩向量叉積為零。\n\n![](https://i.imgur.com/ozKfaKL.png)\n\n\n### 面積\n#### 測量師公式（行列式）\n\n這是一個從給定多邊形的座標推得面積的公式，寫成很多個三角形有向面積的總和。以下圖來說，$\\triangle FBC$、$\\triangle FCD$ 、$\\triangle FDE$ 的有向面積皆大於零，而 $\\triangle FAB$、$\\triangle FEA$ 都會因為有向面積是負的（逆時針旋轉）而被扣除掉，運算的總和即是多邊形 $ABCDE$ 的面積！\n\n![](https://i.imgur.com/did2OzY.png)\n\n一般化的公式，多邊形上總共有 $N$ 個點，令第 $N+1$ 個點為第1個點（為了要繞一圈計算面積），多邊形面積為：\n$$AREA = \\frac{1}{2}\\sum_{i=1}^{N}\\vec{P_i}\\times\\vec{P_{i+1}}$$\n\n\n#### 三角形外積面積公式\n三角形面積有非常多算法，不過利用外積的公式還是第一次聽到。以下是公式推導過程：\n\n先從高中三角函數的三角形公式開始：\n$$\\begin{split}\\triangle ABC &= \\frac{1}{2}\\overline{AB}\\,\\overline{AC}\\cdot\\sin A\n\\\\&=\\frac{1}{2}\\sqrt{\\overline{AB}^2\\,\\overline{AC}^2\\,(1-\\cos^2A)}\n\\\\&=\\frac{1}{2}\\sqrt{\\overline{AB}^2\\,\\overline{AC}^2-(\\overline{AB}\\cdot\\overline{AC})^2}\n\\\\&=\\frac{1}{2}\\sqrt{(x_1^2+y_1^2)(x_2^2+y_2^2)-(x_1\\,x_2+y_1\\,y_2)^2}\n\\\\&=\\frac{1}{2}\\sqrt{(x_1^2\\,y_2^2)+(x_2^2\\,y_1^2)-2x_1\\,y_2\\,x_2\\,y_1}\n\\\\&=\\frac{1}{2}\\sqrt{[(x_1\\,y_2)-(x_2\\,y_1)]^2}\n\\\\&=\\frac{1}{2}|\\overrightarrow{AB}\\times \\overrightarrow{AC}|\\end{split}$$\n\n將三角形其中一點對另外兩點的向量做外積，除以2即為三角形面積。這個公式會在旋轉卡尺的地方使用到！\n\n#### 平行四邊形面積\n根據上面三角形面積公式的推導，可以相對應得知道兩向量所夾平行四邊形面積公式：\n$$AREA = |\\overrightarrow{AB}\\times \\overrightarrow{AC}|$$\n\n![](https://i.imgur.com/9mUdyV6.png)\n","slug":"Geomertry","published":1,"updated":"2021-09-19T11:26:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvyspmgm0009muyxfl4s7l6a","content":"<p>暑假剩沒多少天了，趕緊追進度啊！</p>\n<h2 id=\"課程內容\"><a href=\"#課程內容\" class=\"headerlink\" title=\"課程內容\"></a>課程內容</h2><h3 id=\"座標與向量\"><a href=\"#座標與向量\" class=\"headerlink\" title=\"座標與向量\"></a>座標與向量</h3><ul>\n<li>長度、角度、座標、向量</li>\n<li>最常以座標、向量表示<span id=\"more\"></span></li>\n<li>Define x first, y second</li>\n<li>內積Dot：$A \\cdot B = A_xB_x+A_yB_y$</li>\n<li>外積Cross：$A \\times B = A_xB_y-A_yB_x$</li>\n<li>運算子重載：加減乘除、取純量（$abs()$）</li>\n</ul>\n<h3 id=\"有向面積\"><a href=\"#有向面積\" class=\"headerlink\" title=\"有向面積\"></a>有向面積</h3><ul>\n<li>用外積算面積（有正負：有向面積）</li>\n<li>逆時針為正、順時針為負</li>\n<li>多邊形面積：任選平面上一點A，將所有點與A連線</li>\n<li>透過順、逆加總有向面積（p0,p1…pn,其中p0=pn）</li>\n<li>AREA = $\\frac{1}{2}\\sum<em>{i=0}^{N-1}\\vec{P_i}\\times\\vec{P</em>{i+1}}$</li>\n</ul>\n<h3 id=\"線段相交\"><a href=\"#線段相交\" class=\"headerlink\" title=\"線段相交\"></a>線段相交</h3><ul>\n<li>線段不平行：$P_1$ 與$P_2$ 會在線段$P_3$、$P_4$異側（方向函數）</li>\n<li>線段平行：檢驗是否共線、並確認某一個點是否在線段上</li>\n</ul>\n<h3 id=\"誤差分析：EPS\"><a href=\"#誤差分析：EPS\" class=\"headerlink\" title=\"誤差分析：EPS\"></a>誤差分析：EPS</h3><ul>\n<li>使用二進位儲存：必產生誤差</li>\n<li>精度：float $10^{-7}$, double $10^{-16}$, long double $10^{-19}$</li>\n<li>誤差容忍值$eps$，將 $x\\pm eps$視為 $x$</li>\n<li>重載運算子：==（視為相等）,&gt;,&lt;，加上誤差範圍</li>\n<li>Eps大小：多落在 $10^{-6}$到 $10^{-12}$ 之間</li>\n<li>誤差：加減法，絕對誤差相加；乘除法，相對誤差相加</li>\n<li>下界：數字範圍為V內時，$eps$ 至少要VK 乘上資料型態本身誤差</li>\n<li>上界：題目一般會給</li>\n<li>避免誤差大法：非到最後關頭，否則都用整數運算！</li>\n</ul>\n<h3 id=\"三角函數\"><a href=\"#三角函數\" class=\"headerlink\" title=\"三角函數\"></a>三角函數</h3><ul>\n<li>泰勒展開式逼近，時間並非O(1)</li>\n<li>$atan2(y,x) = \\theta$，回傳值域$(-pi,pi]$</li>\n<li>回傳long double ：使用$atan2l(y,x)$</li>\n<li>常數大，不建議使用</li>\n</ul>\n<h3 id=\"IEEE-754\"><a href=\"#IEEE-754\" class=\"headerlink\" title=\"IEEE 754\"></a>IEEE 754</h3><ul>\n<li>Sign, Exponent, Mantissa</li>\n<li>正負號、指數部分、小數部分</li>\n</ul>\n<h3 id=\"極角排序\"><a href=\"#極角排序\" class=\"headerlink\" title=\"極角排序\"></a>極角排序</h3><ul>\n<li>給定很多點，依照與某特定點（原點）的角度進行排序</li>\n<li>Sort by cross，依照內積排序</li>\n<li>題目：平面上n個點，問一條直線最多通過幾個點 </li>\n</ul>\n<h3 id=\"凸包\"><a href=\"#凸包\" class=\"headerlink\" title=\"凸包\"></a>凸包</h3><ul>\n<li>多邊形：簡單多邊形（邊不相交）、凸多邊形（內角都≤180）、凹多邊形（有內角&gt;180）</li>\n<li>能包住所有點的凸多邊形</li>\n<li>凸包求法：Monotone Chain（二維平面）、DC（三維）</li>\n<li><strong>Monotone Chain</strong><ul>\n<li>將所有點按照(x,y)排序</li>\n<li>把下凸包、上凸包「圍」出來</li>\n<li>合併下凸包、上凸包</li>\n<li>開一個vector（功能為stack）紀錄當前下半凸包</li>\n<li>檢查新加入的點會讓哪些點不再是凸包上的點</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"模擬退火-SA\"><a href=\"#模擬退火-SA\" class=\"headerlink\" title=\"模擬退火(SA)\"></a>模擬退火(SA)</h3><ul>\n<li>尋找空間中近似最優解</li>\n<li>一個隨機算法</li>\n<li>例題：給你平面上 N 個點，請你找出一個點，使得這個點連到這 N 個點的距離總和最短</li>\n</ul>\n<h2 id=\"計算幾何函式模板\"><a href=\"#計算幾何函式模板\" class=\"headerlink\" title=\"計算幾何函式模板\"></a>計算幾何函式模板</h2><p>計算幾何最重要的莫過於座標上的點，實作方式可以用 $std::pair$ 或是自己定義一個類別，將點的資訊以及相關的運算式定義出來。我們總共需要重載點的大於、等於、小於的運算子，以及加法減法、向量外積內積等，同時還有很多功能是可以繼續定義下去，例如向量乘上一個定值，可以繼續加入類別中。</p>\n<h3 id=\"點的模板及運算子重載\"><a href=\"#點的模板及運算子重載\" class=\"headerlink\" title=\"點的模板及運算子重載\"></a>點的模板及運算子重載</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &lt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &lt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &gt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &gt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &gt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">abs</span>(x-b.x)&lt;=eps &amp;&amp; <span class=\"built_in\">abs</span>(y-b.y)&lt;=eps)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>+(pt b) &#123;<span class=\"keyword\">return</span> &#123;x + b.x, y + b.y&#125;;&#125; <span class=\"comment\">//向量相加</span></span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>-(pt b) &#123;<span class=\"keyword\">return</span> &#123;x - b.x, y - b.y&#125;;&#125; <span class=\"comment\">//向量相減</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>^(pt b) &#123;<span class=\"keyword\">return</span> x * b.y - y * b.x;&#125; <span class=\"comment\">//向量外積cross</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>*(pt b) &#123;<span class=\"keyword\">return</span> x * b.x + y * b.y;&#125; <span class=\"comment\">//向量內積dot</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>以上是預設點的x座標y座標都是整數的情況，如果要改成使用自定義型別，可以改用樣板(Template)自定義資料型別，根據題目的要求，使用整數或是浮點數進行運算。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    T x,y;</span><br><span class=\"line\">    <span class=\"comment\">//下方運算子重載與上方相同</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">pt&lt;<span class=\"keyword\">int</span>&gt; p[N];        <span class=\"comment\">//點座標宣告為整數</span></span><br><span class=\"line\">pt&lt;<span class=\"keyword\">double</span>&gt; pp[N];    <span class=\"comment\">//點的不同資料型別宣告</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"方向函數\"><a href=\"#方向函數\" class=\"headerlink\" title=\"方向函數\"></a>方向函數</h3><p>針對 $\\vec a$ 以及 $\\vec b$ 外積的結果，可以知道兩者之間相對的方向。如果 $\\vec a$ 和 $\\vec b$ 共線，則回傳0，$\\vec a$ 轉向 $\\vec b$ 如果是順時針則回傳1，其餘回傳-1。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dir</span><span class=\"params\">(pt a, pt b, pt o)</span> </span>&#123;                         <span class=\"comment\">//方向函數</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cross = (a - o) ^ (b - o);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(cross) &lt;= eps) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cross &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"點與線段關係\"><a href=\"#點與線段關係\" class=\"headerlink\" title=\"點與線段關係\"></a>點與線段關係</h3><p>以下函式可以判斷點o是否在 $\\overline{AB}$ 上，首先利用外積是否為0判斷是 $\\overline{OA}$ 與 $\\overline{OB}$ 是否平行；接著以內積判斷是否在線段中，而非線段的兩側（平行的條件下內積只可能是1或是-1）。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">onseg</span><span class=\"params\">(pt a, pt b, pt o)</span></span>&#123;         <span class=\"comment\">//o是否在ab線段上</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cross = (a - o) ^ (b - o);    <span class=\"comment\">//是否平行</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> dot = (a - o) * (b - o);      <span class=\"comment\">//是否在線段中</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (cross == <span class=\"number\">0</span>)&amp;&amp;(dot &lt;= <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"線段相交-1\"><a href=\"#線段相交-1\" class=\"headerlink\" title=\"線段相交\"></a>線段相交</h3><p>以下函式為給定四個點$A,B,C,D$，判斷 $\\overline{AB}$ 是否相交於 $\\overline{CD}$。首先是特例的判斷，線段的其中一端點在另一線段上，利用上方點與線段關係的函式完成這個判斷。</p>\n<p>特例判斷完成之後，我們需要用到上方方向函式判斷線段兩端點是否在另一條線段的異側，即以下的關係式：</p>\n<script type=\"math/tex; mode=display\">dir(A,B,C)\\times dir(A,B,D) < 0</script><p>我們要檢查兩條線段，其相乘結果必須皆為負數，表示處於線段的異側！最後是平行線的判斷，如果兩線平行且相交，表示兩線共線，這可以在特例時就被判斷出來。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Intersection</span><span class=\"params\">(pt a, pt b, pt c, pt d)</span></span>&#123;      <span class=\"comment\">//線段ab是否與cd相交</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">onseg</span>(a,b,c)||<span class=\"built_in\">onseg</span>(a,b,d))<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  <span class=\"comment\">//點c、d是否洽在線段ab上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">onseg</span>(c,d,a)||<span class=\"built_in\">onseg</span>(c,d,b))<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  <span class=\"comment\">//點a、b是否洽在線段cd上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">dir</span>(a,b,c)*<span class=\"built_in\">dir</span>(a,b,d)==<span class=\"number\">-1</span> &amp;&amp; <span class=\"built_in\">dir</span>(c,d,a)*<span class=\"built_in\">dir</span>(c,d,b)==<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;                            <span class=\"comment\">//對於線段兩端點看另外兩端點必須方向相反</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"極角排序-1\"><a href=\"#極角排序-1\" class=\"headerlink\" title=\"極角排序\"></a>極角排序</h3><p>在進行全點對線段共線問題的判斷時，使用極角排序通常會比單純暴力枚舉更快速。極角也就是極座標中每一個跟原點的夾角。如果兩個點位在左半平與右半平面，則先將其判斷出來，如此才能確定起始的角度為何。</p>\n<p>如果位在同一個左右半平面，則透過外積的方式比較兩個向量的先後順序。以下程式碼是從座標平面270度的地方開始逆時針掃一圈依序經過的點。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pt a, pt b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> f1 = a &lt; pt&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> f2 = b &lt; pt&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f1 != f2)<span class=\"keyword\">return</span> f1 &lt; f2;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a ^ b) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//逆時針將點進行極角排序，從270度開始逆時針</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">sort</span>(p.<span class=\"built_in\">begin</span>(),p.<span class=\"built_in\">end</span>(),cmp);     <span class=\"comment\">//以id為原點進行極角排序</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"凸包函數（使用Monotone-Chain）\"><a href=\"#凸包函數（使用Monotone-Chain）\" class=\"headerlink\" title=\"凸包函數（使用Monotone Chain）\"></a>凸包函數（使用Monotone Chain）</h3><p>首先先將所有點依照x座標進行排序，之後用掃描線由左而右的將符合要求的點推入維護的單調容器中，維護下凸包，接著利用reverse()函數將所有點逆序，也就是x座標由大到小讓掃描線由右而左掃過一遍，將上凸包也圍起來。時間複雜度為$O(n\\log n)$。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(pt a, pt b, pt o)</span></span>&#123;</span><br><span class=\"line\">    pt aa = a - o;</span><br><span class=\"line\">    pt bb = b - o;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (aa ^ bb) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;pt&gt; <span class=\"title\">convex_hull</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    vector&lt;pt&gt; hull;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(p.<span class=\"built_in\">begin</span>(),p.<span class=\"built_in\">end</span>(),cmp);       <span class=\"comment\">//首先對x進行排序</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : p)&#123;                   <span class=\"comment\">//依序走訪，如果遇到外積&lt;0則不在凸包上</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(hull.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">check</span>(i,hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))&#123;</span><br><span class=\"line\">            hull.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hull.<span class=\"built_in\">push_back</span>(i);             <span class=\"comment\">//在凸包hull的每一點都符合外積小於0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> down_hull = hull.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    hull.<span class=\"built_in\">pop_back</span>();                   <span class=\"comment\">//x最大的點會在凸包上，不用做兩次先pop一次</span></span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(p.<span class=\"built_in\">begin</span>(),p.<span class=\"built_in\">end</span>());        <span class=\"comment\">//將所有點逆序之後做一次上面的凸包</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i: p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(hull.<span class=\"built_in\">size</span>() &gt; down_hull &amp;&amp; <span class=\"built_in\">check</span>(i,hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))&#123;</span><br><span class=\"line\">            hull.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hull.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hull;                       <span class=\"comment\">//起點會經過兩次，剛好來算有向面積</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"旋轉卡尺\"><a href=\"#旋轉卡尺\" class=\"headerlink\" title=\"旋轉卡尺\"></a>旋轉卡尺</h3><p>旋轉卡尺可以被應用在尋找最遠點對、面積最大三角形等問題。利用兩條平行的線中間夾著凸包，繞一圈的過程中更新需要求的數值。實作上來說就是使用兩個指針，分別指向旋轉卡尺的平行線所在的兩個點，依照旋轉的方向進行增減的動作！</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check2</span><span class=\"params\">(pt a,pt b,pt c,pt d)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> aa = <span class=\"built_in\">abs</span>((a - c)^(b - c));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> bb = <span class=\"built_in\">abs</span>((a - d)^(b - d));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> aa &lt; bb;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>,d = h,sz = hull.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,sz<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"built_in\">check2</span>(hull[i],hull[(i+<span class=\"number\">1</span>)%sz],hull[d],hull[(d+<span class=\"number\">1</span>)%sz]))</span><br><span class=\"line\">            d = (d+<span class=\"number\">1</span>)%sz;</span><br><span class=\"line\">        ans = <span class=\"built_in\">max</span>(ans,(hull[i]-hull[d]).<span class=\"built_in\">dis</span>());</span><br><span class=\"line\">        ans = <span class=\"built_in\">max</span>(ans,(hull[(i+<span class=\"number\">1</span>)%sz]-hull[d]).<span class=\"built_in\">dis</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"基本數學知識\"><a href=\"#基本數學知識\" class=\"headerlink\" title=\"基本數學知識\"></a>基本數學知識</h2><p>計算幾何圍繞著幾個主軸，向量運算、內積、外積，利用它們進行角度、共線與否、距離等等的判斷。之前有稍微接觸過向量，不過內積與外積是第一次碰到的主題。</p>\n<p>因為目前絕大部分的討論都是在二維平面上進行，因此以下都是以二維平面為前提所進行的討論！</p>\n<h3 id=\"內積（點積）\"><a href=\"#內積（點積）\" class=\"headerlink\" title=\"內積（點積）\"></a>內積（點積）</h3><p>內積跟 $\\cos\\theta$ 有關，因此主要可以幫助我們判斷線段是否垂直（等於零）、以及共線時點位於正向或是反向的判斷（等於正負一）。兩個向量 $\\vec u$ 以及 $\\vec v$ 的內積可以寫成以下關係式：</p>\n<script type=\"math/tex; mode=display\">\\vec u\\cdot \\vec v = |\\vec u||\\vec v|\\cos\\theta = u_1v_1 + u_2v_2</script><p>兩個向量做內積的正負號會跟餘弦函數的正負變化相同（如下圖），值域為 $[-|\\vec u||\\vec v|,|\\vec u||\\vec v|]$，並且在 $\\theta = 0,\\pi$ 有最大最小值，$\\theta = \\frac{\\pi}{2},\\frac{3\\pi}{2}$ 的值為零。</p>\n<p><img src=\"https://i.imgur.com/Si0hlNr.png\" alt=\"\"></p>\n<h3 id=\"外積（叉積）\"><a href=\"#外積（叉積）\" class=\"headerlink\" title=\"外積（叉積）\"></a>外積（叉積）</h3><p>外積跟 $\\sin\\theta$ 有關，主要可以判斷兩向量方向關係（順逆時針旋轉）、是否平行、比較角度大小等。外積的應用十分廣泛，找凸包以及旋轉卡尺都會用到外積判斷兩個向量角度關係。兩個向量 $\\vec u$ 以及 $\\vec v$ 的外積可以寫成以下關係式：</p>\n<script type=\"math/tex; mode=display\">\\vec u\\times \\vec v = |\\vec u||\\vec v|\\sin\\theta = \\begin{bmatrix}u_1&u_2\\\\v_1&v_2\\end{bmatrix}=u_1v_2 - u_2v_1</script><p>用更簡單的方式理解外積 $\\vec u\\times \\vec v$ ，其正負值可以想像成 $\\vec u$ 轉向 $\\vec v$ 所經的劣弧順逆時鐘方向。順時針為正、逆時針為負。</p>\n<p>關於外積的數值變化，與正弦函數的變化是一樣的（下圖），其值域跟內積一樣，不過最大最小值發生在 $\\theta = \\frac{\\pi}{2},\\frac{3\\pi}{2}$，並在 $\\theta = 0,\\pi$ 時兩向量叉積為零。</p>\n<p><img src=\"https://i.imgur.com/ozKfaKL.png\" alt=\"\"></p>\n<h3 id=\"面積\"><a href=\"#面積\" class=\"headerlink\" title=\"面積\"></a>面積</h3><h4 id=\"測量師公式（行列式）\"><a href=\"#測量師公式（行列式）\" class=\"headerlink\" title=\"測量師公式（行列式）\"></a>測量師公式（行列式）</h4><p>這是一個從給定多邊形的座標推得面積的公式，寫成很多個三角形有向面積的總和。以下圖來說，$\\triangle FBC$、$\\triangle FCD$ 、$\\triangle FDE$ 的有向面積皆大於零，而 $\\triangle FAB$、$\\triangle FEA$ 都會因為有向面積是負的（逆時針旋轉）而被扣除掉，運算的總和即是多邊形 $ABCDE$ 的面積！</p>\n<p><img src=\"https://i.imgur.com/did2OzY.png\" alt=\"\"></p>\n<p>一般化的公式，多邊形上總共有 $N$ 個點，令第 $N+1$ 個點為第1個點（為了要繞一圈計算面積），多邊形面積為：</p>\n<script type=\"math/tex; mode=display\">AREA = \\frac{1}{2}\\sum_{i=1}^{N}\\vec{P_i}\\times\\vec{P_{i+1}}</script><h4 id=\"三角形外積面積公式\"><a href=\"#三角形外積面積公式\" class=\"headerlink\" title=\"三角形外積面積公式\"></a>三角形外積面積公式</h4><p>三角形面積有非常多算法，不過利用外積的公式還是第一次聽到。以下是公式推導過程：</p>\n<p>先從高中三角函數的三角形公式開始：</p>\n<script type=\"math/tex; mode=display\">\\begin{split}\\triangle ABC &= \\frac{1}{2}\\overline{AB}\\,\\overline{AC}\\cdot\\sin A\n\\\\&=\\frac{1}{2}\\sqrt{\\overline{AB}^2\\,\\overline{AC}^2\\,(1-\\cos^2A)}\n\\\\&=\\frac{1}{2}\\sqrt{\\overline{AB}^2\\,\\overline{AC}^2-(\\overline{AB}\\cdot\\overline{AC})^2}\n\\\\&=\\frac{1}{2}\\sqrt{(x_1^2+y_1^2)(x_2^2+y_2^2)-(x_1\\,x_2+y_1\\,y_2)^2}\n\\\\&=\\frac{1}{2}\\sqrt{(x_1^2\\,y_2^2)+(x_2^2\\,y_1^2)-2x_1\\,y_2\\,x_2\\,y_1}\n\\\\&=\\frac{1}{2}\\sqrt{[(x_1\\,y_2)-(x_2\\,y_1)]^2}\n\\\\&=\\frac{1}{2}|\\overrightarrow{AB}\\times \\overrightarrow{AC}|\\end{split}</script><p>將三角形其中一點對另外兩點的向量做外積，除以2即為三角形面積。這個公式會在旋轉卡尺的地方使用到！</p>\n<h4 id=\"平行四邊形面積\"><a href=\"#平行四邊形面積\" class=\"headerlink\" title=\"平行四邊形面積\"></a>平行四邊形面積</h4><p>根據上面三角形面積公式的推導，可以相對應得知道兩向量所夾平行四邊形面積公式：</p>\n<script type=\"math/tex; mode=display\">AREA = |\\overrightarrow{AB}\\times \\overrightarrow{AC}|</script><p><img src=\"https://i.imgur.com/9mUdyV6.png\" alt=\"\"></p>\n","site":{"data":{}},"length":6538,"excerpt":"<p>暑假剩沒多少天了，趕緊追進度啊！</p>\n<h2 id=\"課程內容\"><a href=\"#課程內容\" class=\"headerlink\" title=\"課程內容\"></a>課程內容</h2><h3 id=\"座標與向量\"><a href=\"#座標與向量\" class=\"headerlink\" title=\"座標與向量\"></a>座標與向量</h3><ul>\n<li>長度、角度、座標、向量</li>\n<li>最常以座標、向量表示","more":"</li>\n<li>Define x first, y second</li>\n<li>內積Dot：$A \\cdot B = A_xB_x+A_yB_y$</li>\n<li>外積Cross：$A \\times B = A_xB_y-A_yB_x$</li>\n<li>運算子重載：加減乘除、取純量（$abs()$）</li>\n</ul>\n<h3 id=\"有向面積\"><a href=\"#有向面積\" class=\"headerlink\" title=\"有向面積\"></a>有向面積</h3><ul>\n<li>用外積算面積（有正負：有向面積）</li>\n<li>逆時針為正、順時針為負</li>\n<li>多邊形面積：任選平面上一點A，將所有點與A連線</li>\n<li>透過順、逆加總有向面積（p0,p1…pn,其中p0=pn）</li>\n<li>AREA = $\\frac{1}{2}\\sum<em>{i=0}^{N-1}\\vec{P_i}\\times\\vec{P</em>{i+1}}$</li>\n</ul>\n<h3 id=\"線段相交\"><a href=\"#線段相交\" class=\"headerlink\" title=\"線段相交\"></a>線段相交</h3><ul>\n<li>線段不平行：$P_1$ 與$P_2$ 會在線段$P_3$、$P_4$異側（方向函數）</li>\n<li>線段平行：檢驗是否共線、並確認某一個點是否在線段上</li>\n</ul>\n<h3 id=\"誤差分析：EPS\"><a href=\"#誤差分析：EPS\" class=\"headerlink\" title=\"誤差分析：EPS\"></a>誤差分析：EPS</h3><ul>\n<li>使用二進位儲存：必產生誤差</li>\n<li>精度：float $10^{-7}$, double $10^{-16}$, long double $10^{-19}$</li>\n<li>誤差容忍值$eps$，將 $x\\pm eps$視為 $x$</li>\n<li>重載運算子：==（視為相等）,&gt;,&lt;，加上誤差範圍</li>\n<li>Eps大小：多落在 $10^{-6}$到 $10^{-12}$ 之間</li>\n<li>誤差：加減法，絕對誤差相加；乘除法，相對誤差相加</li>\n<li>下界：數字範圍為V內時，$eps$ 至少要VK 乘上資料型態本身誤差</li>\n<li>上界：題目一般會給</li>\n<li>避免誤差大法：非到最後關頭，否則都用整數運算！</li>\n</ul>\n<h3 id=\"三角函數\"><a href=\"#三角函數\" class=\"headerlink\" title=\"三角函數\"></a>三角函數</h3><ul>\n<li>泰勒展開式逼近，時間並非O(1)</li>\n<li>$atan2(y,x) = \\theta$，回傳值域$(-pi,pi]$</li>\n<li>回傳long double ：使用$atan2l(y,x)$</li>\n<li>常數大，不建議使用</li>\n</ul>\n<h3 id=\"IEEE-754\"><a href=\"#IEEE-754\" class=\"headerlink\" title=\"IEEE 754\"></a>IEEE 754</h3><ul>\n<li>Sign, Exponent, Mantissa</li>\n<li>正負號、指數部分、小數部分</li>\n</ul>\n<h3 id=\"極角排序\"><a href=\"#極角排序\" class=\"headerlink\" title=\"極角排序\"></a>極角排序</h3><ul>\n<li>給定很多點，依照與某特定點（原點）的角度進行排序</li>\n<li>Sort by cross，依照內積排序</li>\n<li>題目：平面上n個點，問一條直線最多通過幾個點 </li>\n</ul>\n<h3 id=\"凸包\"><a href=\"#凸包\" class=\"headerlink\" title=\"凸包\"></a>凸包</h3><ul>\n<li>多邊形：簡單多邊形（邊不相交）、凸多邊形（內角都≤180）、凹多邊形（有內角&gt;180）</li>\n<li>能包住所有點的凸多邊形</li>\n<li>凸包求法：Monotone Chain（二維平面）、DC（三維）</li>\n<li><strong>Monotone Chain</strong><ul>\n<li>將所有點按照(x,y)排序</li>\n<li>把下凸包、上凸包「圍」出來</li>\n<li>合併下凸包、上凸包</li>\n<li>開一個vector（功能為stack）紀錄當前下半凸包</li>\n<li>檢查新加入的點會讓哪些點不再是凸包上的點</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"模擬退火-SA\"><a href=\"#模擬退火-SA\" class=\"headerlink\" title=\"模擬退火(SA)\"></a>模擬退火(SA)</h3><ul>\n<li>尋找空間中近似最優解</li>\n<li>一個隨機算法</li>\n<li>例題：給你平面上 N 個點，請你找出一個點，使得這個點連到這 N 個點的距離總和最短</li>\n</ul>\n<h2 id=\"計算幾何函式模板\"><a href=\"#計算幾何函式模板\" class=\"headerlink\" title=\"計算幾何函式模板\"></a>計算幾何函式模板</h2><p>計算幾何最重要的莫過於座標上的點，實作方式可以用 $std::pair$ 或是自己定義一個類別，將點的資訊以及相關的運算式定義出來。我們總共需要重載點的大於、等於、小於的運算子，以及加法減法、向量外積內積等，同時還有很多功能是可以繼續定義下去，例如向量乘上一個定值，可以繼續加入類別中。</p>\n<h3 id=\"點的模板及運算子重載\"><a href=\"#點的模板及運算子重載\" class=\"headerlink\" title=\"點的模板及運算子重載\"></a>點的模板及運算子重載</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &lt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &lt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &gt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &gt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &gt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">abs</span>(x-b.x)&lt;=eps &amp;&amp; <span class=\"built_in\">abs</span>(y-b.y)&lt;=eps)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>+(pt b) &#123;<span class=\"keyword\">return</span> &#123;x + b.x, y + b.y&#125;;&#125; <span class=\"comment\">//向量相加</span></span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>-(pt b) &#123;<span class=\"keyword\">return</span> &#123;x - b.x, y - b.y&#125;;&#125; <span class=\"comment\">//向量相減</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>^(pt b) &#123;<span class=\"keyword\">return</span> x * b.y - y * b.x;&#125; <span class=\"comment\">//向量外積cross</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>*(pt b) &#123;<span class=\"keyword\">return</span> x * b.x + y * b.y;&#125; <span class=\"comment\">//向量內積dot</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>以上是預設點的x座標y座標都是整數的情況，如果要改成使用自定義型別，可以改用樣板(Template)自定義資料型別，根據題目的要求，使用整數或是浮點數進行運算。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    T x,y;</span><br><span class=\"line\">    <span class=\"comment\">//下方運算子重載與上方相同</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">pt&lt;<span class=\"keyword\">int</span>&gt; p[N];        <span class=\"comment\">//點座標宣告為整數</span></span><br><span class=\"line\">pt&lt;<span class=\"keyword\">double</span>&gt; pp[N];    <span class=\"comment\">//點的不同資料型別宣告</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"方向函數\"><a href=\"#方向函數\" class=\"headerlink\" title=\"方向函數\"></a>方向函數</h3><p>針對 $\\vec a$ 以及 $\\vec b$ 外積的結果，可以知道兩者之間相對的方向。如果 $\\vec a$ 和 $\\vec b$ 共線，則回傳0，$\\vec a$ 轉向 $\\vec b$ 如果是順時針則回傳1，其餘回傳-1。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dir</span><span class=\"params\">(pt a, pt b, pt o)</span> </span>&#123;                         <span class=\"comment\">//方向函數</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cross = (a - o) ^ (b - o);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(cross) &lt;= eps) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cross &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"點與線段關係\"><a href=\"#點與線段關係\" class=\"headerlink\" title=\"點與線段關係\"></a>點與線段關係</h3><p>以下函式可以判斷點o是否在 $\\overline{AB}$ 上，首先利用外積是否為0判斷是 $\\overline{OA}$ 與 $\\overline{OB}$ 是否平行；接著以內積判斷是否在線段中，而非線段的兩側（平行的條件下內積只可能是1或是-1）。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">onseg</span><span class=\"params\">(pt a, pt b, pt o)</span></span>&#123;         <span class=\"comment\">//o是否在ab線段上</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cross = (a - o) ^ (b - o);    <span class=\"comment\">//是否平行</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> dot = (a - o) * (b - o);      <span class=\"comment\">//是否在線段中</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (cross == <span class=\"number\">0</span>)&amp;&amp;(dot &lt;= <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"線段相交-1\"><a href=\"#線段相交-1\" class=\"headerlink\" title=\"線段相交\"></a>線段相交</h3><p>以下函式為給定四個點$A,B,C,D$，判斷 $\\overline{AB}$ 是否相交於 $\\overline{CD}$。首先是特例的判斷，線段的其中一端點在另一線段上，利用上方點與線段關係的函式完成這個判斷。</p>\n<p>特例判斷完成之後，我們需要用到上方方向函式判斷線段兩端點是否在另一條線段的異側，即以下的關係式：</p>\n<script type=\"math/tex; mode=display\">dir(A,B,C)\\times dir(A,B,D) < 0</script><p>我們要檢查兩條線段，其相乘結果必須皆為負數，表示處於線段的異側！最後是平行線的判斷，如果兩線平行且相交，表示兩線共線，這可以在特例時就被判斷出來。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Intersection</span><span class=\"params\">(pt a, pt b, pt c, pt d)</span></span>&#123;      <span class=\"comment\">//線段ab是否與cd相交</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">onseg</span>(a,b,c)||<span class=\"built_in\">onseg</span>(a,b,d))<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  <span class=\"comment\">//點c、d是否洽在線段ab上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">onseg</span>(c,d,a)||<span class=\"built_in\">onseg</span>(c,d,b))<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  <span class=\"comment\">//點a、b是否洽在線段cd上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">dir</span>(a,b,c)*<span class=\"built_in\">dir</span>(a,b,d)==<span class=\"number\">-1</span> &amp;&amp; <span class=\"built_in\">dir</span>(c,d,a)*<span class=\"built_in\">dir</span>(c,d,b)==<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;                            <span class=\"comment\">//對於線段兩端點看另外兩端點必須方向相反</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"極角排序-1\"><a href=\"#極角排序-1\" class=\"headerlink\" title=\"極角排序\"></a>極角排序</h3><p>在進行全點對線段共線問題的判斷時，使用極角排序通常會比單純暴力枚舉更快速。極角也就是極座標中每一個跟原點的夾角。如果兩個點位在左半平與右半平面，則先將其判斷出來，如此才能確定起始的角度為何。</p>\n<p>如果位在同一個左右半平面，則透過外積的方式比較兩個向量的先後順序。以下程式碼是從座標平面270度的地方開始逆時針掃一圈依序經過的點。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pt a, pt b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> f1 = a &lt; pt&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> f2 = b &lt; pt&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f1 != f2)<span class=\"keyword\">return</span> f1 &lt; f2;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a ^ b) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//逆時針將點進行極角排序，從270度開始逆時針</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">sort</span>(p.<span class=\"built_in\">begin</span>(),p.<span class=\"built_in\">end</span>(),cmp);     <span class=\"comment\">//以id為原點進行極角排序</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"凸包函數（使用Monotone-Chain）\"><a href=\"#凸包函數（使用Monotone-Chain）\" class=\"headerlink\" title=\"凸包函數（使用Monotone Chain）\"></a>凸包函數（使用Monotone Chain）</h3><p>首先先將所有點依照x座標進行排序，之後用掃描線由左而右的將符合要求的點推入維護的單調容器中，維護下凸包，接著利用reverse()函數將所有點逆序，也就是x座標由大到小讓掃描線由右而左掃過一遍，將上凸包也圍起來。時間複雜度為$O(n\\log n)$。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(pt a, pt b, pt o)</span></span>&#123;</span><br><span class=\"line\">    pt aa = a - o;</span><br><span class=\"line\">    pt bb = b - o;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (aa ^ bb) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;pt&gt; <span class=\"title\">convex_hull</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    vector&lt;pt&gt; hull;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(p.<span class=\"built_in\">begin</span>(),p.<span class=\"built_in\">end</span>(),cmp);       <span class=\"comment\">//首先對x進行排序</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : p)&#123;                   <span class=\"comment\">//依序走訪，如果遇到外積&lt;0則不在凸包上</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(hull.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">check</span>(i,hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))&#123;</span><br><span class=\"line\">            hull.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hull.<span class=\"built_in\">push_back</span>(i);             <span class=\"comment\">//在凸包hull的每一點都符合外積小於0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> down_hull = hull.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    hull.<span class=\"built_in\">pop_back</span>();                   <span class=\"comment\">//x最大的點會在凸包上，不用做兩次先pop一次</span></span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(p.<span class=\"built_in\">begin</span>(),p.<span class=\"built_in\">end</span>());        <span class=\"comment\">//將所有點逆序之後做一次上面的凸包</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i: p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(hull.<span class=\"built_in\">size</span>() &gt; down_hull &amp;&amp; <span class=\"built_in\">check</span>(i,hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))&#123;</span><br><span class=\"line\">            hull.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hull.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hull;                       <span class=\"comment\">//起點會經過兩次，剛好來算有向面積</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"旋轉卡尺\"><a href=\"#旋轉卡尺\" class=\"headerlink\" title=\"旋轉卡尺\"></a>旋轉卡尺</h3><p>旋轉卡尺可以被應用在尋找最遠點對、面積最大三角形等問題。利用兩條平行的線中間夾著凸包，繞一圈的過程中更新需要求的數值。實作上來說就是使用兩個指針，分別指向旋轉卡尺的平行線所在的兩個點，依照旋轉的方向進行增減的動作！</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check2</span><span class=\"params\">(pt a,pt b,pt c,pt d)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> aa = <span class=\"built_in\">abs</span>((a - c)^(b - c));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> bb = <span class=\"built_in\">abs</span>((a - d)^(b - d));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> aa &lt; bb;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>,d = h,sz = hull.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,sz<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"built_in\">check2</span>(hull[i],hull[(i+<span class=\"number\">1</span>)%sz],hull[d],hull[(d+<span class=\"number\">1</span>)%sz]))</span><br><span class=\"line\">            d = (d+<span class=\"number\">1</span>)%sz;</span><br><span class=\"line\">        ans = <span class=\"built_in\">max</span>(ans,(hull[i]-hull[d]).<span class=\"built_in\">dis</span>());</span><br><span class=\"line\">        ans = <span class=\"built_in\">max</span>(ans,(hull[(i+<span class=\"number\">1</span>)%sz]-hull[d]).<span class=\"built_in\">dis</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"基本數學知識\"><a href=\"#基本數學知識\" class=\"headerlink\" title=\"基本數學知識\"></a>基本數學知識</h2><p>計算幾何圍繞著幾個主軸，向量運算、內積、外積，利用它們進行角度、共線與否、距離等等的判斷。之前有稍微接觸過向量，不過內積與外積是第一次碰到的主題。</p>\n<p>因為目前絕大部分的討論都是在二維平面上進行，因此以下都是以二維平面為前提所進行的討論！</p>\n<h3 id=\"內積（點積）\"><a href=\"#內積（點積）\" class=\"headerlink\" title=\"內積（點積）\"></a>內積（點積）</h3><p>內積跟 $\\cos\\theta$ 有關，因此主要可以幫助我們判斷線段是否垂直（等於零）、以及共線時點位於正向或是反向的判斷（等於正負一）。兩個向量 $\\vec u$ 以及 $\\vec v$ 的內積可以寫成以下關係式：</p>\n<script type=\"math/tex; mode=display\">\\vec u\\cdot \\vec v = |\\vec u||\\vec v|\\cos\\theta = u_1v_1 + u_2v_2</script><p>兩個向量做內積的正負號會跟餘弦函數的正負變化相同（如下圖），值域為 $[-|\\vec u||\\vec v|,|\\vec u||\\vec v|]$，並且在 $\\theta = 0,\\pi$ 有最大最小值，$\\theta = \\frac{\\pi}{2},\\frac{3\\pi}{2}$ 的值為零。</p>\n<p><img src=\"https://i.imgur.com/Si0hlNr.png\" alt=\"\"></p>\n<h3 id=\"外積（叉積）\"><a href=\"#外積（叉積）\" class=\"headerlink\" title=\"外積（叉積）\"></a>外積（叉積）</h3><p>外積跟 $\\sin\\theta$ 有關，主要可以判斷兩向量方向關係（順逆時針旋轉）、是否平行、比較角度大小等。外積的應用十分廣泛，找凸包以及旋轉卡尺都會用到外積判斷兩個向量角度關係。兩個向量 $\\vec u$ 以及 $\\vec v$ 的外積可以寫成以下關係式：</p>\n<script type=\"math/tex; mode=display\">\\vec u\\times \\vec v = |\\vec u||\\vec v|\\sin\\theta = \\begin{bmatrix}u_1&u_2\\\\v_1&v_2\\end{bmatrix}=u_1v_2 - u_2v_1</script><p>用更簡單的方式理解外積 $\\vec u\\times \\vec v$ ，其正負值可以想像成 $\\vec u$ 轉向 $\\vec v$ 所經的劣弧順逆時鐘方向。順時針為正、逆時針為負。</p>\n<p>關於外積的數值變化，與正弦函數的變化是一樣的（下圖），其值域跟內積一樣，不過最大最小值發生在 $\\theta = \\frac{\\pi}{2},\\frac{3\\pi}{2}$，並在 $\\theta = 0,\\pi$ 時兩向量叉積為零。</p>\n<p><img src=\"https://i.imgur.com/ozKfaKL.png\" alt=\"\"></p>\n<h3 id=\"面積\"><a href=\"#面積\" class=\"headerlink\" title=\"面積\"></a>面積</h3><h4 id=\"測量師公式（行列式）\"><a href=\"#測量師公式（行列式）\" class=\"headerlink\" title=\"測量師公式（行列式）\"></a>測量師公式（行列式）</h4><p>這是一個從給定多邊形的座標推得面積的公式，寫成很多個三角形有向面積的總和。以下圖來說，$\\triangle FBC$、$\\triangle FCD$ 、$\\triangle FDE$ 的有向面積皆大於零，而 $\\triangle FAB$、$\\triangle FEA$ 都會因為有向面積是負的（逆時針旋轉）而被扣除掉，運算的總和即是多邊形 $ABCDE$ 的面積！</p>\n<p><img src=\"https://i.imgur.com/did2OzY.png\" alt=\"\"></p>\n<p>一般化的公式，多邊形上總共有 $N$ 個點，令第 $N+1$ 個點為第1個點（為了要繞一圈計算面積），多邊形面積為：</p>\n<script type=\"math/tex; mode=display\">AREA = \\frac{1}{2}\\sum_{i=1}^{N}\\vec{P_i}\\times\\vec{P_{i+1}}</script><h4 id=\"三角形外積面積公式\"><a href=\"#三角形外積面積公式\" class=\"headerlink\" title=\"三角形外積面積公式\"></a>三角形外積面積公式</h4><p>三角形面積有非常多算法，不過利用外積的公式還是第一次聽到。以下是公式推導過程：</p>\n<p>先從高中三角函數的三角形公式開始：</p>\n<script type=\"math/tex; mode=display\">\\begin{split}\\triangle ABC &= \\frac{1}{2}\\overline{AB}\\,\\overline{AC}\\cdot\\sin A\n\\\\&=\\frac{1}{2}\\sqrt{\\overline{AB}^2\\,\\overline{AC}^2\\,(1-\\cos^2A)}\n\\\\&=\\frac{1}{2}\\sqrt{\\overline{AB}^2\\,\\overline{AC}^2-(\\overline{AB}\\cdot\\overline{AC})^2}\n\\\\&=\\frac{1}{2}\\sqrt{(x_1^2+y_1^2)(x_2^2+y_2^2)-(x_1\\,x_2+y_1\\,y_2)^2}\n\\\\&=\\frac{1}{2}\\sqrt{(x_1^2\\,y_2^2)+(x_2^2\\,y_1^2)-2x_1\\,y_2\\,x_2\\,y_1}\n\\\\&=\\frac{1}{2}\\sqrt{[(x_1\\,y_2)-(x_2\\,y_1)]^2}\n\\\\&=\\frac{1}{2}|\\overrightarrow{AB}\\times \\overrightarrow{AC}|\\end{split}</script><p>將三角形其中一點對另外兩點的向量做外積，除以2即為三角形面積。這個公式會在旋轉卡尺的地方使用到！</p>\n<h4 id=\"平行四邊形面積\"><a href=\"#平行四邊形面積\" class=\"headerlink\" title=\"平行四邊形面積\"></a>平行四邊形面積</h4><p>根據上面三角形面積公式的推導，可以相對應得知道兩向量所夾平行四邊形面積公式：</p>\n<script type=\"math/tex; mode=display\">AREA = |\\overrightarrow{AB}\\times \\overrightarrow{AC}|</script><p><img src=\"https://i.imgur.com/9mUdyV6.png\" alt=\"\"></p>"},{"title":"2020資訊之芽—線段樹(Segment Tree)","date":"2021-08-04T16:00:00.000Z","mathjax":true,"_content":"\n今年是2021，資芽的二階主題跟2020上的有很多的差別，因此會利用暑假把2020的東西也補一補！\n## 課程內容\n### 儲存\n線段樹很多人都用陣列來實作，空間$O(n)$，在處理樹的左右節點也十分的方便。如果以1-base來儲存陣列這棵線段樹，左右節點可以用以下的index來表示。線段樹有一個優點就是它可以用儲存完滿二元樹的方式來儲存，雖然它不一定是完滿但會是平衡的一棵樹。左節點：$2n$，右節點$2n+1$。\n![](https://i.imgur.com/PxXXqsl.png)\n<!-- more -->\n\n### 空間大小\n一般來說線段樹的陣列會開$seg[4\\times n]$，由以下證明得到的結果：\n\n{% note default %}\n對於一個有$2^k$的葉節點數的一棵樹，總共的節點共有 $\\sum_{i=0}^k 2^i = 2^{k+1}-1$ 個節點。若今天陣列共有n個元素，則代表葉節點共有$2^{\\lceil \\log_2 n\\rceil}$ 個，總節點數量共有$2^{\\lceil \\log_2 n\\rceil+1}-1$ 個。\n假設$n = 2^k+p,0≤p≤2^k$，則帶入前面公式 $2^{\\lceil \\log_2 n\\rceil}=2^{k+1}$，根據前面推得的總節點數可以知道為 $2^{k+2}-1$，其值恆小於$4n$，因此開$4n$的陣列一定可以容納整個線段樹。\n{% endnote %}\n\n由以上推倒可以知道一般都會開$seg[4\\times n]$，但是如果n剛好是二的冪次，其實只會用到$2n$的空間，有一半會被浪費掉，不過沒差，因為多開總比少開來得好！\n[懶標線段樹程式碼連結](https://gist.github.com/peienwu/368723520e3c39e4e0edc27a0823da69)，懶標這東西實在折磨人，學長寫的一個堪稱不用下推的懶標程式碼，結果他是錯的！！！害我Debug超久，可惡\n![](https://i.imgur.com/mEY8cFD.png)\n這是學長的query程式碼，可以看到他回傳的是$(r-l)\\times lazy[cur]$，這是錯誤的，因為不一定左右兩子樹都會被全部加上懶標的值（可能只會有部分交集），但這份code卻直接加上去，會多算而WA，要注意！\n![](https://i.imgur.com/nsd2KVP.png)\n更改版，對區間取聯集應該就對了！\n\n### 實作部分\n這個版本是用struct實作，比起用陣列實作，這個版本更為方便閱讀，容易理解。為了方便索引值查詢左右子樹，使用1-base來儲存線段樹，同時利用一個struct儲存每一個節點。同時，每一個區間採用的是左閉右開 $[l,r)$，區間和的實作如下：\n```cpp=\nstruct Node{            //線段樹每一個節點\n    int val=0,tag=0,sz; //val原本的值、tag懶標、sz區間大小\n    int rv(){           //回傳實際節點的值\n        return val+tag*sz;\n    }\n}seg[4*N];\n```\n\n#### 建立(Build)\n分別遞迴建立左右子樹，同時更新每一個節點的大小sz。因為是左閉右開，直接左右相減r-l即可完成更新。\n```cpp=+\nvoid build(int l,int r,int cur){    //建立線段樹\n    seg[cur].sz = r-l;              //更新節點的大小\n    if(r<=l)return;                 //空區間回傳\n    if(r-l==1){                     //設定當前節點的值\n        seg[cur].val = arr[l];\n        return;\n    }\n    int m = (l+r)/2;                //分別遞迴建立左右子樹\n    build(l,m,2*cur);\n    build(m,r,2*cur+1);\n    seg[cur].val = seg[2*cur].val+seg[2*cur+1].val;\n}\n```\n\n#### 下推(push)\n懶標真是驚人的想法，在區間修改的時候以$O(logn)$在要修改的區間先懶標標記起來，等到要query的時候把懶標推下去，這樣可以確保區間修改的複雜度是$O(logn)$，同時query的時候順便下推，一來比較好實作、二來複雜度也不會有什麼改變， 因為下推的複雜度是$O(1)$。\n```cpp=+\n//把id的懶標在query的時候往下推\nvoid push(int id){\n    seg[2*id].tag += seg[id].tag;   //左子樹懶標更新\n    seg[2*id+1].tag += seg[id].tag; //右子樹懶標更新\n    seg[id].val = seg[id].rv();     //更新實際值\n    seg[id].tag = 0;                //往下推完之後設定為預設\n}\n```\n#### 區間詢問(query)\n這裡的重點是下推，如果把懶標下推，可以確保區間修改的時間是$O(logn)$\n```cpp=+\n//區間詢問\nint query(int cur,int l,int r,int ql,int qr){\n    if(r<=l || ql>=r || qr<=l)return 0;         //空集合直接回傳\n    if(ql<=l && qr>=r)return seg[cur].rv();     //包含在要詢問的範圍中，回傳實際值\n    push(cur);                                  //將懶標在遞迴下去的過程中下推\n    int mid = (l+r)/2;                          //遞迴查詢左右子樹\n    return query(cur*2,l,mid,ql,qr)+query(cur*2+1,mid,r,ql,qr);\n}\n```\n\n#### 區點修改(modify)\n可以這樣理解，在區間修改中，透過遞迴完左右子樹拉上來的過程中，更新樹上較上方的節點的值（用懶標更新）。此時下方節點都還沒有被更新，等到query的時候會往下push順便把值也一起更新。\n```cpp=+\n//區間修改\nvoid modify(int cur,int l,int r,int ql,int qr,int val){\n    if (r<=l||ql>=r||qr<=l)return;\n    if (ql<=l && qr>=r) {\n        seg[cur].tag += val;               //將被完整包含的區間的懶標加上修改值\n        return;\n    }\n    int mid = (l+r)/2;\n    modify(cur*2,l,mid,ql,qr,val);          //修改左右子樹\n    modify(cur*2+1,mid,r,ql,qr,val);        //遞迴完拉上來的過程中把上面的數值更新成有懶標的結果\n    seg[cur].val = seg[2*cur].rv()+seg[2*cur+1].rv();\n}\n```\n#### 單點修改(modify)\n這一題沒有要求單點修改，所以以下是RMQ的單點修改。概念較為簡單，用$O(logn)$找到要修改的點，直接修改即可。\n```cpp=\nvoid modify(int cur,int l,int r,int ind,int val){\n    if(r<=l)return;\n    if(r-l==1 && l==ind){\n        seg[cur]=val;\n        return;\n    }\n    int mid = (l+r)/2;\n    if(ind<mid)modify(cur*2,l,mid,ind,val);\n    else modify(cur*2+1,mid,r,ind,val);\n    seg[cur] = min(seg[2*cur],seg[2*cur+1]);\n}\n```\n### 動態開點\n\n> 有一個長度是 $10^9$ 的序列，一開始裡面的元素都是$0$，有 $Q$ 筆操作，每一個操作是以下其中兩種：\n> 1. 把之間的值都加上$v$ \n> 2. 詢問的區間和\n\n開這麼多點顯然會MLE，既然使用陣列型儲存線段樹會爆，因為這麼大的值域顯然有許多點是不會被使用到的，那就改成使用指標型來開這個線段樹，以下為每一個節點的架構：\n\n```cpp=\nstruct Node{\n    Node *l;    //指向左子樹\n    Node *r;    //指向右子樹\n    int val;    //維護區間和\n    \n};//注意struct裡面可有struct的指標，但不能有實體\n```\n","source":"_posts/Segment Tree.md","raw":"---\ntitle: 2020資訊之芽—線段樹(Segment Tree)\ndate: 2021-8-5\ntags: \n    - 2020資訊之芽\n    - 2021暑假筆記\ncategories: \n    - C++進階主題\n    - 線段樹\n\nmathjax: true\n---\n\n今年是2021，資芽的二階主題跟2020上的有很多的差別，因此會利用暑假把2020的東西也補一補！\n## 課程內容\n### 儲存\n線段樹很多人都用陣列來實作，空間$O(n)$，在處理樹的左右節點也十分的方便。如果以1-base來儲存陣列這棵線段樹，左右節點可以用以下的index來表示。線段樹有一個優點就是它可以用儲存完滿二元樹的方式來儲存，雖然它不一定是完滿但會是平衡的一棵樹。左節點：$2n$，右節點$2n+1$。\n![](https://i.imgur.com/PxXXqsl.png)\n<!-- more -->\n\n### 空間大小\n一般來說線段樹的陣列會開$seg[4\\times n]$，由以下證明得到的結果：\n\n{% note default %}\n對於一個有$2^k$的葉節點數的一棵樹，總共的節點共有 $\\sum_{i=0}^k 2^i = 2^{k+1}-1$ 個節點。若今天陣列共有n個元素，則代表葉節點共有$2^{\\lceil \\log_2 n\\rceil}$ 個，總節點數量共有$2^{\\lceil \\log_2 n\\rceil+1}-1$ 個。\n假設$n = 2^k+p,0≤p≤2^k$，則帶入前面公式 $2^{\\lceil \\log_2 n\\rceil}=2^{k+1}$，根據前面推得的總節點數可以知道為 $2^{k+2}-1$，其值恆小於$4n$，因此開$4n$的陣列一定可以容納整個線段樹。\n{% endnote %}\n\n由以上推倒可以知道一般都會開$seg[4\\times n]$，但是如果n剛好是二的冪次，其實只會用到$2n$的空間，有一半會被浪費掉，不過沒差，因為多開總比少開來得好！\n[懶標線段樹程式碼連結](https://gist.github.com/peienwu/368723520e3c39e4e0edc27a0823da69)，懶標這東西實在折磨人，學長寫的一個堪稱不用下推的懶標程式碼，結果他是錯的！！！害我Debug超久，可惡\n![](https://i.imgur.com/mEY8cFD.png)\n這是學長的query程式碼，可以看到他回傳的是$(r-l)\\times lazy[cur]$，這是錯誤的，因為不一定左右兩子樹都會被全部加上懶標的值（可能只會有部分交集），但這份code卻直接加上去，會多算而WA，要注意！\n![](https://i.imgur.com/nsd2KVP.png)\n更改版，對區間取聯集應該就對了！\n\n### 實作部分\n這個版本是用struct實作，比起用陣列實作，這個版本更為方便閱讀，容易理解。為了方便索引值查詢左右子樹，使用1-base來儲存線段樹，同時利用一個struct儲存每一個節點。同時，每一個區間採用的是左閉右開 $[l,r)$，區間和的實作如下：\n```cpp=\nstruct Node{            //線段樹每一個節點\n    int val=0,tag=0,sz; //val原本的值、tag懶標、sz區間大小\n    int rv(){           //回傳實際節點的值\n        return val+tag*sz;\n    }\n}seg[4*N];\n```\n\n#### 建立(Build)\n分別遞迴建立左右子樹，同時更新每一個節點的大小sz。因為是左閉右開，直接左右相減r-l即可完成更新。\n```cpp=+\nvoid build(int l,int r,int cur){    //建立線段樹\n    seg[cur].sz = r-l;              //更新節點的大小\n    if(r<=l)return;                 //空區間回傳\n    if(r-l==1){                     //設定當前節點的值\n        seg[cur].val = arr[l];\n        return;\n    }\n    int m = (l+r)/2;                //分別遞迴建立左右子樹\n    build(l,m,2*cur);\n    build(m,r,2*cur+1);\n    seg[cur].val = seg[2*cur].val+seg[2*cur+1].val;\n}\n```\n\n#### 下推(push)\n懶標真是驚人的想法，在區間修改的時候以$O(logn)$在要修改的區間先懶標標記起來，等到要query的時候把懶標推下去，這樣可以確保區間修改的複雜度是$O(logn)$，同時query的時候順便下推，一來比較好實作、二來複雜度也不會有什麼改變， 因為下推的複雜度是$O(1)$。\n```cpp=+\n//把id的懶標在query的時候往下推\nvoid push(int id){\n    seg[2*id].tag += seg[id].tag;   //左子樹懶標更新\n    seg[2*id+1].tag += seg[id].tag; //右子樹懶標更新\n    seg[id].val = seg[id].rv();     //更新實際值\n    seg[id].tag = 0;                //往下推完之後設定為預設\n}\n```\n#### 區間詢問(query)\n這裡的重點是下推，如果把懶標下推，可以確保區間修改的時間是$O(logn)$\n```cpp=+\n//區間詢問\nint query(int cur,int l,int r,int ql,int qr){\n    if(r<=l || ql>=r || qr<=l)return 0;         //空集合直接回傳\n    if(ql<=l && qr>=r)return seg[cur].rv();     //包含在要詢問的範圍中，回傳實際值\n    push(cur);                                  //將懶標在遞迴下去的過程中下推\n    int mid = (l+r)/2;                          //遞迴查詢左右子樹\n    return query(cur*2,l,mid,ql,qr)+query(cur*2+1,mid,r,ql,qr);\n}\n```\n\n#### 區點修改(modify)\n可以這樣理解，在區間修改中，透過遞迴完左右子樹拉上來的過程中，更新樹上較上方的節點的值（用懶標更新）。此時下方節點都還沒有被更新，等到query的時候會往下push順便把值也一起更新。\n```cpp=+\n//區間修改\nvoid modify(int cur,int l,int r,int ql,int qr,int val){\n    if (r<=l||ql>=r||qr<=l)return;\n    if (ql<=l && qr>=r) {\n        seg[cur].tag += val;               //將被完整包含的區間的懶標加上修改值\n        return;\n    }\n    int mid = (l+r)/2;\n    modify(cur*2,l,mid,ql,qr,val);          //修改左右子樹\n    modify(cur*2+1,mid,r,ql,qr,val);        //遞迴完拉上來的過程中把上面的數值更新成有懶標的結果\n    seg[cur].val = seg[2*cur].rv()+seg[2*cur+1].rv();\n}\n```\n#### 單點修改(modify)\n這一題沒有要求單點修改，所以以下是RMQ的單點修改。概念較為簡單，用$O(logn)$找到要修改的點，直接修改即可。\n```cpp=\nvoid modify(int cur,int l,int r,int ind,int val){\n    if(r<=l)return;\n    if(r-l==1 && l==ind){\n        seg[cur]=val;\n        return;\n    }\n    int mid = (l+r)/2;\n    if(ind<mid)modify(cur*2,l,mid,ind,val);\n    else modify(cur*2+1,mid,r,ind,val);\n    seg[cur] = min(seg[2*cur],seg[2*cur+1]);\n}\n```\n### 動態開點\n\n> 有一個長度是 $10^9$ 的序列，一開始裡面的元素都是$0$，有 $Q$ 筆操作，每一個操作是以下其中兩種：\n> 1. 把之間的值都加上$v$ \n> 2. 詢問的區間和\n\n開這麼多點顯然會MLE，既然使用陣列型儲存線段樹會爆，因為這麼大的值域顯然有許多點是不會被使用到的，那就改成使用指標型來開這個線段樹，以下為每一個節點的架構：\n\n```cpp=\nstruct Node{\n    Node *l;    //指向左子樹\n    Node *r;    //指向右子樹\n    int val;    //維護區間和\n    \n};//注意struct裡面可有struct的指標，但不能有實體\n```\n","slug":"Segment Tree","published":1,"updated":"2021-09-19T11:26:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvyspmgo000amuyx4ktteibv","content":"<p>今年是2021，資芽的二階主題跟2020上的有很多的差別，因此會利用暑假把2020的東西也補一補！</p>\n<h2 id=\"課程內容\"><a href=\"#課程內容\" class=\"headerlink\" title=\"課程內容\"></a>課程內容</h2><h3 id=\"儲存\"><a href=\"#儲存\" class=\"headerlink\" title=\"儲存\"></a>儲存</h3><p>線段樹很多人都用陣列來實作，空間$O(n)$，在處理樹的左右節點也十分的方便。如果以1-base來儲存陣列這棵線段樹，左右節點可以用以下的index來表示。線段樹有一個優點就是它可以用儲存完滿二元樹的方式來儲存，雖然它不一定是完滿但會是平衡的一棵樹。左節點：$2n$，右節點$2n+1$。<br><img src=\"https://i.imgur.com/PxXXqsl.png\" alt=\"\"><br><span id=\"more\"></span></p>\n<h3 id=\"空間大小\"><a href=\"#空間大小\" class=\"headerlink\" title=\"空間大小\"></a>空間大小</h3><p>一般來說線段樹的陣列會開$seg[4\\times n]$，由以下證明得到的結果：</p>\n<div class=\"note default\">\n            <p>對於一個有$2^k$的葉節點數的一棵樹，總共的節點共有 $\\sum_{i=0}^k 2^i = 2^{k+1}-1$ 個節點。若今天陣列共有n個元素，則代表葉節點共有$2^{\\lceil \\log_2 n\\rceil}$ 個，總節點數量共有$2^{\\lceil \\log_2 n\\rceil+1}-1$ 個。<br>假設$n = 2^k+p,0≤p≤2^k$，則帶入前面公式 $2^{\\lceil \\log_2 n\\rceil}=2^{k+1}$，根據前面推得的總節點數可以知道為 $2^{k+2}-1$，其值恆小於$4n$，因此開$4n$的陣列一定可以容納整個線段樹。</p>\n          </div>\n<p>由以上推倒可以知道一般都會開$seg[4\\times n]$，但是如果n剛好是二的冪次，其實只會用到$2n$的空間，有一半會被浪費掉，不過沒差，因為多開總比少開來得好！<br><a href=\"https://gist.github.com/peienwu/368723520e3c39e4e0edc27a0823da69\">懶標線段樹程式碼連結</a>，懶標這東西實在折磨人，學長寫的一個堪稱不用下推的懶標程式碼，結果他是錯的！！！害我Debug超久，可惡<br><img src=\"https://i.imgur.com/mEY8cFD.png\" alt=\"\"><br>這是學長的query程式碼，可以看到他回傳的是$(r-l)\\times lazy[cur]$，這是錯誤的，因為不一定左右兩子樹都會被全部加上懶標的值（可能只會有部分交集），但這份code卻直接加上去，會多算而WA，要注意！<br><img src=\"https://i.imgur.com/nsd2KVP.png\" alt=\"\"><br>更改版，對區間取聯集應該就對了！</p>\n<h3 id=\"實作部分\"><a href=\"#實作部分\" class=\"headerlink\" title=\"實作部分\"></a>實作部分</h3><p>這個版本是用struct實作，比起用陣列實作，這個版本更為方便閱讀，容易理解。為了方便索引值查詢左右子樹，使用1-base來儲存線段樹，同時利用一個struct儲存每一個節點。同時，每一個區間採用的是左閉右開 $[l,r)$，區間和的實作如下：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span>            <span class=\"comment\">//線段樹每一個節點</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> val=<span class=\"number\">0</span>,tag=<span class=\"number\">0</span>,sz; <span class=\"comment\">//val原本的值、tag懶標、sz區間大小</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rv</span><span class=\"params\">()</span></span>&#123;           <span class=\"comment\">//回傳實際節點的值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> val+tag*sz;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;seg[<span class=\"number\">4</span>*N];</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"建立-Build\"><a href=\"#建立-Build\" class=\"headerlink\" title=\"建立(Build)\"></a>建立(Build)</h4><p>分別遞迴建立左右子樹，同時更新每一個節點的大小sz。因為是左閉右開，直接左右相減r-l即可完成更新。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> cur)</span></span>&#123;    <span class=\"comment\">//建立線段樹</span></span><br><span class=\"line\">    seg[cur].sz = r-l;              <span class=\"comment\">//更新節點的大小</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&lt;=l)<span class=\"keyword\">return</span>;                 <span class=\"comment\">//空區間回傳</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r-l==<span class=\"number\">1</span>)&#123;                     <span class=\"comment\">//設定當前節點的值</span></span><br><span class=\"line\">        seg[cur].val = arr[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = (l+r)/<span class=\"number\">2</span>;                <span class=\"comment\">//分別遞迴建立左右子樹</span></span><br><span class=\"line\">    <span class=\"built_in\">build</span>(l,m,<span class=\"number\">2</span>*cur);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(m,r,<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>);</span><br><span class=\"line\">    seg[cur].val = seg[<span class=\"number\">2</span>*cur].val+seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>].val;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"下推-push\"><a href=\"#下推-push\" class=\"headerlink\" title=\"下推(push)\"></a>下推(push)</h4><p>懶標真是驚人的想法，在區間修改的時候以$O(logn)$在要修改的區間先懶標標記起來，等到要query的時候把懶標推下去，這樣可以確保區間修改的複雜度是$O(logn)$，同時query的時候順便下推，一來比較好實作、二來複雜度也不會有什麼改變， 因為下推的複雜度是$O(1)$。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//把id的懶標在query的時候往下推</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>&#123;</span><br><span class=\"line\">    seg[<span class=\"number\">2</span>*id].tag += seg[id].tag;   <span class=\"comment\">//左子樹懶標更新</span></span><br><span class=\"line\">    seg[<span class=\"number\">2</span>*id+<span class=\"number\">1</span>].tag += seg[id].tag; <span class=\"comment\">//右子樹懶標更新</span></span><br><span class=\"line\">    seg[id].val = seg[id].<span class=\"built_in\">rv</span>();     <span class=\"comment\">//更新實際值</span></span><br><span class=\"line\">    seg[id].tag = <span class=\"number\">0</span>;                <span class=\"comment\">//往下推完之後設定為預設</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"區間詢問-query\"><a href=\"#區間詢問-query\" class=\"headerlink\" title=\"區間詢問(query)\"></a>區間詢問(query)</h4><p>這裡的重點是下推，如果把懶標下推，可以確保區間修改的時間是$O(logn)$<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//區間詢問</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> cur,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> ql,<span class=\"keyword\">int</span> qr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&lt;=l || ql&gt;=r || qr&lt;=l)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;         <span class=\"comment\">//空集合直接回傳</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ql&lt;=l &amp;&amp; qr&gt;=r)<span class=\"keyword\">return</span> seg[cur].<span class=\"built_in\">rv</span>();     <span class=\"comment\">//包含在要詢問的範圍中，回傳實際值</span></span><br><span class=\"line\">    <span class=\"built_in\">push</span>(cur);                                  <span class=\"comment\">//將懶標在遞迴下去的過程中下推</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>;                          <span class=\"comment\">//遞迴查詢左右子樹</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(cur*<span class=\"number\">2</span>,l,mid,ql,qr)+<span class=\"built_in\">query</span>(cur*<span class=\"number\">2</span>+<span class=\"number\">1</span>,mid,r,ql,qr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"區點修改-modify\"><a href=\"#區點修改-modify\" class=\"headerlink\" title=\"區點修改(modify)\"></a>區點修改(modify)</h4><p>可以這樣理解，在區間修改中，透過遞迴完左右子樹拉上來的過程中，更新樹上較上方的節點的值（用懶標更新）。此時下方節點都還沒有被更新，等到query的時候會往下push順便把值也一起更新。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//區間修改</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"keyword\">int</span> cur,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> ql,<span class=\"keyword\">int</span> qr,<span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r&lt;=l||ql&gt;=r||qr&lt;=l)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ql&lt;=l &amp;&amp; qr&gt;=r) &#123;</span><br><span class=\"line\">        seg[cur].tag += val;               <span class=\"comment\">//將被完整包含的區間的懶標加上修改值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">modify</span>(cur*<span class=\"number\">2</span>,l,mid,ql,qr,val);          <span class=\"comment\">//修改左右子樹</span></span><br><span class=\"line\">    <span class=\"built_in\">modify</span>(cur*<span class=\"number\">2</span>+<span class=\"number\">1</span>,mid,r,ql,qr,val);        <span class=\"comment\">//遞迴完拉上來的過程中把上面的數值更新成有懶標的結果</span></span><br><span class=\"line\">    seg[cur].val = seg[<span class=\"number\">2</span>*cur].<span class=\"built_in\">rv</span>()+seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>].<span class=\"built_in\">rv</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"單點修改-modify\"><a href=\"#單點修改-modify\" class=\"headerlink\" title=\"單點修改(modify)\"></a>單點修改(modify)</h4><p>這一題沒有要求單點修改，所以以下是RMQ的單點修改。概念較為簡單，用$O(logn)$找到要修改的點，直接修改即可。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"keyword\">int</span> cur,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> ind,<span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&lt;=l)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r-l==<span class=\"number\">1</span> &amp;&amp; l==ind)&#123;</span><br><span class=\"line\">        seg[cur]=val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ind&lt;mid)<span class=\"built_in\">modify</span>(cur*<span class=\"number\">2</span>,l,mid,ind,val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">modify</span>(cur*<span class=\"number\">2</span>+<span class=\"number\">1</span>,mid,r,ind,val);</span><br><span class=\"line\">    seg[cur] = <span class=\"built_in\">min</span>(seg[<span class=\"number\">2</span>*cur],seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"動態開點\"><a href=\"#動態開點\" class=\"headerlink\" title=\"動態開點\"></a>動態開點</h3><blockquote>\n<p>有一個長度是 $10^9$ 的序列，一開始裡面的元素都是$0$，有 $Q$ 筆操作，每一個操作是以下其中兩種：</p>\n<ol>\n<li>把之間的值都加上$v$ </li>\n<li>詢問的區間和</li>\n</ol>\n</blockquote>\n<p>開這麼多點顯然會MLE，既然使用陣列型儲存線段樹會爆，因為這麼大的值域顯然有許多點是不會被使用到的，那就改成使用指標型來開這個線段樹，以下為每一個節點的架構：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    Node *l;    <span class=\"comment\">//指向左子樹</span></span><br><span class=\"line\">    Node *r;    <span class=\"comment\">//指向右子樹</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;    <span class=\"comment\">//維護區間和</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;<span class=\"comment\">//注意struct裡面可有struct的指標，但不能有實體</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":3103,"excerpt":"<p>今年是2021，資芽的二階主題跟2020上的有很多的差別，因此會利用暑假把2020的東西也補一補！</p>\n<h2 id=\"課程內容\"><a href=\"#課程內容\" class=\"headerlink\" title=\"課程內容\"></a>課程內容</h2><h3 id=\"儲存\"><a href=\"#儲存\" class=\"headerlink\" title=\"儲存\"></a>儲存</h3><p>線段樹很多人都用陣列來實作，空間$O(n)$，在處理樹的左右節點也十分的方便。如果以1-base來儲存陣列這棵線段樹，左右節點可以用以下的index來表示。線段樹有一個優點就是它可以用儲存完滿二元樹的方式來儲存，雖然它不一定是完滿但會是平衡的一棵樹。左節點：$2n$，右節點$2n+1$。<br><img src=\"https://i.imgur.com/PxXXqsl.png\" alt=\"\"><br>","more":"</p>\n<h3 id=\"空間大小\"><a href=\"#空間大小\" class=\"headerlink\" title=\"空間大小\"></a>空間大小</h3><p>一般來說線段樹的陣列會開$seg[4\\times n]$，由以下證明得到的結果：</p>\n<div class=\"note default\">\n            <p>對於一個有$2^k$的葉節點數的一棵樹，總共的節點共有 $\\sum_{i=0}^k 2^i = 2^{k+1}-1$ 個節點。若今天陣列共有n個元素，則代表葉節點共有$2^{\\lceil \\log_2 n\\rceil}$ 個，總節點數量共有$2^{\\lceil \\log_2 n\\rceil+1}-1$ 個。<br>假設$n = 2^k+p,0≤p≤2^k$，則帶入前面公式 $2^{\\lceil \\log_2 n\\rceil}=2^{k+1}$，根據前面推得的總節點數可以知道為 $2^{k+2}-1$，其值恆小於$4n$，因此開$4n$的陣列一定可以容納整個線段樹。</p>\n          </div>\n<p>由以上推倒可以知道一般都會開$seg[4\\times n]$，但是如果n剛好是二的冪次，其實只會用到$2n$的空間，有一半會被浪費掉，不過沒差，因為多開總比少開來得好！<br><a href=\"https://gist.github.com/peienwu/368723520e3c39e4e0edc27a0823da69\">懶標線段樹程式碼連結</a>，懶標這東西實在折磨人，學長寫的一個堪稱不用下推的懶標程式碼，結果他是錯的！！！害我Debug超久，可惡<br><img src=\"https://i.imgur.com/mEY8cFD.png\" alt=\"\"><br>這是學長的query程式碼，可以看到他回傳的是$(r-l)\\times lazy[cur]$，這是錯誤的，因為不一定左右兩子樹都會被全部加上懶標的值（可能只會有部分交集），但這份code卻直接加上去，會多算而WA，要注意！<br><img src=\"https://i.imgur.com/nsd2KVP.png\" alt=\"\"><br>更改版，對區間取聯集應該就對了！</p>\n<h3 id=\"實作部分\"><a href=\"#實作部分\" class=\"headerlink\" title=\"實作部分\"></a>實作部分</h3><p>這個版本是用struct實作，比起用陣列實作，這個版本更為方便閱讀，容易理解。為了方便索引值查詢左右子樹，使用1-base來儲存線段樹，同時利用一個struct儲存每一個節點。同時，每一個區間採用的是左閉右開 $[l,r)$，區間和的實作如下：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span>            <span class=\"comment\">//線段樹每一個節點</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> val=<span class=\"number\">0</span>,tag=<span class=\"number\">0</span>,sz; <span class=\"comment\">//val原本的值、tag懶標、sz區間大小</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rv</span><span class=\"params\">()</span></span>&#123;           <span class=\"comment\">//回傳實際節點的值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> val+tag*sz;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;seg[<span class=\"number\">4</span>*N];</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"建立-Build\"><a href=\"#建立-Build\" class=\"headerlink\" title=\"建立(Build)\"></a>建立(Build)</h4><p>分別遞迴建立左右子樹，同時更新每一個節點的大小sz。因為是左閉右開，直接左右相減r-l即可完成更新。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> cur)</span></span>&#123;    <span class=\"comment\">//建立線段樹</span></span><br><span class=\"line\">    seg[cur].sz = r-l;              <span class=\"comment\">//更新節點的大小</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&lt;=l)<span class=\"keyword\">return</span>;                 <span class=\"comment\">//空區間回傳</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r-l==<span class=\"number\">1</span>)&#123;                     <span class=\"comment\">//設定當前節點的值</span></span><br><span class=\"line\">        seg[cur].val = arr[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = (l+r)/<span class=\"number\">2</span>;                <span class=\"comment\">//分別遞迴建立左右子樹</span></span><br><span class=\"line\">    <span class=\"built_in\">build</span>(l,m,<span class=\"number\">2</span>*cur);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(m,r,<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>);</span><br><span class=\"line\">    seg[cur].val = seg[<span class=\"number\">2</span>*cur].val+seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>].val;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"下推-push\"><a href=\"#下推-push\" class=\"headerlink\" title=\"下推(push)\"></a>下推(push)</h4><p>懶標真是驚人的想法，在區間修改的時候以$O(logn)$在要修改的區間先懶標標記起來，等到要query的時候把懶標推下去，這樣可以確保區間修改的複雜度是$O(logn)$，同時query的時候順便下推，一來比較好實作、二來複雜度也不會有什麼改變， 因為下推的複雜度是$O(1)$。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//把id的懶標在query的時候往下推</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>&#123;</span><br><span class=\"line\">    seg[<span class=\"number\">2</span>*id].tag += seg[id].tag;   <span class=\"comment\">//左子樹懶標更新</span></span><br><span class=\"line\">    seg[<span class=\"number\">2</span>*id+<span class=\"number\">1</span>].tag += seg[id].tag; <span class=\"comment\">//右子樹懶標更新</span></span><br><span class=\"line\">    seg[id].val = seg[id].<span class=\"built_in\">rv</span>();     <span class=\"comment\">//更新實際值</span></span><br><span class=\"line\">    seg[id].tag = <span class=\"number\">0</span>;                <span class=\"comment\">//往下推完之後設定為預設</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"區間詢問-query\"><a href=\"#區間詢問-query\" class=\"headerlink\" title=\"區間詢問(query)\"></a>區間詢問(query)</h4><p>這裡的重點是下推，如果把懶標下推，可以確保區間修改的時間是$O(logn)$<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//區間詢問</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> cur,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> ql,<span class=\"keyword\">int</span> qr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&lt;=l || ql&gt;=r || qr&lt;=l)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;         <span class=\"comment\">//空集合直接回傳</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ql&lt;=l &amp;&amp; qr&gt;=r)<span class=\"keyword\">return</span> seg[cur].<span class=\"built_in\">rv</span>();     <span class=\"comment\">//包含在要詢問的範圍中，回傳實際值</span></span><br><span class=\"line\">    <span class=\"built_in\">push</span>(cur);                                  <span class=\"comment\">//將懶標在遞迴下去的過程中下推</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>;                          <span class=\"comment\">//遞迴查詢左右子樹</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(cur*<span class=\"number\">2</span>,l,mid,ql,qr)+<span class=\"built_in\">query</span>(cur*<span class=\"number\">2</span>+<span class=\"number\">1</span>,mid,r,ql,qr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"區點修改-modify\"><a href=\"#區點修改-modify\" class=\"headerlink\" title=\"區點修改(modify)\"></a>區點修改(modify)</h4><p>可以這樣理解，在區間修改中，透過遞迴完左右子樹拉上來的過程中，更新樹上較上方的節點的值（用懶標更新）。此時下方節點都還沒有被更新，等到query的時候會往下push順便把值也一起更新。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//區間修改</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"keyword\">int</span> cur,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> ql,<span class=\"keyword\">int</span> qr,<span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r&lt;=l||ql&gt;=r||qr&lt;=l)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ql&lt;=l &amp;&amp; qr&gt;=r) &#123;</span><br><span class=\"line\">        seg[cur].tag += val;               <span class=\"comment\">//將被完整包含的區間的懶標加上修改值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">modify</span>(cur*<span class=\"number\">2</span>,l,mid,ql,qr,val);          <span class=\"comment\">//修改左右子樹</span></span><br><span class=\"line\">    <span class=\"built_in\">modify</span>(cur*<span class=\"number\">2</span>+<span class=\"number\">1</span>,mid,r,ql,qr,val);        <span class=\"comment\">//遞迴完拉上來的過程中把上面的數值更新成有懶標的結果</span></span><br><span class=\"line\">    seg[cur].val = seg[<span class=\"number\">2</span>*cur].<span class=\"built_in\">rv</span>()+seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>].<span class=\"built_in\">rv</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"單點修改-modify\"><a href=\"#單點修改-modify\" class=\"headerlink\" title=\"單點修改(modify)\"></a>單點修改(modify)</h4><p>這一題沒有要求單點修改，所以以下是RMQ的單點修改。概念較為簡單，用$O(logn)$找到要修改的點，直接修改即可。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"keyword\">int</span> cur,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> ind,<span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&lt;=l)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r-l==<span class=\"number\">1</span> &amp;&amp; l==ind)&#123;</span><br><span class=\"line\">        seg[cur]=val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ind&lt;mid)<span class=\"built_in\">modify</span>(cur*<span class=\"number\">2</span>,l,mid,ind,val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">modify</span>(cur*<span class=\"number\">2</span>+<span class=\"number\">1</span>,mid,r,ind,val);</span><br><span class=\"line\">    seg[cur] = <span class=\"built_in\">min</span>(seg[<span class=\"number\">2</span>*cur],seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"動態開點\"><a href=\"#動態開點\" class=\"headerlink\" title=\"動態開點\"></a>動態開點</h3><blockquote>\n<p>有一個長度是 $10^9$ 的序列，一開始裡面的元素都是$0$，有 $Q$ 筆操作，每一個操作是以下其中兩種：</p>\n<ol>\n<li>把之間的值都加上$v$ </li>\n<li>詢問的區間和</li>\n</ol>\n</blockquote>\n<p>開這麼多點顯然會MLE，既然使用陣列型儲存線段樹會爆，因為這麼大的值域顯然有許多點是不會被使用到的，那就改成使用指標型來開這個線段樹，以下為每一個節點的架構：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    Node *l;    <span class=\"comment\">//指向左子樹</span></span><br><span class=\"line\">    Node *r;    <span class=\"comment\">//指向右子樹</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;    <span class=\"comment\">//維護區間和</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;<span class=\"comment\">//注意struct裡面可有struct的指標，但不能有實體</span></span><br></pre></td></tr></table></figure>"},{"title":"2020資訊之芽—最短路徑(Shortest Path)","date":"2021-08-14T16:00:00.000Z","mathjax":true,"_content":"\n今年是2021，資芽的二階主題跟2020上的有很多的差別，因此會利用暑假把2020的東西也補一補！\n## 課程內容\n\n### 路徑與權重\n* $G=(V,E)$\n* 尋找最短路徑權重和最小\n* 無帶權：BFS直接做(or DFS)\n* 有帶權最短路徑\n<!-- more -->\n\n### Floyd-Warshall：全點對最短路徑(All Pairs)\n- 不支援負環\n- 想法：DP轉移（三個迴圈中點、起點、終點依序鬆弛）\n-  $d[i][j] = mid(d[i][j],d[i][k]+d[I][k]+d[k][j])$\n- 如果改寫成定義 $dp[k][i][j]$ 為點 $i$ 走到點 $j$ ，只能經過前k個點的最短路\n- 則轉移：$d[k+1][i][j] = min(d[k][i][j], d[k][i][k+1]+d[k][k+1][j])$\n- 因此中間點k必須在最外層（不過[有論文指出](https://arxiv.org/pdf/1904.01210.pdf)順序顛倒一樣可以得到正確解）\n- 優點：實作容易，缺點：時間 $O(v^3)$ 、無法處理負環（可處理負邊）\n\n### Dijkstra’s：單點源最短路徑\n- 優點：時間 $O(E+V^2)$、無法處理負邊\n- 想法：Greedy（和DP）\n- 維護：1. 未拜訪的節點集合$U$ 2. $d[i]$ 目前起點到 $i$ 最短路 3. 目前考慮節點 $p$\n- 重複以下動作直到u為空：\n    - 對於所有與 $p$ 連接的節點 $q$，$d[q] = min(d[q],d[p]+weight[p][q])$\n    - 當 $p$ 相鄰節點都走過：在 $u$ 中移除 $p$\n    - 將 $p$ 更新成U中離起點距離最短的點 $min(d[j])$\n- 可以變成 $O((E+V)logV)$->邊較為稀疏的圖時有利（使用priority_queue）\n- 不能處理負邊，因為 $d[i]$ 較小的處理完之後就不會再更動了，加入負邊可能更小\n- 拿距離最小的點 $k$ 去更新其他點，不能保證更新後其他點一定是最短路\n- 上一步走完 $k$ 連接所有邊後，從集合 $U$ 中移除，因為沒有負邊， $k$ 必定是最短路\n\n\n### Bellman-Ford：單點源最短路徑\n- 可以處理負環\n- 時間：$O(VE)$\n- 想法：Relax鬆弛\n- 一條邊 $\\delta(u,v)$ 滿足 $dis[v] = min(dis[v],dis[u]+weight[u][v])$\n- 對每一條邊進行鬆弛，因為鬆弛沒有按照最短路順序，因此要做V-1次\n- 此為暴力作法\n- 執行V-1次的worst case：\n    - 剛好跟最短路徑的順序相反\n    - 每次 Relax 後只能優化單一子路徑\n    - 共有V個頂點，需要有V-1 條子路徑，每一次一條\n    - 檢查負環：做完之後卻有滿足$d[v] > d[u]+w(u,v)$ ，表示有負環\n\n### 優化：SPFA(Shortest Path Faster Algorithm)\n- 每次只relax更新過的點\n- 使用queue優化，有點像BFS過程\n    - 1.把起點 Push 到 Queue\n    - 2.從 Queue 裡 Pop 出一筆資料\n    - 3.該筆資料的所有邊進行 Relax\n    - 4.有更新到的頂點再 Push 到 Queue\n    - 5.重複步驟 2 ~ 4，直到 Queue 為空\n- 時間：$O(VE)$ ->worst case，期望 $O(KE)$ ，K大概是2吧（反正挺快的） \n\n### DAG Shortest Path\n首先對所有點進行拓墣排序，花上時間 $O(V+E)$，接著對每一條邊進行鬆弛，時間$O(E)$，因此總時間複雜度是 $O(V+E)$。這個時間複雜度是很快的，但相對的限制也非常多，除了不能有負邊與負環之外，更不能有正環在其中，否則不能進行拓墣排序（在之前筆記[進階圖論（一）](/OYm7TyO2RquZwdUFLx8PFQ)）有提到，也就是這一中圖必須是DAG(Directed Acyclic Graph)！\n\n一個有趣的應用：[PERT](https://zh.wikipedia.org/wiki/%E8%A8%88%E7%95%AB%E8%A9%95%E6%A0%B8%E8%A1%93)\n\n### 最短路徑樹\n- 紀錄predecessor(樹父節點唯一)\n- 起點到每個點的最短路徑都唯一的話，那把這些路徑疊起來會變成一棵樹\n- 樹：每一點都有唯一來源（最短路）\n\n### 最短路徑比較\n最短路徑問題共有以下求解方式（當然還有一堆），整理比較圖：\n![](https://i.imgur.com/uUUmhcL.jpg)\n\n### 負環\n上表中的可以處理負環的SPFA和Bellman-Ford是以什麼樣的方式處理？（遇到負環權重應該是$-\\infty$）上方所謂負環是指下圖這種情況（當出發點為s，終點為t求最短路徑的問題），因為沒有經過負環，因此 $\\delta(s,t)$ 可以被SPFA和Bellman-Ford求出正確的最短路徑為1。我們可以利用從終點回朔最短路徑（利用predecessor紀錄）看是否有重複經過的點，如果有則表示途中有經過負環！\n\n![](https://i.imgur.com/MJnJXUp.png)\n\n至於其他的算法，都會求出不正確的數值！\n\n{% note default %}\n\n**Floyd warshall**\n這個演算法是處理全點對的最短路徑，如果有負環，那一定有任兩點的最短距離是錯誤的。不過我們一樣可以利用Floyd-Warshall演算法判斷圖中是否有負環，只要<font color=\"#f00\">檢查每一個點走到自己的距離是否為負</font> ，即$dis[i][i]<0$ 是否成立，如果成立表示圖中有負環。\n<br>\n\n**Dijkstra**\n這個演算法要求的限制更多，圖中<font color=\"#f00\">不可以有負邊</font>（更別提多個負邊組成的赴環），原因是在Dijkstra求最短路的過程中使用到貪心的想法，當我們從heap裡面取出目前距離最短的點之後，便不會再次被更新。如果有負邊的話，貪心法的過程會發生錯誤，導致得到不正確的答案。\n\n![](https://i.imgur.com/Gkg2mex.jpg)\n\n此圖中如果邊 $\\delta(B,A)$ 為一負邊，當A被移出集合U中便不會有任何再次被更新的機會，但卻因為這條負邊的關係，導致從$s$到$A$的最短距離並不會被正確更新到！\n{% endnote %}\n以上大概就是最短距離的演算法整理，還有一個全點對最短路徑Johnson’s Algorithm，大概就是對任一點做 Bellman-Ford（順便判斷有沒 有負環)，得到點權之後，用調整完的邊權做 V 次 Dijkstra，可以比Floyd-Warshall有更好的表現，到時候看。\n","source":"_posts/Shortest_Path.md","raw":"---\ntitle: 2020資訊之芽—最短路徑(Shortest Path)\ndate: 2021-8-15\ntags: \n    - 2020資訊之芽\n    - 2021暑期筆記\ncategories:\n    - C++進階主題\n    - 最短路徑\nmathjax: true\n---\n\n今年是2021，資芽的二階主題跟2020上的有很多的差別，因此會利用暑假把2020的東西也補一補！\n## 課程內容\n\n### 路徑與權重\n* $G=(V,E)$\n* 尋找最短路徑權重和最小\n* 無帶權：BFS直接做(or DFS)\n* 有帶權最短路徑\n<!-- more -->\n\n### Floyd-Warshall：全點對最短路徑(All Pairs)\n- 不支援負環\n- 想法：DP轉移（三個迴圈中點、起點、終點依序鬆弛）\n-  $d[i][j] = mid(d[i][j],d[i][k]+d[I][k]+d[k][j])$\n- 如果改寫成定義 $dp[k][i][j]$ 為點 $i$ 走到點 $j$ ，只能經過前k個點的最短路\n- 則轉移：$d[k+1][i][j] = min(d[k][i][j], d[k][i][k+1]+d[k][k+1][j])$\n- 因此中間點k必須在最外層（不過[有論文指出](https://arxiv.org/pdf/1904.01210.pdf)順序顛倒一樣可以得到正確解）\n- 優點：實作容易，缺點：時間 $O(v^3)$ 、無法處理負環（可處理負邊）\n\n### Dijkstra’s：單點源最短路徑\n- 優點：時間 $O(E+V^2)$、無法處理負邊\n- 想法：Greedy（和DP）\n- 維護：1. 未拜訪的節點集合$U$ 2. $d[i]$ 目前起點到 $i$ 最短路 3. 目前考慮節點 $p$\n- 重複以下動作直到u為空：\n    - 對於所有與 $p$ 連接的節點 $q$，$d[q] = min(d[q],d[p]+weight[p][q])$\n    - 當 $p$ 相鄰節點都走過：在 $u$ 中移除 $p$\n    - 將 $p$ 更新成U中離起點距離最短的點 $min(d[j])$\n- 可以變成 $O((E+V)logV)$->邊較為稀疏的圖時有利（使用priority_queue）\n- 不能處理負邊，因為 $d[i]$ 較小的處理完之後就不會再更動了，加入負邊可能更小\n- 拿距離最小的點 $k$ 去更新其他點，不能保證更新後其他點一定是最短路\n- 上一步走完 $k$ 連接所有邊後，從集合 $U$ 中移除，因為沒有負邊， $k$ 必定是最短路\n\n\n### Bellman-Ford：單點源最短路徑\n- 可以處理負環\n- 時間：$O(VE)$\n- 想法：Relax鬆弛\n- 一條邊 $\\delta(u,v)$ 滿足 $dis[v] = min(dis[v],dis[u]+weight[u][v])$\n- 對每一條邊進行鬆弛，因為鬆弛沒有按照最短路順序，因此要做V-1次\n- 此為暴力作法\n- 執行V-1次的worst case：\n    - 剛好跟最短路徑的順序相反\n    - 每次 Relax 後只能優化單一子路徑\n    - 共有V個頂點，需要有V-1 條子路徑，每一次一條\n    - 檢查負環：做完之後卻有滿足$d[v] > d[u]+w(u,v)$ ，表示有負環\n\n### 優化：SPFA(Shortest Path Faster Algorithm)\n- 每次只relax更新過的點\n- 使用queue優化，有點像BFS過程\n    - 1.把起點 Push 到 Queue\n    - 2.從 Queue 裡 Pop 出一筆資料\n    - 3.該筆資料的所有邊進行 Relax\n    - 4.有更新到的頂點再 Push 到 Queue\n    - 5.重複步驟 2 ~ 4，直到 Queue 為空\n- 時間：$O(VE)$ ->worst case，期望 $O(KE)$ ，K大概是2吧（反正挺快的） \n\n### DAG Shortest Path\n首先對所有點進行拓墣排序，花上時間 $O(V+E)$，接著對每一條邊進行鬆弛，時間$O(E)$，因此總時間複雜度是 $O(V+E)$。這個時間複雜度是很快的，但相對的限制也非常多，除了不能有負邊與負環之外，更不能有正環在其中，否則不能進行拓墣排序（在之前筆記[進階圖論（一）](/OYm7TyO2RquZwdUFLx8PFQ)）有提到，也就是這一中圖必須是DAG(Directed Acyclic Graph)！\n\n一個有趣的應用：[PERT](https://zh.wikipedia.org/wiki/%E8%A8%88%E7%95%AB%E8%A9%95%E6%A0%B8%E8%A1%93)\n\n### 最短路徑樹\n- 紀錄predecessor(樹父節點唯一)\n- 起點到每個點的最短路徑都唯一的話，那把這些路徑疊起來會變成一棵樹\n- 樹：每一點都有唯一來源（最短路）\n\n### 最短路徑比較\n最短路徑問題共有以下求解方式（當然還有一堆），整理比較圖：\n![](https://i.imgur.com/uUUmhcL.jpg)\n\n### 負環\n上表中的可以處理負環的SPFA和Bellman-Ford是以什麼樣的方式處理？（遇到負環權重應該是$-\\infty$）上方所謂負環是指下圖這種情況（當出發點為s，終點為t求最短路徑的問題），因為沒有經過負環，因此 $\\delta(s,t)$ 可以被SPFA和Bellman-Ford求出正確的最短路徑為1。我們可以利用從終點回朔最短路徑（利用predecessor紀錄）看是否有重複經過的點，如果有則表示途中有經過負環！\n\n![](https://i.imgur.com/MJnJXUp.png)\n\n至於其他的算法，都會求出不正確的數值！\n\n{% note default %}\n\n**Floyd warshall**\n這個演算法是處理全點對的最短路徑，如果有負環，那一定有任兩點的最短距離是錯誤的。不過我們一樣可以利用Floyd-Warshall演算法判斷圖中是否有負環，只要<font color=\"#f00\">檢查每一個點走到自己的距離是否為負</font> ，即$dis[i][i]<0$ 是否成立，如果成立表示圖中有負環。\n<br>\n\n**Dijkstra**\n這個演算法要求的限制更多，圖中<font color=\"#f00\">不可以有負邊</font>（更別提多個負邊組成的赴環），原因是在Dijkstra求最短路的過程中使用到貪心的想法，當我們從heap裡面取出目前距離最短的點之後，便不會再次被更新。如果有負邊的話，貪心法的過程會發生錯誤，導致得到不正確的答案。\n\n![](https://i.imgur.com/Gkg2mex.jpg)\n\n此圖中如果邊 $\\delta(B,A)$ 為一負邊，當A被移出集合U中便不會有任何再次被更新的機會，但卻因為這條負邊的關係，導致從$s$到$A$的最短距離並不會被正確更新到！\n{% endnote %}\n以上大概就是最短距離的演算法整理，還有一個全點對最短路徑Johnson’s Algorithm，大概就是對任一點做 Bellman-Ford（順便判斷有沒 有負環)，得到點權之後，用調整完的邊權做 V 次 Dijkstra，可以比Floyd-Warshall有更好的表現，到時候看。\n","slug":"Shortest_Path","published":1,"updated":"2021-09-19T11:26:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvyspmgv000dmuyxag3l4ifb","content":"<p>今年是2021，資芽的二階主題跟2020上的有很多的差別，因此會利用暑假把2020的東西也補一補！</p>\n<h2 id=\"課程內容\"><a href=\"#課程內容\" class=\"headerlink\" title=\"課程內容\"></a>課程內容</h2><h3 id=\"路徑與權重\"><a href=\"#路徑與權重\" class=\"headerlink\" title=\"路徑與權重\"></a>路徑與權重</h3><ul>\n<li>$G=(V,E)$</li>\n<li>尋找最短路徑權重和最小</li>\n<li>無帶權：BFS直接做(or DFS)</li>\n<li>有帶權最短路徑<span id=\"more\"></span>\n</li>\n</ul>\n<h3 id=\"Floyd-Warshall：全點對最短路徑-All-Pairs\"><a href=\"#Floyd-Warshall：全點對最短路徑-All-Pairs\" class=\"headerlink\" title=\"Floyd-Warshall：全點對最短路徑(All Pairs)\"></a>Floyd-Warshall：全點對最短路徑(All Pairs)</h3><ul>\n<li>不支援負環</li>\n<li>想法：DP轉移（三個迴圈中點、起點、終點依序鬆弛）</li>\n<li>$d[i][j] = mid(d[i][j],d[i][k]+d[I][k]+d[k][j])$</li>\n<li>如果改寫成定義 $dp[k][i][j]$ 為點 $i$ 走到點 $j$ ，只能經過前k個點的最短路</li>\n<li>則轉移：$d[k+1][i][j] = min(d[k][i][j], d[k][i][k+1]+d[k][k+1][j])$</li>\n<li>因此中間點k必須在最外層（不過<a href=\"https://arxiv.org/pdf/1904.01210.pdf\">有論文指出</a>順序顛倒一樣可以得到正確解）</li>\n<li>優點：實作容易，缺點：時間 $O(v^3)$ 、無法處理負環（可處理負邊）</li>\n</ul>\n<h3 id=\"Dijkstra’s：單點源最短路徑\"><a href=\"#Dijkstra’s：單點源最短路徑\" class=\"headerlink\" title=\"Dijkstra’s：單點源最短路徑\"></a>Dijkstra’s：單點源最短路徑</h3><ul>\n<li>優點：時間 $O(E+V^2)$、無法處理負邊</li>\n<li>想法：Greedy（和DP）</li>\n<li>維護：1. 未拜訪的節點集合$U$ 2. $d[i]$ 目前起點到 $i$ 最短路 3. 目前考慮節點 $p$</li>\n<li>重複以下動作直到u為空：<ul>\n<li>對於所有與 $p$ 連接的節點 $q$，$d[q] = min(d[q],d[p]+weight[p][q])$</li>\n<li>當 $p$ 相鄰節點都走過：在 $u$ 中移除 $p$</li>\n<li>將 $p$ 更新成U中離起點距離最短的點 $min(d[j])$</li>\n</ul>\n</li>\n<li>可以變成 $O((E+V)logV)$-&gt;邊較為稀疏的圖時有利（使用priority_queue）</li>\n<li>不能處理負邊，因為 $d[i]$ 較小的處理完之後就不會再更動了，加入負邊可能更小</li>\n<li>拿距離最小的點 $k$ 去更新其他點，不能保證更新後其他點一定是最短路</li>\n<li>上一步走完 $k$ 連接所有邊後，從集合 $U$ 中移除，因為沒有負邊， $k$ 必定是最短路</li>\n</ul>\n<h3 id=\"Bellman-Ford：單點源最短路徑\"><a href=\"#Bellman-Ford：單點源最短路徑\" class=\"headerlink\" title=\"Bellman-Ford：單點源最短路徑\"></a>Bellman-Ford：單點源最短路徑</h3><ul>\n<li>可以處理負環</li>\n<li>時間：$O(VE)$</li>\n<li>想法：Relax鬆弛</li>\n<li>一條邊 $\\delta(u,v)$ 滿足 $dis[v] = min(dis[v],dis[u]+weight[u][v])$</li>\n<li>對每一條邊進行鬆弛，因為鬆弛沒有按照最短路順序，因此要做V-1次</li>\n<li>此為暴力作法</li>\n<li>執行V-1次的worst case：<ul>\n<li>剛好跟最短路徑的順序相反</li>\n<li>每次 Relax 後只能優化單一子路徑</li>\n<li>共有V個頂點，需要有V-1 條子路徑，每一次一條</li>\n<li>檢查負環：做完之後卻有滿足$d[v] &gt; d[u]+w(u,v)$ ，表示有負環</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"優化：SPFA-Shortest-Path-Faster-Algorithm\"><a href=\"#優化：SPFA-Shortest-Path-Faster-Algorithm\" class=\"headerlink\" title=\"優化：SPFA(Shortest Path Faster Algorithm)\"></a>優化：SPFA(Shortest Path Faster Algorithm)</h3><ul>\n<li>每次只relax更新過的點</li>\n<li>使用queue優化，有點像BFS過程<ul>\n<li>1.把起點 Push 到 Queue</li>\n<li>2.從 Queue 裡 Pop 出一筆資料</li>\n<li>3.該筆資料的所有邊進行 Relax</li>\n<li>4.有更新到的頂點再 Push 到 Queue</li>\n<li>5.重複步驟 2 ~ 4，直到 Queue 為空</li>\n</ul>\n</li>\n<li>時間：$O(VE)$ -&gt;worst case，期望 $O(KE)$ ，K大概是2吧（反正挺快的） </li>\n</ul>\n<h3 id=\"DAG-Shortest-Path\"><a href=\"#DAG-Shortest-Path\" class=\"headerlink\" title=\"DAG Shortest Path\"></a>DAG Shortest Path</h3><p>首先對所有點進行拓墣排序，花上時間 $O(V+E)$，接著對每一條邊進行鬆弛，時間$O(E)$，因此總時間複雜度是 $O(V+E)$。這個時間複雜度是很快的，但相對的限制也非常多，除了不能有負邊與負環之外，更不能有正環在其中，否則不能進行拓墣排序（在之前筆記<a href=\"/OYm7TyO2RquZwdUFLx8PFQ\">進階圖論（一）</a>）有提到，也就是這一中圖必須是DAG(Directed Acyclic Graph)！</p>\n<p>一個有趣的應用：<a href=\"https://zh.wikipedia.org/wiki/%E8%A8%88%E7%95%AB%E8%A9%95%E6%A0%B8%E8%A1%93\">PERT</a></p>\n<h3 id=\"最短路徑樹\"><a href=\"#最短路徑樹\" class=\"headerlink\" title=\"最短路徑樹\"></a>最短路徑樹</h3><ul>\n<li>紀錄predecessor(樹父節點唯一)</li>\n<li>起點到每個點的最短路徑都唯一的話，那把這些路徑疊起來會變成一棵樹</li>\n<li>樹：每一點都有唯一來源（最短路）</li>\n</ul>\n<h3 id=\"最短路徑比較\"><a href=\"#最短路徑比較\" class=\"headerlink\" title=\"最短路徑比較\"></a>最短路徑比較</h3><p>最短路徑問題共有以下求解方式（當然還有一堆），整理比較圖：<br><img src=\"https://i.imgur.com/uUUmhcL.jpg\" alt=\"\"></p>\n<h3 id=\"負環\"><a href=\"#負環\" class=\"headerlink\" title=\"負環\"></a>負環</h3><p>上表中的可以處理負環的SPFA和Bellman-Ford是以什麼樣的方式處理？（遇到負環權重應該是$-\\infty$）上方所謂負環是指下圖這種情況（當出發點為s，終點為t求最短路徑的問題），因為沒有經過負環，因此 $\\delta(s,t)$ 可以被SPFA和Bellman-Ford求出正確的最短路徑為1。我們可以利用從終點回朔最短路徑（利用predecessor紀錄）看是否有重複經過的點，如果有則表示途中有經過負環！</p>\n<p><img src=\"https://i.imgur.com/MJnJXUp.png\" alt=\"\"></p>\n<p>至於其他的算法，都會求出不正確的數值！</p>\n<div class=\"note default\">\n            <p><strong>Floyd warshall</strong><br>這個演算法是處理全點對的最短路徑，如果有負環，那一定有任兩點的最短距離是錯誤的。不過我們一樣可以利用Floyd-Warshall演算法判斷圖中是否有負環，只要<font color=\"#f00\">檢查每一個點走到自己的距離是否為負</font> ，即$dis[i][i]<0$ 是否成立，如果成立表示圖中有負環。<br></p><p><strong>Dijkstra</strong><br>這個演算法要求的限制更多，圖中<font color=\"#f00\">不可以有負邊</font>（更別提多個負邊組成的赴環），原因是在Dijkstra求最短路的過程中使用到貪心的想法，當我們從heap裡面取出目前距離最短的點之後，便不會再次被更新。如果有負邊的話，貪心法的過程會發生錯誤，導致得到不正確的答案。</p><p><img src=\"https://i.imgur.com/Gkg2mex.jpg\" alt=\"\"></p><p>此圖中如果邊 $\\delta(B,A)$ 為一負邊，當A被移出集合U中便不會有任何再次被更新的機會，但卻因為這條負邊的關係，導致從$s$到$A$的最短距離並不會被正確更新到！</p>\n          </div>\n<p>以上大概就是最短距離的演算法整理，還有一個全點對最短路徑Johnson’s Algorithm，大概就是對任一點做 Bellman-Ford（順便判斷有沒 有負環)，得到點權之後，用調整完的邊權做 V 次 Dijkstra，可以比Floyd-Warshall有更好的表現，到時候看。</p>\n","site":{"data":{}},"length":1876,"excerpt":"<p>今年是2021，資芽的二階主題跟2020上的有很多的差別，因此會利用暑假把2020的東西也補一補！</p>\n<h2 id=\"課程內容\"><a href=\"#課程內容\" class=\"headerlink\" title=\"課程內容\"></a>課程內容</h2><h3 id=\"路徑與權重\"><a href=\"#路徑與權重\" class=\"headerlink\" title=\"路徑與權重\"></a>路徑與權重</h3><ul>\n<li>$G=(V,E)$</li>\n<li>尋找最短路徑權重和最小</li>\n<li>無帶權：BFS直接做(or DFS)</li>\n<li>有帶權最短路徑","more":"</li>\n</ul>\n<h3 id=\"Floyd-Warshall：全點對最短路徑-All-Pairs\"><a href=\"#Floyd-Warshall：全點對最短路徑-All-Pairs\" class=\"headerlink\" title=\"Floyd-Warshall：全點對最短路徑(All Pairs)\"></a>Floyd-Warshall：全點對最短路徑(All Pairs)</h3><ul>\n<li>不支援負環</li>\n<li>想法：DP轉移（三個迴圈中點、起點、終點依序鬆弛）</li>\n<li>$d[i][j] = mid(d[i][j],d[i][k]+d[I][k]+d[k][j])$</li>\n<li>如果改寫成定義 $dp[k][i][j]$ 為點 $i$ 走到點 $j$ ，只能經過前k個點的最短路</li>\n<li>則轉移：$d[k+1][i][j] = min(d[k][i][j], d[k][i][k+1]+d[k][k+1][j])$</li>\n<li>因此中間點k必須在最外層（不過<a href=\"https://arxiv.org/pdf/1904.01210.pdf\">有論文指出</a>順序顛倒一樣可以得到正確解）</li>\n<li>優點：實作容易，缺點：時間 $O(v^3)$ 、無法處理負環（可處理負邊）</li>\n</ul>\n<h3 id=\"Dijkstra’s：單點源最短路徑\"><a href=\"#Dijkstra’s：單點源最短路徑\" class=\"headerlink\" title=\"Dijkstra’s：單點源最短路徑\"></a>Dijkstra’s：單點源最短路徑</h3><ul>\n<li>優點：時間 $O(E+V^2)$、無法處理負邊</li>\n<li>想法：Greedy（和DP）</li>\n<li>維護：1. 未拜訪的節點集合$U$ 2. $d[i]$ 目前起點到 $i$ 最短路 3. 目前考慮節點 $p$</li>\n<li>重複以下動作直到u為空：<ul>\n<li>對於所有與 $p$ 連接的節點 $q$，$d[q] = min(d[q],d[p]+weight[p][q])$</li>\n<li>當 $p$ 相鄰節點都走過：在 $u$ 中移除 $p$</li>\n<li>將 $p$ 更新成U中離起點距離最短的點 $min(d[j])$</li>\n</ul>\n</li>\n<li>可以變成 $O((E+V)logV)$-&gt;邊較為稀疏的圖時有利（使用priority_queue）</li>\n<li>不能處理負邊，因為 $d[i]$ 較小的處理完之後就不會再更動了，加入負邊可能更小</li>\n<li>拿距離最小的點 $k$ 去更新其他點，不能保證更新後其他點一定是最短路</li>\n<li>上一步走完 $k$ 連接所有邊後，從集合 $U$ 中移除，因為沒有負邊， $k$ 必定是最短路</li>\n</ul>\n<h3 id=\"Bellman-Ford：單點源最短路徑\"><a href=\"#Bellman-Ford：單點源最短路徑\" class=\"headerlink\" title=\"Bellman-Ford：單點源最短路徑\"></a>Bellman-Ford：單點源最短路徑</h3><ul>\n<li>可以處理負環</li>\n<li>時間：$O(VE)$</li>\n<li>想法：Relax鬆弛</li>\n<li>一條邊 $\\delta(u,v)$ 滿足 $dis[v] = min(dis[v],dis[u]+weight[u][v])$</li>\n<li>對每一條邊進行鬆弛，因為鬆弛沒有按照最短路順序，因此要做V-1次</li>\n<li>此為暴力作法</li>\n<li>執行V-1次的worst case：<ul>\n<li>剛好跟最短路徑的順序相反</li>\n<li>每次 Relax 後只能優化單一子路徑</li>\n<li>共有V個頂點，需要有V-1 條子路徑，每一次一條</li>\n<li>檢查負環：做完之後卻有滿足$d[v] &gt; d[u]+w(u,v)$ ，表示有負環</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"優化：SPFA-Shortest-Path-Faster-Algorithm\"><a href=\"#優化：SPFA-Shortest-Path-Faster-Algorithm\" class=\"headerlink\" title=\"優化：SPFA(Shortest Path Faster Algorithm)\"></a>優化：SPFA(Shortest Path Faster Algorithm)</h3><ul>\n<li>每次只relax更新過的點</li>\n<li>使用queue優化，有點像BFS過程<ul>\n<li>1.把起點 Push 到 Queue</li>\n<li>2.從 Queue 裡 Pop 出一筆資料</li>\n<li>3.該筆資料的所有邊進行 Relax</li>\n<li>4.有更新到的頂點再 Push 到 Queue</li>\n<li>5.重複步驟 2 ~ 4，直到 Queue 為空</li>\n</ul>\n</li>\n<li>時間：$O(VE)$ -&gt;worst case，期望 $O(KE)$ ，K大概是2吧（反正挺快的） </li>\n</ul>\n<h3 id=\"DAG-Shortest-Path\"><a href=\"#DAG-Shortest-Path\" class=\"headerlink\" title=\"DAG Shortest Path\"></a>DAG Shortest Path</h3><p>首先對所有點進行拓墣排序，花上時間 $O(V+E)$，接著對每一條邊進行鬆弛，時間$O(E)$，因此總時間複雜度是 $O(V+E)$。這個時間複雜度是很快的，但相對的限制也非常多，除了不能有負邊與負環之外，更不能有正環在其中，否則不能進行拓墣排序（在之前筆記<a href=\"/OYm7TyO2RquZwdUFLx8PFQ\">進階圖論（一）</a>）有提到，也就是這一中圖必須是DAG(Directed Acyclic Graph)！</p>\n<p>一個有趣的應用：<a href=\"https://zh.wikipedia.org/wiki/%E8%A8%88%E7%95%AB%E8%A9%95%E6%A0%B8%E8%A1%93\">PERT</a></p>\n<h3 id=\"最短路徑樹\"><a href=\"#最短路徑樹\" class=\"headerlink\" title=\"最短路徑樹\"></a>最短路徑樹</h3><ul>\n<li>紀錄predecessor(樹父節點唯一)</li>\n<li>起點到每個點的最短路徑都唯一的話，那把這些路徑疊起來會變成一棵樹</li>\n<li>樹：每一點都有唯一來源（最短路）</li>\n</ul>\n<h3 id=\"最短路徑比較\"><a href=\"#最短路徑比較\" class=\"headerlink\" title=\"最短路徑比較\"></a>最短路徑比較</h3><p>最短路徑問題共有以下求解方式（當然還有一堆），整理比較圖：<br><img src=\"https://i.imgur.com/uUUmhcL.jpg\" alt=\"\"></p>\n<h3 id=\"負環\"><a href=\"#負環\" class=\"headerlink\" title=\"負環\"></a>負環</h3><p>上表中的可以處理負環的SPFA和Bellman-Ford是以什麼樣的方式處理？（遇到負環權重應該是$-\\infty$）上方所謂負環是指下圖這種情況（當出發點為s，終點為t求最短路徑的問題），因為沒有經過負環，因此 $\\delta(s,t)$ 可以被SPFA和Bellman-Ford求出正確的最短路徑為1。我們可以利用從終點回朔最短路徑（利用predecessor紀錄）看是否有重複經過的點，如果有則表示途中有經過負環！</p>\n<p><img src=\"https://i.imgur.com/MJnJXUp.png\" alt=\"\"></p>\n<p>至於其他的算法，都會求出不正確的數值！</p>\n<div class=\"note default\">\n            <p><strong>Floyd warshall</strong><br>這個演算法是處理全點對的最短路徑，如果有負環，那一定有任兩點的最短距離是錯誤的。不過我們一樣可以利用Floyd-Warshall演算法判斷圖中是否有負環，只要<font color=\"#f00\">檢查每一個點走到自己的距離是否為負</font> ，即$dis[i][i]<0$ 是否成立，如果成立表示圖中有負環。<br></p><p><strong>Dijkstra</strong><br>這個演算法要求的限制更多，圖中<font color=\"#f00\">不可以有負邊</font>（更別提多個負邊組成的赴環），原因是在Dijkstra求最短路的過程中使用到貪心的想法，當我們從heap裡面取出目前距離最短的點之後，便不會再次被更新。如果有負邊的話，貪心法的過程會發生錯誤，導致得到不正確的答案。</p><p><img src=\"https://i.imgur.com/Gkg2mex.jpg\" alt=\"\"></p><p>此圖中如果邊 $\\delta(B,A)$ 為一負邊，當A被移出集合U中便不會有任何再次被更新的機會，但卻因為這條負邊的關係，導致從$s$到$A$的最短距離並不會被正確更新到！</p>\n          </div>\n<p>以上大概就是最短距離的演算法整理，還有一個全點對最短路徑Johnson’s Algorithm，大概就是對任一點做 Bellman-Ford（順便判斷有沒 有負環)，得到點權之後，用調整完的邊權做 V 次 Dijkstra，可以比Floyd-Warshall有更好的表現，到時候看。</p>"},{"title":"三門問題（蒙提霍爾問題）","date":"2021-07-01T16:00:00.000Z","mathjax":true,"_content":"\n## 問題敘述\n\n[資料來源](https://highscope.ch.ntu.edu.tw/wordpress/?p=47158)\n[影片網址](https://www.youtube.com/watch?v=iBdjqtR2iK4)\n在 2008 年上映的美國電影《決勝21點》中，劇中主角班 (Ben Campbell)在非線性代數的課堂上與授課教授米奇(Mickey Rosa) 有一段精彩的對話：\n\n> 米奇：「假設你正參加一個遊戲節目，你有機會從三扇不同的門裡選一扇，其中一扇門後面有一輛新車，另外兩扇門後面各有一頭山羊？你要選擇哪一扇門？」\n> \n> 班：  「一號門。」\n<!-- more -->\n> \n> 米奇：「好！這時節目主持人，順便一提，他知道門後的秘密，他去打開另一扇門，比方說他開了三號門，後面是一頭山羊。這時節目主持人說：「班，你想要堅持選擇一號門，還是換成二號門？」現在問題是–改變選擇(換另一扇門)是否對你有利?」\n> \n> 班：  「是的」\n> \n> 米奇：「記住！主持人知道那輛車在哪裡，你怎麼知道他不是在耍你？……」\n> \n> 班：  「我並不介意，因為我的答案是基於統計學，……，當一開始他讓我選一扇門時，我有 33.3% 的機率是選對的，但當他開其中一扇門時，然後又讓我選時，此刻如果我選擇換一扇門，選對的機率是 66.7%，……。」\n\n換句話說，假設你正在參加一個游戲節目，你被要求在三扇門中選擇一扇：其中一扇後面有一輛車；其餘兩扇後面則是山羊。你選擇了一道門，假設是一號門，**然後知道門後面有什麼的主持人**，開啟了另一扇後面有山羊的門，假設是三號門。他然後問你：「你想選擇二號門嗎？」轉換你的選擇對你來說是一種優勢嗎？\n\n---\n答案：**換門**贏得獎品的機率為$\\frac{2}{3}$，**不換門**為$\\frac{1}{3}$，因此應該選擇換門\n\n\n這個問題可以擴展成N門問題，也就是主持人在開了$N-2$道門以後，分析換門與不換門贏得汽車的機率\n\n\n## 條件機率—貝式定理\n\n在條件機率中，以$P(A|B)$表示在B發生的條件下A發生的機率，其值：\n$$P(A|B)=\\frac{P(A\\cap B)}{P(B)}$$\n我們還可以畫出以下樹狀圖做分析：\n![](https://i.imgur.com/nfOcm7U.png)\n假設A為得獎的情況，A'為不得獎的情況，B為換門的情況，B'為不換門的情況\n如果要得獎會發生以下兩種狀況：\n1. 不換門得獎：$P(A|B')=\\frac{\\frac{1}{6}}{\\frac{1}{6}+\\frac{1}{3}}=\\frac{1}{3}\\cong 0.33$\n2. 換門得獎：$P(A|B)=\\frac{\\frac{1}{3}}{\\frac{1}{6}+\\frac{1}{3}}=\\frac{1}{3}\\cong 0.66$\n\n從貝式定律可以得到，換門的機率比較高！\n\n## 窮舉法（列表觀察）\n我們也可以透過列表得到相同的結論，在下表中假設「選中」為參與者第一次選中的門，「開門」則是主持人打開的有山羊的門，「換門」則是剩下的那個門\n\n這邊可能會有一個疑惑（如果沒有那不要理我XD）：\n當我第一次選中有車的門時為什麼只有列一次，主持人不是可以選擇打開兩個有山羊的門其中一個，不應是兩種狀況？\n\n只有一種是因為後面有車的門觀眾只會選到一次，不像山羊觀眾可以選兩次，並且主持人打開哪一道門實際是沒有影響，都視為同一種狀況！\n\n\n| 新車 | 山羊 | 山羊 | 結果 |\n| --- | --- | ---- | ---- |\n| 選中 | 開門| 換門 |不換門贏|\n| 換門 | 選中| 開門 |換門贏|\n| 換門 | 開門| 選中 |換門贏|\n\n從上表可以清楚看出，換門之後贏的機會是$\\frac{2}{3}$，不換門則是$\\frac{1}{3}$\n\n## 直覺想法\n\n### 錯誤想法-遲到法\n有些人會問：當我從三道門選完之後，主持人打開了一扇門。這時候我請另外一個場外人來看現在的局面：兩扇門關閉，一扇門打開是山羊，那這時候這個局外人選中的機會不就是$\\frac{1}{2}$？\n\n\n這個推論其實是正確的，以一個局外人看到的情況與機率確實是$\\frac{1}{2}$，但這樣的思考前提是錯誤的，因為這位局外人<font color=\"#f00\">並沒有參與一開始三門的選擇！</font>\n條件機率有一個重要的概念，也就是一個事件的機率會<font color=\"#f00\">隨著情境的不同（提供訊息的改變）而可能會有所改變</font>，這就是一個很明顯的例子\n\n\n### 幫助理解的思考方法\n\n> 1990 年 9 月 9 日，瑪麗蓮‧沃斯‧薩萬特 (Marilyn vos Savant) 在《繽紛遊行》(Parade) 的「請問瑪麗蓮」專欄中，回答讀者提出的三門問題，沃斯‧薩萬特是金氏世界紀錄最高智商 228 的人，她認為選擇換的勝算比較大。為了說服讀者，她請大家想像有 1,000,000 扇門，她說：\n> \n> 你選擇 1 號門，而主持人知道門後有什麼，他總是避開有獎的那扇門，除了 777,777 號門外，把別的門都打開了。這時你會毫不猶豫地換到另一扇門，是吧?」\n\n從N道門中選擇其中一道門中獎機率$\\frac{1}{N}$，不中獎的機率為$\\frac{N-1}{N}$，也就是說有$\\frac{N-1}{N}$的機率汽車在另外$N-1$道門中。這時候主持人幫你一個大忙，他打開了其中沒有汽車的$N-2$道門，不就是幫助你<font color=\"#f00\">剔除了不可能選中的情況</font>，也就代表把$\\frac{N-1}{N}$的中獎機率集中在剩下的那一扇門中！\n\n因此可以得到結論：在$N$門問題中，假設主持人總共會打開$N-2$道門，那換門中獎的機率會是$\\frac{N-1}{N}$，不換門中獎則是$\\frac{1}{N}$\n\n## C++模擬\n如果上面的東西都無法說服你，那就來寫一個程式模擬吧！寫程式最重要的就是要證明模擬是正確的，因此會印出若干組結果看看是否合理！\n這個程式會亂數幫觀眾選一扇門（隨機選），與中獎的門（也是隨機選），接著主持人打開門後會剩下觀眾選的與一個還沒有被開的門\n\n### 主持人打開N-2道門（剩2道門做選擇）\n我們取$N=3$ 做例子（當然也可以隨意輸入），第一個3表示門的數量，接下來的100000表示模擬次數\n![](https://i.imgur.com/SWsVaD1.png)\n\n\n印出前五次的模擬情況作觀察，這個程式在印出未中獎時，換門中獎的事件加一；反之，印出中獎時，不換門中獎的事件加一，模擬結果符合預期！\n\n如果共有10道門，一樣符合預期，換門中獎機率落在$\\frac{9}{10}$左右\n![](https://i.imgur.com/zWhUjZq.png)\n\n### 主持人打開K道門（剩N-K道門做選擇）\n如果給個變化題，主持人想說不要對觀眾那麼好，在未被觀眾選中的$N-1$ 道門中開啟K道後面有羊的門。我們知道會有$\\frac{N-1}{N}$的機率會在不是觀眾選的另外$N-1$道門中，但在這$N-1$道門中因為打開了$K$道門，剩下$N-1-K$道門可以選擇，因此可以列出以下式子：\n$$\\frac{N-1}{N}\\times \\frac{1}{N-K-1}=\\frac{N-1}{N^2-NK-1}$$\n這就是換門中獎的機率！\n\n我們可以將換門中獎的機率扣掉不換門中獎的機率：\n$$\\begin{split}\\frac{1}{N}\\cdot \\frac{N-1}{N-K-1}-\\frac{1}{N} &=\\frac{1}{N}(\\frac{N-1}{N-K-1}-1) \\\\&= \\frac{1}{N}\\cdot\\frac{K}{N-K-1}\\end{split}$$\n\n已知$N-K\\geq2$ 且$K\\geq0$，因此無論開多少門（甚至不開），<font color=\"#f00\">換門的中獎機率永不小於不換門的機率！</font>\n\n\n以上為設定9個門，主持人打開5道門，執行一百萬次的結果。\n根據上面的公式，我們預期會有$\\frac{8}{27}\\cong 0.2963$的機率換了會中獎，符合模擬的結果\n\n### 有a輛車，主持人開K道門\n\n這就比較簡單了，原本只有1輛車，變成a輛車自然中獎的機率就會變a倍，套用上面的公式，換門中獎機率：\n$$\\frac{a\\cdot(N-1)}{N^2-NK-1}$$\n\n### 程式碼\n```cpp=\n#include <bits/stdc++.h>\nusing namespace std;\nint selected_door,selected[1000000],make_change=0,keep=0,N,M,open;\n\nint main(){\n    cin>>N>>open>>M;\t//輸入門的數量N，主持人開門數open，模擬次數M\n    srand((unsigned)time(NULL));\n    for(int i=0;i<M;i++){            //執行M次\n        selected_door = rand()%N;    //選擇一個門放汽車\n        for(int j=0;j<N;j++){\n          if(j==selected_door)selected[j]=1;\n          else selected[j]=0;\n        }\n\n        int audience_selected = rand()%N;\t//觀眾選擇一個門\n\n        for(int j=0,ind=0;j<open;ind++){\t//將K扇門打開\n          if(ind!=audience_selected && ind!=selected_door){\n              selected[ind]=2;\n              j++;\n          }\n        }\n\n        int change_door = 0;\t//要換到的門\n        vector<int>vec;\t//可以換的選擇\n        vec.clear();\n        for(int j=0;j<N;j++){\n          if(j!=audience_selected && selected[j]!=2){\n              vec.push_back(j);\n          }\n        }\n        int vec_size = vec.size();\n        change_door = vec[(rand()%vec_size)];\n        if(change_door == selected_door)make_change++;\t//紀錄換而贏的次數\n        else if(audience_selected == selected_door)keep++;\t//紀錄不換而贏的次數\n\n        if(i<4){\n          cout<<\"第\"<<i+1<<\"次模擬\"<<endl;\n          cout<<\"觀眾選擇：\"<<audience_selected+1<<\" 號門\"<<endl;\n          cout<<\"中獎的門為：\"<<selected_door+1<<\" 號門\"<<endl;\n          cout<<\"沒有被主持人打開的門：\";\n          for(int j=0;j<vec_size;j++)cout<<vec[j]+1<<\"號門,\";\n          cout<<endl<<\"觀眾選擇要換的門為：\"<<change_door+1<<\" 號門\"<<endl;\n          if(audience_selected == selected_door)cout<<\"不換門中獎\"<<endl;\n          else if(change_door == selected_door)cout<<\"換門中獎\"<<endl;\n          else cout<<\"換門不換門皆不會中獎\"<<endl;\n          cout<<endl;\n        }\n    }\n    cout<<fixed<<setprecision(5);    //印出機率\n    cout<<\"不換門贏的機率：\"<<(double)keep/M<<endl;\n    cout<<\"換了門贏的機率：\"<<(double)make_change/M<<endl;\n}\n```\n\n## 警察抓酒鬼問題\n這個問題可以用來比較一下三門問題：\n> 某酒鬼有90%的日子都會出去喝酒，喝酒只隨機去固定的三家酒吧。今天警察找了其中兩家酒吧都沒有找到酒鬼。問：酒鬼在第三家酒吧的機率？\n\n我們假設事件$A_1$為酒鬼喝酒的機率、$A_2$為酒鬼在家的機率，$B_1$為酒鬼在前兩個酒吧被抓的機率、$B_2$為酒鬼沒有在前兩個酒吧被抓的機率\n\n我們要找的是酒鬼沒有在前兩個酒吧被抓的條件下喝酒的機率，可以套用貝氏定理：\n$$\\begin{split}P(A_1|B_2)&=\\frac{P(A_1\\cap B_2)}{P(B_2)}\\\\&=\\frac{P(A_1)\\cdot P(B_2|A_1)}{P(A_1)\\cdot P(B_2|A_1)+{P(A_2)\\cdot P(B_2|A_2)}}\\\\&=\\frac{\\frac{9}{10}\\times\\frac{1}{3}}{\\frac{9}{10}\\cdot\\frac{1}{3}+\\frac{1}{10}\\times 1} \\\\&=\\frac{3}{4}=0.75\\end{split}$$\n\n正解是75%，也可以顯而易見的用$\\frac{30\\%}{30\\%+10\\%}=75\\%$得到答案\n\n這題想要討論的是，在三門問題中，<font color=\"#f00\">主持人是知道</font>哪一些門是沒有汽車的，所以故意打開；但是在這個問題中，<font color=\"#f00\">警察是不知道哪一個酒吧有酒鬼</font>，兩題本身的前提就不同，不能拿來互相解釋\n\n## 結論\n在分析完三門問題、程式實際模擬和比較其他題目之後，得到一個結論：三門問題中主持人並不是亂選，而是把沒有車的那些門打開，這根平常直覺的機率想法是不同的！\n\n雖然對大多數人的直覺反應而言，選擇換門與不換門似乎中獎的機率是相同的，但經過上述一連串利用貝氏定理的討論與歸納後，證實了反而換門才是最明智的選擇。「人的認知有兩種，一是先驗的古典機率，一是經驗的機率，前者會干擾後者；鴿子只有後者，在蒙提霍爾問題上，高人一籌。人其實是聰明反被聰明誤。」(曾志朗，2012)","source":"_posts/三門問題.md","raw":"---\ntitle: 三門問題（蒙提霍爾問題）\ndate: 2021-7-2\ntags: \n    - 數學\n    - 2021暑期筆記\ncategories: \n    - 數學筆記\nmathjax: true\n---\n\n## 問題敘述\n\n[資料來源](https://highscope.ch.ntu.edu.tw/wordpress/?p=47158)\n[影片網址](https://www.youtube.com/watch?v=iBdjqtR2iK4)\n在 2008 年上映的美國電影《決勝21點》中，劇中主角班 (Ben Campbell)在非線性代數的課堂上與授課教授米奇(Mickey Rosa) 有一段精彩的對話：\n\n> 米奇：「假設你正參加一個遊戲節目，你有機會從三扇不同的門裡選一扇，其中一扇門後面有一輛新車，另外兩扇門後面各有一頭山羊？你要選擇哪一扇門？」\n> \n> 班：  「一號門。」\n<!-- more -->\n> \n> 米奇：「好！這時節目主持人，順便一提，他知道門後的秘密，他去打開另一扇門，比方說他開了三號門，後面是一頭山羊。這時節目主持人說：「班，你想要堅持選擇一號門，還是換成二號門？」現在問題是–改變選擇(換另一扇門)是否對你有利?」\n> \n> 班：  「是的」\n> \n> 米奇：「記住！主持人知道那輛車在哪裡，你怎麼知道他不是在耍你？……」\n> \n> 班：  「我並不介意，因為我的答案是基於統計學，……，當一開始他讓我選一扇門時，我有 33.3% 的機率是選對的，但當他開其中一扇門時，然後又讓我選時，此刻如果我選擇換一扇門，選對的機率是 66.7%，……。」\n\n換句話說，假設你正在參加一個游戲節目，你被要求在三扇門中選擇一扇：其中一扇後面有一輛車；其餘兩扇後面則是山羊。你選擇了一道門，假設是一號門，**然後知道門後面有什麼的主持人**，開啟了另一扇後面有山羊的門，假設是三號門。他然後問你：「你想選擇二號門嗎？」轉換你的選擇對你來說是一種優勢嗎？\n\n---\n答案：**換門**贏得獎品的機率為$\\frac{2}{3}$，**不換門**為$\\frac{1}{3}$，因此應該選擇換門\n\n\n這個問題可以擴展成N門問題，也就是主持人在開了$N-2$道門以後，分析換門與不換門贏得汽車的機率\n\n\n## 條件機率—貝式定理\n\n在條件機率中，以$P(A|B)$表示在B發生的條件下A發生的機率，其值：\n$$P(A|B)=\\frac{P(A\\cap B)}{P(B)}$$\n我們還可以畫出以下樹狀圖做分析：\n![](https://i.imgur.com/nfOcm7U.png)\n假設A為得獎的情況，A'為不得獎的情況，B為換門的情況，B'為不換門的情況\n如果要得獎會發生以下兩種狀況：\n1. 不換門得獎：$P(A|B')=\\frac{\\frac{1}{6}}{\\frac{1}{6}+\\frac{1}{3}}=\\frac{1}{3}\\cong 0.33$\n2. 換門得獎：$P(A|B)=\\frac{\\frac{1}{3}}{\\frac{1}{6}+\\frac{1}{3}}=\\frac{1}{3}\\cong 0.66$\n\n從貝式定律可以得到，換門的機率比較高！\n\n## 窮舉法（列表觀察）\n我們也可以透過列表得到相同的結論，在下表中假設「選中」為參與者第一次選中的門，「開門」則是主持人打開的有山羊的門，「換門」則是剩下的那個門\n\n這邊可能會有一個疑惑（如果沒有那不要理我XD）：\n當我第一次選中有車的門時為什麼只有列一次，主持人不是可以選擇打開兩個有山羊的門其中一個，不應是兩種狀況？\n\n只有一種是因為後面有車的門觀眾只會選到一次，不像山羊觀眾可以選兩次，並且主持人打開哪一道門實際是沒有影響，都視為同一種狀況！\n\n\n| 新車 | 山羊 | 山羊 | 結果 |\n| --- | --- | ---- | ---- |\n| 選中 | 開門| 換門 |不換門贏|\n| 換門 | 選中| 開門 |換門贏|\n| 換門 | 開門| 選中 |換門贏|\n\n從上表可以清楚看出，換門之後贏的機會是$\\frac{2}{3}$，不換門則是$\\frac{1}{3}$\n\n## 直覺想法\n\n### 錯誤想法-遲到法\n有些人會問：當我從三道門選完之後，主持人打開了一扇門。這時候我請另外一個場外人來看現在的局面：兩扇門關閉，一扇門打開是山羊，那這時候這個局外人選中的機會不就是$\\frac{1}{2}$？\n\n\n這個推論其實是正確的，以一個局外人看到的情況與機率確實是$\\frac{1}{2}$，但這樣的思考前提是錯誤的，因為這位局外人<font color=\"#f00\">並沒有參與一開始三門的選擇！</font>\n條件機率有一個重要的概念，也就是一個事件的機率會<font color=\"#f00\">隨著情境的不同（提供訊息的改變）而可能會有所改變</font>，這就是一個很明顯的例子\n\n\n### 幫助理解的思考方法\n\n> 1990 年 9 月 9 日，瑪麗蓮‧沃斯‧薩萬特 (Marilyn vos Savant) 在《繽紛遊行》(Parade) 的「請問瑪麗蓮」專欄中，回答讀者提出的三門問題，沃斯‧薩萬特是金氏世界紀錄最高智商 228 的人，她認為選擇換的勝算比較大。為了說服讀者，她請大家想像有 1,000,000 扇門，她說：\n> \n> 你選擇 1 號門，而主持人知道門後有什麼，他總是避開有獎的那扇門，除了 777,777 號門外，把別的門都打開了。這時你會毫不猶豫地換到另一扇門，是吧?」\n\n從N道門中選擇其中一道門中獎機率$\\frac{1}{N}$，不中獎的機率為$\\frac{N-1}{N}$，也就是說有$\\frac{N-1}{N}$的機率汽車在另外$N-1$道門中。這時候主持人幫你一個大忙，他打開了其中沒有汽車的$N-2$道門，不就是幫助你<font color=\"#f00\">剔除了不可能選中的情況</font>，也就代表把$\\frac{N-1}{N}$的中獎機率集中在剩下的那一扇門中！\n\n因此可以得到結論：在$N$門問題中，假設主持人總共會打開$N-2$道門，那換門中獎的機率會是$\\frac{N-1}{N}$，不換門中獎則是$\\frac{1}{N}$\n\n## C++模擬\n如果上面的東西都無法說服你，那就來寫一個程式模擬吧！寫程式最重要的就是要證明模擬是正確的，因此會印出若干組結果看看是否合理！\n這個程式會亂數幫觀眾選一扇門（隨機選），與中獎的門（也是隨機選），接著主持人打開門後會剩下觀眾選的與一個還沒有被開的門\n\n### 主持人打開N-2道門（剩2道門做選擇）\n我們取$N=3$ 做例子（當然也可以隨意輸入），第一個3表示門的數量，接下來的100000表示模擬次數\n![](https://i.imgur.com/SWsVaD1.png)\n\n\n印出前五次的模擬情況作觀察，這個程式在印出未中獎時，換門中獎的事件加一；反之，印出中獎時，不換門中獎的事件加一，模擬結果符合預期！\n\n如果共有10道門，一樣符合預期，換門中獎機率落在$\\frac{9}{10}$左右\n![](https://i.imgur.com/zWhUjZq.png)\n\n### 主持人打開K道門（剩N-K道門做選擇）\n如果給個變化題，主持人想說不要對觀眾那麼好，在未被觀眾選中的$N-1$ 道門中開啟K道後面有羊的門。我們知道會有$\\frac{N-1}{N}$的機率會在不是觀眾選的另外$N-1$道門中，但在這$N-1$道門中因為打開了$K$道門，剩下$N-1-K$道門可以選擇，因此可以列出以下式子：\n$$\\frac{N-1}{N}\\times \\frac{1}{N-K-1}=\\frac{N-1}{N^2-NK-1}$$\n這就是換門中獎的機率！\n\n我們可以將換門中獎的機率扣掉不換門中獎的機率：\n$$\\begin{split}\\frac{1}{N}\\cdot \\frac{N-1}{N-K-1}-\\frac{1}{N} &=\\frac{1}{N}(\\frac{N-1}{N-K-1}-1) \\\\&= \\frac{1}{N}\\cdot\\frac{K}{N-K-1}\\end{split}$$\n\n已知$N-K\\geq2$ 且$K\\geq0$，因此無論開多少門（甚至不開），<font color=\"#f00\">換門的中獎機率永不小於不換門的機率！</font>\n\n\n以上為設定9個門，主持人打開5道門，執行一百萬次的結果。\n根據上面的公式，我們預期會有$\\frac{8}{27}\\cong 0.2963$的機率換了會中獎，符合模擬的結果\n\n### 有a輛車，主持人開K道門\n\n這就比較簡單了，原本只有1輛車，變成a輛車自然中獎的機率就會變a倍，套用上面的公式，換門中獎機率：\n$$\\frac{a\\cdot(N-1)}{N^2-NK-1}$$\n\n### 程式碼\n```cpp=\n#include <bits/stdc++.h>\nusing namespace std;\nint selected_door,selected[1000000],make_change=0,keep=0,N,M,open;\n\nint main(){\n    cin>>N>>open>>M;\t//輸入門的數量N，主持人開門數open，模擬次數M\n    srand((unsigned)time(NULL));\n    for(int i=0;i<M;i++){            //執行M次\n        selected_door = rand()%N;    //選擇一個門放汽車\n        for(int j=0;j<N;j++){\n          if(j==selected_door)selected[j]=1;\n          else selected[j]=0;\n        }\n\n        int audience_selected = rand()%N;\t//觀眾選擇一個門\n\n        for(int j=0,ind=0;j<open;ind++){\t//將K扇門打開\n          if(ind!=audience_selected && ind!=selected_door){\n              selected[ind]=2;\n              j++;\n          }\n        }\n\n        int change_door = 0;\t//要換到的門\n        vector<int>vec;\t//可以換的選擇\n        vec.clear();\n        for(int j=0;j<N;j++){\n          if(j!=audience_selected && selected[j]!=2){\n              vec.push_back(j);\n          }\n        }\n        int vec_size = vec.size();\n        change_door = vec[(rand()%vec_size)];\n        if(change_door == selected_door)make_change++;\t//紀錄換而贏的次數\n        else if(audience_selected == selected_door)keep++;\t//紀錄不換而贏的次數\n\n        if(i<4){\n          cout<<\"第\"<<i+1<<\"次模擬\"<<endl;\n          cout<<\"觀眾選擇：\"<<audience_selected+1<<\" 號門\"<<endl;\n          cout<<\"中獎的門為：\"<<selected_door+1<<\" 號門\"<<endl;\n          cout<<\"沒有被主持人打開的門：\";\n          for(int j=0;j<vec_size;j++)cout<<vec[j]+1<<\"號門,\";\n          cout<<endl<<\"觀眾選擇要換的門為：\"<<change_door+1<<\" 號門\"<<endl;\n          if(audience_selected == selected_door)cout<<\"不換門中獎\"<<endl;\n          else if(change_door == selected_door)cout<<\"換門中獎\"<<endl;\n          else cout<<\"換門不換門皆不會中獎\"<<endl;\n          cout<<endl;\n        }\n    }\n    cout<<fixed<<setprecision(5);    //印出機率\n    cout<<\"不換門贏的機率：\"<<(double)keep/M<<endl;\n    cout<<\"換了門贏的機率：\"<<(double)make_change/M<<endl;\n}\n```\n\n## 警察抓酒鬼問題\n這個問題可以用來比較一下三門問題：\n> 某酒鬼有90%的日子都會出去喝酒，喝酒只隨機去固定的三家酒吧。今天警察找了其中兩家酒吧都沒有找到酒鬼。問：酒鬼在第三家酒吧的機率？\n\n我們假設事件$A_1$為酒鬼喝酒的機率、$A_2$為酒鬼在家的機率，$B_1$為酒鬼在前兩個酒吧被抓的機率、$B_2$為酒鬼沒有在前兩個酒吧被抓的機率\n\n我們要找的是酒鬼沒有在前兩個酒吧被抓的條件下喝酒的機率，可以套用貝氏定理：\n$$\\begin{split}P(A_1|B_2)&=\\frac{P(A_1\\cap B_2)}{P(B_2)}\\\\&=\\frac{P(A_1)\\cdot P(B_2|A_1)}{P(A_1)\\cdot P(B_2|A_1)+{P(A_2)\\cdot P(B_2|A_2)}}\\\\&=\\frac{\\frac{9}{10}\\times\\frac{1}{3}}{\\frac{9}{10}\\cdot\\frac{1}{3}+\\frac{1}{10}\\times 1} \\\\&=\\frac{3}{4}=0.75\\end{split}$$\n\n正解是75%，也可以顯而易見的用$\\frac{30\\%}{30\\%+10\\%}=75\\%$得到答案\n\n這題想要討論的是，在三門問題中，<font color=\"#f00\">主持人是知道</font>哪一些門是沒有汽車的，所以故意打開；但是在這個問題中，<font color=\"#f00\">警察是不知道哪一個酒吧有酒鬼</font>，兩題本身的前提就不同，不能拿來互相解釋\n\n## 結論\n在分析完三門問題、程式實際模擬和比較其他題目之後，得到一個結論：三門問題中主持人並不是亂選，而是把沒有車的那些門打開，這根平常直覺的機率想法是不同的！\n\n雖然對大多數人的直覺反應而言，選擇換門與不換門似乎中獎的機率是相同的，但經過上述一連串利用貝氏定理的討論與歸納後，證實了反而換門才是最明智的選擇。「人的認知有兩種，一是先驗的古典機率，一是經驗的機率，前者會干擾後者；鴿子只有後者，在蒙提霍爾問題上，高人一籌。人其實是聰明反被聰明誤。」(曾志朗，2012)","slug":"三門問題","published":1,"updated":"2021-09-19T11:26:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvyspmgx000emuyxdf4w3i3v","content":"<h2 id=\"問題敘述\"><a href=\"#問題敘述\" class=\"headerlink\" title=\"問題敘述\"></a>問題敘述</h2><p><a href=\"https://highscope.ch.ntu.edu.tw/wordpress/?p=47158\">資料來源</a><br><a href=\"https://www.youtube.com/watch?v=iBdjqtR2iK4\">影片網址</a><br>在 2008 年上映的美國電影《決勝21點》中，劇中主角班 (Ben Campbell)在非線性代數的課堂上與授課教授米奇(Mickey Rosa) 有一段精彩的對話：</p>\n<blockquote>\n<p>米奇：「假設你正參加一個遊戲節目，你有機會從三扇不同的門裡選一扇，其中一扇門後面有一輛新車，另外兩扇門後面各有一頭山羊？你要選擇哪一扇門？」</p>\n<p>班：  「一號門。」<br><span id=\"more\"></span></p>\n<p>米奇：「好！這時節目主持人，順便一提，他知道門後的秘密，他去打開另一扇門，比方說他開了三號門，後面是一頭山羊。這時節目主持人說：「班，你想要堅持選擇一號門，還是換成二號門？」現在問題是–改變選擇(換另一扇門)是否對你有利?」</p>\n<p>班：  「是的」</p>\n<p>米奇：「記住！主持人知道那輛車在哪裡，你怎麼知道他不是在耍你？……」</p>\n<p>班：  「我並不介意，因為我的答案是基於統計學，……，當一開始他讓我選一扇門時，我有 33.3% 的機率是選對的，但當他開其中一扇門時，然後又讓我選時，此刻如果我選擇換一扇門，選對的機率是 66.7%，……。」</p>\n</blockquote>\n<p>換句話說，假設你正在參加一個游戲節目，你被要求在三扇門中選擇一扇：其中一扇後面有一輛車；其餘兩扇後面則是山羊。你選擇了一道門，假設是一號門，<strong>然後知道門後面有什麼的主持人</strong>，開啟了另一扇後面有山羊的門，假設是三號門。他然後問你：「你想選擇二號門嗎？」轉換你的選擇對你來說是一種優勢嗎？</p>\n<hr>\n<p>答案：<strong>換門</strong>贏得獎品的機率為$\\frac{2}{3}$，<strong>不換門</strong>為$\\frac{1}{3}$，因此應該選擇換門</p>\n<p>這個問題可以擴展成N門問題，也就是主持人在開了$N-2$道門以後，分析換門與不換門贏得汽車的機率</p>\n<h2 id=\"條件機率—貝式定理\"><a href=\"#條件機率—貝式定理\" class=\"headerlink\" title=\"條件機率—貝式定理\"></a>條件機率—貝式定理</h2><p>在條件機率中，以$P(A|B)$表示在B發生的條件下A發生的機率，其值：</p>\n<script type=\"math/tex; mode=display\">P(A|B)=\\frac{P(A\\cap B)}{P(B)}</script><p>我們還可以畫出以下樹狀圖做分析：<br><img src=\"https://i.imgur.com/nfOcm7U.png\" alt=\"\"><br>假設A為得獎的情況，A’為不得獎的情況，B為換門的情況，B’為不換門的情況<br>如果要得獎會發生以下兩種狀況：</p>\n<ol>\n<li>不換門得獎：$P(A|B’)=\\frac{\\frac{1}{6}}{\\frac{1}{6}+\\frac{1}{3}}=\\frac{1}{3}\\cong 0.33$</li>\n<li>換門得獎：$P(A|B)=\\frac{\\frac{1}{3}}{\\frac{1}{6}+\\frac{1}{3}}=\\frac{1}{3}\\cong 0.66$</li>\n</ol>\n<p>從貝式定律可以得到，換門的機率比較高！</p>\n<h2 id=\"窮舉法（列表觀察）\"><a href=\"#窮舉法（列表觀察）\" class=\"headerlink\" title=\"窮舉法（列表觀察）\"></a>窮舉法（列表觀察）</h2><p>我們也可以透過列表得到相同的結論，在下表中假設「選中」為參與者第一次選中的門，「開門」則是主持人打開的有山羊的門，「換門」則是剩下的那個門</p>\n<p>這邊可能會有一個疑惑（如果沒有那不要理我XD）：<br>當我第一次選中有車的門時為什麼只有列一次，主持人不是可以選擇打開兩個有山羊的門其中一個，不應是兩種狀況？</p>\n<p>只有一種是因為後面有車的門觀眾只會選到一次，不像山羊觀眾可以選兩次，並且主持人打開哪一道門實際是沒有影響，都視為同一種狀況！</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>新車</th>\n<th>山羊</th>\n<th>山羊</th>\n<th>結果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>選中</td>\n<td>開門</td>\n<td>換門</td>\n<td>不換門贏</td>\n</tr>\n<tr>\n<td>換門</td>\n<td>選中</td>\n<td>開門</td>\n<td>換門贏</td>\n</tr>\n<tr>\n<td>換門</td>\n<td>開門</td>\n<td>選中</td>\n<td>換門贏</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>從上表可以清楚看出，換門之後贏的機會是$\\frac{2}{3}$，不換門則是$\\frac{1}{3}$</p>\n<h2 id=\"直覺想法\"><a href=\"#直覺想法\" class=\"headerlink\" title=\"直覺想法\"></a>直覺想法</h2><h3 id=\"錯誤想法-遲到法\"><a href=\"#錯誤想法-遲到法\" class=\"headerlink\" title=\"錯誤想法-遲到法\"></a>錯誤想法-遲到法</h3><p>有些人會問：當我從三道門選完之後，主持人打開了一扇門。這時候我請另外一個場外人來看現在的局面：兩扇門關閉，一扇門打開是山羊，那這時候這個局外人選中的機會不就是$\\frac{1}{2}$？</p>\n<p>這個推論其實是正確的，以一個局外人看到的情況與機率確實是$\\frac{1}{2}$，但這樣的思考前提是錯誤的，因為這位局外人<font color=\"#f00\">並沒有參與一開始三門的選擇！</font><br>條件機率有一個重要的概念，也就是一個事件的機率會<font color=\"#f00\">隨著情境的不同（提供訊息的改變）而可能會有所改變</font>，這就是一個很明顯的例子</p>\n<h3 id=\"幫助理解的思考方法\"><a href=\"#幫助理解的思考方法\" class=\"headerlink\" title=\"幫助理解的思考方法\"></a>幫助理解的思考方法</h3><blockquote>\n<p>1990 年 9 月 9 日，瑪麗蓮‧沃斯‧薩萬特 (Marilyn vos Savant) 在《繽紛遊行》(Parade) 的「請問瑪麗蓮」專欄中，回答讀者提出的三門問題，沃斯‧薩萬特是金氏世界紀錄最高智商 228 的人，她認為選擇換的勝算比較大。為了說服讀者，她請大家想像有 1,000,000 扇門，她說：</p>\n<p>你選擇 1 號門，而主持人知道門後有什麼，他總是避開有獎的那扇門，除了 777,777 號門外，把別的門都打開了。這時你會毫不猶豫地換到另一扇門，是吧?」</p>\n</blockquote>\n<p>從N道門中選擇其中一道門中獎機率$\\frac{1}{N}$，不中獎的機率為$\\frac{N-1}{N}$，也就是說有$\\frac{N-1}{N}$的機率汽車在另外$N-1$道門中。這時候主持人幫你一個大忙，他打開了其中沒有汽車的$N-2$道門，不就是幫助你<font color=\"#f00\">剔除了不可能選中的情況</font>，也就代表把$\\frac{N-1}{N}$的中獎機率集中在剩下的那一扇門中！</p>\n<p>因此可以得到結論：在$N$門問題中，假設主持人總共會打開$N-2$道門，那換門中獎的機率會是$\\frac{N-1}{N}$，不換門中獎則是$\\frac{1}{N}$</p>\n<h2 id=\"C-模擬\"><a href=\"#C-模擬\" class=\"headerlink\" title=\"C++模擬\"></a>C++模擬</h2><p>如果上面的東西都無法說服你，那就來寫一個程式模擬吧！寫程式最重要的就是要證明模擬是正確的，因此會印出若干組結果看看是否合理！<br>這個程式會亂數幫觀眾選一扇門（隨機選），與中獎的門（也是隨機選），接著主持人打開門後會剩下觀眾選的與一個還沒有被開的門</p>\n<h3 id=\"主持人打開N-2道門（剩2道門做選擇）\"><a href=\"#主持人打開N-2道門（剩2道門做選擇）\" class=\"headerlink\" title=\"主持人打開N-2道門（剩2道門做選擇）\"></a>主持人打開N-2道門（剩2道門做選擇）</h3><p>我們取$N=3$ 做例子（當然也可以隨意輸入），第一個3表示門的數量，接下來的100000表示模擬次數<br><img src=\"https://i.imgur.com/SWsVaD1.png\" alt=\"\"></p>\n<p>印出前五次的模擬情況作觀察，這個程式在印出未中獎時，換門中獎的事件加一；反之，印出中獎時，不換門中獎的事件加一，模擬結果符合預期！</p>\n<p>如果共有10道門，一樣符合預期，換門中獎機率落在$\\frac{9}{10}$左右<br><img src=\"https://i.imgur.com/zWhUjZq.png\" alt=\"\"></p>\n<h3 id=\"主持人打開K道門（剩N-K道門做選擇）\"><a href=\"#主持人打開K道門（剩N-K道門做選擇）\" class=\"headerlink\" title=\"主持人打開K道門（剩N-K道門做選擇）\"></a>主持人打開K道門（剩N-K道門做選擇）</h3><p>如果給個變化題，主持人想說不要對觀眾那麼好，在未被觀眾選中的$N-1$ 道門中開啟K道後面有羊的門。我們知道會有$\\frac{N-1}{N}$的機率會在不是觀眾選的另外$N-1$道門中，但在這$N-1$道門中因為打開了$K$道門，剩下$N-1-K$道門可以選擇，因此可以列出以下式子：</p>\n<script type=\"math/tex; mode=display\">\\frac{N-1}{N}\\times \\frac{1}{N-K-1}=\\frac{N-1}{N^2-NK-1}</script><p>這就是換門中獎的機率！</p>\n<p>我們可以將換門中獎的機率扣掉不換門中獎的機率：</p>\n<script type=\"math/tex; mode=display\">\\begin{split}\\frac{1}{N}\\cdot \\frac{N-1}{N-K-1}-\\frac{1}{N} &=\\frac{1}{N}(\\frac{N-1}{N-K-1}-1) \\\\&= \\frac{1}{N}\\cdot\\frac{K}{N-K-1}\\end{split}</script><p>已知$N-K\\geq2$ 且$K\\geq0$，因此無論開多少門（甚至不開），<font color=\"#f00\">換門的中獎機率永不小於不換門的機率！</font></p>\n<p>以上為設定9個門，主持人打開5道門，執行一百萬次的結果。<br>根據上面的公式，我們預期會有$\\frac{8}{27}\\cong 0.2963$的機率換了會中獎，符合模擬的結果</p>\n<h3 id=\"有a輛車，主持人開K道門\"><a href=\"#有a輛車，主持人開K道門\" class=\"headerlink\" title=\"有a輛車，主持人開K道門\"></a>有a輛車，主持人開K道門</h3><p>這就比較簡單了，原本只有1輛車，變成a輛車自然中獎的機率就會變a倍，套用上面的公式，換門中獎機率：</p>\n<script type=\"math/tex; mode=display\">\\frac{a\\cdot(N-1)}{N^2-NK-1}</script><h3 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> selected_door,selected[<span class=\"number\">1000000</span>],make_change=<span class=\"number\">0</span>,keep=<span class=\"number\">0</span>,N,M,open;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;N&gt;&gt;open&gt;&gt;M;\t<span class=\"comment\">//輸入門的數量N，主持人開門數open，模擬次數M</span></span><br><span class=\"line\">    <span class=\"built_in\">srand</span>((<span class=\"keyword\">unsigned</span>)<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;M;i++)&#123;            <span class=\"comment\">//執行M次</span></span><br><span class=\"line\">        selected_door = <span class=\"built_in\">rand</span>()%N;    <span class=\"comment\">//選擇一個門放汽車</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;N;j++)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(j==selected_door)selected[j]=<span class=\"number\">1</span>;</span><br><span class=\"line\">          <span class=\"keyword\">else</span> selected[j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> audience_selected = <span class=\"built_in\">rand</span>()%N;\t<span class=\"comment\">//觀眾選擇一個門</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>,ind=<span class=\"number\">0</span>;j&lt;open;ind++)&#123;\t<span class=\"comment\">//將K扇門打開</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span>(ind!=audience_selected &amp;&amp; ind!=selected_door)&#123;</span><br><span class=\"line\">              selected[ind]=<span class=\"number\">2</span>;</span><br><span class=\"line\">              j++;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> change_door = <span class=\"number\">0</span>;\t<span class=\"comment\">//要換到的門</span></span><br><span class=\"line\">        vector&lt;<span class=\"keyword\">int</span>&gt;vec;\t<span class=\"comment\">//可以換的選擇</span></span><br><span class=\"line\">        vec.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;N;j++)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(j!=audience_selected &amp;&amp; selected[j]!=<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">              vec.<span class=\"built_in\">push_back</span>(j);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> vec_size = vec.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        change_door = vec[(<span class=\"built_in\">rand</span>()%vec_size)];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(change_door == selected_door)make_change++;\t<span class=\"comment\">//紀錄換而贏的次數</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(audience_selected == selected_door)keep++;\t<span class=\"comment\">//紀錄不換而贏的次數</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">          cout&lt;&lt;<span class=\"string\">&quot;第&quot;</span>&lt;&lt;i+<span class=\"number\">1</span>&lt;&lt;<span class=\"string\">&quot;次模擬&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">          cout&lt;&lt;<span class=\"string\">&quot;觀眾選擇：&quot;</span>&lt;&lt;audience_selected+<span class=\"number\">1</span>&lt;&lt;<span class=\"string\">&quot; 號門&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">          cout&lt;&lt;<span class=\"string\">&quot;中獎的門為：&quot;</span>&lt;&lt;selected_door+<span class=\"number\">1</span>&lt;&lt;<span class=\"string\">&quot; 號門&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">          cout&lt;&lt;<span class=\"string\">&quot;沒有被主持人打開的門：&quot;</span>;</span><br><span class=\"line\">          <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;vec_size;j++)cout&lt;&lt;vec[j]+<span class=\"number\">1</span>&lt;&lt;<span class=\"string\">&quot;號門,&quot;</span>;</span><br><span class=\"line\">          cout&lt;&lt;endl&lt;&lt;<span class=\"string\">&quot;觀眾選擇要換的門為：&quot;</span>&lt;&lt;change_door+<span class=\"number\">1</span>&lt;&lt;<span class=\"string\">&quot; 號門&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(audience_selected == selected_door)cout&lt;&lt;<span class=\"string\">&quot;不換門中獎&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(change_door == selected_door)cout&lt;&lt;<span class=\"string\">&quot;換門中獎&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">          <span class=\"keyword\">else</span> cout&lt;&lt;<span class=\"string\">&quot;換門不換門皆不會中獎&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">          cout&lt;&lt;endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">5</span>);    <span class=\"comment\">//印出機率</span></span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;不換門贏的機率：&quot;</span>&lt;&lt;(<span class=\"keyword\">double</span>)keep/M&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;換了門贏的機率：&quot;</span>&lt;&lt;(<span class=\"keyword\">double</span>)make_change/M&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"警察抓酒鬼問題\"><a href=\"#警察抓酒鬼問題\" class=\"headerlink\" title=\"警察抓酒鬼問題\"></a>警察抓酒鬼問題</h2><p>這個問題可以用來比較一下三門問題：</p>\n<blockquote>\n<p>某酒鬼有90%的日子都會出去喝酒，喝酒只隨機去固定的三家酒吧。今天警察找了其中兩家酒吧都沒有找到酒鬼。問：酒鬼在第三家酒吧的機率？</p>\n</blockquote>\n<p>我們假設事件$A_1$為酒鬼喝酒的機率、$A_2$為酒鬼在家的機率，$B_1$為酒鬼在前兩個酒吧被抓的機率、$B_2$為酒鬼沒有在前兩個酒吧被抓的機率</p>\n<p>我們要找的是酒鬼沒有在前兩個酒吧被抓的條件下喝酒的機率，可以套用貝氏定理：</p>\n<script type=\"math/tex; mode=display\">\\begin{split}P(A_1|B_2)&=\\frac{P(A_1\\cap B_2)}{P(B_2)}\\\\&=\\frac{P(A_1)\\cdot P(B_2|A_1)}{P(A_1)\\cdot P(B_2|A_1)+{P(A_2)\\cdot P(B_2|A_2)}}\\\\&=\\frac{\\frac{9}{10}\\times\\frac{1}{3}}{\\frac{9}{10}\\cdot\\frac{1}{3}+\\frac{1}{10}\\times 1} \\\\&=\\frac{3}{4}=0.75\\end{split}</script><p>正解是75%，也可以顯而易見的用$\\frac{30\\%}{30\\%+10\\%}=75\\%$得到答案</p>\n<p>這題想要討論的是，在三門問題中，<font color=\"#f00\">主持人是知道</font>哪一些門是沒有汽車的，所以故意打開；但是在這個問題中，<font color=\"#f00\">警察是不知道哪一個酒吧有酒鬼</font>，兩題本身的前提就不同，不能拿來互相解釋</p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>在分析完三門問題、程式實際模擬和比較其他題目之後，得到一個結論：三門問題中主持人並不是亂選，而是把沒有車的那些門打開，這根平常直覺的機率想法是不同的！</p>\n<p>雖然對大多數人的直覺反應而言，選擇換門與不換門似乎中獎的機率是相同的，但經過上述一連串利用貝氏定理的討論與歸納後，證實了反而換門才是最明智的選擇。「人的認知有兩種，一是先驗的古典機率，一是經驗的機率，前者會干擾後者；鴿子只有後者，在蒙提霍爾問題上，高人一籌。人其實是聰明反被聰明誤。」(曾志朗，2012)</p>\n","site":{"data":{}},"length":5633,"excerpt":"<h2 id=\"問題敘述\"><a href=\"#問題敘述\" class=\"headerlink\" title=\"問題敘述\"></a>問題敘述</h2><p><a href=\"https://highscope.ch.ntu.edu.tw/wordpress/?p=47158\">資料來源</a><br><a href=\"https://www.youtube.com/watch?v=iBdjqtR2iK4\">影片網址</a><br>在 2008 年上映的美國電影《決勝21點》中，劇中主角班 (Ben Campbell)在非線性代數的課堂上與授課教授米奇(Mickey Rosa) 有一段精彩的對話：</p>\n<blockquote>\n<p>米奇：「假設你正參加一個遊戲節目，你有機會從三扇不同的門裡選一扇，其中一扇門後面有一輛新車，另外兩扇門後面各有一頭山羊？你要選擇哪一扇門？」</p>\n<p>班：  「一號門。」<br>","more":"</p>\n<p>米奇：「好！這時節目主持人，順便一提，他知道門後的秘密，他去打開另一扇門，比方說他開了三號門，後面是一頭山羊。這時節目主持人說：「班，你想要堅持選擇一號門，還是換成二號門？」現在問題是–改變選擇(換另一扇門)是否對你有利?」</p>\n<p>班：  「是的」</p>\n<p>米奇：「記住！主持人知道那輛車在哪裡，你怎麼知道他不是在耍你？……」</p>\n<p>班：  「我並不介意，因為我的答案是基於統計學，……，當一開始他讓我選一扇門時，我有 33.3% 的機率是選對的，但當他開其中一扇門時，然後又讓我選時，此刻如果我選擇換一扇門，選對的機率是 66.7%，……。」</p>\n</blockquote>\n<p>換句話說，假設你正在參加一個游戲節目，你被要求在三扇門中選擇一扇：其中一扇後面有一輛車；其餘兩扇後面則是山羊。你選擇了一道門，假設是一號門，<strong>然後知道門後面有什麼的主持人</strong>，開啟了另一扇後面有山羊的門，假設是三號門。他然後問你：「你想選擇二號門嗎？」轉換你的選擇對你來說是一種優勢嗎？</p>\n<hr>\n<p>答案：<strong>換門</strong>贏得獎品的機率為$\\frac{2}{3}$，<strong>不換門</strong>為$\\frac{1}{3}$，因此應該選擇換門</p>\n<p>這個問題可以擴展成N門問題，也就是主持人在開了$N-2$道門以後，分析換門與不換門贏得汽車的機率</p>\n<h2 id=\"條件機率—貝式定理\"><a href=\"#條件機率—貝式定理\" class=\"headerlink\" title=\"條件機率—貝式定理\"></a>條件機率—貝式定理</h2><p>在條件機率中，以$P(A|B)$表示在B發生的條件下A發生的機率，其值：</p>\n<script type=\"math/tex; mode=display\">P(A|B)=\\frac{P(A\\cap B)}{P(B)}</script><p>我們還可以畫出以下樹狀圖做分析：<br><img src=\"https://i.imgur.com/nfOcm7U.png\" alt=\"\"><br>假設A為得獎的情況，A’為不得獎的情況，B為換門的情況，B’為不換門的情況<br>如果要得獎會發生以下兩種狀況：</p>\n<ol>\n<li>不換門得獎：$P(A|B’)=\\frac{\\frac{1}{6}}{\\frac{1}{6}+\\frac{1}{3}}=\\frac{1}{3}\\cong 0.33$</li>\n<li>換門得獎：$P(A|B)=\\frac{\\frac{1}{3}}{\\frac{1}{6}+\\frac{1}{3}}=\\frac{1}{3}\\cong 0.66$</li>\n</ol>\n<p>從貝式定律可以得到，換門的機率比較高！</p>\n<h2 id=\"窮舉法（列表觀察）\"><a href=\"#窮舉法（列表觀察）\" class=\"headerlink\" title=\"窮舉法（列表觀察）\"></a>窮舉法（列表觀察）</h2><p>我們也可以透過列表得到相同的結論，在下表中假設「選中」為參與者第一次選中的門，「開門」則是主持人打開的有山羊的門，「換門」則是剩下的那個門</p>\n<p>這邊可能會有一個疑惑（如果沒有那不要理我XD）：<br>當我第一次選中有車的門時為什麼只有列一次，主持人不是可以選擇打開兩個有山羊的門其中一個，不應是兩種狀況？</p>\n<p>只有一種是因為後面有車的門觀眾只會選到一次，不像山羊觀眾可以選兩次，並且主持人打開哪一道門實際是沒有影響，都視為同一種狀況！</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>新車</th>\n<th>山羊</th>\n<th>山羊</th>\n<th>結果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>選中</td>\n<td>開門</td>\n<td>換門</td>\n<td>不換門贏</td>\n</tr>\n<tr>\n<td>換門</td>\n<td>選中</td>\n<td>開門</td>\n<td>換門贏</td>\n</tr>\n<tr>\n<td>換門</td>\n<td>開門</td>\n<td>選中</td>\n<td>換門贏</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>從上表可以清楚看出，換門之後贏的機會是$\\frac{2}{3}$，不換門則是$\\frac{1}{3}$</p>\n<h2 id=\"直覺想法\"><a href=\"#直覺想法\" class=\"headerlink\" title=\"直覺想法\"></a>直覺想法</h2><h3 id=\"錯誤想法-遲到法\"><a href=\"#錯誤想法-遲到法\" class=\"headerlink\" title=\"錯誤想法-遲到法\"></a>錯誤想法-遲到法</h3><p>有些人會問：當我從三道門選完之後，主持人打開了一扇門。這時候我請另外一個場外人來看現在的局面：兩扇門關閉，一扇門打開是山羊，那這時候這個局外人選中的機會不就是$\\frac{1}{2}$？</p>\n<p>這個推論其實是正確的，以一個局外人看到的情況與機率確實是$\\frac{1}{2}$，但這樣的思考前提是錯誤的，因為這位局外人<font color=\"#f00\">並沒有參與一開始三門的選擇！</font><br>條件機率有一個重要的概念，也就是一個事件的機率會<font color=\"#f00\">隨著情境的不同（提供訊息的改變）而可能會有所改變</font>，這就是一個很明顯的例子</p>\n<h3 id=\"幫助理解的思考方法\"><a href=\"#幫助理解的思考方法\" class=\"headerlink\" title=\"幫助理解的思考方法\"></a>幫助理解的思考方法</h3><blockquote>\n<p>1990 年 9 月 9 日，瑪麗蓮‧沃斯‧薩萬特 (Marilyn vos Savant) 在《繽紛遊行》(Parade) 的「請問瑪麗蓮」專欄中，回答讀者提出的三門問題，沃斯‧薩萬特是金氏世界紀錄最高智商 228 的人，她認為選擇換的勝算比較大。為了說服讀者，她請大家想像有 1,000,000 扇門，她說：</p>\n<p>你選擇 1 號門，而主持人知道門後有什麼，他總是避開有獎的那扇門，除了 777,777 號門外，把別的門都打開了。這時你會毫不猶豫地換到另一扇門，是吧?」</p>\n</blockquote>\n<p>從N道門中選擇其中一道門中獎機率$\\frac{1}{N}$，不中獎的機率為$\\frac{N-1}{N}$，也就是說有$\\frac{N-1}{N}$的機率汽車在另外$N-1$道門中。這時候主持人幫你一個大忙，他打開了其中沒有汽車的$N-2$道門，不就是幫助你<font color=\"#f00\">剔除了不可能選中的情況</font>，也就代表把$\\frac{N-1}{N}$的中獎機率集中在剩下的那一扇門中！</p>\n<p>因此可以得到結論：在$N$門問題中，假設主持人總共會打開$N-2$道門，那換門中獎的機率會是$\\frac{N-1}{N}$，不換門中獎則是$\\frac{1}{N}$</p>\n<h2 id=\"C-模擬\"><a href=\"#C-模擬\" class=\"headerlink\" title=\"C++模擬\"></a>C++模擬</h2><p>如果上面的東西都無法說服你，那就來寫一個程式模擬吧！寫程式最重要的就是要證明模擬是正確的，因此會印出若干組結果看看是否合理！<br>這個程式會亂數幫觀眾選一扇門（隨機選），與中獎的門（也是隨機選），接著主持人打開門後會剩下觀眾選的與一個還沒有被開的門</p>\n<h3 id=\"主持人打開N-2道門（剩2道門做選擇）\"><a href=\"#主持人打開N-2道門（剩2道門做選擇）\" class=\"headerlink\" title=\"主持人打開N-2道門（剩2道門做選擇）\"></a>主持人打開N-2道門（剩2道門做選擇）</h3><p>我們取$N=3$ 做例子（當然也可以隨意輸入），第一個3表示門的數量，接下來的100000表示模擬次數<br><img src=\"https://i.imgur.com/SWsVaD1.png\" alt=\"\"></p>\n<p>印出前五次的模擬情況作觀察，這個程式在印出未中獎時，換門中獎的事件加一；反之，印出中獎時，不換門中獎的事件加一，模擬結果符合預期！</p>\n<p>如果共有10道門，一樣符合預期，換門中獎機率落在$\\frac{9}{10}$左右<br><img src=\"https://i.imgur.com/zWhUjZq.png\" alt=\"\"></p>\n<h3 id=\"主持人打開K道門（剩N-K道門做選擇）\"><a href=\"#主持人打開K道門（剩N-K道門做選擇）\" class=\"headerlink\" title=\"主持人打開K道門（剩N-K道門做選擇）\"></a>主持人打開K道門（剩N-K道門做選擇）</h3><p>如果給個變化題，主持人想說不要對觀眾那麼好，在未被觀眾選中的$N-1$ 道門中開啟K道後面有羊的門。我們知道會有$\\frac{N-1}{N}$的機率會在不是觀眾選的另外$N-1$道門中，但在這$N-1$道門中因為打開了$K$道門，剩下$N-1-K$道門可以選擇，因此可以列出以下式子：</p>\n<script type=\"math/tex; mode=display\">\\frac{N-1}{N}\\times \\frac{1}{N-K-1}=\\frac{N-1}{N^2-NK-1}</script><p>這就是換門中獎的機率！</p>\n<p>我們可以將換門中獎的機率扣掉不換門中獎的機率：</p>\n<script type=\"math/tex; mode=display\">\\begin{split}\\frac{1}{N}\\cdot \\frac{N-1}{N-K-1}-\\frac{1}{N} &=\\frac{1}{N}(\\frac{N-1}{N-K-1}-1) \\\\&= \\frac{1}{N}\\cdot\\frac{K}{N-K-1}\\end{split}</script><p>已知$N-K\\geq2$ 且$K\\geq0$，因此無論開多少門（甚至不開），<font color=\"#f00\">換門的中獎機率永不小於不換門的機率！</font></p>\n<p>以上為設定9個門，主持人打開5道門，執行一百萬次的結果。<br>根據上面的公式，我們預期會有$\\frac{8}{27}\\cong 0.2963$的機率換了會中獎，符合模擬的結果</p>\n<h3 id=\"有a輛車，主持人開K道門\"><a href=\"#有a輛車，主持人開K道門\" class=\"headerlink\" title=\"有a輛車，主持人開K道門\"></a>有a輛車，主持人開K道門</h3><p>這就比較簡單了，原本只有1輛車，變成a輛車自然中獎的機率就會變a倍，套用上面的公式，換門中獎機率：</p>\n<script type=\"math/tex; mode=display\">\\frac{a\\cdot(N-1)}{N^2-NK-1}</script><h3 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> selected_door,selected[<span class=\"number\">1000000</span>],make_change=<span class=\"number\">0</span>,keep=<span class=\"number\">0</span>,N,M,open;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;N&gt;&gt;open&gt;&gt;M;\t<span class=\"comment\">//輸入門的數量N，主持人開門數open，模擬次數M</span></span><br><span class=\"line\">    <span class=\"built_in\">srand</span>((<span class=\"keyword\">unsigned</span>)<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;M;i++)&#123;            <span class=\"comment\">//執行M次</span></span><br><span class=\"line\">        selected_door = <span class=\"built_in\">rand</span>()%N;    <span class=\"comment\">//選擇一個門放汽車</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;N;j++)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(j==selected_door)selected[j]=<span class=\"number\">1</span>;</span><br><span class=\"line\">          <span class=\"keyword\">else</span> selected[j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> audience_selected = <span class=\"built_in\">rand</span>()%N;\t<span class=\"comment\">//觀眾選擇一個門</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>,ind=<span class=\"number\">0</span>;j&lt;open;ind++)&#123;\t<span class=\"comment\">//將K扇門打開</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span>(ind!=audience_selected &amp;&amp; ind!=selected_door)&#123;</span><br><span class=\"line\">              selected[ind]=<span class=\"number\">2</span>;</span><br><span class=\"line\">              j++;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> change_door = <span class=\"number\">0</span>;\t<span class=\"comment\">//要換到的門</span></span><br><span class=\"line\">        vector&lt;<span class=\"keyword\">int</span>&gt;vec;\t<span class=\"comment\">//可以換的選擇</span></span><br><span class=\"line\">        vec.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;N;j++)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(j!=audience_selected &amp;&amp; selected[j]!=<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">              vec.<span class=\"built_in\">push_back</span>(j);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> vec_size = vec.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        change_door = vec[(<span class=\"built_in\">rand</span>()%vec_size)];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(change_door == selected_door)make_change++;\t<span class=\"comment\">//紀錄換而贏的次數</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(audience_selected == selected_door)keep++;\t<span class=\"comment\">//紀錄不換而贏的次數</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">          cout&lt;&lt;<span class=\"string\">&quot;第&quot;</span>&lt;&lt;i+<span class=\"number\">1</span>&lt;&lt;<span class=\"string\">&quot;次模擬&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">          cout&lt;&lt;<span class=\"string\">&quot;觀眾選擇：&quot;</span>&lt;&lt;audience_selected+<span class=\"number\">1</span>&lt;&lt;<span class=\"string\">&quot; 號門&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">          cout&lt;&lt;<span class=\"string\">&quot;中獎的門為：&quot;</span>&lt;&lt;selected_door+<span class=\"number\">1</span>&lt;&lt;<span class=\"string\">&quot; 號門&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">          cout&lt;&lt;<span class=\"string\">&quot;沒有被主持人打開的門：&quot;</span>;</span><br><span class=\"line\">          <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;vec_size;j++)cout&lt;&lt;vec[j]+<span class=\"number\">1</span>&lt;&lt;<span class=\"string\">&quot;號門,&quot;</span>;</span><br><span class=\"line\">          cout&lt;&lt;endl&lt;&lt;<span class=\"string\">&quot;觀眾選擇要換的門為：&quot;</span>&lt;&lt;change_door+<span class=\"number\">1</span>&lt;&lt;<span class=\"string\">&quot; 號門&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(audience_selected == selected_door)cout&lt;&lt;<span class=\"string\">&quot;不換門中獎&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(change_door == selected_door)cout&lt;&lt;<span class=\"string\">&quot;換門中獎&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">          <span class=\"keyword\">else</span> cout&lt;&lt;<span class=\"string\">&quot;換門不換門皆不會中獎&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">          cout&lt;&lt;endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">5</span>);    <span class=\"comment\">//印出機率</span></span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;不換門贏的機率：&quot;</span>&lt;&lt;(<span class=\"keyword\">double</span>)keep/M&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;換了門贏的機率：&quot;</span>&lt;&lt;(<span class=\"keyword\">double</span>)make_change/M&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"警察抓酒鬼問題\"><a href=\"#警察抓酒鬼問題\" class=\"headerlink\" title=\"警察抓酒鬼問題\"></a>警察抓酒鬼問題</h2><p>這個問題可以用來比較一下三門問題：</p>\n<blockquote>\n<p>某酒鬼有90%的日子都會出去喝酒，喝酒只隨機去固定的三家酒吧。今天警察找了其中兩家酒吧都沒有找到酒鬼。問：酒鬼在第三家酒吧的機率？</p>\n</blockquote>\n<p>我們假設事件$A_1$為酒鬼喝酒的機率、$A_2$為酒鬼在家的機率，$B_1$為酒鬼在前兩個酒吧被抓的機率、$B_2$為酒鬼沒有在前兩個酒吧被抓的機率</p>\n<p>我們要找的是酒鬼沒有在前兩個酒吧被抓的條件下喝酒的機率，可以套用貝氏定理：</p>\n<script type=\"math/tex; mode=display\">\\begin{split}P(A_1|B_2)&=\\frac{P(A_1\\cap B_2)}{P(B_2)}\\\\&=\\frac{P(A_1)\\cdot P(B_2|A_1)}{P(A_1)\\cdot P(B_2|A_1)+{P(A_2)\\cdot P(B_2|A_2)}}\\\\&=\\frac{\\frac{9}{10}\\times\\frac{1}{3}}{\\frac{9}{10}\\cdot\\frac{1}{3}+\\frac{1}{10}\\times 1} \\\\&=\\frac{3}{4}=0.75\\end{split}</script><p>正解是75%，也可以顯而易見的用$\\frac{30\\%}{30\\%+10\\%}=75\\%$得到答案</p>\n<p>這題想要討論的是，在三門問題中，<font color=\"#f00\">主持人是知道</font>哪一些門是沒有汽車的，所以故意打開；但是在這個問題中，<font color=\"#f00\">警察是不知道哪一個酒吧有酒鬼</font>，兩題本身的前提就不同，不能拿來互相解釋</p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>在分析完三門問題、程式實際模擬和比較其他題目之後，得到一個結論：三門問題中主持人並不是亂選，而是把沒有車的那些門打開，這根平常直覺的機率想法是不同的！</p>\n<p>雖然對大多數人的直覺反應而言，選擇換門與不換門似乎中獎的機率是相同的，但經過上述一連串利用貝氏定理的討論與歸納後，證實了反而換門才是最明智的選擇。「人的認知有兩種，一是先驗的古典機率，一是經驗的機率，前者會干擾後者；鴿子只有後者，在蒙提霍爾問題上，高人一籌。人其實是聰明反被聰明誤。」(曾志朗，2012)</p>"},{"title":"使用Hexo 搭配GitHub架設個人部落格","date":"2021-08-26T16:00:00.000Z","mathjax":true,"_content":"\n暑假常常寫題，都幾乎紀錄在Hackmd上，如果能有屬於自己的部落格、用自己的網址，感覺超酷！來自己架設一個試試看！\n\n## 網域種類\n架設網站有好多種方法，有時候是看題解看到了很多的網站XD，上網查了資料以及很多人的部落格，發現寫coding部落格的人的網站大多分成以下四類：\n\n1. [Blogger](https://www.blogger.com/)\n2. [Hexo](https://hexo.io/)\n3. [GitHub Pages](https://pages.github.com/)\n4. [WordPress.org](https://wordpress.org/)\n\n<!--more-->\n\n每一種部落格都有優勢與劣勢，就看使用者覺得哪一個平台使用起來比較方便！在經過多方嘗試之下，最後我是選擇了使用 Hexo 搭配 Github 來架設我的網站，以下來分析一下我個人在架設的過程中，以一個新手的角度看各個平台使用上的優缺點！\n\n\n\n| 網站比較    | 優點 | 缺點 |\n| ----------- | ---- | ---- |\n| **Blogger**|  1. 介面清楚，操作方便<br>2. 一鍵預覽及發布，快速查看文章成果<br>3. 免費！|1. 不支援MarkDown語法<br>2. 對數學式、程式碼支援不便利    |\n| **Hexo**   | 1. 支援MarkDown語法<br>2. Mac終端機操作方便<br>3. 免費！|1. 純程式碼呈現，較不直覺<br>2. 修改過程中如果程式碼出錯，造成整個網站掛掉|\n|**GitHub Pages** |1. 支援MarkDown語法<br>2. 進行版本控制<br>3. 免費！|1. 單純使用的話操作、修改不方便<br>2. Git操作有一定難度|\n|**WordPress com** |1. 跟Blogger相近，操作簡單易上手<br>2. 快速查看文章長相   |1. 不支援Markdown<br>2. 免費版限制多、模板不漂亮   |\n|**WordPress org** | 太貴不考慮 | 上網查必須要先付費才能開始架設<br>費用好像一年3000以上|\n\n經過多方嘗試（花了我好多天），出產了一堆失敗品，最後還是用 Hexo 搭配 GitHub 來架設一個算滿意的網站（至少看起來不錯XD）。以下是我的失敗品網站：\n1. [Blogger](https://peienwu1216.blogspot.com/?zx=60407725c2514b18)\n2. [WorldPress](https://peienwu.wordpress.com/)\n3. Github的我已經刪掉了\n\n## Hexo 安裝\n之前遇上很多軟體對Mac都不友善，不過Hexo卻是對Mac的用戶比較友善的工具。只要在終端機輸入以下命令就可以安裝Hexo：\n```\n$ npm install -g hexo-cli\n```\n詳細的安裝步驟可以參考[官方網站](https://hexo.io/docs/)，或是網路上的[教學影片](https://youtu.be/jOJI9ekTzK8)就可以一步一步的把網站建立起來！\n\n在這過程中，我發現影片上有使用到VS Code，於是我就把它也載下來了。用起來感覺VS Code 對專案製作很有幫助，可以同步的在各個檔案之間進行修改，蠻實用的一個IDE！\n![](https://i.imgur.com/eIiT0Pb.png)\n\n\n## GitHub同步\n將 Hexo 裡面的檔案推送到 Git Hub 裡面的一個Repository中，利用它來將網頁的內容進行發布。在每一次本地修改完成之後，如果本地測試可行，就可以將檔案推送到Github中，在Github將網站進行發布。我使用來架設部落格的[Repository在此](https://github.com/peienwu/peienwu.github.io)。\n```\ngit add .                //加入\ngit commit -m \"xxx\"      //提交\ngit push                 //推入\ngit push -f              //強制推入（聽說很危險）\n```\n在提交的後面的字串表示當前版本的一個提示，例如我做了什麼修改就可以顯示在上面，讓別人知道這份檔案被更改的情況。下圖就是在每一次推入時附加的修改資訊，讓我自己可以看到檔案被更改以及提交的狀況!\n\n![](https://i.imgur.com/kBpX3gp.png)\n\nGit真是博大精深，版本控制真的有難度，我只會簡單的修改以及推入（之後找時間可以學一下）。\n\n## 外掛安裝\n\n做到這一個步驟已經花了我快三小時，出現的是類似以下的畫面：\n\n![](https://i.imgur.com/a1zD8Qz.png)\n\n這是 Hexo 預設的樣板，感覺還不錯，不過我的目標是使用另外外掛的模板，看起來比較漂亮XD。於是我就找了[Next主題](https://github.com/theme-next/hexo-theme-next)的外掛來安裝，這個模板就感覺舒服很多。這個模板使用的大陸部落格很多，也有一些其他的競程部落格使用了這個主題！\n\n![](https://i.imgur.com/aP8mwrQ.png)\n\n### Hexo NexT 美化\n\n上網查關鍵字其實有很多美化的資訊可以參考，不論是字體或版面配置都有很多種選項可以選擇。最一開始是設計版面的部分，將網站總共分五個子類別，分別是首頁、檔案、類別、標籤以及關於，這五個經典的配置。接下來就是個人資訊的設定，加入自己的圖片以及說明：\n![](https://i.imgur.com/TXykwfE.png)\n\n以及在網頁瀏覽標籤上方設定icon：\n![](https://i.imgur.com/Y2lE6Qp.png)\n\n當然最重要的就是文章內容，因為是使用Markdown語法，剛好有幾篇筆記就丟上去看看。當然還有很多的優化以及美化，如果有什麼需要改進的地方要跟我說喔！\n\n### Disqus 留言板功能\n在每一篇文章下方加入留言板功能，感覺還蠻酷的！\n\n![](https://i.imgur.com/DAUAz3R.png)\n\n### Google Analytics 追蹤分析\n這是酷東西，使用google 帳號生成一組代碼之後，把一些它提供的程式碼埋到網站中，它可以即時的統計網站的瀏覽狀況，以及觸及、感興趣的主題等等。**假設**未來瀏覽的人次比較多的時候（可能根本沒人會看XDD），還可以用它來分析哪一種文章最受人歡迎、哪一種文章最冷門之類的！\n\n![](https://i.imgur.com/3lPv0uW.png)\n\n### 購買個人網址\n昨天終於買到了自己名字的網址了！新的網址名稱是：peienwu.com！在**Godaddy** 上用NT570元買了一年這個網址的使用權限，買完之後到**CloudFlare**設定好Dns之類的，讓這個網址可以指向一個IP位址（這其中的原理有點複雜）。\n\n設定完之後，發現他一直出現錯誤訊息，點開網址也是不可使用的，差點昏倒ww。晚上處理不了了，隔天一早起床就開始著手處理中這個問題，把檔案刪刪改改，終於成功讓GitHub跳出以下訊息：\n\n![](https://i.imgur.com/Zoe8Aes.png)\n\n很討厭的，他沒有https，也就是鎖頭，在這種情況下，瀏覽器就會自動設置為<font color=\"#f00\">不安全</font>的網站，接下來早上的時間都拿去處理這個問題。在設定一些SSH以及https的安全性設定之後，終於，在訪問網站時拿到了鎖頭的認證！\n\n![](https://i.imgur.com/jguOHwH.png)\n\n### 留言板更新\n\n最近重新登入後發現文章底部都是一堆Disqus的廣告，真的有夠討厭，如果要消除廣告的方法只剩下付費，好討厭！於是我決定換一個評論系統，叫做[Valine](https://valine.js.org/) 的系統，他的優點是支援Emoji 😉、MarkDown 全语法支持，而且**沒有廣告**！大概的留言就像以下這樣：\n![](https://i.imgur.com/xgmM0EX.png)\n\n支援Markdown的留言真的很酷！\n\n至於留言管理的部分，則是用[LeanCloud](https://leancloud.app/) 來實現，可以刪留言之類的XD\n![](https://i.imgur.com/Zmtl0u8.png)\n\n### 抱怨一下\n今天在用Icloud 的時候，不小心把電腦上所有的檔案全部刪掉了，哭啊，這真是嚴重的事情ＱＱＱ，用到快掛了！當然，我電腦上的所有東西都不見了，也包括這一個部落格的本地程式碼，我用了 google drive 的備份，可惜那很難下載，所以我就用了github原本的備份的東西。\n\n這真是不幸中的大幸，還好github的備份直接下載就可以直接用，不用特別再設定一些奇怪的東西，但所有的 hexo 指令都不見了，git的指令也都不見了，必須要重新設定。\n\n這邊有一個小東西，就是下面這一行警告，就是要你把push設定成你要push的地方，不然只打一個push他並不會知道要push去哪裏，所以設定一下repo的位置就好了。\n\n> git push --set-upstream origin master\n\n當然還有一堆bug ，只好慢慢爬文嘍，當你看到這一段文字，也就代表我成功找到解決辦法了！\n\n### 我又來更新了\n\n這幾天網站一直404 not found 超煩，於是我叫出之前的教學影片，重新看了之後，發現我的分支名稱弄錯了，不是用master而是用gh-pages，搞了好多天QQ\n\n\n## 架設心得\n部落格以後會常常更新，最近也會陸續把之前的文章放到部落格上面。整個網站從誕生到現在的結果已經花了15個小時，其中在Debug的時間應該佔了大多數！\n\n遇到了幾個麻煩的問題，首先碰到的是本地的資料無法上傳到Github，終端機冒出來的是：<font color=\"#f00\">Please make sure you have the correct access rights and the repository exists.</font>。這個錯誤超級煩，爬了一堆文結果他要在GitHub上面設定ssh金鑰之類的東西，才能獲取從本地更新的權限。結果網路上的文章說我要開啟一個名叫\".ssh\"的資料夾，可是我翻遍了我的電腦也找不到這一個資料夾！後來我是利用終端機，輸入路徑位置硬是把那一個資料夾打開，它是一個透明的資料夾，還是第一次遇到！\n\n接著是終端機跑出一堆error，那時候真的差點崩潰，花了超久架設的東西，竟然跑出這麼多的錯誤！難道全部的東西都付之一炬了嗎？翻了每一個被變更過的資料夾，才發現到在user_name的地方踩了雷，把他變回原本的設定就好了，真是不幸中的大幸，幸好我還能把東西救回來！\n\n最後，終於能用https的前綴連到我的網站：https://peienwu.com 。如果要打www開頭也是可以連得上，直接打 peienwu.com 也可以順利連上！","source":"_posts/個人部落格.md","raw":"---\ntitle: 使用Hexo 搭配GitHub架設個人部落格\ndate: 2021-8-27\ntags: \n    - 個人部落格\n    - 網站架設\ncategories: 部落格架設\nmathjax: true\n---\n\n暑假常常寫題，都幾乎紀錄在Hackmd上，如果能有屬於自己的部落格、用自己的網址，感覺超酷！來自己架設一個試試看！\n\n## 網域種類\n架設網站有好多種方法，有時候是看題解看到了很多的網站XD，上網查了資料以及很多人的部落格，發現寫coding部落格的人的網站大多分成以下四類：\n\n1. [Blogger](https://www.blogger.com/)\n2. [Hexo](https://hexo.io/)\n3. [GitHub Pages](https://pages.github.com/)\n4. [WordPress.org](https://wordpress.org/)\n\n<!--more-->\n\n每一種部落格都有優勢與劣勢，就看使用者覺得哪一個平台使用起來比較方便！在經過多方嘗試之下，最後我是選擇了使用 Hexo 搭配 Github 來架設我的網站，以下來分析一下我個人在架設的過程中，以一個新手的角度看各個平台使用上的優缺點！\n\n\n\n| 網站比較    | 優點 | 缺點 |\n| ----------- | ---- | ---- |\n| **Blogger**|  1. 介面清楚，操作方便<br>2. 一鍵預覽及發布，快速查看文章成果<br>3. 免費！|1. 不支援MarkDown語法<br>2. 對數學式、程式碼支援不便利    |\n| **Hexo**   | 1. 支援MarkDown語法<br>2. Mac終端機操作方便<br>3. 免費！|1. 純程式碼呈現，較不直覺<br>2. 修改過程中如果程式碼出錯，造成整個網站掛掉|\n|**GitHub Pages** |1. 支援MarkDown語法<br>2. 進行版本控制<br>3. 免費！|1. 單純使用的話操作、修改不方便<br>2. Git操作有一定難度|\n|**WordPress com** |1. 跟Blogger相近，操作簡單易上手<br>2. 快速查看文章長相   |1. 不支援Markdown<br>2. 免費版限制多、模板不漂亮   |\n|**WordPress org** | 太貴不考慮 | 上網查必須要先付費才能開始架設<br>費用好像一年3000以上|\n\n經過多方嘗試（花了我好多天），出產了一堆失敗品，最後還是用 Hexo 搭配 GitHub 來架設一個算滿意的網站（至少看起來不錯XD）。以下是我的失敗品網站：\n1. [Blogger](https://peienwu1216.blogspot.com/?zx=60407725c2514b18)\n2. [WorldPress](https://peienwu.wordpress.com/)\n3. Github的我已經刪掉了\n\n## Hexo 安裝\n之前遇上很多軟體對Mac都不友善，不過Hexo卻是對Mac的用戶比較友善的工具。只要在終端機輸入以下命令就可以安裝Hexo：\n```\n$ npm install -g hexo-cli\n```\n詳細的安裝步驟可以參考[官方網站](https://hexo.io/docs/)，或是網路上的[教學影片](https://youtu.be/jOJI9ekTzK8)就可以一步一步的把網站建立起來！\n\n在這過程中，我發現影片上有使用到VS Code，於是我就把它也載下來了。用起來感覺VS Code 對專案製作很有幫助，可以同步的在各個檔案之間進行修改，蠻實用的一個IDE！\n![](https://i.imgur.com/eIiT0Pb.png)\n\n\n## GitHub同步\n將 Hexo 裡面的檔案推送到 Git Hub 裡面的一個Repository中，利用它來將網頁的內容進行發布。在每一次本地修改完成之後，如果本地測試可行，就可以將檔案推送到Github中，在Github將網站進行發布。我使用來架設部落格的[Repository在此](https://github.com/peienwu/peienwu.github.io)。\n```\ngit add .                //加入\ngit commit -m \"xxx\"      //提交\ngit push                 //推入\ngit push -f              //強制推入（聽說很危險）\n```\n在提交的後面的字串表示當前版本的一個提示，例如我做了什麼修改就可以顯示在上面，讓別人知道這份檔案被更改的情況。下圖就是在每一次推入時附加的修改資訊，讓我自己可以看到檔案被更改以及提交的狀況!\n\n![](https://i.imgur.com/kBpX3gp.png)\n\nGit真是博大精深，版本控制真的有難度，我只會簡單的修改以及推入（之後找時間可以學一下）。\n\n## 外掛安裝\n\n做到這一個步驟已經花了我快三小時，出現的是類似以下的畫面：\n\n![](https://i.imgur.com/a1zD8Qz.png)\n\n這是 Hexo 預設的樣板，感覺還不錯，不過我的目標是使用另外外掛的模板，看起來比較漂亮XD。於是我就找了[Next主題](https://github.com/theme-next/hexo-theme-next)的外掛來安裝，這個模板就感覺舒服很多。這個模板使用的大陸部落格很多，也有一些其他的競程部落格使用了這個主題！\n\n![](https://i.imgur.com/aP8mwrQ.png)\n\n### Hexo NexT 美化\n\n上網查關鍵字其實有很多美化的資訊可以參考，不論是字體或版面配置都有很多種選項可以選擇。最一開始是設計版面的部分，將網站總共分五個子類別，分別是首頁、檔案、類別、標籤以及關於，這五個經典的配置。接下來就是個人資訊的設定，加入自己的圖片以及說明：\n![](https://i.imgur.com/TXykwfE.png)\n\n以及在網頁瀏覽標籤上方設定icon：\n![](https://i.imgur.com/Y2lE6Qp.png)\n\n當然最重要的就是文章內容，因為是使用Markdown語法，剛好有幾篇筆記就丟上去看看。當然還有很多的優化以及美化，如果有什麼需要改進的地方要跟我說喔！\n\n### Disqus 留言板功能\n在每一篇文章下方加入留言板功能，感覺還蠻酷的！\n\n![](https://i.imgur.com/DAUAz3R.png)\n\n### Google Analytics 追蹤分析\n這是酷東西，使用google 帳號生成一組代碼之後，把一些它提供的程式碼埋到網站中，它可以即時的統計網站的瀏覽狀況，以及觸及、感興趣的主題等等。**假設**未來瀏覽的人次比較多的時候（可能根本沒人會看XDD），還可以用它來分析哪一種文章最受人歡迎、哪一種文章最冷門之類的！\n\n![](https://i.imgur.com/3lPv0uW.png)\n\n### 購買個人網址\n昨天終於買到了自己名字的網址了！新的網址名稱是：peienwu.com！在**Godaddy** 上用NT570元買了一年這個網址的使用權限，買完之後到**CloudFlare**設定好Dns之類的，讓這個網址可以指向一個IP位址（這其中的原理有點複雜）。\n\n設定完之後，發現他一直出現錯誤訊息，點開網址也是不可使用的，差點昏倒ww。晚上處理不了了，隔天一早起床就開始著手處理中這個問題，把檔案刪刪改改，終於成功讓GitHub跳出以下訊息：\n\n![](https://i.imgur.com/Zoe8Aes.png)\n\n很討厭的，他沒有https，也就是鎖頭，在這種情況下，瀏覽器就會自動設置為<font color=\"#f00\">不安全</font>的網站，接下來早上的時間都拿去處理這個問題。在設定一些SSH以及https的安全性設定之後，終於，在訪問網站時拿到了鎖頭的認證！\n\n![](https://i.imgur.com/jguOHwH.png)\n\n### 留言板更新\n\n最近重新登入後發現文章底部都是一堆Disqus的廣告，真的有夠討厭，如果要消除廣告的方法只剩下付費，好討厭！於是我決定換一個評論系統，叫做[Valine](https://valine.js.org/) 的系統，他的優點是支援Emoji 😉、MarkDown 全语法支持，而且**沒有廣告**！大概的留言就像以下這樣：\n![](https://i.imgur.com/xgmM0EX.png)\n\n支援Markdown的留言真的很酷！\n\n至於留言管理的部分，則是用[LeanCloud](https://leancloud.app/) 來實現，可以刪留言之類的XD\n![](https://i.imgur.com/Zmtl0u8.png)\n\n### 抱怨一下\n今天在用Icloud 的時候，不小心把電腦上所有的檔案全部刪掉了，哭啊，這真是嚴重的事情ＱＱＱ，用到快掛了！當然，我電腦上的所有東西都不見了，也包括這一個部落格的本地程式碼，我用了 google drive 的備份，可惜那很難下載，所以我就用了github原本的備份的東西。\n\n這真是不幸中的大幸，還好github的備份直接下載就可以直接用，不用特別再設定一些奇怪的東西，但所有的 hexo 指令都不見了，git的指令也都不見了，必須要重新設定。\n\n這邊有一個小東西，就是下面這一行警告，就是要你把push設定成你要push的地方，不然只打一個push他並不會知道要push去哪裏，所以設定一下repo的位置就好了。\n\n> git push --set-upstream origin master\n\n當然還有一堆bug ，只好慢慢爬文嘍，當你看到這一段文字，也就代表我成功找到解決辦法了！\n\n### 我又來更新了\n\n這幾天網站一直404 not found 超煩，於是我叫出之前的教學影片，重新看了之後，發現我的分支名稱弄錯了，不是用master而是用gh-pages，搞了好多天QQ\n\n\n## 架設心得\n部落格以後會常常更新，最近也會陸續把之前的文章放到部落格上面。整個網站從誕生到現在的結果已經花了15個小時，其中在Debug的時間應該佔了大多數！\n\n遇到了幾個麻煩的問題，首先碰到的是本地的資料無法上傳到Github，終端機冒出來的是：<font color=\"#f00\">Please make sure you have the correct access rights and the repository exists.</font>。這個錯誤超級煩，爬了一堆文結果他要在GitHub上面設定ssh金鑰之類的東西，才能獲取從本地更新的權限。結果網路上的文章說我要開啟一個名叫\".ssh\"的資料夾，可是我翻遍了我的電腦也找不到這一個資料夾！後來我是利用終端機，輸入路徑位置硬是把那一個資料夾打開，它是一個透明的資料夾，還是第一次遇到！\n\n接著是終端機跑出一堆error，那時候真的差點崩潰，花了超久架設的東西，竟然跑出這麼多的錯誤！難道全部的東西都付之一炬了嗎？翻了每一個被變更過的資料夾，才發現到在user_name的地方踩了雷，把他變回原本的設定就好了，真是不幸中的大幸，幸好我還能把東西救回來！\n\n最後，終於能用https的前綴連到我的網站：https://peienwu.com 。如果要打www開頭也是可以連得上，直接打 peienwu.com 也可以順利連上！","slug":"個人部落格","published":1,"updated":"2021-09-23T11:30:26.205Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvyspmh1000imuyxdcfbcc7p","content":"<p>暑假常常寫題，都幾乎紀錄在Hackmd上，如果能有屬於自己的部落格、用自己的網址，感覺超酷！來自己架設一個試試看！</p>\n<h2 id=\"網域種類\"><a href=\"#網域種類\" class=\"headerlink\" title=\"網域種類\"></a>網域種類</h2><p>架設網站有好多種方法，有時候是看題解看到了很多的網站XD，上網查了資料以及很多人的部落格，發現寫coding部落格的人的網站大多分成以下四類：</p>\n<ol>\n<li><a href=\"https://www.blogger.com/\">Blogger</a></li>\n<li><a href=\"https://hexo.io/\">Hexo</a></li>\n<li><a href=\"https://pages.github.com/\">GitHub Pages</a></li>\n<li><a href=\"https://wordpress.org/\">WordPress.org</a></li>\n</ol>\n<span id=\"more\"></span>\n<p>每一種部落格都有優勢與劣勢，就看使用者覺得哪一個平台使用起來比較方便！在經過多方嘗試之下，最後我是選擇了使用 Hexo 搭配 Github 來架設我的網站，以下來分析一下我個人在架設的過程中，以一個新手的角度看各個平台使用上的優缺點！</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>網站比較</th>\n<th>優點</th>\n<th>缺點</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Blogger</strong></td>\n<td>1. 介面清楚，操作方便<br>2. 一鍵預覽及發布，快速查看文章成果<br>3. 免費！</td>\n<td>1. 不支援MarkDown語法<br>2. 對數學式、程式碼支援不便利</td>\n</tr>\n<tr>\n<td><strong>Hexo</strong></td>\n<td>1. 支援MarkDown語法<br>2. Mac終端機操作方便<br>3. 免費！</td>\n<td>1. 純程式碼呈現，較不直覺<br>2. 修改過程中如果程式碼出錯，造成整個網站掛掉</td>\n</tr>\n<tr>\n<td><strong>GitHub Pages</strong></td>\n<td>1. 支援MarkDown語法<br>2. 進行版本控制<br>3. 免費！</td>\n<td>1. 單純使用的話操作、修改不方便<br>2. Git操作有一定難度</td>\n</tr>\n<tr>\n<td><strong>WordPress com</strong></td>\n<td>1. 跟Blogger相近，操作簡單易上手<br>2. 快速查看文章長相</td>\n<td>1. 不支援Markdown<br>2. 免費版限制多、模板不漂亮</td>\n</tr>\n<tr>\n<td><strong>WordPress org</strong></td>\n<td>太貴不考慮</td>\n<td>上網查必須要先付費才能開始架設<br>費用好像一年3000以上</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>經過多方嘗試（花了我好多天），出產了一堆失敗品，最後還是用 Hexo 搭配 GitHub 來架設一個算滿意的網站（至少看起來不錯XD）。以下是我的失敗品網站：</p>\n<ol>\n<li><a href=\"https://peienwu1216.blogspot.com/?zx=60407725c2514b18\">Blogger</a></li>\n<li><a href=\"https://peienwu.wordpress.com/\">WorldPress</a></li>\n<li>Github的我已經刪掉了</li>\n</ol>\n<h2 id=\"Hexo-安裝\"><a href=\"#Hexo-安裝\" class=\"headerlink\" title=\"Hexo 安裝\"></a>Hexo 安裝</h2><p>之前遇上很多軟體對Mac都不友善，不過Hexo卻是對Mac的用戶比較友善的工具。只要在終端機輸入以下命令就可以安裝Hexo：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><br>詳細的安裝步驟可以參考<a href=\"https://hexo.io/docs/\">官方網站</a>，或是網路上的<a href=\"https://youtu.be/jOJI9ekTzK8\">教學影片</a>就可以一步一步的把網站建立起來！</p>\n<p>在這過程中，我發現影片上有使用到VS Code，於是我就把它也載下來了。用起來感覺VS Code 對專案製作很有幫助，可以同步的在各個檔案之間進行修改，蠻實用的一個IDE！<br><img src=\"https://i.imgur.com/eIiT0Pb.png\" alt=\"\"></p>\n<h2 id=\"GitHub同步\"><a href=\"#GitHub同步\" class=\"headerlink\" title=\"GitHub同步\"></a>GitHub同步</h2><p>將 Hexo 裡面的檔案推送到 Git Hub 裡面的一個Repository中，利用它來將網頁的內容進行發布。在每一次本地修改完成之後，如果本地測試可行，就可以將檔案推送到Github中，在Github將網站進行發布。我使用來架設部落格的<a href=\"https://github.com/peienwu/peienwu.github.io\">Repository在此</a>。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .                //加入</span><br><span class=\"line\">git commit -m &quot;xxx&quot;      //提交</span><br><span class=\"line\">git push                 //推入</span><br><span class=\"line\">git push -f              //強制推入（聽說很危險）</span><br></pre></td></tr></table></figure><br>在提交的後面的字串表示當前版本的一個提示，例如我做了什麼修改就可以顯示在上面，讓別人知道這份檔案被更改的情況。下圖就是在每一次推入時附加的修改資訊，讓我自己可以看到檔案被更改以及提交的狀況!</p>\n<p><img src=\"https://i.imgur.com/kBpX3gp.png\" alt=\"\"></p>\n<p>Git真是博大精深，版本控制真的有難度，我只會簡單的修改以及推入（之後找時間可以學一下）。</p>\n<h2 id=\"外掛安裝\"><a href=\"#外掛安裝\" class=\"headerlink\" title=\"外掛安裝\"></a>外掛安裝</h2><p>做到這一個步驟已經花了我快三小時，出現的是類似以下的畫面：</p>\n<p><img src=\"https://i.imgur.com/a1zD8Qz.png\" alt=\"\"></p>\n<p>這是 Hexo 預設的樣板，感覺還不錯，不過我的目標是使用另外外掛的模板，看起來比較漂亮XD。於是我就找了<a href=\"https://github.com/theme-next/hexo-theme-next\">Next主題</a>的外掛來安裝，這個模板就感覺舒服很多。這個模板使用的大陸部落格很多，也有一些其他的競程部落格使用了這個主題！</p>\n<p><img src=\"https://i.imgur.com/aP8mwrQ.png\" alt=\"\"></p>\n<h3 id=\"Hexo-NexT-美化\"><a href=\"#Hexo-NexT-美化\" class=\"headerlink\" title=\"Hexo NexT 美化\"></a>Hexo NexT 美化</h3><p>上網查關鍵字其實有很多美化的資訊可以參考，不論是字體或版面配置都有很多種選項可以選擇。最一開始是設計版面的部分，將網站總共分五個子類別，分別是首頁、檔案、類別、標籤以及關於，這五個經典的配置。接下來就是個人資訊的設定，加入自己的圖片以及說明：<br><img src=\"https://i.imgur.com/TXykwfE.png\" alt=\"\"></p>\n<p>以及在網頁瀏覽標籤上方設定icon：<br><img src=\"https://i.imgur.com/Y2lE6Qp.png\" alt=\"\"></p>\n<p>當然最重要的就是文章內容，因為是使用Markdown語法，剛好有幾篇筆記就丟上去看看。當然還有很多的優化以及美化，如果有什麼需要改進的地方要跟我說喔！</p>\n<h3 id=\"Disqus-留言板功能\"><a href=\"#Disqus-留言板功能\" class=\"headerlink\" title=\"Disqus 留言板功能\"></a>Disqus 留言板功能</h3><p>在每一篇文章下方加入留言板功能，感覺還蠻酷的！</p>\n<p><img src=\"https://i.imgur.com/DAUAz3R.png\" alt=\"\"></p>\n<h3 id=\"Google-Analytics-追蹤分析\"><a href=\"#Google-Analytics-追蹤分析\" class=\"headerlink\" title=\"Google Analytics 追蹤分析\"></a>Google Analytics 追蹤分析</h3><p>這是酷東西，使用google 帳號生成一組代碼之後，把一些它提供的程式碼埋到網站中，它可以即時的統計網站的瀏覽狀況，以及觸及、感興趣的主題等等。<strong>假設</strong>未來瀏覽的人次比較多的時候（可能根本沒人會看XDD），還可以用它來分析哪一種文章最受人歡迎、哪一種文章最冷門之類的！</p>\n<p><img src=\"https://i.imgur.com/3lPv0uW.png\" alt=\"\"></p>\n<h3 id=\"購買個人網址\"><a href=\"#購買個人網址\" class=\"headerlink\" title=\"購買個人網址\"></a>購買個人網址</h3><p>昨天終於買到了自己名字的網址了！新的網址名稱是：peienwu.com！在<strong>Godaddy</strong> 上用NT570元買了一年這個網址的使用權限，買完之後到<strong>CloudFlare</strong>設定好Dns之類的，讓這個網址可以指向一個IP位址（這其中的原理有點複雜）。</p>\n<p>設定完之後，發現他一直出現錯誤訊息，點開網址也是不可使用的，差點昏倒ww。晚上處理不了了，隔天一早起床就開始著手處理中這個問題，把檔案刪刪改改，終於成功讓GitHub跳出以下訊息：</p>\n<p><img src=\"https://i.imgur.com/Zoe8Aes.png\" alt=\"\"></p>\n<p>很討厭的，他沒有https，也就是鎖頭，在這種情況下，瀏覽器就會自動設置為<font color=\"#f00\">不安全</font>的網站，接下來早上的時間都拿去處理這個問題。在設定一些SSH以及https的安全性設定之後，終於，在訪問網站時拿到了鎖頭的認證！</p>\n<p><img src=\"https://i.imgur.com/jguOHwH.png\" alt=\"\"></p>\n<h3 id=\"留言板更新\"><a href=\"#留言板更新\" class=\"headerlink\" title=\"留言板更新\"></a>留言板更新</h3><p>最近重新登入後發現文章底部都是一堆Disqus的廣告，真的有夠討厭，如果要消除廣告的方法只剩下付費，好討厭！於是我決定換一個評論系統，叫做<a href=\"https://valine.js.org/\">Valine</a> 的系統，他的優點是支援Emoji 😉、MarkDown 全语法支持，而且<strong>沒有廣告</strong>！大概的留言就像以下這樣：<br><img src=\"https://i.imgur.com/xgmM0EX.png\" alt=\"\"></p>\n<p>支援Markdown的留言真的很酷！</p>\n<p>至於留言管理的部分，則是用<a href=\"https://leancloud.app/\">LeanCloud</a> 來實現，可以刪留言之類的XD<br><img src=\"https://i.imgur.com/Zmtl0u8.png\" alt=\"\"></p>\n<h3 id=\"抱怨一下\"><a href=\"#抱怨一下\" class=\"headerlink\" title=\"抱怨一下\"></a>抱怨一下</h3><p>今天在用Icloud 的時候，不小心把電腦上所有的檔案全部刪掉了，哭啊，這真是嚴重的事情ＱＱＱ，用到快掛了！當然，我電腦上的所有東西都不見了，也包括這一個部落格的本地程式碼，我用了 google drive 的備份，可惜那很難下載，所以我就用了github原本的備份的東西。</p>\n<p>這真是不幸中的大幸，還好github的備份直接下載就可以直接用，不用特別再設定一些奇怪的東西，但所有的 hexo 指令都不見了，git的指令也都不見了，必須要重新設定。</p>\n<p>這邊有一個小東西，就是下面這一行警告，就是要你把push設定成你要push的地方，不然只打一個push他並不會知道要push去哪裏，所以設定一下repo的位置就好了。</p>\n<blockquote>\n<p>git push —set-upstream origin master</p>\n</blockquote>\n<p>當然還有一堆bug ，只好慢慢爬文嘍，當你看到這一段文字，也就代表我成功找到解決辦法了！</p>\n<h3 id=\"我又來更新了\"><a href=\"#我又來更新了\" class=\"headerlink\" title=\"我又來更新了\"></a>我又來更新了</h3><p>這幾天網站一直404 not found 超煩，於是我叫出之前的教學影片，重新看了之後，發現我的分支名稱弄錯了，不是用master而是用gh-pages，搞了好多天QQ</p>\n<h2 id=\"架設心得\"><a href=\"#架設心得\" class=\"headerlink\" title=\"架設心得\"></a>架設心得</h2><p>部落格以後會常常更新，最近也會陸續把之前的文章放到部落格上面。整個網站從誕生到現在的結果已經花了15個小時，其中在Debug的時間應該佔了大多數！</p>\n<p>遇到了幾個麻煩的問題，首先碰到的是本地的資料無法上傳到Github，終端機冒出來的是：<font color=\"#f00\">Please make sure you have the correct access rights and the repository exists.</font>。這個錯誤超級煩，爬了一堆文結果他要在GitHub上面設定ssh金鑰之類的東西，才能獲取從本地更新的權限。結果網路上的文章說我要開啟一個名叫”.ssh”的資料夾，可是我翻遍了我的電腦也找不到這一個資料夾！後來我是利用終端機，輸入路徑位置硬是把那一個資料夾打開，它是一個透明的資料夾，還是第一次遇到！</p>\n<p>接著是終端機跑出一堆error，那時候真的差點崩潰，花了超久架設的東西，竟然跑出這麼多的錯誤！難道全部的東西都付之一炬了嗎？翻了每一個被變更過的資料夾，才發現到在user_name的地方踩了雷，把他變回原本的設定就好了，真是不幸中的大幸，幸好我還能把東西救回來！</p>\n<p>最後，終於能用https的前綴連到我的網站：<a href=\"https://peienwu.com\">https://peienwu.com</a> 。如果要打www開頭也是可以連得上，直接打 peienwu.com 也可以順利連上！</p>\n","site":{"data":{}},"length":3351,"excerpt":"<p>暑假常常寫題，都幾乎紀錄在Hackmd上，如果能有屬於自己的部落格、用自己的網址，感覺超酷！來自己架設一個試試看！</p>\n<h2 id=\"網域種類\"><a href=\"#網域種類\" class=\"headerlink\" title=\"網域種類\"></a>網域種類</h2><p>架設網站有好多種方法，有時候是看題解看到了很多的網站XD，上網查了資料以及很多人的部落格，發現寫coding部落格的人的網站大多分成以下四類：</p>\n<ol>\n<li><a href=\"https://www.blogger.com/\">Blogger</a></li>\n<li><a href=\"https://hexo.io/\">Hexo</a></li>\n<li><a href=\"https://pages.github.com/\">GitHub Pages</a></li>\n<li><a href=\"https://wordpress.org/\">WordPress.org</a></li>\n</ol>","more":"<p>每一種部落格都有優勢與劣勢，就看使用者覺得哪一個平台使用起來比較方便！在經過多方嘗試之下，最後我是選擇了使用 Hexo 搭配 Github 來架設我的網站，以下來分析一下我個人在架設的過程中，以一個新手的角度看各個平台使用上的優缺點！</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>網站比較</th>\n<th>優點</th>\n<th>缺點</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Blogger</strong></td>\n<td>1. 介面清楚，操作方便<br>2. 一鍵預覽及發布，快速查看文章成果<br>3. 免費！</td>\n<td>1. 不支援MarkDown語法<br>2. 對數學式、程式碼支援不便利</td>\n</tr>\n<tr>\n<td><strong>Hexo</strong></td>\n<td>1. 支援MarkDown語法<br>2. Mac終端機操作方便<br>3. 免費！</td>\n<td>1. 純程式碼呈現，較不直覺<br>2. 修改過程中如果程式碼出錯，造成整個網站掛掉</td>\n</tr>\n<tr>\n<td><strong>GitHub Pages</strong></td>\n<td>1. 支援MarkDown語法<br>2. 進行版本控制<br>3. 免費！</td>\n<td>1. 單純使用的話操作、修改不方便<br>2. Git操作有一定難度</td>\n</tr>\n<tr>\n<td><strong>WordPress com</strong></td>\n<td>1. 跟Blogger相近，操作簡單易上手<br>2. 快速查看文章長相</td>\n<td>1. 不支援Markdown<br>2. 免費版限制多、模板不漂亮</td>\n</tr>\n<tr>\n<td><strong>WordPress org</strong></td>\n<td>太貴不考慮</td>\n<td>上網查必須要先付費才能開始架設<br>費用好像一年3000以上</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>經過多方嘗試（花了我好多天），出產了一堆失敗品，最後還是用 Hexo 搭配 GitHub 來架設一個算滿意的網站（至少看起來不錯XD）。以下是我的失敗品網站：</p>\n<ol>\n<li><a href=\"https://peienwu1216.blogspot.com/?zx=60407725c2514b18\">Blogger</a></li>\n<li><a href=\"https://peienwu.wordpress.com/\">WorldPress</a></li>\n<li>Github的我已經刪掉了</li>\n</ol>\n<h2 id=\"Hexo-安裝\"><a href=\"#Hexo-安裝\" class=\"headerlink\" title=\"Hexo 安裝\"></a>Hexo 安裝</h2><p>之前遇上很多軟體對Mac都不友善，不過Hexo卻是對Mac的用戶比較友善的工具。只要在終端機輸入以下命令就可以安裝Hexo：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><br>詳細的安裝步驟可以參考<a href=\"https://hexo.io/docs/\">官方網站</a>，或是網路上的<a href=\"https://youtu.be/jOJI9ekTzK8\">教學影片</a>就可以一步一步的把網站建立起來！</p>\n<p>在這過程中，我發現影片上有使用到VS Code，於是我就把它也載下來了。用起來感覺VS Code 對專案製作很有幫助，可以同步的在各個檔案之間進行修改，蠻實用的一個IDE！<br><img src=\"https://i.imgur.com/eIiT0Pb.png\" alt=\"\"></p>\n<h2 id=\"GitHub同步\"><a href=\"#GitHub同步\" class=\"headerlink\" title=\"GitHub同步\"></a>GitHub同步</h2><p>將 Hexo 裡面的檔案推送到 Git Hub 裡面的一個Repository中，利用它來將網頁的內容進行發布。在每一次本地修改完成之後，如果本地測試可行，就可以將檔案推送到Github中，在Github將網站進行發布。我使用來架設部落格的<a href=\"https://github.com/peienwu/peienwu.github.io\">Repository在此</a>。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .                //加入</span><br><span class=\"line\">git commit -m &quot;xxx&quot;      //提交</span><br><span class=\"line\">git push                 //推入</span><br><span class=\"line\">git push -f              //強制推入（聽說很危險）</span><br></pre></td></tr></table></figure><br>在提交的後面的字串表示當前版本的一個提示，例如我做了什麼修改就可以顯示在上面，讓別人知道這份檔案被更改的情況。下圖就是在每一次推入時附加的修改資訊，讓我自己可以看到檔案被更改以及提交的狀況!</p>\n<p><img src=\"https://i.imgur.com/kBpX3gp.png\" alt=\"\"></p>\n<p>Git真是博大精深，版本控制真的有難度，我只會簡單的修改以及推入（之後找時間可以學一下）。</p>\n<h2 id=\"外掛安裝\"><a href=\"#外掛安裝\" class=\"headerlink\" title=\"外掛安裝\"></a>外掛安裝</h2><p>做到這一個步驟已經花了我快三小時，出現的是類似以下的畫面：</p>\n<p><img src=\"https://i.imgur.com/a1zD8Qz.png\" alt=\"\"></p>\n<p>這是 Hexo 預設的樣板，感覺還不錯，不過我的目標是使用另外外掛的模板，看起來比較漂亮XD。於是我就找了<a href=\"https://github.com/theme-next/hexo-theme-next\">Next主題</a>的外掛來安裝，這個模板就感覺舒服很多。這個模板使用的大陸部落格很多，也有一些其他的競程部落格使用了這個主題！</p>\n<p><img src=\"https://i.imgur.com/aP8mwrQ.png\" alt=\"\"></p>\n<h3 id=\"Hexo-NexT-美化\"><a href=\"#Hexo-NexT-美化\" class=\"headerlink\" title=\"Hexo NexT 美化\"></a>Hexo NexT 美化</h3><p>上網查關鍵字其實有很多美化的資訊可以參考，不論是字體或版面配置都有很多種選項可以選擇。最一開始是設計版面的部分，將網站總共分五個子類別，分別是首頁、檔案、類別、標籤以及關於，這五個經典的配置。接下來就是個人資訊的設定，加入自己的圖片以及說明：<br><img src=\"https://i.imgur.com/TXykwfE.png\" alt=\"\"></p>\n<p>以及在網頁瀏覽標籤上方設定icon：<br><img src=\"https://i.imgur.com/Y2lE6Qp.png\" alt=\"\"></p>\n<p>當然最重要的就是文章內容，因為是使用Markdown語法，剛好有幾篇筆記就丟上去看看。當然還有很多的優化以及美化，如果有什麼需要改進的地方要跟我說喔！</p>\n<h3 id=\"Disqus-留言板功能\"><a href=\"#Disqus-留言板功能\" class=\"headerlink\" title=\"Disqus 留言板功能\"></a>Disqus 留言板功能</h3><p>在每一篇文章下方加入留言板功能，感覺還蠻酷的！</p>\n<p><img src=\"https://i.imgur.com/DAUAz3R.png\" alt=\"\"></p>\n<h3 id=\"Google-Analytics-追蹤分析\"><a href=\"#Google-Analytics-追蹤分析\" class=\"headerlink\" title=\"Google Analytics 追蹤分析\"></a>Google Analytics 追蹤分析</h3><p>這是酷東西，使用google 帳號生成一組代碼之後，把一些它提供的程式碼埋到網站中，它可以即時的統計網站的瀏覽狀況，以及觸及、感興趣的主題等等。<strong>假設</strong>未來瀏覽的人次比較多的時候（可能根本沒人會看XDD），還可以用它來分析哪一種文章最受人歡迎、哪一種文章最冷門之類的！</p>\n<p><img src=\"https://i.imgur.com/3lPv0uW.png\" alt=\"\"></p>\n<h3 id=\"購買個人網址\"><a href=\"#購買個人網址\" class=\"headerlink\" title=\"購買個人網址\"></a>購買個人網址</h3><p>昨天終於買到了自己名字的網址了！新的網址名稱是：peienwu.com！在<strong>Godaddy</strong> 上用NT570元買了一年這個網址的使用權限，買完之後到<strong>CloudFlare</strong>設定好Dns之類的，讓這個網址可以指向一個IP位址（這其中的原理有點複雜）。</p>\n<p>設定完之後，發現他一直出現錯誤訊息，點開網址也是不可使用的，差點昏倒ww。晚上處理不了了，隔天一早起床就開始著手處理中這個問題，把檔案刪刪改改，終於成功讓GitHub跳出以下訊息：</p>\n<p><img src=\"https://i.imgur.com/Zoe8Aes.png\" alt=\"\"></p>\n<p>很討厭的，他沒有https，也就是鎖頭，在這種情況下，瀏覽器就會自動設置為<font color=\"#f00\">不安全</font>的網站，接下來早上的時間都拿去處理這個問題。在設定一些SSH以及https的安全性設定之後，終於，在訪問網站時拿到了鎖頭的認證！</p>\n<p><img src=\"https://i.imgur.com/jguOHwH.png\" alt=\"\"></p>\n<h3 id=\"留言板更新\"><a href=\"#留言板更新\" class=\"headerlink\" title=\"留言板更新\"></a>留言板更新</h3><p>最近重新登入後發現文章底部都是一堆Disqus的廣告，真的有夠討厭，如果要消除廣告的方法只剩下付費，好討厭！於是我決定換一個評論系統，叫做<a href=\"https://valine.js.org/\">Valine</a> 的系統，他的優點是支援Emoji 😉、MarkDown 全语法支持，而且<strong>沒有廣告</strong>！大概的留言就像以下這樣：<br><img src=\"https://i.imgur.com/xgmM0EX.png\" alt=\"\"></p>\n<p>支援Markdown的留言真的很酷！</p>\n<p>至於留言管理的部分，則是用<a href=\"https://leancloud.app/\">LeanCloud</a> 來實現，可以刪留言之類的XD<br><img src=\"https://i.imgur.com/Zmtl0u8.png\" alt=\"\"></p>\n<h3 id=\"抱怨一下\"><a href=\"#抱怨一下\" class=\"headerlink\" title=\"抱怨一下\"></a>抱怨一下</h3><p>今天在用Icloud 的時候，不小心把電腦上所有的檔案全部刪掉了，哭啊，這真是嚴重的事情ＱＱＱ，用到快掛了！當然，我電腦上的所有東西都不見了，也包括這一個部落格的本地程式碼，我用了 google drive 的備份，可惜那很難下載，所以我就用了github原本的備份的東西。</p>\n<p>這真是不幸中的大幸，還好github的備份直接下載就可以直接用，不用特別再設定一些奇怪的東西，但所有的 hexo 指令都不見了，git的指令也都不見了，必須要重新設定。</p>\n<p>這邊有一個小東西，就是下面這一行警告，就是要你把push設定成你要push的地方，不然只打一個push他並不會知道要push去哪裏，所以設定一下repo的位置就好了。</p>\n<blockquote>\n<p>git push —set-upstream origin master</p>\n</blockquote>\n<p>當然還有一堆bug ，只好慢慢爬文嘍，當你看到這一段文字，也就代表我成功找到解決辦法了！</p>\n<h3 id=\"我又來更新了\"><a href=\"#我又來更新了\" class=\"headerlink\" title=\"我又來更新了\"></a>我又來更新了</h3><p>這幾天網站一直404 not found 超煩，於是我叫出之前的教學影片，重新看了之後，發現我的分支名稱弄錯了，不是用master而是用gh-pages，搞了好多天QQ</p>\n<h2 id=\"架設心得\"><a href=\"#架設心得\" class=\"headerlink\" title=\"架設心得\"></a>架設心得</h2><p>部落格以後會常常更新，最近也會陸續把之前的文章放到部落格上面。整個網站從誕生到現在的結果已經花了15個小時，其中在Debug的時間應該佔了大多數！</p>\n<p>遇到了幾個麻煩的問題，首先碰到的是本地的資料無法上傳到Github，終端機冒出來的是：<font color=\"#f00\">Please make sure you have the correct access rights and the repository exists.</font>。這個錯誤超級煩，爬了一堆文結果他要在GitHub上面設定ssh金鑰之類的東西，才能獲取從本地更新的權限。結果網路上的文章說我要開啟一個名叫”.ssh”的資料夾，可是我翻遍了我的電腦也找不到這一個資料夾！後來我是利用終端機，輸入路徑位置硬是把那一個資料夾打開，它是一個透明的資料夾，還是第一次遇到！</p>\n<p>接著是終端機跑出一堆error，那時候真的差點崩潰，花了超久架設的東西，竟然跑出這麼多的錯誤！難道全部的東西都付之一炬了嗎？翻了每一個被變更過的資料夾，才發現到在user_name的地方踩了雷，把他變回原本的設定就好了，真是不幸中的大幸，幸好我還能把東西救回來！</p>\n<p>最後，終於能用https的前綴連到我的網站：<a href=\"https://peienwu.com\">https://peienwu.com</a> 。如果要打www開頭也是可以連得上，直接打 peienwu.com 也可以順利連上！</p>"},{"title":"最近點對：不同複雜度之解決方式","date":"2021-08-22T16:00:00.000Z","mathjax":true,"_content":"\n> 題目敘述\n> 給定二維平面上 $n$ 個點，每一點都有座標 $(x_i,y_i)$ ，求出最近的點對之歐幾里德距離為多少？\n> $dis(p_i,p_j) = \\sqrt{(x_1-x_2)^2+(y_1-y_2)^2}$\n<!-- more -->\n\n最近點對有好多種實作方式，從最差的暴力枚舉、稍微優化的掃描線演算法、到分治與隨機，有4種不同的時間複雜度。利用[TIOJ 1500](https://tioj.ck.tp.edu.tw/problems/1500)這一題最近點對的裸題，來實測各種不同複雜度下所需要的執行時間。\n\n## 暴力枚舉\n### 時間複雜度：$N^2$\n[Submission](https://tioj.ck.tp.edu.tw/submissions/262968)\n**時間：TLE,10440**\n\n![](https://i.imgur.com/DL0tBBb.png)\n\n暴力$O(n^2)$將所有點進行枚舉，因為值域是 $n≤50000$ ，平方枚舉會有TLE的問題。\n\n### 程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 50005\n#define all(x) x.begin(),x.end()\n#define INF 5e18\n#define eps 1e-9\n#define x first\n#define y second\nusing namespace std;\nint n;\npii p[N];\n\nld dis(pii a, pii b){\n    ld x = a.x-b.x, y = a.y-b.y;\n    return sqrt(x*x + y*y);\n}\n\nsigned main(){\n    Orz;\n    cout<<fixed<<setprecision(6);\n    \n    while(cin>>n){\n        rep(i,0,n-1)cin>>p[i].x>>p[i].y;\n        ld d = INF;\n        rep(i,0,n-1){\n            rep(j,i+1,n-1){\n                d = min(d, dis(p[i],p[j]));\n            }\n        }\n        cout<<d<<endl;\n    }\n}\n```\n\n## 掃描線算法\n### 時間複雜度：Worst Case $O(N^2)$\n[Submission](https://tioj.ck.tp.edu.tw/submissions/262966)\n**時間：AC,1668**\n![](https://i.imgur.com/6iSbet4.png)\n\n這一種作法是改善過後的暴力枚舉，利用計算幾何中掃描線的概念，先將所有點依照x座標進行排序（y座標隨意）。接著想像一條從左往右掃的掃描線，對於每一條掃描線看右邊的點，如果當前最近點對距離為 $d$，因此只要遇上x座標差距大於 $d$ 的點時，即可繼續下一輪的枚舉。\n\n加上排序的關係，其時間複雜度至少為 $O(n\\log n)$，但這種掃描線的方式無法有效過濾所有點都在相同的x座標上的情況，因此最差的時間複雜度會退化成 $O(n^2)$ ，不過聽說平均的狀況下是很快的！\n\n![](https://i.imgur.com/Ae9k1HR.png)\n\n上圖為掃描線執行最近點對的一個示意圖，黑線為掃描線，$d$ 為掃描線左邊所有點的最近點對距離，我們只要每一輪枚舉這個點與右邊x座標差在 $d$ 以內的所有點，即可進行下一輪的更新！\n\n### 程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 50005\n#define all(x) x.begin(),x.end()\n#define INF 5e18\n#define eps 1e-9\n#define x first\n#define y second\nusing namespace std;\nint n;\npii p[N];\n\nld dis(pii a, pii b){\n    ld x = a.x-b.x, y = a.y-b.y;\n    return sqrt(x*x + y*y);\n}\n\nsigned main(){\n    Orz;\n    cout<<fixed<<setprecision(6);\n    \n    while(cin>>n){\n        rep(i,0,n-1)cin>>p[i].x>>p[i].y;\n        sort(p,p+n);\n        ld d = INF;\n        rep(i,0,n-1){\n            rep(j,i+1,n-1){\n                if(p[j].x > p[i].x + d)break;\n                d = min(d, dis(p[i],p[j]));\n            }\n        }\n        cout<<d<<endl;\n    }\n}\n```\n## 掃描線算法（優化後）\n### 時間複雜度：$O(N\\log N)$\n[Submission](https://tioj.ck.tp.edu.tw/submissions/278456)\n**時間：AC,148**\n\n原本以為上面的掃描線就是他的極限了，沒想到上面的worst case還可以透過set優化成 $O(n\\log n)$！簡單來說，方法一樣是想像一條掃描線由左而右，一樣照上面的想法，把x座標差大於d的點排除，之後利用set二分搜找出y座標在範圍內的點進行枚舉更新答案。\n\n1. 將點輸入並且排序，X座標為主，Y座標為輔。\n2. 使用set，並以Y座標為排序基準（pair的首項），以儲存第 $i$ 點的左方、水平距離小於等於d的點。\n3. 右掃描線依序窮舉各點作為右端點。\n　(1) Erase與右端點水平距離大於d的點們（左掃描線右移）\n　(2) 用二分搜找出與第 $i$ 點垂直距離小於d的點，並嘗試更新\n　(3) 將第 $i$ 點加入set中。\n \n![](https://i.imgur.com/yMs369S.png)\n\n\n### 程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define int long long\n#define ld long double\n#define N 200005\n#define x first\n#define y second\n#define pii pair<int,int>\n#define IOS ios::sync_with_stdio(0),cin.tie(0)\nusing namespace std;\nint n;\nvector<pii> p;\nset<pii> s;\n\nld dis(pii a, pii b){\n    ld x = a.x-b.x, y = a.y-b.y;\n    return sqrt(x*x + y*y);\n}\n\nsigned main(){\n    IOS;\n    cout<<fixed<<setprecision(6);\n    while(cin>>n){\n        p.assign(n,{0,0});\n        for(int i = 0;i < n;i++)cin>>p[i].x>>p[i].y;\n        sort(p.begin(),p.end());\n        s.clear();\n        s.insert({p[0].y,p[0].x});\n        int l = 0;ld ans = 5e18;\n        for(int i = 1;i < n;i++){\n            int d = ceil(ans);\n            while(l < i && p[l].x < p[i].x - d){\n                s.erase({p[l].y,p[l].x});\n                l++;\n            }\n            auto it_l = s.lower_bound({p[i].y - d,0});\n            auto it_r = s.upper_bound({p[i].y + d,0});\n            for(auto it = it_l;it != it_r;it++){\n                ans = min(ans,dis({it->y,it->x},p[i]));\n            }\n            s.insert({p[i].y,p[i].x});\n        }\n        cout<<ans<<endl;\n    }\n}\n```\n\n## 分治算法\n### 時間複雜度：$O(N\\log N)$\n[Submission](https://tioj.ck.tp.edu.tw/submissions/262111)\n**時間：AC,196**\n\n![](https://i.imgur.com/aOV2MWE.png)\n\n分治做最近點對的基本想法，先將所有點依照x座標排序，利用遞迴得到分割點左右兩邊所有點的最短距離（兩點並不會跨過中間分隔線），枚舉所有會橫跨兩側且有可能更新最短距離的點對。\n\n![](https://i.imgur.com/2NGuJc5.png)\n\n從兩半邊的遞迴得到目前的最近點對距離 $d = min(d_l,d_r)$ ，將分隔線附近x座標差距小於$d$的點通通都枚舉一遍。可能會有一個疑問，我們是不是可以縮小枚舉的範圍，否則點的數量可能會太多導致複雜度爆炸？除了x座標可以做點的篩選之外，在枚舉的過程中，我們會利用將所有點對y座標排序，將y座標直線距離大於 $d$ 的情況剔除，所剩下真的需要枚舉點也只會剩下常數個，因此可以放心枚舉。\n\n**複雜度分析：** 腦海中想像遞迴樹的長相，會發現每一層都需要都需要對y座標進行排序，時間為$O(n\\log n)$ ，每一次都將n的值除以2，因此共有$O(\\log n)$ 層，總共的時間複雜度為 $O(n\\log^2n)$。（不過實際上應該會比這個快，因為並不是要對所有點都進行排序）。\n\n$$T(n) = 2T(\\frac{n}{2})+O(n\\log n) = O(n\\log^2n)$$\n\n如果要做得更快，可以在y座標排序的地方稍微動動手腳。既然每一層都要對y座標進行排序，排序好的東西再排序一次其實沒有什麼意義，因此就可以用）[合併排序（merge sort）](/N9zvIzP_Se-hpWZSaMv-sQ)的方式，將所有已經排序好的兩個左右序列進行$O(n)$的合併（可以用std::merge()完成），如此一來，就不須要每一層花到 $O(n\\log n)$ 的ㄕˊ間進行排序，使總複雜度降低為 $O(n\\log n)$！\n\n$$T(n) = 2T(\\frac{n}{2})+O(n) = O(n\\log n)$$\n\n### 程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define int long long\n#define double long double\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define N 50002\n#define INF1 100000000\n#define INF 5e18\n#define FOR(i,n) for(int i=0;i<n;i++)\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define pii pair<int,int>\n#define x first\n#define y second\n#define pid pair<int,double>\n#define pdi pair<double,int>\n#define pdd pair<double,double>\nusing namespace std;\nint n;\nvector<pii> p,temp;\n\nvoid init(){\n    cout<<fixed<<setprecision(6);\n    temp.clear();\n    p.assign(n,{0,0});\n}\n\nbool cmp(pii a,pii b){\n    return a.y < b.y;\n}\n\ndouble dis(pii a,pii b){\n    double x1 = a.x-b.x,y1 = a.y-b.y;\n    return sqrt(x1 * x1 + y1 * y1);\n}\n\n//區間[l,r]\ndouble solve(int l,int r){\n    if(l == r)return INF;\n    int mid = (l+r)/2,mid_pos = p[mid].x;;\n    double ans = min(solve(l,mid),solve(mid+1,r));\n    \n    temp.assign((r-l+1),{0,0});\n    merge(\n        p.begin() + l, p.begin() + mid + 1,\n        p.begin() + mid + 1, p.begin() + r + 1,\n        temp.begin(), cmp\n    );\n    rep(i, l, r)p[i] = temp[i-l];\n    temp.clear();\n    rep(i, l, r){\n        if(abs(p[i].x - mid_pos) <= ans){\n            temp.push_back(p[i]);\n        }\n    }\n    int len = temp.size();\n    rep(i, 0, len-1){\n        rep(j, i+1, len-1){\n            ans = min(ans, dis(temp[i],temp[j]));\n            if(abs(temp[i].y-temp[j].y) > ans)\n                break;\n        }\n    }\n    return ans;\n}\n\nsigned main(){\n    Orz;\n    while(cin>>n){\n        init();\n        rep(i,0,n-1)cin>>p[i].x>>p[i].y;\n        sort(p.begin(),p.end());\n        double ans = solve(0,n-1);\n        cout<<ans<<endl;\n    }\n}\n```\n\n## 隨機算法\n### 時間複雜度：期望 $O(N)$\n[Submission](https://tioj.ck.tp.edu.tw/submissions/262969)\n**時間：AC,488**\n\n![](https://i.imgur.com/X756Jf4.png)\n\n用隨機算法做最近點對的期望複雜度是 $O(n)$ ，也就是說如果一開始進行的Random_shuffle有做好的話，期望可以在線性時間解決這個問題。基本的想法如下：\n1. 將最近點對距離設為d，初始為第一、二個點之間的距離\n2. 將每一個點的座標塞入以 $\\frac{d}{2}$ 為邊長的網格中\n3. 將點加入網格中，查看要加入的網格是否已經有點在其中\n4. 一個網格不可容納兩個點，否則必須更新最近點對的距離\n5. 在更新最近點對距離之後，將前面的點的網格座標以新的$d$進行更新\n\n這個算法用到隨機的因子，因此如果在一開始有將所有點進行均勻的打散的話，可以做到期望複雜度 $O(n)$。\n\n**複雜度分析：**\n考慮加入第i+1個點時出現新的最近點對，發生的機率為：在$C_2^{i+1}$個配對中跟i+1個點產生最近點對共有i種可能因此機率為$\\frac{2}{i+1}$。\n\n當機率發生的時候，必須將所有的點都刪掉重新來一遍（r變小，重新推入i+1個點），需要付出$O(i+1)$的時間，相乘起來加入每一個點期望的複雜度為$O(1)$，因此總時間複雜度為$O(n)$。\n\n\n### 程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define int long long int\n#define ld long double\n#define ios ios::sync_with_stdio(0),cin.tie(0)\n#define N 200005\n#define INF 1000000000LL\n#define swift 1000000000\nusing namespace std;\nint n;\nld r,d,ans;\nint dx[25] = {-2,-2,-2,-2,-2,-1,-1,-1,-1,-1,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2};\nint dy[25] = {-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2};\nunordered_map<int, int> m;\n\nvoid solve();\ninline void init();\nvoid solve();\nbool insert(int,int,int);\ninline double dis(int,int);\ninline int Grid(int);\n\nstruct node{\n    int x,y,ind;\n}point[N];\n\n//函式實作\ninline void init(){\n    m.clear();\n    cout<<fixed<<setprecision(6);\n}\n\ninline int Grid(int ind){ //input網格座標\n    int x = point[ind].x/r;\n    int y = point[ind].y/r;\n    return x*INF+y;\n}\n\ninline ld dis(node a,node b){\n    ld x = a.x-b.x,y = a.y-b.y;\n    return sqrt(x*x+y*y);\n}\n\nvoid solve(){\n    m.insert(make_pair(Grid(0),0));m.insert(make_pair(Grid(1),1));\n    for(int ind = 2;ind < n;ind++){\n        int x = point[ind].x/r,y = point[ind].y/r,better=0;\n        for(int i=0;i<25;i++){\n            int nx = x+dx[i],ny = y+dy[i];\n            auto it = m.find(nx*INF+ny);\n            if(it!=m.end()){\n                double distance = dis(point[it->second],point[ind]);\n                if(distance<d){\n                    better = 1;\n                    ans = dis(point[it->second],point[ind]);\n                    d = distance;\n                    r = d/2;\n                }\n            }\n        }\n        if(better){\n            m.clear();\n            for(int i=0;i<=ind;i++)m.insert(make_pair(Grid(i),i));\n        }\n        else{\n            m.insert(make_pair(Grid(ind), ind));\n        }\n    }\n}\n\nsigned main(){\n    ios;\n    while(cin>>n){\n        init();\n        for(int i=0;i<n;i++){\n            int x,y;cin>>x>>y;\n            x+=swift;y+=swift;\n            point[i].x = x;point[i].y = y;\n        }\n        random_shuffle(point, point+n);\n        int smalln = sqrt(n);\n        ans = dis(point[0],point[1]);\n        d = dis(point[0], point[1]);\n        for(int i=0;i<=smalln;i++){\n            for(int j=i+1;j<=smalln;j++){\n                d = min(d,dis(point[i], point[j]));\n                ans = min(ans,dis(point[i],point[j]));\n            }\n        }\n        r = d/2;\n        solve();\n        cout<<ans<<endl;\n    }\n}\n```\n\n## 相關題目\n\n- [ ] [NEOJ 最近點對](https://neoj.sprout.tw/problem/795/)\n- [ ] [TIOJ 最遠點對](https://tioj.ck.tp.edu.tw/problems/1105)\n","source":"_posts/最近點對.md","raw":"---\ntitle: 最近點對：不同複雜度之解決方式\ndate: 2021-8-23\ntags: \n    - 分治法\n    - 暑假筆記\ncategories: \n    - C++進階主題\n    - 最近點對\nmathjax: true\n---\n\n> 題目敘述\n> 給定二維平面上 $n$ 個點，每一點都有座標 $(x_i,y_i)$ ，求出最近的點對之歐幾里德距離為多少？\n> $dis(p_i,p_j) = \\sqrt{(x_1-x_2)^2+(y_1-y_2)^2}$\n<!-- more -->\n\n最近點對有好多種實作方式，從最差的暴力枚舉、稍微優化的掃描線演算法、到分治與隨機，有4種不同的時間複雜度。利用[TIOJ 1500](https://tioj.ck.tp.edu.tw/problems/1500)這一題最近點對的裸題，來實測各種不同複雜度下所需要的執行時間。\n\n## 暴力枚舉\n### 時間複雜度：$N^2$\n[Submission](https://tioj.ck.tp.edu.tw/submissions/262968)\n**時間：TLE,10440**\n\n![](https://i.imgur.com/DL0tBBb.png)\n\n暴力$O(n^2)$將所有點進行枚舉，因為值域是 $n≤50000$ ，平方枚舉會有TLE的問題。\n\n### 程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 50005\n#define all(x) x.begin(),x.end()\n#define INF 5e18\n#define eps 1e-9\n#define x first\n#define y second\nusing namespace std;\nint n;\npii p[N];\n\nld dis(pii a, pii b){\n    ld x = a.x-b.x, y = a.y-b.y;\n    return sqrt(x*x + y*y);\n}\n\nsigned main(){\n    Orz;\n    cout<<fixed<<setprecision(6);\n    \n    while(cin>>n){\n        rep(i,0,n-1)cin>>p[i].x>>p[i].y;\n        ld d = INF;\n        rep(i,0,n-1){\n            rep(j,i+1,n-1){\n                d = min(d, dis(p[i],p[j]));\n            }\n        }\n        cout<<d<<endl;\n    }\n}\n```\n\n## 掃描線算法\n### 時間複雜度：Worst Case $O(N^2)$\n[Submission](https://tioj.ck.tp.edu.tw/submissions/262966)\n**時間：AC,1668**\n![](https://i.imgur.com/6iSbet4.png)\n\n這一種作法是改善過後的暴力枚舉，利用計算幾何中掃描線的概念，先將所有點依照x座標進行排序（y座標隨意）。接著想像一條從左往右掃的掃描線，對於每一條掃描線看右邊的點，如果當前最近點對距離為 $d$，因此只要遇上x座標差距大於 $d$ 的點時，即可繼續下一輪的枚舉。\n\n加上排序的關係，其時間複雜度至少為 $O(n\\log n)$，但這種掃描線的方式無法有效過濾所有點都在相同的x座標上的情況，因此最差的時間複雜度會退化成 $O(n^2)$ ，不過聽說平均的狀況下是很快的！\n\n![](https://i.imgur.com/Ae9k1HR.png)\n\n上圖為掃描線執行最近點對的一個示意圖，黑線為掃描線，$d$ 為掃描線左邊所有點的最近點對距離，我們只要每一輪枚舉這個點與右邊x座標差在 $d$ 以內的所有點，即可進行下一輪的更新！\n\n### 程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 50005\n#define all(x) x.begin(),x.end()\n#define INF 5e18\n#define eps 1e-9\n#define x first\n#define y second\nusing namespace std;\nint n;\npii p[N];\n\nld dis(pii a, pii b){\n    ld x = a.x-b.x, y = a.y-b.y;\n    return sqrt(x*x + y*y);\n}\n\nsigned main(){\n    Orz;\n    cout<<fixed<<setprecision(6);\n    \n    while(cin>>n){\n        rep(i,0,n-1)cin>>p[i].x>>p[i].y;\n        sort(p,p+n);\n        ld d = INF;\n        rep(i,0,n-1){\n            rep(j,i+1,n-1){\n                if(p[j].x > p[i].x + d)break;\n                d = min(d, dis(p[i],p[j]));\n            }\n        }\n        cout<<d<<endl;\n    }\n}\n```\n## 掃描線算法（優化後）\n### 時間複雜度：$O(N\\log N)$\n[Submission](https://tioj.ck.tp.edu.tw/submissions/278456)\n**時間：AC,148**\n\n原本以為上面的掃描線就是他的極限了，沒想到上面的worst case還可以透過set優化成 $O(n\\log n)$！簡單來說，方法一樣是想像一條掃描線由左而右，一樣照上面的想法，把x座標差大於d的點排除，之後利用set二分搜找出y座標在範圍內的點進行枚舉更新答案。\n\n1. 將點輸入並且排序，X座標為主，Y座標為輔。\n2. 使用set，並以Y座標為排序基準（pair的首項），以儲存第 $i$ 點的左方、水平距離小於等於d的點。\n3. 右掃描線依序窮舉各點作為右端點。\n　(1) Erase與右端點水平距離大於d的點們（左掃描線右移）\n　(2) 用二分搜找出與第 $i$ 點垂直距離小於d的點，並嘗試更新\n　(3) 將第 $i$ 點加入set中。\n \n![](https://i.imgur.com/yMs369S.png)\n\n\n### 程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define int long long\n#define ld long double\n#define N 200005\n#define x first\n#define y second\n#define pii pair<int,int>\n#define IOS ios::sync_with_stdio(0),cin.tie(0)\nusing namespace std;\nint n;\nvector<pii> p;\nset<pii> s;\n\nld dis(pii a, pii b){\n    ld x = a.x-b.x, y = a.y-b.y;\n    return sqrt(x*x + y*y);\n}\n\nsigned main(){\n    IOS;\n    cout<<fixed<<setprecision(6);\n    while(cin>>n){\n        p.assign(n,{0,0});\n        for(int i = 0;i < n;i++)cin>>p[i].x>>p[i].y;\n        sort(p.begin(),p.end());\n        s.clear();\n        s.insert({p[0].y,p[0].x});\n        int l = 0;ld ans = 5e18;\n        for(int i = 1;i < n;i++){\n            int d = ceil(ans);\n            while(l < i && p[l].x < p[i].x - d){\n                s.erase({p[l].y,p[l].x});\n                l++;\n            }\n            auto it_l = s.lower_bound({p[i].y - d,0});\n            auto it_r = s.upper_bound({p[i].y + d,0});\n            for(auto it = it_l;it != it_r;it++){\n                ans = min(ans,dis({it->y,it->x},p[i]));\n            }\n            s.insert({p[i].y,p[i].x});\n        }\n        cout<<ans<<endl;\n    }\n}\n```\n\n## 分治算法\n### 時間複雜度：$O(N\\log N)$\n[Submission](https://tioj.ck.tp.edu.tw/submissions/262111)\n**時間：AC,196**\n\n![](https://i.imgur.com/aOV2MWE.png)\n\n分治做最近點對的基本想法，先將所有點依照x座標排序，利用遞迴得到分割點左右兩邊所有點的最短距離（兩點並不會跨過中間分隔線），枚舉所有會橫跨兩側且有可能更新最短距離的點對。\n\n![](https://i.imgur.com/2NGuJc5.png)\n\n從兩半邊的遞迴得到目前的最近點對距離 $d = min(d_l,d_r)$ ，將分隔線附近x座標差距小於$d$的點通通都枚舉一遍。可能會有一個疑問，我們是不是可以縮小枚舉的範圍，否則點的數量可能會太多導致複雜度爆炸？除了x座標可以做點的篩選之外，在枚舉的過程中，我們會利用將所有點對y座標排序，將y座標直線距離大於 $d$ 的情況剔除，所剩下真的需要枚舉點也只會剩下常數個，因此可以放心枚舉。\n\n**複雜度分析：** 腦海中想像遞迴樹的長相，會發現每一層都需要都需要對y座標進行排序，時間為$O(n\\log n)$ ，每一次都將n的值除以2，因此共有$O(\\log n)$ 層，總共的時間複雜度為 $O(n\\log^2n)$。（不過實際上應該會比這個快，因為並不是要對所有點都進行排序）。\n\n$$T(n) = 2T(\\frac{n}{2})+O(n\\log n) = O(n\\log^2n)$$\n\n如果要做得更快，可以在y座標排序的地方稍微動動手腳。既然每一層都要對y座標進行排序，排序好的東西再排序一次其實沒有什麼意義，因此就可以用）[合併排序（merge sort）](/N9zvIzP_Se-hpWZSaMv-sQ)的方式，將所有已經排序好的兩個左右序列進行$O(n)$的合併（可以用std::merge()完成），如此一來，就不須要每一層花到 $O(n\\log n)$ 的ㄕˊ間進行排序，使總複雜度降低為 $O(n\\log n)$！\n\n$$T(n) = 2T(\\frac{n}{2})+O(n) = O(n\\log n)$$\n\n### 程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define int long long\n#define double long double\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define N 50002\n#define INF1 100000000\n#define INF 5e18\n#define FOR(i,n) for(int i=0;i<n;i++)\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define pii pair<int,int>\n#define x first\n#define y second\n#define pid pair<int,double>\n#define pdi pair<double,int>\n#define pdd pair<double,double>\nusing namespace std;\nint n;\nvector<pii> p,temp;\n\nvoid init(){\n    cout<<fixed<<setprecision(6);\n    temp.clear();\n    p.assign(n,{0,0});\n}\n\nbool cmp(pii a,pii b){\n    return a.y < b.y;\n}\n\ndouble dis(pii a,pii b){\n    double x1 = a.x-b.x,y1 = a.y-b.y;\n    return sqrt(x1 * x1 + y1 * y1);\n}\n\n//區間[l,r]\ndouble solve(int l,int r){\n    if(l == r)return INF;\n    int mid = (l+r)/2,mid_pos = p[mid].x;;\n    double ans = min(solve(l,mid),solve(mid+1,r));\n    \n    temp.assign((r-l+1),{0,0});\n    merge(\n        p.begin() + l, p.begin() + mid + 1,\n        p.begin() + mid + 1, p.begin() + r + 1,\n        temp.begin(), cmp\n    );\n    rep(i, l, r)p[i] = temp[i-l];\n    temp.clear();\n    rep(i, l, r){\n        if(abs(p[i].x - mid_pos) <= ans){\n            temp.push_back(p[i]);\n        }\n    }\n    int len = temp.size();\n    rep(i, 0, len-1){\n        rep(j, i+1, len-1){\n            ans = min(ans, dis(temp[i],temp[j]));\n            if(abs(temp[i].y-temp[j].y) > ans)\n                break;\n        }\n    }\n    return ans;\n}\n\nsigned main(){\n    Orz;\n    while(cin>>n){\n        init();\n        rep(i,0,n-1)cin>>p[i].x>>p[i].y;\n        sort(p.begin(),p.end());\n        double ans = solve(0,n-1);\n        cout<<ans<<endl;\n    }\n}\n```\n\n## 隨機算法\n### 時間複雜度：期望 $O(N)$\n[Submission](https://tioj.ck.tp.edu.tw/submissions/262969)\n**時間：AC,488**\n\n![](https://i.imgur.com/X756Jf4.png)\n\n用隨機算法做最近點對的期望複雜度是 $O(n)$ ，也就是說如果一開始進行的Random_shuffle有做好的話，期望可以在線性時間解決這個問題。基本的想法如下：\n1. 將最近點對距離設為d，初始為第一、二個點之間的距離\n2. 將每一個點的座標塞入以 $\\frac{d}{2}$ 為邊長的網格中\n3. 將點加入網格中，查看要加入的網格是否已經有點在其中\n4. 一個網格不可容納兩個點，否則必須更新最近點對的距離\n5. 在更新最近點對距離之後，將前面的點的網格座標以新的$d$進行更新\n\n這個算法用到隨機的因子，因此如果在一開始有將所有點進行均勻的打散的話，可以做到期望複雜度 $O(n)$。\n\n**複雜度分析：**\n考慮加入第i+1個點時出現新的最近點對，發生的機率為：在$C_2^{i+1}$個配對中跟i+1個點產生最近點對共有i種可能因此機率為$\\frac{2}{i+1}$。\n\n當機率發生的時候，必須將所有的點都刪掉重新來一遍（r變小，重新推入i+1個點），需要付出$O(i+1)$的時間，相乘起來加入每一個點期望的複雜度為$O(1)$，因此總時間複雜度為$O(n)$。\n\n\n### 程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define int long long int\n#define ld long double\n#define ios ios::sync_with_stdio(0),cin.tie(0)\n#define N 200005\n#define INF 1000000000LL\n#define swift 1000000000\nusing namespace std;\nint n;\nld r,d,ans;\nint dx[25] = {-2,-2,-2,-2,-2,-1,-1,-1,-1,-1,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2};\nint dy[25] = {-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2,-2,-1,0,1,2};\nunordered_map<int, int> m;\n\nvoid solve();\ninline void init();\nvoid solve();\nbool insert(int,int,int);\ninline double dis(int,int);\ninline int Grid(int);\n\nstruct node{\n    int x,y,ind;\n}point[N];\n\n//函式實作\ninline void init(){\n    m.clear();\n    cout<<fixed<<setprecision(6);\n}\n\ninline int Grid(int ind){ //input網格座標\n    int x = point[ind].x/r;\n    int y = point[ind].y/r;\n    return x*INF+y;\n}\n\ninline ld dis(node a,node b){\n    ld x = a.x-b.x,y = a.y-b.y;\n    return sqrt(x*x+y*y);\n}\n\nvoid solve(){\n    m.insert(make_pair(Grid(0),0));m.insert(make_pair(Grid(1),1));\n    for(int ind = 2;ind < n;ind++){\n        int x = point[ind].x/r,y = point[ind].y/r,better=0;\n        for(int i=0;i<25;i++){\n            int nx = x+dx[i],ny = y+dy[i];\n            auto it = m.find(nx*INF+ny);\n            if(it!=m.end()){\n                double distance = dis(point[it->second],point[ind]);\n                if(distance<d){\n                    better = 1;\n                    ans = dis(point[it->second],point[ind]);\n                    d = distance;\n                    r = d/2;\n                }\n            }\n        }\n        if(better){\n            m.clear();\n            for(int i=0;i<=ind;i++)m.insert(make_pair(Grid(i),i));\n        }\n        else{\n            m.insert(make_pair(Grid(ind), ind));\n        }\n    }\n}\n\nsigned main(){\n    ios;\n    while(cin>>n){\n        init();\n        for(int i=0;i<n;i++){\n            int x,y;cin>>x>>y;\n            x+=swift;y+=swift;\n            point[i].x = x;point[i].y = y;\n        }\n        random_shuffle(point, point+n);\n        int smalln = sqrt(n);\n        ans = dis(point[0],point[1]);\n        d = dis(point[0], point[1]);\n        for(int i=0;i<=smalln;i++){\n            for(int j=i+1;j<=smalln;j++){\n                d = min(d,dis(point[i], point[j]));\n                ans = min(ans,dis(point[i],point[j]));\n            }\n        }\n        r = d/2;\n        solve();\n        cout<<ans<<endl;\n    }\n}\n```\n\n## 相關題目\n\n- [ ] [NEOJ 最近點對](https://neoj.sprout.tw/problem/795/)\n- [ ] [TIOJ 最遠點對](https://tioj.ck.tp.edu.tw/problems/1105)\n","slug":"最近點對","published":1,"updated":"2021-11-14T05:25:49.504Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvyspmh4000kmuyx4kv06s6w","content":"<blockquote>\n<p>題目敘述<br>給定二維平面上 $n$ 個點，每一點都有座標 $(x_i,y_i)$ ，求出最近的點對之歐幾里德距離為多少？<br>$dis(p_i,p_j) = \\sqrt{(x_1-x_2)^2+(y_1-y_2)^2}$<br><span id=\"more\"></span></p>\n</blockquote>\n<p>最近點對有好多種實作方式，從最差的暴力枚舉、稍微優化的掃描線演算法、到分治與隨機，有4種不同的時間複雜度。利用<a href=\"https://tioj.ck.tp.edu.tw/problems/1500\">TIOJ 1500</a>這一題最近點對的裸題，來實測各種不同複雜度下所需要的執行時間。</p>\n<h2 id=\"暴力枚舉\"><a href=\"#暴力枚舉\" class=\"headerlink\" title=\"暴力枚舉\"></a>暴力枚舉</h2><h3 id=\"時間複雜度：-N-2\"><a href=\"#時間複雜度：-N-2\" class=\"headerlink\" title=\"時間複雜度：$N^2$\"></a>時間複雜度：$N^2$</h3><p><a href=\"https://tioj.ck.tp.edu.tw/submissions/262968\">Submission</a><br><strong>時間：TLE,10440</strong></p>\n<p><img src=\"https://i.imgur.com/DL0tBBb.png\" alt=\"\"></p>\n<p>暴力$O(n^2)$將所有點進行枚舉，因為值域是 $n≤50000$ ，平方枚舉會有TLE的問題。</p>\n<h3 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 50005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 5e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\">pii p[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ld <span class=\"title\">dis</span><span class=\"params\">(pii a, pii b)</span></span>&#123;</span><br><span class=\"line\">    ld x = a.x-b.x, y = a.y-b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(x*x + y*y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin&gt;&gt;n)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">        ld d = INF;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(j,i+<span class=\"number\">1</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                d = <span class=\"built_in\">min</span>(d, <span class=\"built_in\">dis</span>(p[i],p[j]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout&lt;&lt;d&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"掃描線算法\"><a href=\"#掃描線算法\" class=\"headerlink\" title=\"掃描線算法\"></a>掃描線算法</h2><h3 id=\"時間複雜度：Worst-Case-O-N-2\"><a href=\"#時間複雜度：Worst-Case-O-N-2\" class=\"headerlink\" title=\"時間複雜度：Worst Case $O(N^2)$\"></a>時間複雜度：Worst Case $O(N^2)$</h3><p><a href=\"https://tioj.ck.tp.edu.tw/submissions/262966\">Submission</a><br><strong>時間：AC,1668</strong><br><img src=\"https://i.imgur.com/6iSbet4.png\" alt=\"\"></p>\n<p>這一種作法是改善過後的暴力枚舉，利用計算幾何中掃描線的概念，先將所有點依照x座標進行排序（y座標隨意）。接著想像一條從左往右掃的掃描線，對於每一條掃描線看右邊的點，如果當前最近點對距離為 $d$，因此只要遇上x座標差距大於 $d$ 的點時，即可繼續下一輪的枚舉。</p>\n<p>加上排序的關係，其時間複雜度至少為 $O(n\\log n)$，但這種掃描線的方式無法有效過濾所有點都在相同的x座標上的情況，因此最差的時間複雜度會退化成 $O(n^2)$ ，不過聽說平均的狀況下是很快的！</p>\n<p><img src=\"https://i.imgur.com/Ae9k1HR.png\" alt=\"\"></p>\n<p>上圖為掃描線執行最近點對的一個示意圖，黑線為掃描線，$d$ 為掃描線左邊所有點的最近點對距離，我們只要每一輪枚舉這個點與右邊x座標差在 $d$ 以內的所有點，即可進行下一輪的更新！</p>\n<h3 id=\"程式碼-1\"><a href=\"#程式碼-1\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 50005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 5e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\">pii p[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ld <span class=\"title\">dis</span><span class=\"params\">(pii a, pii b)</span></span>&#123;</span><br><span class=\"line\">    ld x = a.x-b.x, y = a.y-b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(x*x + y*y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin&gt;&gt;n)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(p,p+n);</span><br><span class=\"line\">        ld d = INF;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(j,i+<span class=\"number\">1</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p[j].x &gt; p[i].x + d)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                d = <span class=\"built_in\">min</span>(d, <span class=\"built_in\">dis</span>(p[i],p[j]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout&lt;&lt;d&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"掃描線算法（優化後）\"><a href=\"#掃描線算法（優化後）\" class=\"headerlink\" title=\"掃描線算法（優化後）\"></a>掃描線算法（優化後）</h2><h3 id=\"時間複雜度：-O-N-log-N\"><a href=\"#時間複雜度：-O-N-log-N\" class=\"headerlink\" title=\"時間複雜度：$O(N\\log N)$\"></a>時間複雜度：$O(N\\log N)$</h3><p><a href=\"https://tioj.ck.tp.edu.tw/submissions/278456\">Submission</a><br><strong>時間：AC,148</strong></p>\n<p>原本以為上面的掃描線就是他的極限了，沒想到上面的worst case還可以透過set優化成 $O(n\\log n)$！簡單來說，方法一樣是想像一條掃描線由左而右，一樣照上面的想法，把x座標差大於d的點排除，之後利用set二分搜找出y座標在範圍內的點進行枚舉更新答案。</p>\n<ol>\n<li>將點輸入並且排序，X座標為主，Y座標為輔。</li>\n<li>使用set，並以Y座標為排序基準（pair的首項），以儲存第 $i$ 點的左方、水平距離小於等於d的點。</li>\n<li>右掃描線依序窮舉各點作為右端點。<br>　(1) Erase與右端點水平距離大於d的點們（左掃描線右移）<br>　(2) 用二分搜找出與第 $i$ 點垂直距離小於d的點，並嘗試更新<br>　(3) 將第 $i$ 點加入set中。</li>\n</ol>\n<p><img src=\"https://i.imgur.com/yMs369S.png\" alt=\"\"></p>\n<h3 id=\"程式碼-2\"><a href=\"#程式碼-2\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 200005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IOS ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\">vector&lt;pii&gt; p;</span><br><span class=\"line\">set&lt;pii&gt; s;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ld <span class=\"title\">dis</span><span class=\"params\">(pii a, pii b)</span></span>&#123;</span><br><span class=\"line\">    ld x = a.x-b.x, y = a.y-b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(x*x + y*y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    IOS;</span><br><span class=\"line\">    cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin&gt;&gt;n)&#123;</span><br><span class=\"line\">        p.<span class=\"built_in\">assign</span>(n,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(p.<span class=\"built_in\">begin</span>(),p.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        s.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        s.<span class=\"built_in\">insert</span>(&#123;p[<span class=\"number\">0</span>].y,p[<span class=\"number\">0</span>].x&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>;ld ans = <span class=\"number\">5e18</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt; n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> d = <span class=\"built_in\">ceil</span>(ans);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(l &lt; i &amp;&amp; p[l].x &lt; p[i].x - d)&#123;</span><br><span class=\"line\">                s.<span class=\"built_in\">erase</span>(&#123;p[l].y,p[l].x&#125;);</span><br><span class=\"line\">                l++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> it_l = s.<span class=\"built_in\">lower_bound</span>(&#123;p[i].y - d,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> it_r = s.<span class=\"built_in\">upper_bound</span>(&#123;p[i].y + d,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> it = it_l;it != it_r;it++)&#123;</span><br><span class=\"line\">                ans = <span class=\"built_in\">min</span>(ans,<span class=\"built_in\">dis</span>(&#123;it-&gt;y,it-&gt;x&#125;,p[i]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            s.<span class=\"built_in\">insert</span>(&#123;p[i].y,p[i].x&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"分治算法\"><a href=\"#分治算法\" class=\"headerlink\" title=\"分治算法\"></a>分治算法</h2><h3 id=\"時間複雜度：-O-N-log-N-1\"><a href=\"#時間複雜度：-O-N-log-N-1\" class=\"headerlink\" title=\"時間複雜度：$O(N\\log N)$\"></a>時間複雜度：$O(N\\log N)$</h3><p><a href=\"https://tioj.ck.tp.edu.tw/submissions/262111\">Submission</a><br><strong>時間：AC,196</strong></p>\n<p><img src=\"https://i.imgur.com/aOV2MWE.png\" alt=\"\"></p>\n<p>分治做最近點對的基本想法，先將所有點依照x座標排序，利用遞迴得到分割點左右兩邊所有點的最短距離（兩點並不會跨過中間分隔線），枚舉所有會橫跨兩側且有可能更新最短距離的點對。</p>\n<p><img src=\"https://i.imgur.com/2NGuJc5.png\" alt=\"\"></p>\n<p>從兩半邊的遞迴得到目前的最近點對距離 $d = min(d_l,d_r)$ ，將分隔線附近x座標差距小於$d$的點通通都枚舉一遍。可能會有一個疑問，我們是不是可以縮小枚舉的範圍，否則點的數量可能會太多導致複雜度爆炸？除了x座標可以做點的篩選之外，在枚舉的過程中，我們會利用將所有點對y座標排序，將y座標直線距離大於 $d$ 的情況剔除，所剩下真的需要枚舉點也只會剩下常數個，因此可以放心枚舉。</p>\n<p><strong>複雜度分析：</strong> 腦海中想像遞迴樹的長相，會發現每一層都需要都需要對y座標進行排序，時間為$O(n\\log n)$ ，每一次都將n的值除以2，因此共有$O(\\log n)$ 層，總共的時間複雜度為 $O(n\\log^2n)$。（不過實際上應該會比這個快，因為並不是要對所有點都進行排序）。</p>\n<script type=\"math/tex; mode=display\">T(n) = 2T(\\frac{n}{2})+O(n\\log n) = O(n\\log^2n)</script><p>如果要做得更快，可以在y座標排序的地方稍微動動手腳。既然每一層都要對y座標進行排序，排序好的東西再排序一次其實沒有什麼意義，因此就可以用）<a href=\"/N9zvIzP_Se-hpWZSaMv-sQ\">合併排序（merge sort）</a>的方式，將所有已經排序好的兩個左右序列進行$O(n)$的合併（可以用std::merge()完成），如此一來，就不須要每一層花到 $O(n\\log n)$ 的ㄕˊ間進行排序，使總複雜度降低為 $O(n\\log n)$！</p>\n<script type=\"math/tex; mode=display\">T(n) = 2T(\\frac{n}{2})+O(n) = O(n\\log n)</script><h3 id=\"程式碼-3\"><a href=\"#程式碼-3\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> double long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 50002</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF1 100000000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 5e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FOR(i,n) for(int i=0;i&lt;n;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pid pair<span class=\"meta-string\">&lt;int,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdi pair<span class=\"meta-string\">&lt;double,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\">vector&lt;pii&gt; p,temp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">    temp.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    p.<span class=\"built_in\">assign</span>(n,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pii a,pii b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.y &lt; b.y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">dis</span><span class=\"params\">(pii a,pii b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> x1 = a.x-b.x,y1 = a.y-b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(x1 * x1 + y1 * y1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//區間[l,r]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r)<span class=\"keyword\">return</span> INF;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>,mid_pos = p[mid].x;;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> ans = <span class=\"built_in\">min</span>(<span class=\"built_in\">solve</span>(l,mid),<span class=\"built_in\">solve</span>(mid+<span class=\"number\">1</span>,r));</span><br><span class=\"line\">    </span><br><span class=\"line\">    temp.<span class=\"built_in\">assign</span>((r-l+<span class=\"number\">1</span>),&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    <span class=\"built_in\">merge</span>(</span><br><span class=\"line\">        p.<span class=\"built_in\">begin</span>() + l, p.<span class=\"built_in\">begin</span>() + mid + <span class=\"number\">1</span>,</span><br><span class=\"line\">        p.<span class=\"built_in\">begin</span>() + mid + <span class=\"number\">1</span>, p.<span class=\"built_in\">begin</span>() + r + <span class=\"number\">1</span>,</span><br><span class=\"line\">        temp.<span class=\"built_in\">begin</span>(), cmp</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, l, r)p[i] = temp[i-l];</span><br><span class=\"line\">    temp.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, l, r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">abs</span>(p[i].x - mid_pos) &lt;= ans)&#123;</span><br><span class=\"line\">            temp.<span class=\"built_in\">push_back</span>(p[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = temp.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, len<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, i+<span class=\"number\">1</span>, len<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            ans = <span class=\"built_in\">min</span>(ans, <span class=\"built_in\">dis</span>(temp[i],temp[j]));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">abs</span>(temp[i].y-temp[j].y) &gt; ans)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin&gt;&gt;n)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">init</span>();</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(p.<span class=\"built_in\">begin</span>(),p.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"keyword\">double</span> ans = <span class=\"built_in\">solve</span>(<span class=\"number\">0</span>,n<span class=\"number\">-1</span>);</span><br><span class=\"line\">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"隨機算法\"><a href=\"#隨機算法\" class=\"headerlink\" title=\"隨機算法\"></a>隨機算法</h2><h3 id=\"時間複雜度：期望-O-N\"><a href=\"#時間複雜度：期望-O-N\" class=\"headerlink\" title=\"時間複雜度：期望 $O(N)$\"></a>時間複雜度：期望 $O(N)$</h3><p><a href=\"https://tioj.ck.tp.edu.tw/submissions/262969\">Submission</a><br><strong>時間：AC,488</strong></p>\n<p><img src=\"https://i.imgur.com/X756Jf4.png\" alt=\"\"></p>\n<p>用隨機算法做最近點對的期望複雜度是 $O(n)$ ，也就是說如果一開始進行的Random_shuffle有做好的話，期望可以在線性時間解決這個問題。基本的想法如下：</p>\n<ol>\n<li>將最近點對距離設為d，初始為第一、二個點之間的距離</li>\n<li>將每一個點的座標塞入以 $\\frac{d}{2}$ 為邊長的網格中</li>\n<li>將點加入網格中，查看要加入的網格是否已經有點在其中</li>\n<li>一個網格不可容納兩個點，否則必須更新最近點對的距離</li>\n<li>在更新最近點對距離之後，將前面的點的網格座標以新的$d$進行更新</li>\n</ol>\n<p>這個算法用到隨機的因子，因此如果在一開始有將所有點進行均勻的打散的話，可以做到期望複雜度 $O(n)$。</p>\n<p><strong>複雜度分析：</strong><br>考慮加入第i+1個點時出現新的最近點對，發生的機率為：在$C_2^{i+1}$個配對中跟i+1個點產生最近點對共有i種可能因此機率為$\\frac{2}{i+1}$。</p>\n<p>當機率發生的時候，必須將所有的點都刪掉重新來一遍（r變小，重新推入i+1個點），需要付出$O(i+1)$的時間，相乘起來加入每一個點期望的複雜度為$O(1)$，因此總時間複雜度為$O(n)$。</p>\n<h3 id=\"程式碼-4\"><a href=\"#程式碼-4\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 200005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1000000000LL</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> swift 1000000000</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\">ld r,d,ans;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[<span class=\"number\">25</span>] = &#123;<span class=\"number\">-2</span>,<span class=\"number\">-2</span>,<span class=\"number\">-2</span>,<span class=\"number\">-2</span>,<span class=\"number\">-2</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[<span class=\"number\">25</span>] = &#123;<span class=\"number\">-2</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">-2</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">-2</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">-2</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">-2</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">unordered_map&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"title\">dis</span><span class=\"params\">(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">Grid</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y,ind;</span><br><span class=\"line\">&#125;point[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//函式實作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    m.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">Grid</span><span class=\"params\">(<span class=\"keyword\">int</span> ind)</span></span>&#123; <span class=\"comment\">//input網格座標</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = point[ind].x/r;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y = point[ind].y/r;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*INF+y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ld <span class=\"title\">dis</span><span class=\"params\">(node a,node b)</span></span>&#123;</span><br><span class=\"line\">    ld x = a.x-b.x,y = a.y-b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(x*x+y*y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    m.<span class=\"built_in\">insert</span>(<span class=\"built_in\">make_pair</span>(<span class=\"built_in\">Grid</span>(<span class=\"number\">0</span>),<span class=\"number\">0</span>));m.<span class=\"built_in\">insert</span>(<span class=\"built_in\">make_pair</span>(<span class=\"built_in\">Grid</span>(<span class=\"number\">1</span>),<span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> ind = <span class=\"number\">2</span>;ind &lt; n;ind++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = point[ind].x/r,y = point[ind].y/r,better=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">25</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = x+dx[i],ny = y+dy[i];</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> it = m.<span class=\"built_in\">find</span>(nx*INF+ny);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(it!=m.<span class=\"built_in\">end</span>())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">double</span> distance = <span class=\"built_in\">dis</span>(point[it-&gt;second],point[ind]);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(distance&lt;d)&#123;</span><br><span class=\"line\">                    better = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    ans = <span class=\"built_in\">dis</span>(point[it-&gt;second],point[ind]);</span><br><span class=\"line\">                    d = distance;</span><br><span class=\"line\">                    r = d/<span class=\"number\">2</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(better)&#123;</span><br><span class=\"line\">            m.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=ind;i++)m.<span class=\"built_in\">insert</span>(<span class=\"built_in\">make_pair</span>(<span class=\"built_in\">Grid</span>(i),i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            m.<span class=\"built_in\">insert</span>(<span class=\"built_in\">make_pair</span>(<span class=\"built_in\">Grid</span>(ind), ind));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin&gt;&gt;n)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">init</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x,y;cin&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">            x+=swift;y+=swift;</span><br><span class=\"line\">            point[i].x = x;point[i].y = y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">random_shuffle</span>(point, point+n);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> smalln = <span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\">        ans = <span class=\"built_in\">dis</span>(point[<span class=\"number\">0</span>],point[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        d = <span class=\"built_in\">dis</span>(point[<span class=\"number\">0</span>], point[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=smalln;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>;j&lt;=smalln;j++)&#123;</span><br><span class=\"line\">                d = <span class=\"built_in\">min</span>(d,<span class=\"built_in\">dis</span>(point[i], point[j]));</span><br><span class=\"line\">                ans = <span class=\"built_in\">min</span>(ans,<span class=\"built_in\">dis</span>(point[i],point[j]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        r = d/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"相關題目\"><a href=\"#相關題目\" class=\"headerlink\" title=\"相關題目\"></a>相關題目</h2><ul>\n<li>[ ] <a href=\"https://neoj.sprout.tw/problem/795/\">NEOJ 最近點對</a></li>\n<li>[ ] <a href=\"https://tioj.ck.tp.edu.tw/problems/1105\">TIOJ 最遠點對</a></li>\n</ul>\n","site":{"data":{}},"length":8393,"excerpt":"<blockquote>\n<p>題目敘述<br>給定二維平面上 $n$ 個點，每一點都有座標 $(x_i,y_i)$ ，求出最近的點對之歐幾里德距離為多少？<br>$dis(p_i,p_j) = \\sqrt{(x_1-x_2)^2+(y_1-y_2)^2}$<br>","more":"</p>\n</blockquote>\n<p>最近點對有好多種實作方式，從最差的暴力枚舉、稍微優化的掃描線演算法、到分治與隨機，有4種不同的時間複雜度。利用<a href=\"https://tioj.ck.tp.edu.tw/problems/1500\">TIOJ 1500</a>這一題最近點對的裸題，來實測各種不同複雜度下所需要的執行時間。</p>\n<h2 id=\"暴力枚舉\"><a href=\"#暴力枚舉\" class=\"headerlink\" title=\"暴力枚舉\"></a>暴力枚舉</h2><h3 id=\"時間複雜度：-N-2\"><a href=\"#時間複雜度：-N-2\" class=\"headerlink\" title=\"時間複雜度：$N^2$\"></a>時間複雜度：$N^2$</h3><p><a href=\"https://tioj.ck.tp.edu.tw/submissions/262968\">Submission</a><br><strong>時間：TLE,10440</strong></p>\n<p><img src=\"https://i.imgur.com/DL0tBBb.png\" alt=\"\"></p>\n<p>暴力$O(n^2)$將所有點進行枚舉，因為值域是 $n≤50000$ ，平方枚舉會有TLE的問題。</p>\n<h3 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 50005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 5e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\">pii p[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ld <span class=\"title\">dis</span><span class=\"params\">(pii a, pii b)</span></span>&#123;</span><br><span class=\"line\">    ld x = a.x-b.x, y = a.y-b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(x*x + y*y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin&gt;&gt;n)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">        ld d = INF;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(j,i+<span class=\"number\">1</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                d = <span class=\"built_in\">min</span>(d, <span class=\"built_in\">dis</span>(p[i],p[j]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout&lt;&lt;d&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"掃描線算法\"><a href=\"#掃描線算法\" class=\"headerlink\" title=\"掃描線算法\"></a>掃描線算法</h2><h3 id=\"時間複雜度：Worst-Case-O-N-2\"><a href=\"#時間複雜度：Worst-Case-O-N-2\" class=\"headerlink\" title=\"時間複雜度：Worst Case $O(N^2)$\"></a>時間複雜度：Worst Case $O(N^2)$</h3><p><a href=\"https://tioj.ck.tp.edu.tw/submissions/262966\">Submission</a><br><strong>時間：AC,1668</strong><br><img src=\"https://i.imgur.com/6iSbet4.png\" alt=\"\"></p>\n<p>這一種作法是改善過後的暴力枚舉，利用計算幾何中掃描線的概念，先將所有點依照x座標進行排序（y座標隨意）。接著想像一條從左往右掃的掃描線，對於每一條掃描線看右邊的點，如果當前最近點對距離為 $d$，因此只要遇上x座標差距大於 $d$ 的點時，即可繼續下一輪的枚舉。</p>\n<p>加上排序的關係，其時間複雜度至少為 $O(n\\log n)$，但這種掃描線的方式無法有效過濾所有點都在相同的x座標上的情況，因此最差的時間複雜度會退化成 $O(n^2)$ ，不過聽說平均的狀況下是很快的！</p>\n<p><img src=\"https://i.imgur.com/Ae9k1HR.png\" alt=\"\"></p>\n<p>上圖為掃描線執行最近點對的一個示意圖，黑線為掃描線，$d$ 為掃描線左邊所有點的最近點對距離，我們只要每一輪枚舉這個點與右邊x座標差在 $d$ 以內的所有點，即可進行下一輪的更新！</p>\n<h3 id=\"程式碼-1\"><a href=\"#程式碼-1\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 50005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 5e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\">pii p[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ld <span class=\"title\">dis</span><span class=\"params\">(pii a, pii b)</span></span>&#123;</span><br><span class=\"line\">    ld x = a.x-b.x, y = a.y-b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(x*x + y*y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin&gt;&gt;n)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(p,p+n);</span><br><span class=\"line\">        ld d = INF;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(j,i+<span class=\"number\">1</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p[j].x &gt; p[i].x + d)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                d = <span class=\"built_in\">min</span>(d, <span class=\"built_in\">dis</span>(p[i],p[j]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout&lt;&lt;d&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"掃描線算法（優化後）\"><a href=\"#掃描線算法（優化後）\" class=\"headerlink\" title=\"掃描線算法（優化後）\"></a>掃描線算法（優化後）</h2><h3 id=\"時間複雜度：-O-N-log-N\"><a href=\"#時間複雜度：-O-N-log-N\" class=\"headerlink\" title=\"時間複雜度：$O(N\\log N)$\"></a>時間複雜度：$O(N\\log N)$</h3><p><a href=\"https://tioj.ck.tp.edu.tw/submissions/278456\">Submission</a><br><strong>時間：AC,148</strong></p>\n<p>原本以為上面的掃描線就是他的極限了，沒想到上面的worst case還可以透過set優化成 $O(n\\log n)$！簡單來說，方法一樣是想像一條掃描線由左而右，一樣照上面的想法，把x座標差大於d的點排除，之後利用set二分搜找出y座標在範圍內的點進行枚舉更新答案。</p>\n<ol>\n<li>將點輸入並且排序，X座標為主，Y座標為輔。</li>\n<li>使用set，並以Y座標為排序基準（pair的首項），以儲存第 $i$ 點的左方、水平距離小於等於d的點。</li>\n<li>右掃描線依序窮舉各點作為右端點。<br>　(1) Erase與右端點水平距離大於d的點們（左掃描線右移）<br>　(2) 用二分搜找出與第 $i$ 點垂直距離小於d的點，並嘗試更新<br>　(3) 將第 $i$ 點加入set中。</li>\n</ol>\n<p><img src=\"https://i.imgur.com/yMs369S.png\" alt=\"\"></p>\n<h3 id=\"程式碼-2\"><a href=\"#程式碼-2\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 200005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IOS ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\">vector&lt;pii&gt; p;</span><br><span class=\"line\">set&lt;pii&gt; s;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ld <span class=\"title\">dis</span><span class=\"params\">(pii a, pii b)</span></span>&#123;</span><br><span class=\"line\">    ld x = a.x-b.x, y = a.y-b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(x*x + y*y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    IOS;</span><br><span class=\"line\">    cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin&gt;&gt;n)&#123;</span><br><span class=\"line\">        p.<span class=\"built_in\">assign</span>(n,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(p.<span class=\"built_in\">begin</span>(),p.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        s.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        s.<span class=\"built_in\">insert</span>(&#123;p[<span class=\"number\">0</span>].y,p[<span class=\"number\">0</span>].x&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>;ld ans = <span class=\"number\">5e18</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;i &lt; n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> d = <span class=\"built_in\">ceil</span>(ans);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(l &lt; i &amp;&amp; p[l].x &lt; p[i].x - d)&#123;</span><br><span class=\"line\">                s.<span class=\"built_in\">erase</span>(&#123;p[l].y,p[l].x&#125;);</span><br><span class=\"line\">                l++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> it_l = s.<span class=\"built_in\">lower_bound</span>(&#123;p[i].y - d,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> it_r = s.<span class=\"built_in\">upper_bound</span>(&#123;p[i].y + d,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> it = it_l;it != it_r;it++)&#123;</span><br><span class=\"line\">                ans = <span class=\"built_in\">min</span>(ans,<span class=\"built_in\">dis</span>(&#123;it-&gt;y,it-&gt;x&#125;,p[i]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            s.<span class=\"built_in\">insert</span>(&#123;p[i].y,p[i].x&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"分治算法\"><a href=\"#分治算法\" class=\"headerlink\" title=\"分治算法\"></a>分治算法</h2><h3 id=\"時間複雜度：-O-N-log-N-1\"><a href=\"#時間複雜度：-O-N-log-N-1\" class=\"headerlink\" title=\"時間複雜度：$O(N\\log N)$\"></a>時間複雜度：$O(N\\log N)$</h3><p><a href=\"https://tioj.ck.tp.edu.tw/submissions/262111\">Submission</a><br><strong>時間：AC,196</strong></p>\n<p><img src=\"https://i.imgur.com/aOV2MWE.png\" alt=\"\"></p>\n<p>分治做最近點對的基本想法，先將所有點依照x座標排序，利用遞迴得到分割點左右兩邊所有點的最短距離（兩點並不會跨過中間分隔線），枚舉所有會橫跨兩側且有可能更新最短距離的點對。</p>\n<p><img src=\"https://i.imgur.com/2NGuJc5.png\" alt=\"\"></p>\n<p>從兩半邊的遞迴得到目前的最近點對距離 $d = min(d_l,d_r)$ ，將分隔線附近x座標差距小於$d$的點通通都枚舉一遍。可能會有一個疑問，我們是不是可以縮小枚舉的範圍，否則點的數量可能會太多導致複雜度爆炸？除了x座標可以做點的篩選之外，在枚舉的過程中，我們會利用將所有點對y座標排序，將y座標直線距離大於 $d$ 的情況剔除，所剩下真的需要枚舉點也只會剩下常數個，因此可以放心枚舉。</p>\n<p><strong>複雜度分析：</strong> 腦海中想像遞迴樹的長相，會發現每一層都需要都需要對y座標進行排序，時間為$O(n\\log n)$ ，每一次都將n的值除以2，因此共有$O(\\log n)$ 層，總共的時間複雜度為 $O(n\\log^2n)$。（不過實際上應該會比這個快，因為並不是要對所有點都進行排序）。</p>\n<script type=\"math/tex; mode=display\">T(n) = 2T(\\frac{n}{2})+O(n\\log n) = O(n\\log^2n)</script><p>如果要做得更快，可以在y座標排序的地方稍微動動手腳。既然每一層都要對y座標進行排序，排序好的東西再排序一次其實沒有什麼意義，因此就可以用）<a href=\"/N9zvIzP_Se-hpWZSaMv-sQ\">合併排序（merge sort）</a>的方式，將所有已經排序好的兩個左右序列進行$O(n)$的合併（可以用std::merge()完成），如此一來，就不須要每一層花到 $O(n\\log n)$ 的ㄕˊ間進行排序，使總複雜度降低為 $O(n\\log n)$！</p>\n<script type=\"math/tex; mode=display\">T(n) = 2T(\\frac{n}{2})+O(n) = O(n\\log n)</script><h3 id=\"程式碼-3\"><a href=\"#程式碼-3\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> double long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 50002</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF1 100000000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 5e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FOR(i,n) for(int i=0;i&lt;n;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pid pair<span class=\"meta-string\">&lt;int,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdi pair<span class=\"meta-string\">&lt;double,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\">vector&lt;pii&gt; p,temp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">    temp.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    p.<span class=\"built_in\">assign</span>(n,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pii a,pii b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.y &lt; b.y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">dis</span><span class=\"params\">(pii a,pii b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> x1 = a.x-b.x,y1 = a.y-b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(x1 * x1 + y1 * y1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//區間[l,r]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r)<span class=\"keyword\">return</span> INF;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>,mid_pos = p[mid].x;;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> ans = <span class=\"built_in\">min</span>(<span class=\"built_in\">solve</span>(l,mid),<span class=\"built_in\">solve</span>(mid+<span class=\"number\">1</span>,r));</span><br><span class=\"line\">    </span><br><span class=\"line\">    temp.<span class=\"built_in\">assign</span>((r-l+<span class=\"number\">1</span>),&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    <span class=\"built_in\">merge</span>(</span><br><span class=\"line\">        p.<span class=\"built_in\">begin</span>() + l, p.<span class=\"built_in\">begin</span>() + mid + <span class=\"number\">1</span>,</span><br><span class=\"line\">        p.<span class=\"built_in\">begin</span>() + mid + <span class=\"number\">1</span>, p.<span class=\"built_in\">begin</span>() + r + <span class=\"number\">1</span>,</span><br><span class=\"line\">        temp.<span class=\"built_in\">begin</span>(), cmp</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, l, r)p[i] = temp[i-l];</span><br><span class=\"line\">    temp.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, l, r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">abs</span>(p[i].x - mid_pos) &lt;= ans)&#123;</span><br><span class=\"line\">            temp.<span class=\"built_in\">push_back</span>(p[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = temp.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, len<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, i+<span class=\"number\">1</span>, len<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            ans = <span class=\"built_in\">min</span>(ans, <span class=\"built_in\">dis</span>(temp[i],temp[j]));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">abs</span>(temp[i].y-temp[j].y) &gt; ans)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin&gt;&gt;n)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">init</span>();</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(p.<span class=\"built_in\">begin</span>(),p.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"keyword\">double</span> ans = <span class=\"built_in\">solve</span>(<span class=\"number\">0</span>,n<span class=\"number\">-1</span>);</span><br><span class=\"line\">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"隨機算法\"><a href=\"#隨機算法\" class=\"headerlink\" title=\"隨機算法\"></a>隨機算法</h2><h3 id=\"時間複雜度：期望-O-N\"><a href=\"#時間複雜度：期望-O-N\" class=\"headerlink\" title=\"時間複雜度：期望 $O(N)$\"></a>時間複雜度：期望 $O(N)$</h3><p><a href=\"https://tioj.ck.tp.edu.tw/submissions/262969\">Submission</a><br><strong>時間：AC,488</strong></p>\n<p><img src=\"https://i.imgur.com/X756Jf4.png\" alt=\"\"></p>\n<p>用隨機算法做最近點對的期望複雜度是 $O(n)$ ，也就是說如果一開始進行的Random_shuffle有做好的話，期望可以在線性時間解決這個問題。基本的想法如下：</p>\n<ol>\n<li>將最近點對距離設為d，初始為第一、二個點之間的距離</li>\n<li>將每一個點的座標塞入以 $\\frac{d}{2}$ 為邊長的網格中</li>\n<li>將點加入網格中，查看要加入的網格是否已經有點在其中</li>\n<li>一個網格不可容納兩個點，否則必須更新最近點對的距離</li>\n<li>在更新最近點對距離之後，將前面的點的網格座標以新的$d$進行更新</li>\n</ol>\n<p>這個算法用到隨機的因子，因此如果在一開始有將所有點進行均勻的打散的話，可以做到期望複雜度 $O(n)$。</p>\n<p><strong>複雜度分析：</strong><br>考慮加入第i+1個點時出現新的最近點對，發生的機率為：在$C_2^{i+1}$個配對中跟i+1個點產生最近點對共有i種可能因此機率為$\\frac{2}{i+1}$。</p>\n<p>當機率發生的時候，必須將所有的點都刪掉重新來一遍（r變小，重新推入i+1個點），需要付出$O(i+1)$的時間，相乘起來加入每一個點期望的複雜度為$O(1)$，因此總時間複雜度為$O(n)$。</p>\n<h3 id=\"程式碼-4\"><a href=\"#程式碼-4\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 200005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1000000000LL</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> swift 1000000000</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\">ld r,d,ans;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[<span class=\"number\">25</span>] = &#123;<span class=\"number\">-2</span>,<span class=\"number\">-2</span>,<span class=\"number\">-2</span>,<span class=\"number\">-2</span>,<span class=\"number\">-2</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[<span class=\"number\">25</span>] = &#123;<span class=\"number\">-2</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">-2</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">-2</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">-2</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">-2</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">unordered_map&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"title\">dis</span><span class=\"params\">(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">Grid</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y,ind;</span><br><span class=\"line\">&#125;point[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//函式實作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    m.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">Grid</span><span class=\"params\">(<span class=\"keyword\">int</span> ind)</span></span>&#123; <span class=\"comment\">//input網格座標</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = point[ind].x/r;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y = point[ind].y/r;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*INF+y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ld <span class=\"title\">dis</span><span class=\"params\">(node a,node b)</span></span>&#123;</span><br><span class=\"line\">    ld x = a.x-b.x,y = a.y-b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(x*x+y*y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    m.<span class=\"built_in\">insert</span>(<span class=\"built_in\">make_pair</span>(<span class=\"built_in\">Grid</span>(<span class=\"number\">0</span>),<span class=\"number\">0</span>));m.<span class=\"built_in\">insert</span>(<span class=\"built_in\">make_pair</span>(<span class=\"built_in\">Grid</span>(<span class=\"number\">1</span>),<span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> ind = <span class=\"number\">2</span>;ind &lt; n;ind++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = point[ind].x/r,y = point[ind].y/r,better=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">25</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = x+dx[i],ny = y+dy[i];</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> it = m.<span class=\"built_in\">find</span>(nx*INF+ny);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(it!=m.<span class=\"built_in\">end</span>())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">double</span> distance = <span class=\"built_in\">dis</span>(point[it-&gt;second],point[ind]);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(distance&lt;d)&#123;</span><br><span class=\"line\">                    better = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    ans = <span class=\"built_in\">dis</span>(point[it-&gt;second],point[ind]);</span><br><span class=\"line\">                    d = distance;</span><br><span class=\"line\">                    r = d/<span class=\"number\">2</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(better)&#123;</span><br><span class=\"line\">            m.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=ind;i++)m.<span class=\"built_in\">insert</span>(<span class=\"built_in\">make_pair</span>(<span class=\"built_in\">Grid</span>(i),i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            m.<span class=\"built_in\">insert</span>(<span class=\"built_in\">make_pair</span>(<span class=\"built_in\">Grid</span>(ind), ind));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin&gt;&gt;n)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">init</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x,y;cin&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">            x+=swift;y+=swift;</span><br><span class=\"line\">            point[i].x = x;point[i].y = y;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">random_shuffle</span>(point, point+n);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> smalln = <span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\">        ans = <span class=\"built_in\">dis</span>(point[<span class=\"number\">0</span>],point[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        d = <span class=\"built_in\">dis</span>(point[<span class=\"number\">0</span>], point[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=smalln;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>;j&lt;=smalln;j++)&#123;</span><br><span class=\"line\">                d = <span class=\"built_in\">min</span>(d,<span class=\"built_in\">dis</span>(point[i], point[j]));</span><br><span class=\"line\">                ans = <span class=\"built_in\">min</span>(ans,<span class=\"built_in\">dis</span>(point[i],point[j]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        r = d/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"相關題目\"><a href=\"#相關題目\" class=\"headerlink\" title=\"相關題目\"></a>相關題目</h2><ul>\n<li>[ ] <a href=\"https://neoj.sprout.tw/problem/795/\">NEOJ 最近點對</a></li>\n<li>[ ] <a href=\"https://tioj.ck.tp.edu.tw/problems/1105\">TIOJ 最遠點對</a></li>\n</ul>"},{"title":"生日問題（生日悖論）","date":"2021-07-04T16:00:00.000Z","mathjax":true,"_content":"\n有同學問我生日問題的機率感覺蠻好玩的，決定好好研究一番。生日悖論其實不是一個悖論，只是有點違背直覺而已，並非數學中定義的悖論！這一篇會用蒙地卡羅模擬來進行與理論的比較\n\n## 問題敘述\n\n題目：一個房間要多少人，則兩個人的生日相同的機率要大於50%？\n\n答案是<font color=\"#f00\">23</font>人。\n<!-- more -->\n如果想要看[1到100人有同一天的機率可以點這裡](https://gist.github.com/peienwu/bd6edf34416f352ba97b94c67d5acb52)\n\n\n## 機率與人數的關係\n\n### 兩種理解方式\n對於生日問題可能會有兩種理解方式：\n1. 題意：<font color=\"#f00\">「23人之中兩兩之間存在生日相同」</font>\n    對於原本題目要闡述的意義可以列出以下數學式：\n    $$\\begin{split}p(n)&=1-p'(n) \\\\&= 1-(1\\times\\frac{364}{365}\\times\\frac{363}{365}\\times\\cdots\\frac{365-(n-1)}{365})\\end{split}$$\n2. 錯誤理解：<font color=\"#f00\">「其他22人與你的生日相同的機率」</font>\n    這樣的理解會造成算出來的機率大為減少（用全部扣掉皆不相同）：\n    $$q(n) = 1-(\\frac{364}{365})^n$$\n    \n有了以上兩個關係式，就可以進行圖表的繪製。x軸表示人數，y軸表示機率，可以看出來兩種理解方式會造成機率有很大的差別！\n![](https://i.imgur.com/NcIRKE7.png)\n\n畫圖程式碼：\n```python=\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nplt.title(\"Possibility to Number of people\", fontsize=20) #圖表標題\nplt.xlabel(\"Number of people\", fontsize=16) #x軸標題\nplt.ylabel(\"Possibility\", fontsize=16) #y軸標題\n\nd = 1\np = 1\nx = []\ny1 = []\ny2 = []\nfor i in range(1,365):\n    y1.append(1-p)\n    p = p*d\n    d = d-(1/365)\n\nfor i in range(365,400):\n    y1.append(1)\n\nd2 = 364/365\nfor i in range(1,400):\n    x.append(i)\n    y2.append(1-d2)\n    d2 = d2*(364/365)\n\nplt.plot(x,y1,'red',label='p(n)')\nplt.plot(x,y2,'blue',label='q(n)')\n\nplt.legend(loc = 'upper left')\nplt.show() #顯示繪製的圖形\n```\n\n這張圖表還可以告訴我們，任兩個人生日相同的機率很高，但相對的，即使有400個人，要有人跟你的生日相同的機率比6成高一點而已，告訴我們「全部的日期至少有一人生日」的機率其實不高！\n\n### 其他人與你的生日相同的機率\n如果在看更仔細一點，對於「其他人與你的生日相同的機率」作圖會呈現下方的圖形\n![](https://i.imgur.com/DHu0F0g.png)\n\n因為生日是隨機的，因此在很大量數據測試下，我們可以期望共有365人的時候會出現第一個與自己生日相同日期的人！實際以亂數模擬，所得到的期望值次數與理論是相符的！\n![](https://i.imgur.com/UdjoCdI.png)\n```cpp=\n#include <bits/stdc++.h>\nusing namespace std;\nbool birthday[400];\n\nint main(){\n    srand((unsigned)time(NULL));\n    int sum = 0,t = 5000000,times = t;\n\n    while(times--){\n        memset(birthday,0,sizeof(birthday));\n        int target = rand()%365,ind=0;\n        for(int i=0;;i++){\n            ind = rand()%365;\n            if(target==ind){\n                sum+=i+1;\n                break;\n            }\n            else birthday[ind] = 1;\n        }\n    }\n    cout<<fixed<<setprecision(4);\n    cout<<\"平均於第：\"<<(double)sum/t<<\"次\"<<endl<<\"會出現第一個與自己生日相同的人\"<<endl;\n}\n```\n\n## 至少k個人生日相同機率\n\n對於至少k人生日相同的機率要大於50%，需要的人數如下表：\n![](https://i.imgur.com/Nwpe6aH.jpg)\n用程式驗證看看：\n\n\n| k   | 共N人 | 機率     |\n|:--- |:----- |:-------- |\n| 2   | 23    | 0.506949 |\n| 3   | 88    | 0.511169 |\n| 4   | 187   | 0.502883 |\n| 5   | 313   | 0.501057 |\n| 6   | 460   | 0.502686 |\n| 7   | 623   | 0.503298 |\n| 8   | 798   | 0.500304 |\n| 9   | 985   | 0.501191 |\n| 10  | 1181  | 0.500178 |\n\n根據[這一篇](https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.370.8298&rep=rep1&type=pdf)提供的公式，在$k≤20$的情況下$n\\cong47(k-1.5)^{\\frac{3}{2}}$，這是這篇作者把k還是很小的時候進行近似，但實際的公式我還不是很了解:cry:\n\n```cpp=\n#include <bits/stdc++.h>\nusing namespace std;\nint birthday[400],power[1000];\n\nint main(){\n    srand((unsigned)time(NULL));\n    int sum = 0,t = 10000000,times = t;\n    int arr[10] = {23,88,187,313,460,623,798,985,1181};\n\n    for(int j=0;j<9;j++){\n        times = t;sum = 0;\n        while(times--){\n            memset(birthday,0,sizeof(birthday));\n            for(int i=0;i<arr[j];i++){\n                int ind = rand()%365;\n                birthday[ind]+=1;\n                if(birthday[ind]>=j+2){\n                    sum+=1;\n                    break;\n                }\n            }\n        }\n        cout<<fixed<<setprecision(7);\n        cout<<(double)sum/t<<endl;\n    }\n}\n```\n\n## 機率證明\n\n### 公式推討\n生日問題可以理解成：<font color=\"#f00\">至少兩人生日相同的機率</font> 這個問題，而否定這個問題即為：「沒有人生日相同的機率」。因為這兩個事件的聯集即為樣本空間，可以用扣的方式得到答案！\n\n對於房間裡有n人的情況，定義 $p(n)$ 為「至少兩人生日相同的機率」、$p'(n)$ 為「沒有人生日相同的機率」，在不考慮特殊強況（閏年等），並假設生日會平均分佈的狀況下：\n$$\\begin{split}p(n)&=1-p'(n) \\\\&= 1-(1\\times\\frac{364}{365}\\times\\frac{363}{365}\\times\\cdots\\frac{365-(n-1)}{365})\\\\\\\\&=1-\\frac{365!}{365^n\\cdot(365-n)!}\\end{split}$$\n簡單解釋一下，對於每一個加入房間的人都有365種可能，因此分母皆為365；對於第i個加入的人要避開前i-1個人的生日，因此分子為365-(i-1)。經過整理可以得到這個有階乘又有次方的很難看的一個公式！:neutral_face:\n\n這時候我們可以引入泰勒公式：\n$$\\begin{split}e^x&=\\sum_{k=0}^\\infty\\frac{x^k}{k!}=1+\\frac{x^1}{1!}+\\frac{x^2}{2!}+\\frac{x^3}{3!}\\cdots\\end{split}$$\n為什麼要引入這個公式？是因為我們想要構造出上面機率計算中的每一項 $1-\\frac{x}{365}$ ，因為泰勒公式是一個無窮級數，我們可以適度的做一些取捨，例如只取第一項與第二項（在下去都是小數點4,5位以上了)，得到以下：\n$$e^x\\cong1+x\\to e^{-\\frac{x}{365}}\\cong1-\\frac{x}{365}$$\n接著就可以把每一項替換成多項式的型態：\n$$\\begin{split}p'(n)&=1\\times\\frac{364}{365}\\times\\frac{363}{365}\\times\\cdots\\frac{365-n+1}{365}\\\\&\\cong1\\times e^{-\\frac{1}{365}}\\times e^{-\\frac{2}{365}}\\times\\cdots\\times e^{-\\frac{n-1}{365}}\\\\&=e^{-\\frac{1+2+\\cdots+(n-1)}{365}}\\\\&=e^{-\\frac{n(n-1)/2}{365}}\\\\&=e^{-\\frac{n^2-n}{730}}\\end{split}$$\n\n接著就可以算出正確的機率了！\n$$\\begin{split}p(n) &= 1-p'(n)\\\\&\\cong1-e^{-\\frac{n^2-n}{730}}\\end{split}$$\n\n### 實際機率\n我利用程式實際運算求出機率，並跟公式解做比較如下：\n![](https://i.imgur.com/NEJMnOa.png)\n發現到誤差會隨著人數增加而有變大的趨勢，不過都是在小數點後三位的事情，誤差不到1%，所以公式解其實是可以用的！其實可以觀察到一個現象，對於$p'(n)$的理論解都會比實際值高，因為多加了幾項被我們省略掉的數字，因此計算出來的公式解會比實際機率低一些！\n\n\n## 生日攻擊\n生日攻擊就是利用生日問題的特性在 $\\sqrt{H}$ 的時間暴力破解找出碰撞。[Google破解SHA1實現碰撞攻擊](https://www.thenewslens.com/article/62378)，如果有人可以讓兩個不同的檔案得出相同雜湊值，讓攻擊者可能偷偷把惡意的程式碼放進檔案，但得出來的雜湊值跟原本的檔案一樣，使人在沒有防備的情況下誤以為危險檔案安全，這可以達到生日攻擊（也就是找到碰撞）\n\n### 雜湊演算法\n最近有學雜湊相關東西，那剛好生日問題其實跟雜湊很有關係，因為生日可以被當作雜雜湊空間大小，空間越大雖然消耗記憶體較大但發生碰撞的機會會越小。換作是雜湊演算法中，我們想要討論的就是開的空間大小與發生碰撞的嘗試次數的關係。\n\n首先計算生日問題人數的期望值，也就是在加入第幾個人之後，會發生有兩人生日同一天的情況，以下為模擬的情形：\n![](https://i.imgur.com/m6Wiwdh.png)\n透過公式的計算，可以得到不同人數對應到的機率，假設共i人的情況下機率為f(i)，則f(i)-f(i-1)為加入第i人時恰好有人生日相同的機率，就可以根據期望值的公式算出期望在共有幾人時發生碰撞。以下是計算結果：\n![](https://i.imgur.com/mnyAbWk.png)\n兩者的誤差極小，可以推論出在平均約在加入第24.617個人的時候會發生碰撞！\n\n我們已經計算出對於n人的情況下任兩人生日相同的機率，這時候可以推廣到不只是365天，也就代表在雜湊空間大小為d的時候發生碰撞的機率如下：\n$$\\begin{split}p(n) &= 1-p'(n)\\\\p(n,d)&\\cong1-e^{-\\frac{n^2-n}{2d}}\\end{split}$$\n\n因此我寫了一個實際模擬的程式跟這個公式模擬的結果做比較，根據空間大小分別為365與1000做討論，結果如下：\n![](https://i.imgur.com/3nuhPHI.png)\n![](https://i.imgur.com/fKVI4QB.png)\n\n由模擬的結果可以看出，若一年有1000天（假設而已！）則在38個人的團體中任兩人生日同天的機率已經超過50%，跟直覺相差挺大的！\n\n### 給定機率預測最多數量\n\n在上面的做法是人數計算機率，可以換一個方式，給定碰撞機率求最多的人數為多少。可以從上面的公式來推，以下n,H分別代表數量與空間大小：\n$$\\begin{split}p(n,H)&\\cong1-e^{-\\frac{n^2-n}{2H}}\\cong1-e^{-\\frac{n^2}{2H}}\\\\&\\to e^{-\\frac{n^2}{2H}}=1-p\\\\&\\to e^{\\frac{n^2}{2H}}\\frac{1}{1-p}\\\\&\\to\\frac{n^2}{2H}=\\ln\\frac{1}{1-p}\\\\&\\to n(p,H)\\cong \\sqrt{2H\\ln\\frac{1}{1-p}}\\end{split}$$\n\n因為我們把$n^2-n$當成$n^2$，所以在小範圍估計的時候會有比較大的誤差，不過當n很大的時候，量級就會是$n^2$，因此可以忽略一次方的$n$\n\n### 首次碰撞的期望值次數\n在上面有做一次期望值的估計，不過過程蠻麻煩的，要先算出每一個數量機率的差，再乘上數量並加總。這邊有一個公式是提供在範圍很大時的一個估計公式：\n\n$$Q(H)\\cong\\sqrt{\\frac{\\pi}{2}H}$$\n\n這導出一個重要的結論：對於n位密碼共有$2^n$種可能組合，確僅僅需要期望$2^{\\frac{n}{2}}$次嘗試就可以遇到碰撞！以下嘗試H=800000筆與H=1500000筆數據，會有一點誤差，可能的原因是測試的樣本數不夠(100萬次)\n\n![](https://i.imgur.com/z5Z0cvr.png)\n![](https://i.imgur.com/Xh0yowN.png)\n\n### 程式碼\n實作的概念就是開一個$O(n)$的陣列紀錄，如果遇到之前出現過的就記錄下來\n```cpp=\n#include <bits/stdc++.h>\n#define ios ios::sync_with_stdio(0),cin.tie(0)\nusing namespace std;\nbool hash_map[2000006];\n\nint main(){\n    ios;\n    srand((unsigned)time(NULL));\n    int N,M;cin>>N>>M;\t//N筆輸入,空間大小M\n    int t = 1000000;\n    int times = t,sum = 0;\n\n    while(times--){\n        memset(hash_map,0,sizeof(hash_map));\n        for(int i=0;i<N;i++){\n            int temp = rand()%M;\n            if(hash_map[temp]==0)hash_map[temp] = 1;\n            else{\n                sum+=i;\n                break;\n            }\n        }\n    }\n    cout<<fixed<<setprecision(6);\n    cout<<\"對於輸入筆數共有：\"<<N<<\"、空間大小為：\"<<M<<endl<<\"第一次發生碰撞次數平均值為：\"<<(double)sum/t<<endl;\n    cout<<\"理論預測次數：\"<<sqrt(M_PI_2*M)<<endl;\n    //\tcout<<\"理論預測：\"<<1-exp(-(N*(N-1)/(double)(2*M)))<<endl;\n}\n```\n\n## Cheryl's birthday\n這一題跟生日問題沒啥關係，但既然都提到「生日」，就來看一題有趣的\n> 艾伯特和柏納剛認識雪莉兒，想要知道雪莉兒的生日，雪莉兒列出了十個可能的日期：\n> 5月15日、5月16日、5月19日、6月17日\n> 6月18日、7月14日、7月16日、8月14日\n> 8月15日、8月17日\n接著雪莉兒分別告訴艾伯特及柏納她生日的月及日，以下是艾伯特和柏納的回應\n> \n> 艾伯特：我不知道雪莉兒的生日是哪一天，但我知道柏納也不知道\n> 柏納：一開始我不知道雪莉兒的生日，但現在我知道了\n> 艾伯特：那我也知道雪莉兒的生日了\n> 請問雪莉兒的生日是那一天？\n\n> [註：艾伯特的第一句話他確定柏納100%不知道生日是哪一天]\n\n解答點此：\n![](https://i.imgur.com/FxwNYkb.png =400x)\n\n1. 第一句話中，柏納若要知道明確的生日日期，唯一的可能是生日日期的日在十個可能日期中只出現過一次，也就是18日和19日。但艾伯特說<font color=\"#f00\">他知道柏納也不知道生日是哪一天</font>，因此可以可以排除5月和6月的所有日期（如果是5月或6月有一定的機會艾伯特無法確定柏納不知道是哪一天）\n\n2. 根據第一句話柏納可以推測月份是7月或8月，而他已經知道生日是哪一天，表示他知道的日是在7月或8月中只出現過一次的日，因此可以排除7月及8月可能生日中都有出現的14日，柏納知道的日可能是15日、16日或17日。\n\n3. 目前還有可能的生日是7月16日、8月15日及8月17日，而艾伯特在聽完第二句話就可以知道生日是哪一天，表示他知道的月份在7月16日、8月15日及8月17日中只出現一次。因此他知道的月份是7月，生日是7月16日。\n\n<font color=\"#f00\">答案是7月16日。</font>\n\n\n這一題跟生日問題其實沒什麼關係，就當作是一個「生日」有關的有趣邏輯推理的題目吧！\n\n## 結論\n整理以上提到的公式吧\n### 已知人數推算機率\n$$\\begin{split}p(n)&=1-\\frac{365!}{365^n\\cdot(365-n)!}\\end{split}$$\n$$\\begin{split}p(n) \\cong1-e^{-\\frac{n^2-n}{730}}\\end{split}$$\n\n### 已知機率預測數量（也就是人數）\n$$\\begin{split}n(p,H)\\cong \\sqrt{2H\\ln\\frac{1}{1-p}}\\end{split}$$\n\n### 首次碰撞的期望值\n$$Q(H)\\cong\\sqrt{\\frac{\\pi}{2}H}$$\n\n沒想到生日問題可以衍伸出如此多、如此繁雜的數學公式，不僅僅是數學領域，在資安上面也扮演了一個非常重要的角色，也就是雜湊空間為H的時，根據公式我們可以期望在$\\sqrt{H}$的嘗試內找到碰撞，也就是所謂的Birthday Attack！\n\n## 附錄\n### 一些數學證明\n![](https://i.imgur.com/eKXfAI7.jpg =400x)\n### 參考資料\n[密碼學系列之：生日攻擊](https://iter01.com/603052.html)\n[維基百科：生日問題](https://zh.wikipedia.org/wiki/%E7%94%9F%E6%97%A5%E5%95%8F%E9%A1%8C)\n[Diaconis and Mosteller 1989 - methods for studying coincidences](https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.370.8298&rep=rep1&type=pdf)","source":"_posts/生日問題.md","raw":"---\ntitle: 生日問題（生日悖論）\ndate: 2021-7-5\ntags: \n    - 數學\n    - 2021暑期筆記\ncategories: \n    - 數學筆記\nmathjax: true\n---\n\n有同學問我生日問題的機率感覺蠻好玩的，決定好好研究一番。生日悖論其實不是一個悖論，只是有點違背直覺而已，並非數學中定義的悖論！這一篇會用蒙地卡羅模擬來進行與理論的比較\n\n## 問題敘述\n\n題目：一個房間要多少人，則兩個人的生日相同的機率要大於50%？\n\n答案是<font color=\"#f00\">23</font>人。\n<!-- more -->\n如果想要看[1到100人有同一天的機率可以點這裡](https://gist.github.com/peienwu/bd6edf34416f352ba97b94c67d5acb52)\n\n\n## 機率與人數的關係\n\n### 兩種理解方式\n對於生日問題可能會有兩種理解方式：\n1. 題意：<font color=\"#f00\">「23人之中兩兩之間存在生日相同」</font>\n    對於原本題目要闡述的意義可以列出以下數學式：\n    $$\\begin{split}p(n)&=1-p'(n) \\\\&= 1-(1\\times\\frac{364}{365}\\times\\frac{363}{365}\\times\\cdots\\frac{365-(n-1)}{365})\\end{split}$$\n2. 錯誤理解：<font color=\"#f00\">「其他22人與你的生日相同的機率」</font>\n    這樣的理解會造成算出來的機率大為減少（用全部扣掉皆不相同）：\n    $$q(n) = 1-(\\frac{364}{365})^n$$\n    \n有了以上兩個關係式，就可以進行圖表的繪製。x軸表示人數，y軸表示機率，可以看出來兩種理解方式會造成機率有很大的差別！\n![](https://i.imgur.com/NcIRKE7.png)\n\n畫圖程式碼：\n```python=\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nplt.title(\"Possibility to Number of people\", fontsize=20) #圖表標題\nplt.xlabel(\"Number of people\", fontsize=16) #x軸標題\nplt.ylabel(\"Possibility\", fontsize=16) #y軸標題\n\nd = 1\np = 1\nx = []\ny1 = []\ny2 = []\nfor i in range(1,365):\n    y1.append(1-p)\n    p = p*d\n    d = d-(1/365)\n\nfor i in range(365,400):\n    y1.append(1)\n\nd2 = 364/365\nfor i in range(1,400):\n    x.append(i)\n    y2.append(1-d2)\n    d2 = d2*(364/365)\n\nplt.plot(x,y1,'red',label='p(n)')\nplt.plot(x,y2,'blue',label='q(n)')\n\nplt.legend(loc = 'upper left')\nplt.show() #顯示繪製的圖形\n```\n\n這張圖表還可以告訴我們，任兩個人生日相同的機率很高，但相對的，即使有400個人，要有人跟你的生日相同的機率比6成高一點而已，告訴我們「全部的日期至少有一人生日」的機率其實不高！\n\n### 其他人與你的生日相同的機率\n如果在看更仔細一點，對於「其他人與你的生日相同的機率」作圖會呈現下方的圖形\n![](https://i.imgur.com/DHu0F0g.png)\n\n因為生日是隨機的，因此在很大量數據測試下，我們可以期望共有365人的時候會出現第一個與自己生日相同日期的人！實際以亂數模擬，所得到的期望值次數與理論是相符的！\n![](https://i.imgur.com/UdjoCdI.png)\n```cpp=\n#include <bits/stdc++.h>\nusing namespace std;\nbool birthday[400];\n\nint main(){\n    srand((unsigned)time(NULL));\n    int sum = 0,t = 5000000,times = t;\n\n    while(times--){\n        memset(birthday,0,sizeof(birthday));\n        int target = rand()%365,ind=0;\n        for(int i=0;;i++){\n            ind = rand()%365;\n            if(target==ind){\n                sum+=i+1;\n                break;\n            }\n            else birthday[ind] = 1;\n        }\n    }\n    cout<<fixed<<setprecision(4);\n    cout<<\"平均於第：\"<<(double)sum/t<<\"次\"<<endl<<\"會出現第一個與自己生日相同的人\"<<endl;\n}\n```\n\n## 至少k個人生日相同機率\n\n對於至少k人生日相同的機率要大於50%，需要的人數如下表：\n![](https://i.imgur.com/Nwpe6aH.jpg)\n用程式驗證看看：\n\n\n| k   | 共N人 | 機率     |\n|:--- |:----- |:-------- |\n| 2   | 23    | 0.506949 |\n| 3   | 88    | 0.511169 |\n| 4   | 187   | 0.502883 |\n| 5   | 313   | 0.501057 |\n| 6   | 460   | 0.502686 |\n| 7   | 623   | 0.503298 |\n| 8   | 798   | 0.500304 |\n| 9   | 985   | 0.501191 |\n| 10  | 1181  | 0.500178 |\n\n根據[這一篇](https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.370.8298&rep=rep1&type=pdf)提供的公式，在$k≤20$的情況下$n\\cong47(k-1.5)^{\\frac{3}{2}}$，這是這篇作者把k還是很小的時候進行近似，但實際的公式我還不是很了解:cry:\n\n```cpp=\n#include <bits/stdc++.h>\nusing namespace std;\nint birthday[400],power[1000];\n\nint main(){\n    srand((unsigned)time(NULL));\n    int sum = 0,t = 10000000,times = t;\n    int arr[10] = {23,88,187,313,460,623,798,985,1181};\n\n    for(int j=0;j<9;j++){\n        times = t;sum = 0;\n        while(times--){\n            memset(birthday,0,sizeof(birthday));\n            for(int i=0;i<arr[j];i++){\n                int ind = rand()%365;\n                birthday[ind]+=1;\n                if(birthday[ind]>=j+2){\n                    sum+=1;\n                    break;\n                }\n            }\n        }\n        cout<<fixed<<setprecision(7);\n        cout<<(double)sum/t<<endl;\n    }\n}\n```\n\n## 機率證明\n\n### 公式推討\n生日問題可以理解成：<font color=\"#f00\">至少兩人生日相同的機率</font> 這個問題，而否定這個問題即為：「沒有人生日相同的機率」。因為這兩個事件的聯集即為樣本空間，可以用扣的方式得到答案！\n\n對於房間裡有n人的情況，定義 $p(n)$ 為「至少兩人生日相同的機率」、$p'(n)$ 為「沒有人生日相同的機率」，在不考慮特殊強況（閏年等），並假設生日會平均分佈的狀況下：\n$$\\begin{split}p(n)&=1-p'(n) \\\\&= 1-(1\\times\\frac{364}{365}\\times\\frac{363}{365}\\times\\cdots\\frac{365-(n-1)}{365})\\\\\\\\&=1-\\frac{365!}{365^n\\cdot(365-n)!}\\end{split}$$\n簡單解釋一下，對於每一個加入房間的人都有365種可能，因此分母皆為365；對於第i個加入的人要避開前i-1個人的生日，因此分子為365-(i-1)。經過整理可以得到這個有階乘又有次方的很難看的一個公式！:neutral_face:\n\n這時候我們可以引入泰勒公式：\n$$\\begin{split}e^x&=\\sum_{k=0}^\\infty\\frac{x^k}{k!}=1+\\frac{x^1}{1!}+\\frac{x^2}{2!}+\\frac{x^3}{3!}\\cdots\\end{split}$$\n為什麼要引入這個公式？是因為我們想要構造出上面機率計算中的每一項 $1-\\frac{x}{365}$ ，因為泰勒公式是一個無窮級數，我們可以適度的做一些取捨，例如只取第一項與第二項（在下去都是小數點4,5位以上了)，得到以下：\n$$e^x\\cong1+x\\to e^{-\\frac{x}{365}}\\cong1-\\frac{x}{365}$$\n接著就可以把每一項替換成多項式的型態：\n$$\\begin{split}p'(n)&=1\\times\\frac{364}{365}\\times\\frac{363}{365}\\times\\cdots\\frac{365-n+1}{365}\\\\&\\cong1\\times e^{-\\frac{1}{365}}\\times e^{-\\frac{2}{365}}\\times\\cdots\\times e^{-\\frac{n-1}{365}}\\\\&=e^{-\\frac{1+2+\\cdots+(n-1)}{365}}\\\\&=e^{-\\frac{n(n-1)/2}{365}}\\\\&=e^{-\\frac{n^2-n}{730}}\\end{split}$$\n\n接著就可以算出正確的機率了！\n$$\\begin{split}p(n) &= 1-p'(n)\\\\&\\cong1-e^{-\\frac{n^2-n}{730}}\\end{split}$$\n\n### 實際機率\n我利用程式實際運算求出機率，並跟公式解做比較如下：\n![](https://i.imgur.com/NEJMnOa.png)\n發現到誤差會隨著人數增加而有變大的趨勢，不過都是在小數點後三位的事情，誤差不到1%，所以公式解其實是可以用的！其實可以觀察到一個現象，對於$p'(n)$的理論解都會比實際值高，因為多加了幾項被我們省略掉的數字，因此計算出來的公式解會比實際機率低一些！\n\n\n## 生日攻擊\n生日攻擊就是利用生日問題的特性在 $\\sqrt{H}$ 的時間暴力破解找出碰撞。[Google破解SHA1實現碰撞攻擊](https://www.thenewslens.com/article/62378)，如果有人可以讓兩個不同的檔案得出相同雜湊值，讓攻擊者可能偷偷把惡意的程式碼放進檔案，但得出來的雜湊值跟原本的檔案一樣，使人在沒有防備的情況下誤以為危險檔案安全，這可以達到生日攻擊（也就是找到碰撞）\n\n### 雜湊演算法\n最近有學雜湊相關東西，那剛好生日問題其實跟雜湊很有關係，因為生日可以被當作雜雜湊空間大小，空間越大雖然消耗記憶體較大但發生碰撞的機會會越小。換作是雜湊演算法中，我們想要討論的就是開的空間大小與發生碰撞的嘗試次數的關係。\n\n首先計算生日問題人數的期望值，也就是在加入第幾個人之後，會發生有兩人生日同一天的情況，以下為模擬的情形：\n![](https://i.imgur.com/m6Wiwdh.png)\n透過公式的計算，可以得到不同人數對應到的機率，假設共i人的情況下機率為f(i)，則f(i)-f(i-1)為加入第i人時恰好有人生日相同的機率，就可以根據期望值的公式算出期望在共有幾人時發生碰撞。以下是計算結果：\n![](https://i.imgur.com/mnyAbWk.png)\n兩者的誤差極小，可以推論出在平均約在加入第24.617個人的時候會發生碰撞！\n\n我們已經計算出對於n人的情況下任兩人生日相同的機率，這時候可以推廣到不只是365天，也就代表在雜湊空間大小為d的時候發生碰撞的機率如下：\n$$\\begin{split}p(n) &= 1-p'(n)\\\\p(n,d)&\\cong1-e^{-\\frac{n^2-n}{2d}}\\end{split}$$\n\n因此我寫了一個實際模擬的程式跟這個公式模擬的結果做比較，根據空間大小分別為365與1000做討論，結果如下：\n![](https://i.imgur.com/3nuhPHI.png)\n![](https://i.imgur.com/fKVI4QB.png)\n\n由模擬的結果可以看出，若一年有1000天（假設而已！）則在38個人的團體中任兩人生日同天的機率已經超過50%，跟直覺相差挺大的！\n\n### 給定機率預測最多數量\n\n在上面的做法是人數計算機率，可以換一個方式，給定碰撞機率求最多的人數為多少。可以從上面的公式來推，以下n,H分別代表數量與空間大小：\n$$\\begin{split}p(n,H)&\\cong1-e^{-\\frac{n^2-n}{2H}}\\cong1-e^{-\\frac{n^2}{2H}}\\\\&\\to e^{-\\frac{n^2}{2H}}=1-p\\\\&\\to e^{\\frac{n^2}{2H}}\\frac{1}{1-p}\\\\&\\to\\frac{n^2}{2H}=\\ln\\frac{1}{1-p}\\\\&\\to n(p,H)\\cong \\sqrt{2H\\ln\\frac{1}{1-p}}\\end{split}$$\n\n因為我們把$n^2-n$當成$n^2$，所以在小範圍估計的時候會有比較大的誤差，不過當n很大的時候，量級就會是$n^2$，因此可以忽略一次方的$n$\n\n### 首次碰撞的期望值次數\n在上面有做一次期望值的估計，不過過程蠻麻煩的，要先算出每一個數量機率的差，再乘上數量並加總。這邊有一個公式是提供在範圍很大時的一個估計公式：\n\n$$Q(H)\\cong\\sqrt{\\frac{\\pi}{2}H}$$\n\n這導出一個重要的結論：對於n位密碼共有$2^n$種可能組合，確僅僅需要期望$2^{\\frac{n}{2}}$次嘗試就可以遇到碰撞！以下嘗試H=800000筆與H=1500000筆數據，會有一點誤差，可能的原因是測試的樣本數不夠(100萬次)\n\n![](https://i.imgur.com/z5Z0cvr.png)\n![](https://i.imgur.com/Xh0yowN.png)\n\n### 程式碼\n實作的概念就是開一個$O(n)$的陣列紀錄，如果遇到之前出現過的就記錄下來\n```cpp=\n#include <bits/stdc++.h>\n#define ios ios::sync_with_stdio(0),cin.tie(0)\nusing namespace std;\nbool hash_map[2000006];\n\nint main(){\n    ios;\n    srand((unsigned)time(NULL));\n    int N,M;cin>>N>>M;\t//N筆輸入,空間大小M\n    int t = 1000000;\n    int times = t,sum = 0;\n\n    while(times--){\n        memset(hash_map,0,sizeof(hash_map));\n        for(int i=0;i<N;i++){\n            int temp = rand()%M;\n            if(hash_map[temp]==0)hash_map[temp] = 1;\n            else{\n                sum+=i;\n                break;\n            }\n        }\n    }\n    cout<<fixed<<setprecision(6);\n    cout<<\"對於輸入筆數共有：\"<<N<<\"、空間大小為：\"<<M<<endl<<\"第一次發生碰撞次數平均值為：\"<<(double)sum/t<<endl;\n    cout<<\"理論預測次數：\"<<sqrt(M_PI_2*M)<<endl;\n    //\tcout<<\"理論預測：\"<<1-exp(-(N*(N-1)/(double)(2*M)))<<endl;\n}\n```\n\n## Cheryl's birthday\n這一題跟生日問題沒啥關係，但既然都提到「生日」，就來看一題有趣的\n> 艾伯特和柏納剛認識雪莉兒，想要知道雪莉兒的生日，雪莉兒列出了十個可能的日期：\n> 5月15日、5月16日、5月19日、6月17日\n> 6月18日、7月14日、7月16日、8月14日\n> 8月15日、8月17日\n接著雪莉兒分別告訴艾伯特及柏納她生日的月及日，以下是艾伯特和柏納的回應\n> \n> 艾伯特：我不知道雪莉兒的生日是哪一天，但我知道柏納也不知道\n> 柏納：一開始我不知道雪莉兒的生日，但現在我知道了\n> 艾伯特：那我也知道雪莉兒的生日了\n> 請問雪莉兒的生日是那一天？\n\n> [註：艾伯特的第一句話他確定柏納100%不知道生日是哪一天]\n\n解答點此：\n![](https://i.imgur.com/FxwNYkb.png =400x)\n\n1. 第一句話中，柏納若要知道明確的生日日期，唯一的可能是生日日期的日在十個可能日期中只出現過一次，也就是18日和19日。但艾伯特說<font color=\"#f00\">他知道柏納也不知道生日是哪一天</font>，因此可以可以排除5月和6月的所有日期（如果是5月或6月有一定的機會艾伯特無法確定柏納不知道是哪一天）\n\n2. 根據第一句話柏納可以推測月份是7月或8月，而他已經知道生日是哪一天，表示他知道的日是在7月或8月中只出現過一次的日，因此可以排除7月及8月可能生日中都有出現的14日，柏納知道的日可能是15日、16日或17日。\n\n3. 目前還有可能的生日是7月16日、8月15日及8月17日，而艾伯特在聽完第二句話就可以知道生日是哪一天，表示他知道的月份在7月16日、8月15日及8月17日中只出現一次。因此他知道的月份是7月，生日是7月16日。\n\n<font color=\"#f00\">答案是7月16日。</font>\n\n\n這一題跟生日問題其實沒什麼關係，就當作是一個「生日」有關的有趣邏輯推理的題目吧！\n\n## 結論\n整理以上提到的公式吧\n### 已知人數推算機率\n$$\\begin{split}p(n)&=1-\\frac{365!}{365^n\\cdot(365-n)!}\\end{split}$$\n$$\\begin{split}p(n) \\cong1-e^{-\\frac{n^2-n}{730}}\\end{split}$$\n\n### 已知機率預測數量（也就是人數）\n$$\\begin{split}n(p,H)\\cong \\sqrt{2H\\ln\\frac{1}{1-p}}\\end{split}$$\n\n### 首次碰撞的期望值\n$$Q(H)\\cong\\sqrt{\\frac{\\pi}{2}H}$$\n\n沒想到生日問題可以衍伸出如此多、如此繁雜的數學公式，不僅僅是數學領域，在資安上面也扮演了一個非常重要的角色，也就是雜湊空間為H的時，根據公式我們可以期望在$\\sqrt{H}$的嘗試內找到碰撞，也就是所謂的Birthday Attack！\n\n## 附錄\n### 一些數學證明\n![](https://i.imgur.com/eKXfAI7.jpg =400x)\n### 參考資料\n[密碼學系列之：生日攻擊](https://iter01.com/603052.html)\n[維基百科：生日問題](https://zh.wikipedia.org/wiki/%E7%94%9F%E6%97%A5%E5%95%8F%E9%A1%8C)\n[Diaconis and Mosteller 1989 - methods for studying coincidences](https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.370.8298&rep=rep1&type=pdf)","slug":"生日問題","published":1,"updated":"2021-09-19T11:26:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvyspmhf000pmuyxf4gmeq1l","content":"<p>有同學問我生日問題的機率感覺蠻好玩的，決定好好研究一番。生日悖論其實不是一個悖論，只是有點違背直覺而已，並非數學中定義的悖論！這一篇會用蒙地卡羅模擬來進行與理論的比較</p>\n<h2 id=\"問題敘述\"><a href=\"#問題敘述\" class=\"headerlink\" title=\"問題敘述\"></a>問題敘述</h2><p>題目：一個房間要多少人，則兩個人的生日相同的機率要大於50%？</p>\n<p>答案是<font color=\"#f00\">23</font>人。<br><span id=\"more\"></span><br>如果想要看<a href=\"https://gist.github.com/peienwu/bd6edf34416f352ba97b94c67d5acb52\">1到100人有同一天的機率可以點這裡</a></p>\n<h2 id=\"機率與人數的關係\"><a href=\"#機率與人數的關係\" class=\"headerlink\" title=\"機率與人數的關係\"></a>機率與人數的關係</h2><h3 id=\"兩種理解方式\"><a href=\"#兩種理解方式\" class=\"headerlink\" title=\"兩種理解方式\"></a>兩種理解方式</h3><p>對於生日問題可能會有兩種理解方式：</p>\n<ol>\n<li>題意：<font color=\"#f00\">「23人之中兩兩之間存在生日相同」</font><br> 對於原本題目要闡述的意義可以列出以下數學式：<script type=\"math/tex; mode=display\">\\begin{split}p(n)&=1-p'(n) \\\\&= 1-(1\\times\\frac{364}{365}\\times\\frac{363}{365}\\times\\cdots\\frac{365-(n-1)}{365})\\end{split}</script></li>\n<li>錯誤理解：<font color=\"#f00\">「其他22人與你的生日相同的機率」</font><br> 這樣的理解會造成算出來的機率大為減少（用全部扣掉皆不相同）：<script type=\"math/tex; mode=display\">q(n) = 1-(\\frac{364}{365})^n</script></li>\n</ol>\n<p>有了以上兩個關係式，就可以進行圖表的繪製。x軸表示人數，y軸表示機率，可以看出來兩種理解方式會造成機率有很大的差別！<br><img src=\"https://i.imgur.com/NcIRKE7.png\" alt=\"\"></p>\n<p>畫圖程式碼：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">plt.title(<span class=\"string\">&quot;Possibility to Number of people&quot;</span>, fontsize=<span class=\"number\">20</span>) <span class=\"comment\">#圖表標題</span></span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&quot;Number of people&quot;</span>, fontsize=<span class=\"number\">16</span>) <span class=\"comment\">#x軸標題</span></span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&quot;Possibility&quot;</span>, fontsize=<span class=\"number\">16</span>) <span class=\"comment\">#y軸標題</span></span><br><span class=\"line\"></span><br><span class=\"line\">d = <span class=\"number\">1</span></span><br><span class=\"line\">p = <span class=\"number\">1</span></span><br><span class=\"line\">x = []</span><br><span class=\"line\">y1 = []</span><br><span class=\"line\">y2 = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">365</span>):</span><br><span class=\"line\">    y1.append(<span class=\"number\">1</span>-p)</span><br><span class=\"line\">    p = p*d</span><br><span class=\"line\">    d = d-(<span class=\"number\">1</span>/<span class=\"number\">365</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">365</span>,<span class=\"number\">400</span>):</span><br><span class=\"line\">    y1.append(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">d2 = <span class=\"number\">364</span>/<span class=\"number\">365</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">400</span>):</span><br><span class=\"line\">    x.append(i)</span><br><span class=\"line\">    y2.append(<span class=\"number\">1</span>-d2)</span><br><span class=\"line\">    d2 = d2*(<span class=\"number\">364</span>/<span class=\"number\">365</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.plot(x,y1,<span class=\"string\">&#x27;red&#x27;</span>,label=<span class=\"string\">&#x27;p(n)&#x27;</span>)</span><br><span class=\"line\">plt.plot(x,y2,<span class=\"string\">&#x27;blue&#x27;</span>,label=<span class=\"string\">&#x27;q(n)&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.legend(loc = <span class=\"string\">&#x27;upper left&#x27;</span>)</span><br><span class=\"line\">plt.show() <span class=\"comment\">#顯示繪製的圖形</span></span><br></pre></td></tr></table></figure></p>\n<p>這張圖表還可以告訴我們，任兩個人生日相同的機率很高，但相對的，即使有400個人，要有人跟你的生日相同的機率比6成高一點而已，告訴我們「全部的日期至少有一人生日」的機率其實不高！</p>\n<h3 id=\"其他人與你的生日相同的機率\"><a href=\"#其他人與你的生日相同的機率\" class=\"headerlink\" title=\"其他人與你的生日相同的機率\"></a>其他人與你的生日相同的機率</h3><p>如果在看更仔細一點，對於「其他人與你的生日相同的機率」作圖會呈現下方的圖形<br><img src=\"https://i.imgur.com/DHu0F0g.png\" alt=\"\"></p>\n<p>因為生日是隨機的，因此在很大量數據測試下，我們可以期望共有365人的時候會出現第一個與自己生日相同日期的人！實際以亂數模擬，所得到的期望值次數與理論是相符的！<br><img src=\"https://i.imgur.com/UdjoCdI.png\" alt=\"\"><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> birthday[<span class=\"number\">400</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">srand</span>((<span class=\"keyword\">unsigned</span>)<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>,t = <span class=\"number\">5000000</span>,times = t;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(times--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(birthday,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(birthday));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> target = <span class=\"built_in\">rand</span>()%<span class=\"number\">365</span>,ind=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;;i++)&#123;</span><br><span class=\"line\">            ind = <span class=\"built_in\">rand</span>()%<span class=\"number\">365</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(target==ind)&#123;</span><br><span class=\"line\">                sum+=i+<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> birthday[ind] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;平均於第：&quot;</span>&lt;&lt;(<span class=\"keyword\">double</span>)sum/t&lt;&lt;<span class=\"string\">&quot;次&quot;</span>&lt;&lt;endl&lt;&lt;<span class=\"string\">&quot;會出現第一個與自己生日相同的人&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"至少k個人生日相同機率\"><a href=\"#至少k個人生日相同機率\" class=\"headerlink\" title=\"至少k個人生日相同機率\"></a>至少k個人生日相同機率</h2><p>對於至少k人生日相同的機率要大於50%，需要的人數如下表：<br><img src=\"https://i.imgur.com/Nwpe6aH.jpg\" alt=\"\"><br>用程式驗證看看：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">k</th>\n<th style=\"text-align:left\">共N人</th>\n<th style=\"text-align:left\">機率</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">23</td>\n<td style=\"text-align:left\">0.506949</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">88</td>\n<td style=\"text-align:left\">0.511169</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">187</td>\n<td style=\"text-align:left\">0.502883</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">313</td>\n<td style=\"text-align:left\">0.501057</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">460</td>\n<td style=\"text-align:left\">0.502686</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\">623</td>\n<td style=\"text-align:left\">0.503298</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">798</td>\n<td style=\"text-align:left\">0.500304</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\">985</td>\n<td style=\"text-align:left\">0.501191</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">1181</td>\n<td style=\"text-align:left\">0.500178</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>根據<a href=\"https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.370.8298&amp;rep=rep1&amp;type=pdf\">這一篇</a>提供的公式，在$k≤20$的情況下$n\\cong47(k-1.5)^{\\frac{3}{2}}$，這是這篇作者把k還是很小的時候進行近似，但實際的公式我還不是很了解:cry:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> birthday[<span class=\"number\">400</span>],power[<span class=\"number\">1000</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">srand</span>((<span class=\"keyword\">unsigned</span>)<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>,t = <span class=\"number\">10000000</span>,times = t;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> arr[<span class=\"number\">10</span>] = &#123;<span class=\"number\">23</span>,<span class=\"number\">88</span>,<span class=\"number\">187</span>,<span class=\"number\">313</span>,<span class=\"number\">460</span>,<span class=\"number\">623</span>,<span class=\"number\">798</span>,<span class=\"number\">985</span>,<span class=\"number\">1181</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">9</span>;j++)&#123;</span><br><span class=\"line\">        times = t;sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(times--)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">memset</span>(birthday,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(birthday));</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;arr[j];i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> ind = <span class=\"built_in\">rand</span>()%<span class=\"number\">365</span>;</span><br><span class=\"line\">                birthday[ind]+=<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(birthday[ind]&gt;=j+<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                    sum+=<span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">7</span>);</span><br><span class=\"line\">        cout&lt;&lt;(<span class=\"keyword\">double</span>)sum/t&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"機率證明\"><a href=\"#機率證明\" class=\"headerlink\" title=\"機率證明\"></a>機率證明</h2><h3 id=\"公式推討\"><a href=\"#公式推討\" class=\"headerlink\" title=\"公式推討\"></a>公式推討</h3><p>生日問題可以理解成：<font color=\"#f00\">至少兩人生日相同的機率</font> 這個問題，而否定這個問題即為：「沒有人生日相同的機率」。因為這兩個事件的聯集即為樣本空間，可以用扣的方式得到答案！</p>\n<p>對於房間裡有n人的情況，定義 $p(n)$ 為「至少兩人生日相同的機率」、$p’(n)$ 為「沒有人生日相同的機率」，在不考慮特殊強況（閏年等），並假設生日會平均分佈的狀況下：</p>\n<script type=\"math/tex; mode=display\">\\begin{split}p(n)&=1-p'(n) \\\\&= 1-(1\\times\\frac{364}{365}\\times\\frac{363}{365}\\times\\cdots\\frac{365-(n-1)}{365})\\\\\\\\&=1-\\frac{365!}{365^n\\cdot(365-n)!}\\end{split}</script><p>簡單解釋一下，對於每一個加入房間的人都有365種可能，因此分母皆為365；對於第i個加入的人要避開前i-1個人的生日，因此分子為365-(i-1)。經過整理可以得到這個有階乘又有次方的很難看的一個公式！:neutral_face:</p>\n<p>這時候我們可以引入泰勒公式：</p>\n<script type=\"math/tex; mode=display\">\\begin{split}e^x&=\\sum_{k=0}^\\infty\\frac{x^k}{k!}=1+\\frac{x^1}{1!}+\\frac{x^2}{2!}+\\frac{x^3}{3!}\\cdots\\end{split}</script><p>為什麼要引入這個公式？是因為我們想要構造出上面機率計算中的每一項 $1-\\frac{x}{365}$ ，因為泰勒公式是一個無窮級數，我們可以適度的做一些取捨，例如只取第一項與第二項（在下去都是小數點4,5位以上了)，得到以下：</p>\n<script type=\"math/tex; mode=display\">e^x\\cong1+x\\to e^{-\\frac{x}{365}}\\cong1-\\frac{x}{365}</script><p>接著就可以把每一項替換成多項式的型態：</p>\n<script type=\"math/tex; mode=display\">\\begin{split}p'(n)&=1\\times\\frac{364}{365}\\times\\frac{363}{365}\\times\\cdots\\frac{365-n+1}{365}\\\\&\\cong1\\times e^{-\\frac{1}{365}}\\times e^{-\\frac{2}{365}}\\times\\cdots\\times e^{-\\frac{n-1}{365}}\\\\&=e^{-\\frac{1+2+\\cdots+(n-1)}{365}}\\\\&=e^{-\\frac{n(n-1)/2}{365}}\\\\&=e^{-\\frac{n^2-n}{730}}\\end{split}</script><p>接著就可以算出正確的機率了！</p>\n<script type=\"math/tex; mode=display\">\\begin{split}p(n) &= 1-p'(n)\\\\&\\cong1-e^{-\\frac{n^2-n}{730}}\\end{split}</script><h3 id=\"實際機率\"><a href=\"#實際機率\" class=\"headerlink\" title=\"實際機率\"></a>實際機率</h3><p>我利用程式實際運算求出機率，並跟公式解做比較如下：<br><img src=\"https://i.imgur.com/NEJMnOa.png\" alt=\"\"><br>發現到誤差會隨著人數增加而有變大的趨勢，不過都是在小數點後三位的事情，誤差不到1%，所以公式解其實是可以用的！其實可以觀察到一個現象，對於$p’(n)$的理論解都會比實際值高，因為多加了幾項被我們省略掉的數字，因此計算出來的公式解會比實際機率低一些！</p>\n<h2 id=\"生日攻擊\"><a href=\"#生日攻擊\" class=\"headerlink\" title=\"生日攻擊\"></a>生日攻擊</h2><p>生日攻擊就是利用生日問題的特性在 $\\sqrt{H}$ 的時間暴力破解找出碰撞。<a href=\"https://www.thenewslens.com/article/62378\">Google破解SHA1實現碰撞攻擊</a>，如果有人可以讓兩個不同的檔案得出相同雜湊值，讓攻擊者可能偷偷把惡意的程式碼放進檔案，但得出來的雜湊值跟原本的檔案一樣，使人在沒有防備的情況下誤以為危險檔案安全，這可以達到生日攻擊（也就是找到碰撞）</p>\n<h3 id=\"雜湊演算法\"><a href=\"#雜湊演算法\" class=\"headerlink\" title=\"雜湊演算法\"></a>雜湊演算法</h3><p>最近有學雜湊相關東西，那剛好生日問題其實跟雜湊很有關係，因為生日可以被當作雜雜湊空間大小，空間越大雖然消耗記憶體較大但發生碰撞的機會會越小。換作是雜湊演算法中，我們想要討論的就是開的空間大小與發生碰撞的嘗試次數的關係。</p>\n<p>首先計算生日問題人數的期望值，也就是在加入第幾個人之後，會發生有兩人生日同一天的情況，以下為模擬的情形：<br><img src=\"https://i.imgur.com/m6Wiwdh.png\" alt=\"\"><br>透過公式的計算，可以得到不同人數對應到的機率，假設共i人的情況下機率為f(i)，則f(i)-f(i-1)為加入第i人時恰好有人生日相同的機率，就可以根據期望值的公式算出期望在共有幾人時發生碰撞。以下是計算結果：<br><img src=\"https://i.imgur.com/mnyAbWk.png\" alt=\"\"><br>兩者的誤差極小，可以推論出在平均約在加入第24.617個人的時候會發生碰撞！</p>\n<p>我們已經計算出對於n人的情況下任兩人生日相同的機率，這時候可以推廣到不只是365天，也就代表在雜湊空間大小為d的時候發生碰撞的機率如下：</p>\n<script type=\"math/tex; mode=display\">\\begin{split}p(n) &= 1-p'(n)\\\\p(n,d)&\\cong1-e^{-\\frac{n^2-n}{2d}}\\end{split}</script><p>因此我寫了一個實際模擬的程式跟這個公式模擬的結果做比較，根據空間大小分別為365與1000做討論，結果如下：<br><img src=\"https://i.imgur.com/3nuhPHI.png\" alt=\"\"><br><img src=\"https://i.imgur.com/fKVI4QB.png\" alt=\"\"></p>\n<p>由模擬的結果可以看出，若一年有1000天（假設而已！）則在38個人的團體中任兩人生日同天的機率已經超過50%，跟直覺相差挺大的！</p>\n<h3 id=\"給定機率預測最多數量\"><a href=\"#給定機率預測最多數量\" class=\"headerlink\" title=\"給定機率預測最多數量\"></a>給定機率預測最多數量</h3><p>在上面的做法是人數計算機率，可以換一個方式，給定碰撞機率求最多的人數為多少。可以從上面的公式來推，以下n,H分別代表數量與空間大小：</p>\n<script type=\"math/tex; mode=display\">\\begin{split}p(n,H)&\\cong1-e^{-\\frac{n^2-n}{2H}}\\cong1-e^{-\\frac{n^2}{2H}}\\\\&\\to e^{-\\frac{n^2}{2H}}=1-p\\\\&\\to e^{\\frac{n^2}{2H}}\\frac{1}{1-p}\\\\&\\to\\frac{n^2}{2H}=\\ln\\frac{1}{1-p}\\\\&\\to n(p,H)\\cong \\sqrt{2H\\ln\\frac{1}{1-p}}\\end{split}</script><p>因為我們把$n^2-n$當成$n^2$，所以在小範圍估計的時候會有比較大的誤差，不過當n很大的時候，量級就會是$n^2$，因此可以忽略一次方的$n$</p>\n<h3 id=\"首次碰撞的期望值次數\"><a href=\"#首次碰撞的期望值次數\" class=\"headerlink\" title=\"首次碰撞的期望值次數\"></a>首次碰撞的期望值次數</h3><p>在上面有做一次期望值的估計，不過過程蠻麻煩的，要先算出每一個數量機率的差，再乘上數量並加總。這邊有一個公式是提供在範圍很大時的一個估計公式：</p>\n<script type=\"math/tex; mode=display\">Q(H)\\cong\\sqrt{\\frac{\\pi}{2}H}</script><p>這導出一個重要的結論：對於n位密碼共有$2^n$種可能組合，確僅僅需要期望$2^{\\frac{n}{2}}$次嘗試就可以遇到碰撞！以下嘗試H=800000筆與H=1500000筆數據，會有一點誤差，可能的原因是測試的樣本數不夠(100萬次)</p>\n<p><img src=\"https://i.imgur.com/z5Z0cvr.png\" alt=\"\"><br><img src=\"https://i.imgur.com/Xh0yowN.png\" alt=\"\"></p>\n<h3 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h3><p>實作的概念就是開一個$O(n)$的陣列紀錄，如果遇到之前出現過的就記錄下來<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> hash_map[<span class=\"number\">2000006</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios;</span><br><span class=\"line\">    <span class=\"built_in\">srand</span>((<span class=\"keyword\">unsigned</span>)<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N,M;cin&gt;&gt;N&gt;&gt;M;\t<span class=\"comment\">//N筆輸入,空間大小M</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> t = <span class=\"number\">1000000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> times = t,sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(times--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(hash_map,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(hash_map));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;N;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = <span class=\"built_in\">rand</span>()%M;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(hash_map[temp]==<span class=\"number\">0</span>)hash_map[temp] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                sum+=i;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;對於輸入筆數共有：&quot;</span>&lt;&lt;N&lt;&lt;<span class=\"string\">&quot;、空間大小為：&quot;</span>&lt;&lt;M&lt;&lt;endl&lt;&lt;<span class=\"string\">&quot;第一次發生碰撞次數平均值為：&quot;</span>&lt;&lt;(<span class=\"keyword\">double</span>)sum/t&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;理論預測次數：&quot;</span>&lt;&lt;<span class=\"built_in\">sqrt</span>(M_PI_2*M)&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"comment\">//\tcout&lt;&lt;&quot;理論預測：&quot;&lt;&lt;1-exp(-(N*(N-1)/(double)(2*M)))&lt;&lt;endl;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Cheryl’s-birthday\"><a href=\"#Cheryl’s-birthday\" class=\"headerlink\" title=\"Cheryl’s birthday\"></a>Cheryl’s birthday</h2><p>這一題跟生日問題沒啥關係，但既然都提到「生日」，就來看一題有趣的</p>\n<blockquote>\n<p>艾伯特和柏納剛認識雪莉兒，想要知道雪莉兒的生日，雪莉兒列出了十個可能的日期：<br>5月15日、5月16日、5月19日、6月17日<br>6月18日、7月14日、7月16日、8月14日<br>8月15日、8月17日<br>接著雪莉兒分別告訴艾伯特及柏納她生日的月及日，以下是艾伯特和柏納的回應</p>\n<p>艾伯特：我不知道雪莉兒的生日是哪一天，但我知道柏納也不知道<br>柏納：一開始我不知道雪莉兒的生日，但現在我知道了<br>艾伯特：那我也知道雪莉兒的生日了<br>請問雪莉兒的生日是那一天？</p>\n<p>[註：艾伯特的第一句話他確定柏納100%不知道生日是哪一天]</p>\n</blockquote>\n<p>解答點此：<br><img src=\"https://i.imgur.com/FxwNYkb.png =400x\" alt=\"\"></p>\n<ol>\n<li><p>第一句話中，柏納若要知道明確的生日日期，唯一的可能是生日日期的日在十個可能日期中只出現過一次，也就是18日和19日。但艾伯特說<font color=\"#f00\">他知道柏納也不知道生日是哪一天</font>，因此可以可以排除5月和6月的所有日期（如果是5月或6月有一定的機會艾伯特無法確定柏納不知道是哪一天）</p>\n</li>\n<li><p>根據第一句話柏納可以推測月份是7月或8月，而他已經知道生日是哪一天，表示他知道的日是在7月或8月中只出現過一次的日，因此可以排除7月及8月可能生日中都有出現的14日，柏納知道的日可能是15日、16日或17日。</p>\n</li>\n<li><p>目前還有可能的生日是7月16日、8月15日及8月17日，而艾伯特在聽完第二句話就可以知道生日是哪一天，表示他知道的月份在7月16日、8月15日及8月17日中只出現一次。因此他知道的月份是7月，生日是7月16日。</p>\n</li>\n</ol>\n<font color=\"#f00\">答案是7月16日。</font>\n\n\n<p>這一題跟生日問題其實沒什麼關係，就當作是一個「生日」有關的有趣邏輯推理的題目吧！</p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>整理以上提到的公式吧</p>\n<h3 id=\"已知人數推算機率\"><a href=\"#已知人數推算機率\" class=\"headerlink\" title=\"已知人數推算機率\"></a>已知人數推算機率</h3><script type=\"math/tex; mode=display\">\\begin{split}p(n)&=1-\\frac{365!}{365^n\\cdot(365-n)!}\\end{split}</script><script type=\"math/tex; mode=display\">\\begin{split}p(n) \\cong1-e^{-\\frac{n^2-n}{730}}\\end{split}</script><h3 id=\"已知機率預測數量（也就是人數）\"><a href=\"#已知機率預測數量（也就是人數）\" class=\"headerlink\" title=\"已知機率預測數量（也就是人數）\"></a>已知機率預測數量（也就是人數）</h3><script type=\"math/tex; mode=display\">\\begin{split}n(p,H)\\cong \\sqrt{2H\\ln\\frac{1}{1-p}}\\end{split}</script><h3 id=\"首次碰撞的期望值\"><a href=\"#首次碰撞的期望值\" class=\"headerlink\" title=\"首次碰撞的期望值\"></a>首次碰撞的期望值</h3><script type=\"math/tex; mode=display\">Q(H)\\cong\\sqrt{\\frac{\\pi}{2}H}</script><p>沒想到生日問題可以衍伸出如此多、如此繁雜的數學公式，不僅僅是數學領域，在資安上面也扮演了一個非常重要的角色，也就是雜湊空間為H的時，根據公式我們可以期望在$\\sqrt{H}$的嘗試內找到碰撞，也就是所謂的Birthday Attack！</p>\n<h2 id=\"附錄\"><a href=\"#附錄\" class=\"headerlink\" title=\"附錄\"></a>附錄</h2><h3 id=\"一些數學證明\"><a href=\"#一些數學證明\" class=\"headerlink\" title=\"一些數學證明\"></a>一些數學證明</h3><p><img src=\"https://i.imgur.com/eKXfAI7.jpg =400x\" alt=\"\"></p>\n<h3 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h3><p><a href=\"https://iter01.com/603052.html\">密碼學系列之：生日攻擊</a><br><a href=\"https://zh.wikipedia.org/wiki/%E7%94%9F%E6%97%A5%E5%95%8F%E9%A1%8C\">維基百科：生日問題</a><br><a href=\"https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.370.8298&amp;rep=rep1&amp;type=pdf\">Diaconis and Mosteller 1989 - methods for studying coincidences</a></p>\n","site":{"data":{}},"length":7283,"excerpt":"<p>有同學問我生日問題的機率感覺蠻好玩的，決定好好研究一番。生日悖論其實不是一個悖論，只是有點違背直覺而已，並非數學中定義的悖論！這一篇會用蒙地卡羅模擬來進行與理論的比較</p>\n<h2 id=\"問題敘述\"><a href=\"#問題敘述\" class=\"headerlink\" title=\"問題敘述\"></a>問題敘述</h2><p>題目：一個房間要多少人，則兩個人的生日相同的機率要大於50%？</p>\n<p>答案是<font color=\"#f00\">23</font>人。<br>","more":"<br>如果想要看<a href=\"https://gist.github.com/peienwu/bd6edf34416f352ba97b94c67d5acb52\">1到100人有同一天的機率可以點這裡</a></p>\n<h2 id=\"機率與人數的關係\"><a href=\"#機率與人數的關係\" class=\"headerlink\" title=\"機率與人數的關係\"></a>機率與人數的關係</h2><h3 id=\"兩種理解方式\"><a href=\"#兩種理解方式\" class=\"headerlink\" title=\"兩種理解方式\"></a>兩種理解方式</h3><p>對於生日問題可能會有兩種理解方式：</p>\n<ol>\n<li>題意：<font color=\"#f00\">「23人之中兩兩之間存在生日相同」</font><br> 對於原本題目要闡述的意義可以列出以下數學式：<script type=\"math/tex; mode=display\">\\begin{split}p(n)&=1-p'(n) \\\\&= 1-(1\\times\\frac{364}{365}\\times\\frac{363}{365}\\times\\cdots\\frac{365-(n-1)}{365})\\end{split}</script></li>\n<li>錯誤理解：<font color=\"#f00\">「其他22人與你的生日相同的機率」</font><br> 這樣的理解會造成算出來的機率大為減少（用全部扣掉皆不相同）：<script type=\"math/tex; mode=display\">q(n) = 1-(\\frac{364}{365})^n</script></li>\n</ol>\n<p>有了以上兩個關係式，就可以進行圖表的繪製。x軸表示人數，y軸表示機率，可以看出來兩種理解方式會造成機率有很大的差別！<br><img src=\"https://i.imgur.com/NcIRKE7.png\" alt=\"\"></p>\n<p>畫圖程式碼：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">plt.title(<span class=\"string\">&quot;Possibility to Number of people&quot;</span>, fontsize=<span class=\"number\">20</span>) <span class=\"comment\">#圖表標題</span></span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&quot;Number of people&quot;</span>, fontsize=<span class=\"number\">16</span>) <span class=\"comment\">#x軸標題</span></span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&quot;Possibility&quot;</span>, fontsize=<span class=\"number\">16</span>) <span class=\"comment\">#y軸標題</span></span><br><span class=\"line\"></span><br><span class=\"line\">d = <span class=\"number\">1</span></span><br><span class=\"line\">p = <span class=\"number\">1</span></span><br><span class=\"line\">x = []</span><br><span class=\"line\">y1 = []</span><br><span class=\"line\">y2 = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">365</span>):</span><br><span class=\"line\">    y1.append(<span class=\"number\">1</span>-p)</span><br><span class=\"line\">    p = p*d</span><br><span class=\"line\">    d = d-(<span class=\"number\">1</span>/<span class=\"number\">365</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">365</span>,<span class=\"number\">400</span>):</span><br><span class=\"line\">    y1.append(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">d2 = <span class=\"number\">364</span>/<span class=\"number\">365</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">400</span>):</span><br><span class=\"line\">    x.append(i)</span><br><span class=\"line\">    y2.append(<span class=\"number\">1</span>-d2)</span><br><span class=\"line\">    d2 = d2*(<span class=\"number\">364</span>/<span class=\"number\">365</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.plot(x,y1,<span class=\"string\">&#x27;red&#x27;</span>,label=<span class=\"string\">&#x27;p(n)&#x27;</span>)</span><br><span class=\"line\">plt.plot(x,y2,<span class=\"string\">&#x27;blue&#x27;</span>,label=<span class=\"string\">&#x27;q(n)&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.legend(loc = <span class=\"string\">&#x27;upper left&#x27;</span>)</span><br><span class=\"line\">plt.show() <span class=\"comment\">#顯示繪製的圖形</span></span><br></pre></td></tr></table></figure></p>\n<p>這張圖表還可以告訴我們，任兩個人生日相同的機率很高，但相對的，即使有400個人，要有人跟你的生日相同的機率比6成高一點而已，告訴我們「全部的日期至少有一人生日」的機率其實不高！</p>\n<h3 id=\"其他人與你的生日相同的機率\"><a href=\"#其他人與你的生日相同的機率\" class=\"headerlink\" title=\"其他人與你的生日相同的機率\"></a>其他人與你的生日相同的機率</h3><p>如果在看更仔細一點，對於「其他人與你的生日相同的機率」作圖會呈現下方的圖形<br><img src=\"https://i.imgur.com/DHu0F0g.png\" alt=\"\"></p>\n<p>因為生日是隨機的，因此在很大量數據測試下，我們可以期望共有365人的時候會出現第一個與自己生日相同日期的人！實際以亂數模擬，所得到的期望值次數與理論是相符的！<br><img src=\"https://i.imgur.com/UdjoCdI.png\" alt=\"\"><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> birthday[<span class=\"number\">400</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">srand</span>((<span class=\"keyword\">unsigned</span>)<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>,t = <span class=\"number\">5000000</span>,times = t;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(times--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(birthday,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(birthday));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> target = <span class=\"built_in\">rand</span>()%<span class=\"number\">365</span>,ind=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;;i++)&#123;</span><br><span class=\"line\">            ind = <span class=\"built_in\">rand</span>()%<span class=\"number\">365</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(target==ind)&#123;</span><br><span class=\"line\">                sum+=i+<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> birthday[ind] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;平均於第：&quot;</span>&lt;&lt;(<span class=\"keyword\">double</span>)sum/t&lt;&lt;<span class=\"string\">&quot;次&quot;</span>&lt;&lt;endl&lt;&lt;<span class=\"string\">&quot;會出現第一個與自己生日相同的人&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"至少k個人生日相同機率\"><a href=\"#至少k個人生日相同機率\" class=\"headerlink\" title=\"至少k個人生日相同機率\"></a>至少k個人生日相同機率</h2><p>對於至少k人生日相同的機率要大於50%，需要的人數如下表：<br><img src=\"https://i.imgur.com/Nwpe6aH.jpg\" alt=\"\"><br>用程式驗證看看：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">k</th>\n<th style=\"text-align:left\">共N人</th>\n<th style=\"text-align:left\">機率</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">23</td>\n<td style=\"text-align:left\">0.506949</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">88</td>\n<td style=\"text-align:left\">0.511169</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">187</td>\n<td style=\"text-align:left\">0.502883</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">313</td>\n<td style=\"text-align:left\">0.501057</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">460</td>\n<td style=\"text-align:left\">0.502686</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\">623</td>\n<td style=\"text-align:left\">0.503298</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">798</td>\n<td style=\"text-align:left\">0.500304</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\">985</td>\n<td style=\"text-align:left\">0.501191</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">1181</td>\n<td style=\"text-align:left\">0.500178</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>根據<a href=\"https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.370.8298&amp;rep=rep1&amp;type=pdf\">這一篇</a>提供的公式，在$k≤20$的情況下$n\\cong47(k-1.5)^{\\frac{3}{2}}$，這是這篇作者把k還是很小的時候進行近似，但實際的公式我還不是很了解:cry:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> birthday[<span class=\"number\">400</span>],power[<span class=\"number\">1000</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">srand</span>((<span class=\"keyword\">unsigned</span>)<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>,t = <span class=\"number\">10000000</span>,times = t;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> arr[<span class=\"number\">10</span>] = &#123;<span class=\"number\">23</span>,<span class=\"number\">88</span>,<span class=\"number\">187</span>,<span class=\"number\">313</span>,<span class=\"number\">460</span>,<span class=\"number\">623</span>,<span class=\"number\">798</span>,<span class=\"number\">985</span>,<span class=\"number\">1181</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">9</span>;j++)&#123;</span><br><span class=\"line\">        times = t;sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(times--)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">memset</span>(birthday,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(birthday));</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;arr[j];i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> ind = <span class=\"built_in\">rand</span>()%<span class=\"number\">365</span>;</span><br><span class=\"line\">                birthday[ind]+=<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(birthday[ind]&gt;=j+<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                    sum+=<span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">7</span>);</span><br><span class=\"line\">        cout&lt;&lt;(<span class=\"keyword\">double</span>)sum/t&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"機率證明\"><a href=\"#機率證明\" class=\"headerlink\" title=\"機率證明\"></a>機率證明</h2><h3 id=\"公式推討\"><a href=\"#公式推討\" class=\"headerlink\" title=\"公式推討\"></a>公式推討</h3><p>生日問題可以理解成：<font color=\"#f00\">至少兩人生日相同的機率</font> 這個問題，而否定這個問題即為：「沒有人生日相同的機率」。因為這兩個事件的聯集即為樣本空間，可以用扣的方式得到答案！</p>\n<p>對於房間裡有n人的情況，定義 $p(n)$ 為「至少兩人生日相同的機率」、$p’(n)$ 為「沒有人生日相同的機率」，在不考慮特殊強況（閏年等），並假設生日會平均分佈的狀況下：</p>\n<script type=\"math/tex; mode=display\">\\begin{split}p(n)&=1-p'(n) \\\\&= 1-(1\\times\\frac{364}{365}\\times\\frac{363}{365}\\times\\cdots\\frac{365-(n-1)}{365})\\\\\\\\&=1-\\frac{365!}{365^n\\cdot(365-n)!}\\end{split}</script><p>簡單解釋一下，對於每一個加入房間的人都有365種可能，因此分母皆為365；對於第i個加入的人要避開前i-1個人的生日，因此分子為365-(i-1)。經過整理可以得到這個有階乘又有次方的很難看的一個公式！:neutral_face:</p>\n<p>這時候我們可以引入泰勒公式：</p>\n<script type=\"math/tex; mode=display\">\\begin{split}e^x&=\\sum_{k=0}^\\infty\\frac{x^k}{k!}=1+\\frac{x^1}{1!}+\\frac{x^2}{2!}+\\frac{x^3}{3!}\\cdots\\end{split}</script><p>為什麼要引入這個公式？是因為我們想要構造出上面機率計算中的每一項 $1-\\frac{x}{365}$ ，因為泰勒公式是一個無窮級數，我們可以適度的做一些取捨，例如只取第一項與第二項（在下去都是小數點4,5位以上了)，得到以下：</p>\n<script type=\"math/tex; mode=display\">e^x\\cong1+x\\to e^{-\\frac{x}{365}}\\cong1-\\frac{x}{365}</script><p>接著就可以把每一項替換成多項式的型態：</p>\n<script type=\"math/tex; mode=display\">\\begin{split}p'(n)&=1\\times\\frac{364}{365}\\times\\frac{363}{365}\\times\\cdots\\frac{365-n+1}{365}\\\\&\\cong1\\times e^{-\\frac{1}{365}}\\times e^{-\\frac{2}{365}}\\times\\cdots\\times e^{-\\frac{n-1}{365}}\\\\&=e^{-\\frac{1+2+\\cdots+(n-1)}{365}}\\\\&=e^{-\\frac{n(n-1)/2}{365}}\\\\&=e^{-\\frac{n^2-n}{730}}\\end{split}</script><p>接著就可以算出正確的機率了！</p>\n<script type=\"math/tex; mode=display\">\\begin{split}p(n) &= 1-p'(n)\\\\&\\cong1-e^{-\\frac{n^2-n}{730}}\\end{split}</script><h3 id=\"實際機率\"><a href=\"#實際機率\" class=\"headerlink\" title=\"實際機率\"></a>實際機率</h3><p>我利用程式實際運算求出機率，並跟公式解做比較如下：<br><img src=\"https://i.imgur.com/NEJMnOa.png\" alt=\"\"><br>發現到誤差會隨著人數增加而有變大的趨勢，不過都是在小數點後三位的事情，誤差不到1%，所以公式解其實是可以用的！其實可以觀察到一個現象，對於$p’(n)$的理論解都會比實際值高，因為多加了幾項被我們省略掉的數字，因此計算出來的公式解會比實際機率低一些！</p>\n<h2 id=\"生日攻擊\"><a href=\"#生日攻擊\" class=\"headerlink\" title=\"生日攻擊\"></a>生日攻擊</h2><p>生日攻擊就是利用生日問題的特性在 $\\sqrt{H}$ 的時間暴力破解找出碰撞。<a href=\"https://www.thenewslens.com/article/62378\">Google破解SHA1實現碰撞攻擊</a>，如果有人可以讓兩個不同的檔案得出相同雜湊值，讓攻擊者可能偷偷把惡意的程式碼放進檔案，但得出來的雜湊值跟原本的檔案一樣，使人在沒有防備的情況下誤以為危險檔案安全，這可以達到生日攻擊（也就是找到碰撞）</p>\n<h3 id=\"雜湊演算法\"><a href=\"#雜湊演算法\" class=\"headerlink\" title=\"雜湊演算法\"></a>雜湊演算法</h3><p>最近有學雜湊相關東西，那剛好生日問題其實跟雜湊很有關係，因為生日可以被當作雜雜湊空間大小，空間越大雖然消耗記憶體較大但發生碰撞的機會會越小。換作是雜湊演算法中，我們想要討論的就是開的空間大小與發生碰撞的嘗試次數的關係。</p>\n<p>首先計算生日問題人數的期望值，也就是在加入第幾個人之後，會發生有兩人生日同一天的情況，以下為模擬的情形：<br><img src=\"https://i.imgur.com/m6Wiwdh.png\" alt=\"\"><br>透過公式的計算，可以得到不同人數對應到的機率，假設共i人的情況下機率為f(i)，則f(i)-f(i-1)為加入第i人時恰好有人生日相同的機率，就可以根據期望值的公式算出期望在共有幾人時發生碰撞。以下是計算結果：<br><img src=\"https://i.imgur.com/mnyAbWk.png\" alt=\"\"><br>兩者的誤差極小，可以推論出在平均約在加入第24.617個人的時候會發生碰撞！</p>\n<p>我們已經計算出對於n人的情況下任兩人生日相同的機率，這時候可以推廣到不只是365天，也就代表在雜湊空間大小為d的時候發生碰撞的機率如下：</p>\n<script type=\"math/tex; mode=display\">\\begin{split}p(n) &= 1-p'(n)\\\\p(n,d)&\\cong1-e^{-\\frac{n^2-n}{2d}}\\end{split}</script><p>因此我寫了一個實際模擬的程式跟這個公式模擬的結果做比較，根據空間大小分別為365與1000做討論，結果如下：<br><img src=\"https://i.imgur.com/3nuhPHI.png\" alt=\"\"><br><img src=\"https://i.imgur.com/fKVI4QB.png\" alt=\"\"></p>\n<p>由模擬的結果可以看出，若一年有1000天（假設而已！）則在38個人的團體中任兩人生日同天的機率已經超過50%，跟直覺相差挺大的！</p>\n<h3 id=\"給定機率預測最多數量\"><a href=\"#給定機率預測最多數量\" class=\"headerlink\" title=\"給定機率預測最多數量\"></a>給定機率預測最多數量</h3><p>在上面的做法是人數計算機率，可以換一個方式，給定碰撞機率求最多的人數為多少。可以從上面的公式來推，以下n,H分別代表數量與空間大小：</p>\n<script type=\"math/tex; mode=display\">\\begin{split}p(n,H)&\\cong1-e^{-\\frac{n^2-n}{2H}}\\cong1-e^{-\\frac{n^2}{2H}}\\\\&\\to e^{-\\frac{n^2}{2H}}=1-p\\\\&\\to e^{\\frac{n^2}{2H}}\\frac{1}{1-p}\\\\&\\to\\frac{n^2}{2H}=\\ln\\frac{1}{1-p}\\\\&\\to n(p,H)\\cong \\sqrt{2H\\ln\\frac{1}{1-p}}\\end{split}</script><p>因為我們把$n^2-n$當成$n^2$，所以在小範圍估計的時候會有比較大的誤差，不過當n很大的時候，量級就會是$n^2$，因此可以忽略一次方的$n$</p>\n<h3 id=\"首次碰撞的期望值次數\"><a href=\"#首次碰撞的期望值次數\" class=\"headerlink\" title=\"首次碰撞的期望值次數\"></a>首次碰撞的期望值次數</h3><p>在上面有做一次期望值的估計，不過過程蠻麻煩的，要先算出每一個數量機率的差，再乘上數量並加總。這邊有一個公式是提供在範圍很大時的一個估計公式：</p>\n<script type=\"math/tex; mode=display\">Q(H)\\cong\\sqrt{\\frac{\\pi}{2}H}</script><p>這導出一個重要的結論：對於n位密碼共有$2^n$種可能組合，確僅僅需要期望$2^{\\frac{n}{2}}$次嘗試就可以遇到碰撞！以下嘗試H=800000筆與H=1500000筆數據，會有一點誤差，可能的原因是測試的樣本數不夠(100萬次)</p>\n<p><img src=\"https://i.imgur.com/z5Z0cvr.png\" alt=\"\"><br><img src=\"https://i.imgur.com/Xh0yowN.png\" alt=\"\"></p>\n<h3 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h3><p>實作的概念就是開一個$O(n)$的陣列紀錄，如果遇到之前出現過的就記錄下來<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> hash_map[<span class=\"number\">2000006</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios;</span><br><span class=\"line\">    <span class=\"built_in\">srand</span>((<span class=\"keyword\">unsigned</span>)<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N,M;cin&gt;&gt;N&gt;&gt;M;\t<span class=\"comment\">//N筆輸入,空間大小M</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> t = <span class=\"number\">1000000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> times = t,sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(times--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(hash_map,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(hash_map));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;N;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = <span class=\"built_in\">rand</span>()%M;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(hash_map[temp]==<span class=\"number\">0</span>)hash_map[temp] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                sum+=i;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;對於輸入筆數共有：&quot;</span>&lt;&lt;N&lt;&lt;<span class=\"string\">&quot;、空間大小為：&quot;</span>&lt;&lt;M&lt;&lt;endl&lt;&lt;<span class=\"string\">&quot;第一次發生碰撞次數平均值為：&quot;</span>&lt;&lt;(<span class=\"keyword\">double</span>)sum/t&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;理論預測次數：&quot;</span>&lt;&lt;<span class=\"built_in\">sqrt</span>(M_PI_2*M)&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"comment\">//\tcout&lt;&lt;&quot;理論預測：&quot;&lt;&lt;1-exp(-(N*(N-1)/(double)(2*M)))&lt;&lt;endl;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Cheryl’s-birthday\"><a href=\"#Cheryl’s-birthday\" class=\"headerlink\" title=\"Cheryl’s birthday\"></a>Cheryl’s birthday</h2><p>這一題跟生日問題沒啥關係，但既然都提到「生日」，就來看一題有趣的</p>\n<blockquote>\n<p>艾伯特和柏納剛認識雪莉兒，想要知道雪莉兒的生日，雪莉兒列出了十個可能的日期：<br>5月15日、5月16日、5月19日、6月17日<br>6月18日、7月14日、7月16日、8月14日<br>8月15日、8月17日<br>接著雪莉兒分別告訴艾伯特及柏納她生日的月及日，以下是艾伯特和柏納的回應</p>\n<p>艾伯特：我不知道雪莉兒的生日是哪一天，但我知道柏納也不知道<br>柏納：一開始我不知道雪莉兒的生日，但現在我知道了<br>艾伯特：那我也知道雪莉兒的生日了<br>請問雪莉兒的生日是那一天？</p>\n<p>[註：艾伯特的第一句話他確定柏納100%不知道生日是哪一天]</p>\n</blockquote>\n<p>解答點此：<br><img src=\"https://i.imgur.com/FxwNYkb.png =400x\" alt=\"\"></p>\n<ol>\n<li><p>第一句話中，柏納若要知道明確的生日日期，唯一的可能是生日日期的日在十個可能日期中只出現過一次，也就是18日和19日。但艾伯特說<font color=\"#f00\">他知道柏納也不知道生日是哪一天</font>，因此可以可以排除5月和6月的所有日期（如果是5月或6月有一定的機會艾伯特無法確定柏納不知道是哪一天）</p>\n</li>\n<li><p>根據第一句話柏納可以推測月份是7月或8月，而他已經知道生日是哪一天，表示他知道的日是在7月或8月中只出現過一次的日，因此可以排除7月及8月可能生日中都有出現的14日，柏納知道的日可能是15日、16日或17日。</p>\n</li>\n<li><p>目前還有可能的生日是7月16日、8月15日及8月17日，而艾伯特在聽完第二句話就可以知道生日是哪一天，表示他知道的月份在7月16日、8月15日及8月17日中只出現一次。因此他知道的月份是7月，生日是7月16日。</p>\n</li>\n</ol>\n<font color=\"#f00\">答案是7月16日。</font>\n\n\n<p>這一題跟生日問題其實沒什麼關係，就當作是一個「生日」有關的有趣邏輯推理的題目吧！</p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>整理以上提到的公式吧</p>\n<h3 id=\"已知人數推算機率\"><a href=\"#已知人數推算機率\" class=\"headerlink\" title=\"已知人數推算機率\"></a>已知人數推算機率</h3><script type=\"math/tex; mode=display\">\\begin{split}p(n)&=1-\\frac{365!}{365^n\\cdot(365-n)!}\\end{split}</script><script type=\"math/tex; mode=display\">\\begin{split}p(n) \\cong1-e^{-\\frac{n^2-n}{730}}\\end{split}</script><h3 id=\"已知機率預測數量（也就是人數）\"><a href=\"#已知機率預測數量（也就是人數）\" class=\"headerlink\" title=\"已知機率預測數量（也就是人數）\"></a>已知機率預測數量（也就是人數）</h3><script type=\"math/tex; mode=display\">\\begin{split}n(p,H)\\cong \\sqrt{2H\\ln\\frac{1}{1-p}}\\end{split}</script><h3 id=\"首次碰撞的期望值\"><a href=\"#首次碰撞的期望值\" class=\"headerlink\" title=\"首次碰撞的期望值\"></a>首次碰撞的期望值</h3><script type=\"math/tex; mode=display\">Q(H)\\cong\\sqrt{\\frac{\\pi}{2}H}</script><p>沒想到生日問題可以衍伸出如此多、如此繁雜的數學公式，不僅僅是數學領域，在資安上面也扮演了一個非常重要的角色，也就是雜湊空間為H的時，根據公式我們可以期望在$\\sqrt{H}$的嘗試內找到碰撞，也就是所謂的Birthday Attack！</p>\n<h2 id=\"附錄\"><a href=\"#附錄\" class=\"headerlink\" title=\"附錄\"></a>附錄</h2><h3 id=\"一些數學證明\"><a href=\"#一些數學證明\" class=\"headerlink\" title=\"一些數學證明\"></a>一些數學證明</h3><p><img src=\"https://i.imgur.com/eKXfAI7.jpg =400x\" alt=\"\"></p>\n<h3 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h3><p><a href=\"https://iter01.com/603052.html\">密碼學系列之：生日攻擊</a><br><a href=\"https://zh.wikipedia.org/wiki/%E7%94%9F%E6%97%A5%E5%95%8F%E9%A1%8C\">維基百科：生日問題</a><br><a href=\"https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.370.8298&amp;rep=rep1&amp;type=pdf\">Diaconis and Mosteller 1989 - methods for studying coincidences</a></p>"},{"title":"錯排問題（Derangements）","date":"2021-07-09T16:00:00.000Z","mathjax":true,"_content":"\n## 定義\n錯排問題是組合數學中的問題之一。考慮一個有n個元素的排列，若一個排列中<font color=\"#f00\">所有的元素都不在自己原來的位置上</font>，那麼這樣的排列就稱為原排列的一個錯排。\nn個元素的錯排數記為$D_n$或$!n$。 研究一個排列錯排個數的問題，叫做錯排問題或稱為更列問題。\n<!-- more -->\n## 規律與公式\n\n### 反面枚舉\n前幾項可以用取捨原理（或窮舉所有可能）求得：\n$$D_1 = 0 \\\\ D_2 = 1\\\\D_3 = 2 \\\\ D_4 = 9$$\n\n{% note default %}\n**三個元素的錯排，以下共兩種：**\n![](https://i.imgur.com/24cJS8t.png =500x)\n\n**四個元素的錯排，以下共9種：**\n> 4123\n> 3421\n> 3142\n> 4312\n> 2413\n> 2341\n> 4321\n> 3412\n> 2143\n{% endnote %}\n\n如下面的文氏圖可以看到，以三個元素的錯排為例，我們要求的就是綠色區域的數量，透過排容原理（取捨原理）來算。\n![](https://i.imgur.com/4cSFDiw.png =400x)\n$$\\begin{split}D_3 = 3!-C^3_1\\cdot2!+C^3_2\\cdot1!-C^3_3\\cdot0! =2\\end{split}$$\n如果要求 $!4$ 也是一樣的作法：\n$$D_4 = 4!-C^4_1\\cdot3!+C^4_2\\cdot2!-C^4_3\\cdot1!+C^4_4\\cdot0! = 9$$\n\n這邊可以觀察到一個重要的規律，階乘的遞減、C取的數字遞增以及正負交替，這些性質會被用在等一下的一般化推導！\n\n\n### 遞迴解\n第一個公式是高中數學利用遞迴的概念得到的：\n$$D_n=(n-1)(D_{n-1}+D_{n-2})$$\n\n{% note success %}\n**證明：**\n在原本 $n-1$ 個元素當中取一個元素跟新加入的元素（第n個元素）做交換，共有$C^{n-1}_1$ 種取法，假設取到的元素是K，則K有以下兩種情況：\n1. K本身即不在原本的位置上，跟新加入的元素調換亦是錯排\n2. K在原本的位置上，跟新加入的元素調換後形成錯排\n![](https://i.imgur.com/k7l4Srr.png)\n\n\n綜合以上兩種狀況，可以推得上面的公式 \n{% endnote %}\n\n第二個是維基百科上面的公式：\n$$D_n = nD_{n-1}+(-1)^n$$\n這一個公式可以由等一下的一般式的公式（下面的公式解）推討過來：\n$$\\begin{split}D_n&=n!\\sum_{k=0}^{n}\\frac{(-1)^k}{k!}\\\\&=n(n-1)!\\sum_{k=0}^{n-1}\\frac{(-1)^k}{k!}+n!\\cdot\\frac{(-1)^n}{n!}\\\\&=nD_{n-1}+(-1)^n\\end{split}$$\n\n用這兩個遞迴式可以推得第n項的數值，不過時間複雜度依然是$O(n)$，想要求得的是$O(1)$的公式解\n\n### 公式解\n公式解可以利用取捨原理求得，寫成一般化的形式。對於第n項的錯排數可以利用之前觀察到排容原理的規律整理出以下式子：\n$$\\begin{split}D_n&=n!-C^n_1(n-1)!+C^n_2(n-2)!-\\cdots+C^n_n0!\\\\&=\\sum^n_{k=0}C^n_k(n-k)!\\cdot(-1)^k\\\\&=\\sum_{k=0}^{n}\\frac{n!}{k!(n-k)!}\\cdot(n-k)!\\cdot(-1)^k\\\\&=n!\\sum^{n}_{k=0}\\frac{(-1)^k}{k!}\\end{split}$$\n\n這個就是錯排數的一般化公式，如果想要把sigma消掉，還可以用以下處理：\n$$\\begin{split}D_n&=n!\\sum^{n}_{k=0}\\frac{(-1)^k}{k!}\\\\&=n![1-\\frac{1}{1!}+\\frac{1}{2!}-\\cdots+(-1)^n\\frac{1}{n!}]\\end{split}$$\n\n根據泰勒公式（$R_n$為修正項）\n$$\\begin{split}e^{-1}&=1+\\frac{(-1)^1}{1!}+\\frac{(-1)^2}{2!}+\\cdots+(-1)^n\\frac{1}{n!}+R(n)\\\\&=[1-\\frac{1}{1!}+\\frac{1}{2!}-\\cdots+(-1)^n\\frac{1}{n!}]+R(n)\\end{split}$$\n\n因為泰勒公式，中括號內的數值在n越大時會越接近$e^{-1}$，因此可以改寫成以下式子：\n$$\\begin{split}D_n \\cong n!\\cdot e^{-1}\\to\\frac{D_n}{n!}\\cong e^{-1}\\end{split}$$\n\n這就是n樣物品錯排的機率，那因為這只是近似值，由於正負交替，數值會在$e^{-1}$ 的地方震盪。為了要求出確切的$D_n$的解，我們要在後面加上一個修正項（泰勒展開餘項$R_n$），經過整理發現這個餘項 $\\frac{1}{n+1}$ 會嚴格小於 $0.5$，因此得到以下的一般項公式：\n$$D_n=\\lfloor\\frac{n!}{e}+0.5\\rfloor$$\n\n以上就是對於一般項$D_n$ 的一般項公式！\n\n## 實際模擬\n利用ggb的模擬做出震盪的效果，我是直接輸入一般化的公式，但討論n不是正整數的情況其實沒有意義，不過程式還是可以跑出一個數值如下：\n![](https://i.imgur.com/0mTp7jo.png)\n\n最後會趨近於$e^{-1}\\cong0.36787944$\n因為我們討論的都是整數解的狀況，利用python 模擬出正整數解的情況：\n![](https://i.imgur.com/VE4q8gh.png)\n\n印出n從一到20的跟$e^{-1}$的差距，可以看到有正負交替的情況，且每一次的差距都越來越小：\n![](https://i.imgur.com/dloPsbD.png)\n\n以上都是近似的情況，因為公式是一個無窮級數，只會越來越接近理論的機率 $e^{-1}$ ，但永遠都會有一個微小的差距，也就是無限逼近的概念！\n\n```python=\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nconst = np.exp(-1)\n\nl = [0 for i in range(100)]\nl[0] = 1\nfor i in range(1,21):\n    l[i] = l[i-1]*i\n\na = [0 for i in range(100)]\na[0] = 0\na[1] = 0\na[2] = 1\na[3] = 2\na[4] = 9\n\nfor i in range(5,21):\n    a[i]= (a[i-1]+a[i-2])*(i-1)\n\nx = []\ny = []\nfor i in range(1,21):\n    x.append(i)\n    y.append((a[i]/l[i]))\n    print((a[i]/l[i])-const)\n\nplt.title(\"Possibility to N\", fontsize=20) #圖表標題\nplt.xlabel(\"N\", fontsize=16) #x軸標題\nplt.ylabel(\"Possibility\", fontsize=16) #y軸標題\n\nplt.xticks([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\nplt.yticks([0,0.1,0.2,0.3,0.4,0.5,0.6])\n\nplt.plot(x,y)\nplt.show() #顯示繪製的圖形\n```\n\n## 題目—P3182 [HAOI2016]放棋子\n[題目連結](https://www.luogu.com.cn/problem/P3182)\n題目敘述是這樣：\n> 給你一個 N×N 的矩陣，每行有一個障礙，數據保證任意兩個障礙不在同一行，任意兩個障礙不在同一列，要求你在這個矩陣上放 N 枚棋子（障礙的位置不能放棋子），要求你放 N 個棋子也滿足每行只有一枚棋子，每列只有一枚棋子的限制，求有多少種方案。\n第一行一個N，接下來一個N*N的矩陣。n≤200，0 表示沒有障礙，1 表示有障礙，輸出一個整數，即合法的方案數。\n\n這一題是在整理錯排相關公式的時候發現這一題，很明顯的，障礙物代表原來的位置，所以其實要求的就是n個元素的錯排種類。因為這一題的n≤200，$D_n$的值會接近$200!$的量級，[大約是$10^{374}$ 這麼多](https://www.wolframalpha.com/input/?i=floor%28%28200%21%2Fe%29%2B0.5%29)，對大數加法乘法來說卻是輕而易舉！\n可以用 $D_n = nD_{n-1}+(-1)^n$ ，時間複雜度$O(n)$的時間（把大數運算當作O(1)但其實它的常數算大）求出答案！\n\n如果想看從3個元素到200個元素的錯排總數，[可以點這裡！](https://gist.github.com/peienwu/7a7b5e72e8fd5cb0bc02977938eedc69)\n\n```cpp=\n#include <bits/stdc++.h>\n#define ios ios::sync_with_stdio(0),cin.tie(0)\nusing namespace std;\nint n,c[1000],lenc=0;\n\nint power(int x){\n    if(x%2==0)return 1;\n    else return -1;\n}\n\nvoid calculate(int s,string x){\n    int lenn = x.size(),product[lenc+lenn+10],brr[lenn+5];\n\n    memset(product,0,sizeof(product));\n    memset(brr,0,sizeof(brr));\n\n    for(int i=0;i<lenn;i++)brr[i] = x[lenn-i-1]-'0';\n\n    for(int i=0;i<lenn;i++){\n        for(int j=0;j<lenc;j++){\n            product[i+j] += brr[i]*c[j];\n            if(product[i+j] >= 10){\n                product[i+j+1] += product[i+j]/10;\n                product[i+j] %= 10;\n            }\n        }\n    }\n    for(int i=lenc+lenn+9;i>=0;i--){\n        if(product[i]!=0){\n            lenc = i+1;\n            break;\n        }\n    }\n    for(int i=0;i<lenc;i++)c[i] = product[i];\n\n    c[0] += power(s);\n    if(c[0]==10){\n        c[0] = 0;\n        c[1] += 1;\n        int ind = 1;\n        while(c[ind]>=10){\n            c[ind+1]+=1;c[ind] = 0;\n            ind++;\n        }\n    }\n    else if(c[0]==-1){\n        c[0] = 9;\n        c[1] -= 1;\n        int ind = 1;\n        while(c[ind]<=-1){\n            c[ind+1]-=1;c[ind]=9;\n            ind++;\n        }\n    }\n}\n\nint main(){\n    ios;\n    cin>>n;\n    memset(c,0,sizeof(c));\n    if(n==1)cout<<0<<endl;\n    else if(n==2)cout<<1<<endl;\n    else{\n        c[0] = 1;lenc=1;\n        for(int i=3;i<=n;i++){\n            string temp = to_string(i);\n            calculate(i,temp);\n        }\n        for(int i=lenc-1;i>=0;i--)cout<<c[i];\n        cout<<endl;\n    }\n}\n```\n\n## 結論\n整理一下上面提到錯排數的公式：\n### 遞迴\n$$D_n = (n-1)(D_{n-1}+D_{n-2})\\quad,n\\ge3\\\\D_n = nD_{n-1}+(-1)^n\\quad,n\\ge2$$\n###  一般項公式解\n\n$$D_n=\\lfloor\\frac{n!}{e}+0.5\\rfloor\\quad,n\\ge1\\\\D_n=n!\\sum^{n}_{k=0}\\frac{(-1)^k}{k!}\\quad,n\\ge1$$\n\n分析錯排問題所用到的指數函數與泰勒展開會在以後學到的時候把相關東西補起來，在這之前就先接受結論吧！\n**歐拉：「錯排問題組合數學中的一個奇妙問題」**，實際查找資料發現到高中教錯排也只是淺淺的帶過公式，並沒有很深刻的對這個問題做討論（也算超出範圍啦），就想說對這個主題做更深入的一些探討！\n\n## 附錄\n\n一些的數學證明：\n![](https://i.imgur.com/oMHPwZR.jpg)\n\n要用python 繪圖之前要先在mac終端安裝一些東西：\n\n```=\npython3 -m pip install numpy\npython3 -mpip install matplotlib\n```","source":"_posts/錯排問題.md","raw":"---\ntitle: 錯排問題（Derangements）\ndate: 2021-7-10\ntags: \n    - 數學\n    - 2021暑假筆記\ncategories: 數學筆記\nmathjax: true\n---\n\n## 定義\n錯排問題是組合數學中的問題之一。考慮一個有n個元素的排列，若一個排列中<font color=\"#f00\">所有的元素都不在自己原來的位置上</font>，那麼這樣的排列就稱為原排列的一個錯排。\nn個元素的錯排數記為$D_n$或$!n$。 研究一個排列錯排個數的問題，叫做錯排問題或稱為更列問題。\n<!-- more -->\n## 規律與公式\n\n### 反面枚舉\n前幾項可以用取捨原理（或窮舉所有可能）求得：\n$$D_1 = 0 \\\\ D_2 = 1\\\\D_3 = 2 \\\\ D_4 = 9$$\n\n{% note default %}\n**三個元素的錯排，以下共兩種：**\n![](https://i.imgur.com/24cJS8t.png =500x)\n\n**四個元素的錯排，以下共9種：**\n> 4123\n> 3421\n> 3142\n> 4312\n> 2413\n> 2341\n> 4321\n> 3412\n> 2143\n{% endnote %}\n\n如下面的文氏圖可以看到，以三個元素的錯排為例，我們要求的就是綠色區域的數量，透過排容原理（取捨原理）來算。\n![](https://i.imgur.com/4cSFDiw.png =400x)\n$$\\begin{split}D_3 = 3!-C^3_1\\cdot2!+C^3_2\\cdot1!-C^3_3\\cdot0! =2\\end{split}$$\n如果要求 $!4$ 也是一樣的作法：\n$$D_4 = 4!-C^4_1\\cdot3!+C^4_2\\cdot2!-C^4_3\\cdot1!+C^4_4\\cdot0! = 9$$\n\n這邊可以觀察到一個重要的規律，階乘的遞減、C取的數字遞增以及正負交替，這些性質會被用在等一下的一般化推導！\n\n\n### 遞迴解\n第一個公式是高中數學利用遞迴的概念得到的：\n$$D_n=(n-1)(D_{n-1}+D_{n-2})$$\n\n{% note success %}\n**證明：**\n在原本 $n-1$ 個元素當中取一個元素跟新加入的元素（第n個元素）做交換，共有$C^{n-1}_1$ 種取法，假設取到的元素是K，則K有以下兩種情況：\n1. K本身即不在原本的位置上，跟新加入的元素調換亦是錯排\n2. K在原本的位置上，跟新加入的元素調換後形成錯排\n![](https://i.imgur.com/k7l4Srr.png)\n\n\n綜合以上兩種狀況，可以推得上面的公式 \n{% endnote %}\n\n第二個是維基百科上面的公式：\n$$D_n = nD_{n-1}+(-1)^n$$\n這一個公式可以由等一下的一般式的公式（下面的公式解）推討過來：\n$$\\begin{split}D_n&=n!\\sum_{k=0}^{n}\\frac{(-1)^k}{k!}\\\\&=n(n-1)!\\sum_{k=0}^{n-1}\\frac{(-1)^k}{k!}+n!\\cdot\\frac{(-1)^n}{n!}\\\\&=nD_{n-1}+(-1)^n\\end{split}$$\n\n用這兩個遞迴式可以推得第n項的數值，不過時間複雜度依然是$O(n)$，想要求得的是$O(1)$的公式解\n\n### 公式解\n公式解可以利用取捨原理求得，寫成一般化的形式。對於第n項的錯排數可以利用之前觀察到排容原理的規律整理出以下式子：\n$$\\begin{split}D_n&=n!-C^n_1(n-1)!+C^n_2(n-2)!-\\cdots+C^n_n0!\\\\&=\\sum^n_{k=0}C^n_k(n-k)!\\cdot(-1)^k\\\\&=\\sum_{k=0}^{n}\\frac{n!}{k!(n-k)!}\\cdot(n-k)!\\cdot(-1)^k\\\\&=n!\\sum^{n}_{k=0}\\frac{(-1)^k}{k!}\\end{split}$$\n\n這個就是錯排數的一般化公式，如果想要把sigma消掉，還可以用以下處理：\n$$\\begin{split}D_n&=n!\\sum^{n}_{k=0}\\frac{(-1)^k}{k!}\\\\&=n![1-\\frac{1}{1!}+\\frac{1}{2!}-\\cdots+(-1)^n\\frac{1}{n!}]\\end{split}$$\n\n根據泰勒公式（$R_n$為修正項）\n$$\\begin{split}e^{-1}&=1+\\frac{(-1)^1}{1!}+\\frac{(-1)^2}{2!}+\\cdots+(-1)^n\\frac{1}{n!}+R(n)\\\\&=[1-\\frac{1}{1!}+\\frac{1}{2!}-\\cdots+(-1)^n\\frac{1}{n!}]+R(n)\\end{split}$$\n\n因為泰勒公式，中括號內的數值在n越大時會越接近$e^{-1}$，因此可以改寫成以下式子：\n$$\\begin{split}D_n \\cong n!\\cdot e^{-1}\\to\\frac{D_n}{n!}\\cong e^{-1}\\end{split}$$\n\n這就是n樣物品錯排的機率，那因為這只是近似值，由於正負交替，數值會在$e^{-1}$ 的地方震盪。為了要求出確切的$D_n$的解，我們要在後面加上一個修正項（泰勒展開餘項$R_n$），經過整理發現這個餘項 $\\frac{1}{n+1}$ 會嚴格小於 $0.5$，因此得到以下的一般項公式：\n$$D_n=\\lfloor\\frac{n!}{e}+0.5\\rfloor$$\n\n以上就是對於一般項$D_n$ 的一般項公式！\n\n## 實際模擬\n利用ggb的模擬做出震盪的效果，我是直接輸入一般化的公式，但討論n不是正整數的情況其實沒有意義，不過程式還是可以跑出一個數值如下：\n![](https://i.imgur.com/0mTp7jo.png)\n\n最後會趨近於$e^{-1}\\cong0.36787944$\n因為我們討論的都是整數解的狀況，利用python 模擬出正整數解的情況：\n![](https://i.imgur.com/VE4q8gh.png)\n\n印出n從一到20的跟$e^{-1}$的差距，可以看到有正負交替的情況，且每一次的差距都越來越小：\n![](https://i.imgur.com/dloPsbD.png)\n\n以上都是近似的情況，因為公式是一個無窮級數，只會越來越接近理論的機率 $e^{-1}$ ，但永遠都會有一個微小的差距，也就是無限逼近的概念！\n\n```python=\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nconst = np.exp(-1)\n\nl = [0 for i in range(100)]\nl[0] = 1\nfor i in range(1,21):\n    l[i] = l[i-1]*i\n\na = [0 for i in range(100)]\na[0] = 0\na[1] = 0\na[2] = 1\na[3] = 2\na[4] = 9\n\nfor i in range(5,21):\n    a[i]= (a[i-1]+a[i-2])*(i-1)\n\nx = []\ny = []\nfor i in range(1,21):\n    x.append(i)\n    y.append((a[i]/l[i]))\n    print((a[i]/l[i])-const)\n\nplt.title(\"Possibility to N\", fontsize=20) #圖表標題\nplt.xlabel(\"N\", fontsize=16) #x軸標題\nplt.ylabel(\"Possibility\", fontsize=16) #y軸標題\n\nplt.xticks([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\nplt.yticks([0,0.1,0.2,0.3,0.4,0.5,0.6])\n\nplt.plot(x,y)\nplt.show() #顯示繪製的圖形\n```\n\n## 題目—P3182 [HAOI2016]放棋子\n[題目連結](https://www.luogu.com.cn/problem/P3182)\n題目敘述是這樣：\n> 給你一個 N×N 的矩陣，每行有一個障礙，數據保證任意兩個障礙不在同一行，任意兩個障礙不在同一列，要求你在這個矩陣上放 N 枚棋子（障礙的位置不能放棋子），要求你放 N 個棋子也滿足每行只有一枚棋子，每列只有一枚棋子的限制，求有多少種方案。\n第一行一個N，接下來一個N*N的矩陣。n≤200，0 表示沒有障礙，1 表示有障礙，輸出一個整數，即合法的方案數。\n\n這一題是在整理錯排相關公式的時候發現這一題，很明顯的，障礙物代表原來的位置，所以其實要求的就是n個元素的錯排種類。因為這一題的n≤200，$D_n$的值會接近$200!$的量級，[大約是$10^{374}$ 這麼多](https://www.wolframalpha.com/input/?i=floor%28%28200%21%2Fe%29%2B0.5%29)，對大數加法乘法來說卻是輕而易舉！\n可以用 $D_n = nD_{n-1}+(-1)^n$ ，時間複雜度$O(n)$的時間（把大數運算當作O(1)但其實它的常數算大）求出答案！\n\n如果想看從3個元素到200個元素的錯排總數，[可以點這裡！](https://gist.github.com/peienwu/7a7b5e72e8fd5cb0bc02977938eedc69)\n\n```cpp=\n#include <bits/stdc++.h>\n#define ios ios::sync_with_stdio(0),cin.tie(0)\nusing namespace std;\nint n,c[1000],lenc=0;\n\nint power(int x){\n    if(x%2==0)return 1;\n    else return -1;\n}\n\nvoid calculate(int s,string x){\n    int lenn = x.size(),product[lenc+lenn+10],brr[lenn+5];\n\n    memset(product,0,sizeof(product));\n    memset(brr,0,sizeof(brr));\n\n    for(int i=0;i<lenn;i++)brr[i] = x[lenn-i-1]-'0';\n\n    for(int i=0;i<lenn;i++){\n        for(int j=0;j<lenc;j++){\n            product[i+j] += brr[i]*c[j];\n            if(product[i+j] >= 10){\n                product[i+j+1] += product[i+j]/10;\n                product[i+j] %= 10;\n            }\n        }\n    }\n    for(int i=lenc+lenn+9;i>=0;i--){\n        if(product[i]!=0){\n            lenc = i+1;\n            break;\n        }\n    }\n    for(int i=0;i<lenc;i++)c[i] = product[i];\n\n    c[0] += power(s);\n    if(c[0]==10){\n        c[0] = 0;\n        c[1] += 1;\n        int ind = 1;\n        while(c[ind]>=10){\n            c[ind+1]+=1;c[ind] = 0;\n            ind++;\n        }\n    }\n    else if(c[0]==-1){\n        c[0] = 9;\n        c[1] -= 1;\n        int ind = 1;\n        while(c[ind]<=-1){\n            c[ind+1]-=1;c[ind]=9;\n            ind++;\n        }\n    }\n}\n\nint main(){\n    ios;\n    cin>>n;\n    memset(c,0,sizeof(c));\n    if(n==1)cout<<0<<endl;\n    else if(n==2)cout<<1<<endl;\n    else{\n        c[0] = 1;lenc=1;\n        for(int i=3;i<=n;i++){\n            string temp = to_string(i);\n            calculate(i,temp);\n        }\n        for(int i=lenc-1;i>=0;i--)cout<<c[i];\n        cout<<endl;\n    }\n}\n```\n\n## 結論\n整理一下上面提到錯排數的公式：\n### 遞迴\n$$D_n = (n-1)(D_{n-1}+D_{n-2})\\quad,n\\ge3\\\\D_n = nD_{n-1}+(-1)^n\\quad,n\\ge2$$\n###  一般項公式解\n\n$$D_n=\\lfloor\\frac{n!}{e}+0.5\\rfloor\\quad,n\\ge1\\\\D_n=n!\\sum^{n}_{k=0}\\frac{(-1)^k}{k!}\\quad,n\\ge1$$\n\n分析錯排問題所用到的指數函數與泰勒展開會在以後學到的時候把相關東西補起來，在這之前就先接受結論吧！\n**歐拉：「錯排問題組合數學中的一個奇妙問題」**，實際查找資料發現到高中教錯排也只是淺淺的帶過公式，並沒有很深刻的對這個問題做討論（也算超出範圍啦），就想說對這個主題做更深入的一些探討！\n\n## 附錄\n\n一些的數學證明：\n![](https://i.imgur.com/oMHPwZR.jpg)\n\n要用python 繪圖之前要先在mac終端安裝一些東西：\n\n```=\npython3 -m pip install numpy\npython3 -mpip install matplotlib\n```","slug":"錯排問題","published":1,"updated":"2021-09-19T11:26:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvyspmhh000qmuyx4dnx3u6y","content":"<h2 id=\"定義\"><a href=\"#定義\" class=\"headerlink\" title=\"定義\"></a>定義</h2><p>錯排問題是組合數學中的問題之一。考慮一個有n個元素的排列，若一個排列中<font color=\"#f00\">所有的元素都不在自己原來的位置上</font>，那麼這樣的排列就稱為原排列的一個錯排。<br>n個元素的錯排數記為$D_n$或$!n$。 研究一個排列錯排個數的問題，叫做錯排問題或稱為更列問題。<br><span id=\"more\"></span></p>\n<h2 id=\"規律與公式\"><a href=\"#規律與公式\" class=\"headerlink\" title=\"規律與公式\"></a>規律與公式</h2><h3 id=\"反面枚舉\"><a href=\"#反面枚舉\" class=\"headerlink\" title=\"反面枚舉\"></a>反面枚舉</h3><p>前幾項可以用取捨原理（或窮舉所有可能）求得：</p>\n<script type=\"math/tex; mode=display\">D_1 = 0 \\\\ D_2 = 1\\\\D_3 = 2 \\\\ D_4 = 9</script><div class=\"note default\">\n            <p><strong>三個元素的錯排，以下共兩種：</strong><br><img src=\"https://i.imgur.com/24cJS8t.png =500x\" alt=\"\"></p><p><strong>四個元素的錯排，以下共9種：</strong></p><blockquote><p>4123<br>3421<br>3142<br>4312<br>2413<br>2341<br>4321<br>3412<br>2143</p></blockquote>\n          </div>\n<p>如下面的文氏圖可以看到，以三個元素的錯排為例，我們要求的就是綠色區域的數量，透過排容原理（取捨原理）來算。<br><img src=\"https://i.imgur.com/4cSFDiw.png =400x\" alt=\"\"></p>\n<script type=\"math/tex; mode=display\">\\begin{split}D_3 = 3!-C^3_1\\cdot2!+C^3_2\\cdot1!-C^3_3\\cdot0! =2\\end{split}</script><p>如果要求 $!4$ 也是一樣的作法：</p>\n<script type=\"math/tex; mode=display\">D_4 = 4!-C^4_1\\cdot3!+C^4_2\\cdot2!-C^4_3\\cdot1!+C^4_4\\cdot0! = 9</script><p>這邊可以觀察到一個重要的規律，階乘的遞減、C取的數字遞增以及正負交替，這些性質會被用在等一下的一般化推導！</p>\n<h3 id=\"遞迴解\"><a href=\"#遞迴解\" class=\"headerlink\" title=\"遞迴解\"></a>遞迴解</h3><p>第一個公式是高中數學利用遞迴的概念得到的：</p>\n<script type=\"math/tex; mode=display\">D_n=(n-1)(D_{n-1}+D_{n-2})</script><div class=\"note success\">\n            <p><strong>證明：</strong><br>在原本 $n-1$ 個元素當中取一個元素跟新加入的元素（第n個元素）做交換，共有$C^{n-1}_1$ 種取法，假設取到的元素是K，則K有以下兩種情況：</p><ol><li>K本身即不在原本的位置上，跟新加入的元素調換亦是錯排</li><li>K在原本的位置上，跟新加入的元素調換後形成錯排<br><img src=\"https://i.imgur.com/k7l4Srr.png\" alt=\"\"></li></ol><p>綜合以上兩種狀況，可以推得上面的公式 </p>\n          </div>\n<p>第二個是維基百科上面的公式：</p>\n<script type=\"math/tex; mode=display\">D_n = nD_{n-1}+(-1)^n</script><p>這一個公式可以由等一下的一般式的公式（下面的公式解）推討過來：</p>\n<script type=\"math/tex; mode=display\">\\begin{split}D_n&=n!\\sum_{k=0}^{n}\\frac{(-1)^k}{k!}\\\\&=n(n-1)!\\sum_{k=0}^{n-1}\\frac{(-1)^k}{k!}+n!\\cdot\\frac{(-1)^n}{n!}\\\\&=nD_{n-1}+(-1)^n\\end{split}</script><p>用這兩個遞迴式可以推得第n項的數值，不過時間複雜度依然是$O(n)$，想要求得的是$O(1)$的公式解</p>\n<h3 id=\"公式解\"><a href=\"#公式解\" class=\"headerlink\" title=\"公式解\"></a>公式解</h3><p>公式解可以利用取捨原理求得，寫成一般化的形式。對於第n項的錯排數可以利用之前觀察到排容原理的規律整理出以下式子：</p>\n<script type=\"math/tex; mode=display\">\\begin{split}D_n&=n!-C^n_1(n-1)!+C^n_2(n-2)!-\\cdots+C^n_n0!\\\\&=\\sum^n_{k=0}C^n_k(n-k)!\\cdot(-1)^k\\\\&=\\sum_{k=0}^{n}\\frac{n!}{k!(n-k)!}\\cdot(n-k)!\\cdot(-1)^k\\\\&=n!\\sum^{n}_{k=0}\\frac{(-1)^k}{k!}\\end{split}</script><p>這個就是錯排數的一般化公式，如果想要把sigma消掉，還可以用以下處理：</p>\n<script type=\"math/tex; mode=display\">\\begin{split}D_n&=n!\\sum^{n}_{k=0}\\frac{(-1)^k}{k!}\\\\&=n![1-\\frac{1}{1!}+\\frac{1}{2!}-\\cdots+(-1)^n\\frac{1}{n!}]\\end{split}</script><p>根據泰勒公式（$R_n$為修正項）</p>\n<script type=\"math/tex; mode=display\">\\begin{split}e^{-1}&=1+\\frac{(-1)^1}{1!}+\\frac{(-1)^2}{2!}+\\cdots+(-1)^n\\frac{1}{n!}+R(n)\\\\&=[1-\\frac{1}{1!}+\\frac{1}{2!}-\\cdots+(-1)^n\\frac{1}{n!}]+R(n)\\end{split}</script><p>因為泰勒公式，中括號內的數值在n越大時會越接近$e^{-1}$，因此可以改寫成以下式子：</p>\n<script type=\"math/tex; mode=display\">\\begin{split}D_n \\cong n!\\cdot e^{-1}\\to\\frac{D_n}{n!}\\cong e^{-1}\\end{split}</script><p>這就是n樣物品錯排的機率，那因為這只是近似值，由於正負交替，數值會在$e^{-1}$ 的地方震盪。為了要求出確切的$D_n$的解，我們要在後面加上一個修正項（泰勒展開餘項$R_n$），經過整理發現這個餘項 $\\frac{1}{n+1}$ 會嚴格小於 $0.5$，因此得到以下的一般項公式：</p>\n<script type=\"math/tex; mode=display\">D_n=\\lfloor\\frac{n!}{e}+0.5\\rfloor</script><p>以上就是對於一般項$D_n$ 的一般項公式！</p>\n<h2 id=\"實際模擬\"><a href=\"#實際模擬\" class=\"headerlink\" title=\"實際模擬\"></a>實際模擬</h2><p>利用ggb的模擬做出震盪的效果，我是直接輸入一般化的公式，但討論n不是正整數的情況其實沒有意義，不過程式還是可以跑出一個數值如下：<br><img src=\"https://i.imgur.com/0mTp7jo.png\" alt=\"\"></p>\n<p>最後會趨近於$e^{-1}\\cong0.36787944$<br>因為我們討論的都是整數解的狀況，利用python 模擬出正整數解的情況：<br><img src=\"https://i.imgur.com/VE4q8gh.png\" alt=\"\"></p>\n<p>印出n從一到20的跟$e^{-1}$的差距，可以看到有正負交替的情況，且每一次的差距都越來越小：<br><img src=\"https://i.imgur.com/dloPsbD.png\" alt=\"\"></p>\n<p>以上都是近似的情況，因為公式是一個無窮級數，只會越來越接近理論的機率 $e^{-1}$ ，但永遠都會有一個微小的差距，也就是無限逼近的概念！</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">const = np.exp(-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">l = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>)]</span><br><span class=\"line\">l[<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">21</span>):</span><br><span class=\"line\">    l[i] = l[i-<span class=\"number\">1</span>]*i</span><br><span class=\"line\"></span><br><span class=\"line\">a = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>)]</span><br><span class=\"line\">a[<span class=\"number\">0</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">a[<span class=\"number\">1</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">a[<span class=\"number\">2</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">a[<span class=\"number\">3</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">a[<span class=\"number\">4</span>] = <span class=\"number\">9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>,<span class=\"number\">21</span>):</span><br><span class=\"line\">    a[i]= (a[i-<span class=\"number\">1</span>]+a[i-<span class=\"number\">2</span>])*(i-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">x = []</span><br><span class=\"line\">y = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">21</span>):</span><br><span class=\"line\">    x.append(i)</span><br><span class=\"line\">    y.append((a[i]/l[i]))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>((a[i]/l[i])-const)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.title(<span class=\"string\">&quot;Possibility to N&quot;</span>, fontsize=<span class=\"number\">20</span>) <span class=\"comment\">#圖表標題</span></span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&quot;N&quot;</span>, fontsize=<span class=\"number\">16</span>) <span class=\"comment\">#x軸標題</span></span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&quot;Possibility&quot;</span>, fontsize=<span class=\"number\">16</span>) <span class=\"comment\">#y軸標題</span></span><br><span class=\"line\"></span><br><span class=\"line\">plt.xticks([<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">11</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>,<span class=\"number\">14</span>,<span class=\"number\">15</span>,<span class=\"number\">16</span>,<span class=\"number\">17</span>,<span class=\"number\">18</span>,<span class=\"number\">19</span>,<span class=\"number\">20</span>])</span><br><span class=\"line\">plt.yticks([<span class=\"number\">0</span>,<span class=\"number\">0.1</span>,<span class=\"number\">0.2</span>,<span class=\"number\">0.3</span>,<span class=\"number\">0.4</span>,<span class=\"number\">0.5</span>,<span class=\"number\">0.6</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">plt.plot(x,y)</span><br><span class=\"line\">plt.show() <span class=\"comment\">#顯示繪製的圖形</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"題目—P3182-HAOI2016-放棋子\"><a href=\"#題目—P3182-HAOI2016-放棋子\" class=\"headerlink\" title=\"題目—P3182 [HAOI2016]放棋子\"></a>題目—P3182 [HAOI2016]放棋子</h2><p><a href=\"https://www.luogu.com.cn/problem/P3182\">題目連結</a><br>題目敘述是這樣：</p>\n<blockquote>\n<p>給你一個 N×N 的矩陣，每行有一個障礙，數據保證任意兩個障礙不在同一行，任意兩個障礙不在同一列，要求你在這個矩陣上放 N 枚棋子（障礙的位置不能放棋子），要求你放 N 個棋子也滿足每行只有一枚棋子，每列只有一枚棋子的限制，求有多少種方案。<br>第一行一個N，接下來一個N*N的矩陣。n≤200，0 表示沒有障礙，1 表示有障礙，輸出一個整數，即合法的方案數。</p>\n</blockquote>\n<p>這一題是在整理錯排相關公式的時候發現這一題，很明顯的，障礙物代表原來的位置，所以其實要求的就是n個元素的錯排種類。因為這一題的n≤200，$D<em>n$的值會接近$200!$的量級，<a href=\"https://www.wolframalpha.com/input/?i=floor%28%28200%21%2Fe%29%2B0.5%29\">大約是$10^{374}$ 這麼多</a>，對大數加法乘法來說卻是輕而易舉！<br>可以用 $D_n = nD</em>{n-1}+(-1)^n$ ，時間複雜度$O(n)$的時間（把大數運算當作O(1)但其實它的常數算大）求出答案！</p>\n<p>如果想看從3個元素到200個元素的錯排總數，<a href=\"https://gist.github.com/peienwu/7a7b5e72e8fd5cb0bc02977938eedc69\">可以點這裡！</a></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,c[<span class=\"number\">1000</span>],lenc=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x%<span class=\"number\">2</span>==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">calculate</span><span class=\"params\">(<span class=\"keyword\">int</span> s,string x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lenn = x.<span class=\"built_in\">size</span>(),product[lenc+lenn+<span class=\"number\">10</span>],brr[lenn+<span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(product,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(product));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(brr,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(brr));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;lenn;i++)brr[i] = x[lenn-i<span class=\"number\">-1</span>]-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;lenn;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;lenc;j++)&#123;</span><br><span class=\"line\">            product[i+j] += brr[i]*c[j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(product[i+j] &gt;= <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">                product[i+j+<span class=\"number\">1</span>] += product[i+j]/<span class=\"number\">10</span>;</span><br><span class=\"line\">                product[i+j] %= <span class=\"number\">10</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=lenc+lenn+<span class=\"number\">9</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(product[i]!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            lenc = i+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;lenc;i++)c[i] = product[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    c[<span class=\"number\">0</span>] += <span class=\"built_in\">power</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c[<span class=\"number\">0</span>]==<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        c[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        c[<span class=\"number\">1</span>] += <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ind = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(c[ind]&gt;=<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">            c[ind+<span class=\"number\">1</span>]+=<span class=\"number\">1</span>;c[ind] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            ind++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c[<span class=\"number\">0</span>]==<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        c[<span class=\"number\">0</span>] = <span class=\"number\">9</span>;</span><br><span class=\"line\">        c[<span class=\"number\">1</span>] -= <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ind = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(c[ind]&lt;=<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            c[ind+<span class=\"number\">1</span>]-=<span class=\"number\">1</span>;c[ind]=<span class=\"number\">9</span>;</span><br><span class=\"line\">            ind++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(c,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(c));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)cout&lt;&lt;<span class=\"number\">0</span>&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(n==<span class=\"number\">2</span>)cout&lt;&lt;<span class=\"number\">1</span>&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        c[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;lenc=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">3</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            string temp = <span class=\"built_in\">to_string</span>(i);</span><br><span class=\"line\">            <span class=\"built_in\">calculate</span>(i,temp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=lenc<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)cout&lt;&lt;c[i];</span><br><span class=\"line\">        cout&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>整理一下上面提到錯排數的公式：</p>\n<h3 id=\"遞迴\"><a href=\"#遞迴\" class=\"headerlink\" title=\"遞迴\"></a>遞迴</h3><script type=\"math/tex; mode=display\">D_n = (n-1)(D_{n-1}+D_{n-2})\\quad,n\\ge3\\\\D_n = nD_{n-1}+(-1)^n\\quad,n\\ge2</script><h3 id=\"一般項公式解\"><a href=\"#一般項公式解\" class=\"headerlink\" title=\"一般項公式解\"></a>一般項公式解</h3><script type=\"math/tex; mode=display\">D_n=\\lfloor\\frac{n!}{e}+0.5\\rfloor\\quad,n\\ge1\\\\D_n=n!\\sum^{n}_{k=0}\\frac{(-1)^k}{k!}\\quad,n\\ge1</script><p>分析錯排問題所用到的指數函數與泰勒展開會在以後學到的時候把相關東西補起來，在這之前就先接受結論吧！<br><strong>歐拉：「錯排問題組合數學中的一個奇妙問題」</strong>，實際查找資料發現到高中教錯排也只是淺淺的帶過公式，並沒有很深刻的對這個問題做討論（也算超出範圍啦），就想說對這個主題做更深入的一些探討！</p>\n<h2 id=\"附錄\"><a href=\"#附錄\" class=\"headerlink\" title=\"附錄\"></a>附錄</h2><p>一些的數學證明：<br><img src=\"https://i.imgur.com/oMHPwZR.jpg\" alt=\"\"></p>\n<p>要用python 繪圖之前要先在mac終端安裝一些東西：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m pip install numpy</span><br><span class=\"line\">python3 -mpip install matplotlib</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":4954,"excerpt":"<h2 id=\"定義\"><a href=\"#定義\" class=\"headerlink\" title=\"定義\"></a>定義</h2><p>錯排問題是組合數學中的問題之一。考慮一個有n個元素的排列，若一個排列中<font color=\"#f00\">所有的元素都不在自己原來的位置上</font>，那麼這樣的排列就稱為原排列的一個錯排。<br>n個元素的錯排數記為$D_n$或$!n$。 研究一個排列錯排個數的問題，叫做錯排問題或稱為更列問題。<br>","more":"</p>\n<h2 id=\"規律與公式\"><a href=\"#規律與公式\" class=\"headerlink\" title=\"規律與公式\"></a>規律與公式</h2><h3 id=\"反面枚舉\"><a href=\"#反面枚舉\" class=\"headerlink\" title=\"反面枚舉\"></a>反面枚舉</h3><p>前幾項可以用取捨原理（或窮舉所有可能）求得：</p>\n<script type=\"math/tex; mode=display\">D_1 = 0 \\\\ D_2 = 1\\\\D_3 = 2 \\\\ D_4 = 9</script><div class=\"note default\">\n            <p><strong>三個元素的錯排，以下共兩種：</strong><br><img src=\"https://i.imgur.com/24cJS8t.png =500x\" alt=\"\"></p><p><strong>四個元素的錯排，以下共9種：</strong></p><blockquote><p>4123<br>3421<br>3142<br>4312<br>2413<br>2341<br>4321<br>3412<br>2143</p></blockquote>\n          </div>\n<p>如下面的文氏圖可以看到，以三個元素的錯排為例，我們要求的就是綠色區域的數量，透過排容原理（取捨原理）來算。<br><img src=\"https://i.imgur.com/4cSFDiw.png =400x\" alt=\"\"></p>\n<script type=\"math/tex; mode=display\">\\begin{split}D_3 = 3!-C^3_1\\cdot2!+C^3_2\\cdot1!-C^3_3\\cdot0! =2\\end{split}</script><p>如果要求 $!4$ 也是一樣的作法：</p>\n<script type=\"math/tex; mode=display\">D_4 = 4!-C^4_1\\cdot3!+C^4_2\\cdot2!-C^4_3\\cdot1!+C^4_4\\cdot0! = 9</script><p>這邊可以觀察到一個重要的規律，階乘的遞減、C取的數字遞增以及正負交替，這些性質會被用在等一下的一般化推導！</p>\n<h3 id=\"遞迴解\"><a href=\"#遞迴解\" class=\"headerlink\" title=\"遞迴解\"></a>遞迴解</h3><p>第一個公式是高中數學利用遞迴的概念得到的：</p>\n<script type=\"math/tex; mode=display\">D_n=(n-1)(D_{n-1}+D_{n-2})</script><div class=\"note success\">\n            <p><strong>證明：</strong><br>在原本 $n-1$ 個元素當中取一個元素跟新加入的元素（第n個元素）做交換，共有$C^{n-1}_1$ 種取法，假設取到的元素是K，則K有以下兩種情況：</p><ol><li>K本身即不在原本的位置上，跟新加入的元素調換亦是錯排</li><li>K在原本的位置上，跟新加入的元素調換後形成錯排<br><img src=\"https://i.imgur.com/k7l4Srr.png\" alt=\"\"></li></ol><p>綜合以上兩種狀況，可以推得上面的公式 </p>\n          </div>\n<p>第二個是維基百科上面的公式：</p>\n<script type=\"math/tex; mode=display\">D_n = nD_{n-1}+(-1)^n</script><p>這一個公式可以由等一下的一般式的公式（下面的公式解）推討過來：</p>\n<script type=\"math/tex; mode=display\">\\begin{split}D_n&=n!\\sum_{k=0}^{n}\\frac{(-1)^k}{k!}\\\\&=n(n-1)!\\sum_{k=0}^{n-1}\\frac{(-1)^k}{k!}+n!\\cdot\\frac{(-1)^n}{n!}\\\\&=nD_{n-1}+(-1)^n\\end{split}</script><p>用這兩個遞迴式可以推得第n項的數值，不過時間複雜度依然是$O(n)$，想要求得的是$O(1)$的公式解</p>\n<h3 id=\"公式解\"><a href=\"#公式解\" class=\"headerlink\" title=\"公式解\"></a>公式解</h3><p>公式解可以利用取捨原理求得，寫成一般化的形式。對於第n項的錯排數可以利用之前觀察到排容原理的規律整理出以下式子：</p>\n<script type=\"math/tex; mode=display\">\\begin{split}D_n&=n!-C^n_1(n-1)!+C^n_2(n-2)!-\\cdots+C^n_n0!\\\\&=\\sum^n_{k=0}C^n_k(n-k)!\\cdot(-1)^k\\\\&=\\sum_{k=0}^{n}\\frac{n!}{k!(n-k)!}\\cdot(n-k)!\\cdot(-1)^k\\\\&=n!\\sum^{n}_{k=0}\\frac{(-1)^k}{k!}\\end{split}</script><p>這個就是錯排數的一般化公式，如果想要把sigma消掉，還可以用以下處理：</p>\n<script type=\"math/tex; mode=display\">\\begin{split}D_n&=n!\\sum^{n}_{k=0}\\frac{(-1)^k}{k!}\\\\&=n![1-\\frac{1}{1!}+\\frac{1}{2!}-\\cdots+(-1)^n\\frac{1}{n!}]\\end{split}</script><p>根據泰勒公式（$R_n$為修正項）</p>\n<script type=\"math/tex; mode=display\">\\begin{split}e^{-1}&=1+\\frac{(-1)^1}{1!}+\\frac{(-1)^2}{2!}+\\cdots+(-1)^n\\frac{1}{n!}+R(n)\\\\&=[1-\\frac{1}{1!}+\\frac{1}{2!}-\\cdots+(-1)^n\\frac{1}{n!}]+R(n)\\end{split}</script><p>因為泰勒公式，中括號內的數值在n越大時會越接近$e^{-1}$，因此可以改寫成以下式子：</p>\n<script type=\"math/tex; mode=display\">\\begin{split}D_n \\cong n!\\cdot e^{-1}\\to\\frac{D_n}{n!}\\cong e^{-1}\\end{split}</script><p>這就是n樣物品錯排的機率，那因為這只是近似值，由於正負交替，數值會在$e^{-1}$ 的地方震盪。為了要求出確切的$D_n$的解，我們要在後面加上一個修正項（泰勒展開餘項$R_n$），經過整理發現這個餘項 $\\frac{1}{n+1}$ 會嚴格小於 $0.5$，因此得到以下的一般項公式：</p>\n<script type=\"math/tex; mode=display\">D_n=\\lfloor\\frac{n!}{e}+0.5\\rfloor</script><p>以上就是對於一般項$D_n$ 的一般項公式！</p>\n<h2 id=\"實際模擬\"><a href=\"#實際模擬\" class=\"headerlink\" title=\"實際模擬\"></a>實際模擬</h2><p>利用ggb的模擬做出震盪的效果，我是直接輸入一般化的公式，但討論n不是正整數的情況其實沒有意義，不過程式還是可以跑出一個數值如下：<br><img src=\"https://i.imgur.com/0mTp7jo.png\" alt=\"\"></p>\n<p>最後會趨近於$e^{-1}\\cong0.36787944$<br>因為我們討論的都是整數解的狀況，利用python 模擬出正整數解的情況：<br><img src=\"https://i.imgur.com/VE4q8gh.png\" alt=\"\"></p>\n<p>印出n從一到20的跟$e^{-1}$的差距，可以看到有正負交替的情況，且每一次的差距都越來越小：<br><img src=\"https://i.imgur.com/dloPsbD.png\" alt=\"\"></p>\n<p>以上都是近似的情況，因為公式是一個無窮級數，只會越來越接近理論的機率 $e^{-1}$ ，但永遠都會有一個微小的差距，也就是無限逼近的概念！</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">const = np.exp(-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">l = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>)]</span><br><span class=\"line\">l[<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">21</span>):</span><br><span class=\"line\">    l[i] = l[i-<span class=\"number\">1</span>]*i</span><br><span class=\"line\"></span><br><span class=\"line\">a = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>)]</span><br><span class=\"line\">a[<span class=\"number\">0</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">a[<span class=\"number\">1</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">a[<span class=\"number\">2</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">a[<span class=\"number\">3</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">a[<span class=\"number\">4</span>] = <span class=\"number\">9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>,<span class=\"number\">21</span>):</span><br><span class=\"line\">    a[i]= (a[i-<span class=\"number\">1</span>]+a[i-<span class=\"number\">2</span>])*(i-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">x = []</span><br><span class=\"line\">y = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">21</span>):</span><br><span class=\"line\">    x.append(i)</span><br><span class=\"line\">    y.append((a[i]/l[i]))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>((a[i]/l[i])-const)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.title(<span class=\"string\">&quot;Possibility to N&quot;</span>, fontsize=<span class=\"number\">20</span>) <span class=\"comment\">#圖表標題</span></span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&quot;N&quot;</span>, fontsize=<span class=\"number\">16</span>) <span class=\"comment\">#x軸標題</span></span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&quot;Possibility&quot;</span>, fontsize=<span class=\"number\">16</span>) <span class=\"comment\">#y軸標題</span></span><br><span class=\"line\"></span><br><span class=\"line\">plt.xticks([<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">11</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>,<span class=\"number\">14</span>,<span class=\"number\">15</span>,<span class=\"number\">16</span>,<span class=\"number\">17</span>,<span class=\"number\">18</span>,<span class=\"number\">19</span>,<span class=\"number\">20</span>])</span><br><span class=\"line\">plt.yticks([<span class=\"number\">0</span>,<span class=\"number\">0.1</span>,<span class=\"number\">0.2</span>,<span class=\"number\">0.3</span>,<span class=\"number\">0.4</span>,<span class=\"number\">0.5</span>,<span class=\"number\">0.6</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">plt.plot(x,y)</span><br><span class=\"line\">plt.show() <span class=\"comment\">#顯示繪製的圖形</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"題目—P3182-HAOI2016-放棋子\"><a href=\"#題目—P3182-HAOI2016-放棋子\" class=\"headerlink\" title=\"題目—P3182 [HAOI2016]放棋子\"></a>題目—P3182 [HAOI2016]放棋子</h2><p><a href=\"https://www.luogu.com.cn/problem/P3182\">題目連結</a><br>題目敘述是這樣：</p>\n<blockquote>\n<p>給你一個 N×N 的矩陣，每行有一個障礙，數據保證任意兩個障礙不在同一行，任意兩個障礙不在同一列，要求你在這個矩陣上放 N 枚棋子（障礙的位置不能放棋子），要求你放 N 個棋子也滿足每行只有一枚棋子，每列只有一枚棋子的限制，求有多少種方案。<br>第一行一個N，接下來一個N*N的矩陣。n≤200，0 表示沒有障礙，1 表示有障礙，輸出一個整數，即合法的方案數。</p>\n</blockquote>\n<p>這一題是在整理錯排相關公式的時候發現這一題，很明顯的，障礙物代表原來的位置，所以其實要求的就是n個元素的錯排種類。因為這一題的n≤200，$D<em>n$的值會接近$200!$的量級，<a href=\"https://www.wolframalpha.com/input/?i=floor%28%28200%21%2Fe%29%2B0.5%29\">大約是$10^{374}$ 這麼多</a>，對大數加法乘法來說卻是輕而易舉！<br>可以用 $D_n = nD</em>{n-1}+(-1)^n$ ，時間複雜度$O(n)$的時間（把大數運算當作O(1)但其實它的常數算大）求出答案！</p>\n<p>如果想看從3個元素到200個元素的錯排總數，<a href=\"https://gist.github.com/peienwu/7a7b5e72e8fd5cb0bc02977938eedc69\">可以點這裡！</a></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,c[<span class=\"number\">1000</span>],lenc=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x%<span class=\"number\">2</span>==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">calculate</span><span class=\"params\">(<span class=\"keyword\">int</span> s,string x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lenn = x.<span class=\"built_in\">size</span>(),product[lenc+lenn+<span class=\"number\">10</span>],brr[lenn+<span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(product,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(product));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(brr,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(brr));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;lenn;i++)brr[i] = x[lenn-i<span class=\"number\">-1</span>]-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;lenn;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;lenc;j++)&#123;</span><br><span class=\"line\">            product[i+j] += brr[i]*c[j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(product[i+j] &gt;= <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">                product[i+j+<span class=\"number\">1</span>] += product[i+j]/<span class=\"number\">10</span>;</span><br><span class=\"line\">                product[i+j] %= <span class=\"number\">10</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=lenc+lenn+<span class=\"number\">9</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(product[i]!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            lenc = i+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;lenc;i++)c[i] = product[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    c[<span class=\"number\">0</span>] += <span class=\"built_in\">power</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c[<span class=\"number\">0</span>]==<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">        c[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        c[<span class=\"number\">1</span>] += <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ind = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(c[ind]&gt;=<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">            c[ind+<span class=\"number\">1</span>]+=<span class=\"number\">1</span>;c[ind] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            ind++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c[<span class=\"number\">0</span>]==<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        c[<span class=\"number\">0</span>] = <span class=\"number\">9</span>;</span><br><span class=\"line\">        c[<span class=\"number\">1</span>] -= <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ind = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(c[ind]&lt;=<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            c[ind+<span class=\"number\">1</span>]-=<span class=\"number\">1</span>;c[ind]=<span class=\"number\">9</span>;</span><br><span class=\"line\">            ind++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(c,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(c));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>)cout&lt;&lt;<span class=\"number\">0</span>&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(n==<span class=\"number\">2</span>)cout&lt;&lt;<span class=\"number\">1</span>&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        c[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;lenc=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">3</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            string temp = <span class=\"built_in\">to_string</span>(i);</span><br><span class=\"line\">            <span class=\"built_in\">calculate</span>(i,temp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=lenc<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)cout&lt;&lt;c[i];</span><br><span class=\"line\">        cout&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>整理一下上面提到錯排數的公式：</p>\n<h3 id=\"遞迴\"><a href=\"#遞迴\" class=\"headerlink\" title=\"遞迴\"></a>遞迴</h3><script type=\"math/tex; mode=display\">D_n = (n-1)(D_{n-1}+D_{n-2})\\quad,n\\ge3\\\\D_n = nD_{n-1}+(-1)^n\\quad,n\\ge2</script><h3 id=\"一般項公式解\"><a href=\"#一般項公式解\" class=\"headerlink\" title=\"一般項公式解\"></a>一般項公式解</h3><script type=\"math/tex; mode=display\">D_n=\\lfloor\\frac{n!}{e}+0.5\\rfloor\\quad,n\\ge1\\\\D_n=n!\\sum^{n}_{k=0}\\frac{(-1)^k}{k!}\\quad,n\\ge1</script><p>分析錯排問題所用到的指數函數與泰勒展開會在以後學到的時候把相關東西補起來，在這之前就先接受結論吧！<br><strong>歐拉：「錯排問題組合數學中的一個奇妙問題」</strong>，實際查找資料發現到高中教錯排也只是淺淺的帶過公式，並沒有很深刻的對這個問題做討論（也算超出範圍啦），就想說對這個主題做更深入的一些探討！</p>\n<h2 id=\"附錄\"><a href=\"#附錄\" class=\"headerlink\" title=\"附錄\"></a>附錄</h2><p>一些的數學證明：<br><img src=\"https://i.imgur.com/oMHPwZR.jpg\" alt=\"\"></p>\n<p>要用python 繪圖之前要先在mac終端安裝一些東西：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m pip install numpy</span><br><span class=\"line\">python3 -mpip install matplotlib</span><br></pre></td></tr></table></figure>"},{"title":"2020資訊之芽—線段樹例題","date":"2021-08-05T16:00:00.000Z","mathjax":true,"_content":"\n## 題目目錄\n- NEOJ 80 RMQ練習\n- NEOJ 249 最大連續和？\n- ZJ d799 區間求和\n- NEOJ 367 RMQ˙改\n- TIOJ 1224 矩形覆蓋面積計算\n<!-- more -->\n\n### RMQ練習\n[題目連結](https://neoj.sprout.tw/problem/80/)\nRMQ = Range minimun query，也就是詢問一個區間的最小值。分析一下兩種不同作法的複雜度：\n{% note default %}\n對於數列 $a_n$ 共n項，k筆詢問，每一次詢問區間$[l,r]$的最大、最小值\n\n**1. 暴力做**\n時間複雜度：<font color=\"#f00\">詢問$O(n)$</font>\n對於每一筆詢問都暴力搜索，最多掃過n個數字，時間複雜度$O(kn)$，對於數字大一點的情況就會TLE\n<br> \n\n**2. 分塊算法**\n可以參見 [這篇文章](https://hackmd.io/@peienwu/rkCDKEcjd)\n\n**3. 線段樹**\n時間複雜度：<font color=\"#f00\">預處理 $O(n)$、詢問$O(logn)$</font>\n首先是預處理建立線段樹，線段樹上約有$2n$個節點，因此空間複雜度是$O(n)$，也就表示預處理是$O(n)$，之後便可$O(logn)$查詢每一筆詢問。以下是各種操作複雜度：\n\n\n* **初始建構**：所有節點恰會建構一次，每個節點 $O(1)$，配合節點樹可得為 $O(𝑛)$\n* **單點修改**：該點的所有祖先節點都會被修改到，其他都不會被修改到，$𝑂(logn)$\n* **區間查詢**：每筆詢問最多詢問到深度為 $O(logn)$ 的節點。在一次詢問中，每一層不會有超過2個節點被詢問，總複雜度為$𝑂(log𝑛)$\n<br> \n\n**4. 稀疏表(Sparse Table)**\n時間複雜度：<font color=\"#f00\">預處理 $O(nlogn)$、詢問$O(1)$</font>\n參考 [這篇文章](https://hackmd.io/@peienwu/H1W1Y18Gt)\n{% endnote %}\n\n這一題就是基礎的要有支援區間查詢、單點修改的線段樹，也是最簡單的一種！\n```cpp=\n#include <bits/stdc++.h>\n#define ios ios::sync_with_stdio(0),cin.tie(0);\n#define N 1000000\n#define INF 1e9\nusing namespace std;\nint seg[4 * N],arr[N],n,m;\n\nvoid build(int l,int r,int cur){\n    if(r<=l)return;\n    if(r-l==1){\n        seg[cur] = arr[l];\n        return;\n    }\n    int m = (l+r)/2;\n    build(l,m,2*cur);\n    build(m,r,2*cur+1);\n    seg[cur] = min(seg[2*cur],seg[2*cur+1]);\n}\n\n//單點修改\nvoid modify(int cur,int l,int r,int ind,int val){\n    if(r<=l)return;\n    if(r-l==1 && l==ind){\n        seg[cur]=val;\n        return;\n    }\n    int mid = (l+r)/2;\n    if(ind<mid)modify(cur*2,l,mid,ind,val);\n    else modify(cur*2+1,mid,r,ind,val);\n    seg[cur] = min(seg[2*cur],seg[2*cur+1]);\n}\n\n//區間詢問\nint query(int cur,int l,int r,int ql,int qr){\n    if(r<=l || ql>=r || qr<=l)return INF;\n    if(ql<=l && qr>=r){\n        return seg[cur];\n    }\n    int mid = (l+r)/2;\n    return min(query(cur*2,l,mid,ql,qr),query(cur*2+1,mid,r,ql,qr));\n}\n\nint main(){\n    ios;\n    cin>>m>>n;\n    for(int i=1;i<=n;i++)cin>>arr[i];\n    build(1,n+1,1);\n    \n    while(m--){\n        int p;cin>>p;\n        if(p==2){\n            int x,y;cin>>x>>y;\n            modify(1,1,n+1,x+1,y);\n        }\n        else if(p==1){\n            int x,y;cin>>x>>y;\n            int ans = query(1,1,n+1,x+1,y+2);\n            cout<<ans<<endl;\n        }\n    }\n}\n```\n\n### 最大連續和？\n[題目連結](https://neoj.sprout.tw/problem/249/)\n這題題結果我是WA在INF太大可能會溢位的問題，把INF調整成 $5\\times 10^{14}$ 是差不多的\n\n這一題要維護區間最大連續和，跟dp的最大連續和差了「區間」兩字，整個實作的方式跟複雜度就不一樣了。DP的作法如果直接套用在這一題的話，複雜度約為：$O(QN)$，絕對會炸裂，因此只能用線段樹維護這個東西。\n\n{% note primary %}\n**區間最大連續和**\n在分治法的單元有提到分治法最重要的是假定左右兩側（對應過來就是兩子樹）是維護好的，也就是符合定義，要想的是要如何處理橫跨左右子樹的情況。\n要如何知道橫跨中間的最大值呢？這時候我們可以維護4個數值，來更新每一個線段樹上的節點的數值。\n1. **總和(sum)**\n$cur.sum = left.sum+right.sum$\n3. **最大前綴和(lmax)**\n$cur.lmax = max(left.lmax,left.sum+right.lmax)$\n5. **最大後綴和(rmax)**\n$cur.rmax = max(right.rmax,right.sum+left.rmax)$\n7. **區間最大連續和(tmax)**\n$cur.tmax = max(left.tmax,right.tmax,left.rmax+right.lmax)$\n{% endnote %}\n維護最大後綴跟最大前綴和（首跟末有被取到的情況），就可以$O(1)$ 維護每一個節點的區間最大連續和，複雜度：詢問$O(logn)$，因此總時間$O(Qlogn)$就可以AC了!\n\n\n```cpp=\n#include <bits/stdc++.h>\n#define ios ios::sync_with_stdio(0),cin.tie(0);\n#define int long long\n#define N 100005\n#define INF 500000000000000\nusing namespace std;\nint arr[N],n,m;\n\nstruct Node{\n    int sum;    //區間總和\n    int lmax;   //最大前綴和\n    int rmax;   //最大後綴和\n    int tmax;   //區間連續最大和\n}seg[N<<2];\n\n//求當下的區間連續最大和\nvoid modify(Node &cur,Node &left,Node &right){\n    cur.sum = left.sum+right.sum;\n    cur.lmax = max(left.lmax,left.sum+right.lmax);\n    cur.rmax = max(right.rmax,right.sum+left.rmax);\n    cur.tmax = max(max(left.tmax,right.tmax),left.rmax+right.lmax);\n}\n\n//建立線段樹：[l,r)\nvoid build(int l,int r,int cur){\n    if(r<=l)return;\n    if(r-l==1){\n        seg[cur] = {arr[l],arr[l],arr[l],arr[l]};\n        return;\n    }\n    int mid = (l+r)/2;\n    build(l,mid,2*cur);\n    build(mid,r,2*cur+1);\n    modify(seg[cur],seg[2*cur],seg[2*cur+1]);\n}\n\n//區間詢問：[l,r)\nNode query(int cur,int l,int r,int ql,int qr){\n    if(r<=l || ql>=r || qr<=l)return {-INF,-INF,-INF,-INF};\n    if(ql<=l && qr>=r)return seg[cur];\n    int mid = (l+r)/2;\n    auto left = query(2*cur,l,mid,ql,qr);\n    auto right = query(2*cur+1,mid,r,ql,qr);\n    Node temp;\n    modify(temp,left,right);\n    return temp;\n}\n\nsigned main(){\n    ios;\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)cin>>arr[i];\n    build(1,n+1,1);\n    \n    while(m--){\n        int l,r;cin>>l>>r;\n        auto ans = query(1,1,n+1,l,r+1);\n        cout<<max(ans.tmax,(long long)0)<<endl;\n    }\n}\n```\n\n### d799區間求和\n[題目連結](https://zerojudge.tw/ShowProblem?problemid=d799)\n這一題要求兩個操作，區間加值跟區間查詢，這時候就必須用到**懶標(lazy tags)** 輔助求和。\n\n> 範例測資：\n> 10\n> 1 2 3 4 5 6 7 8 9 10\n> 3\n> 2 2 4\n> 1 3 6 3\n> 2 2 4\n\n![](https://i.imgur.com/MJMDQE9.jpg)\n左邊是整棵線段樹，右邊則是懶標，可以看到3要往下推，但學長的程式碼中並沒有執行這個步驟，這樣會導致query的時候發生錯誤。\n\n```cpp=\n#include <iostream>\n#include <string.h>\n#include <stdio.h>\n#define ios ios::sync_with_stdio(0),cin.tie(0);\n#define N 500005\n#define int long long\nusing namespace std;\n\nstruct Node{            //線段樹每一個節點\n    int val=0,tag=0,sz; //val原本的值、tag懶標、sz區間大小\n    int rv(){           //回傳實際節點的值\n        return val+tag*sz;\n    }\n}seg[4*N];\n\nint arr[N],n,m;\n\nvoid build(int l,int r,int cur){    //建立線段樹\n    seg[cur].sz = r-l;              //更新節點的大小\n    if(r<=l)return;                 //空區間回傳\n    if(r-l==1){                     //設定當前節點的值\n        seg[cur].val = arr[l];\n        return;\n    }\n    int m = (l+r)/2;                //分別遞迴建立左右子樹\n    build(l,m,2*cur);\n    build(m,r,2*cur+1);\n    seg[cur].val = seg[2*cur].val+seg[2*cur+1].val;\n}\n\n//把id的懶標在query的時候往下推\nvoid push(int id){\n    seg[2*id].tag += seg[id].tag;   //左子樹懶標更新\n    seg[2*id+1].tag += seg[id].tag; //右子樹懶標更新\n    seg[id].val = seg[id].rv();     //更新實際值\n    seg[id].tag = 0;                //往下推完之後設定為預設\n}\n\n//區間修改\nvoid modify(int cur,int l,int r,int ql,int qr,int val){\n    if (r<=l||ql>=r||qr<=l)return;\n    if (ql<=l && qr>=r) {\n        seg[cur].tag += val;               //將被完整包含的區間的懶標加上修改值\n        return;\n    }\n    int mid = (l+r)/2;\n    modify(cur*2,l,mid,ql,qr,val);          //修改左右子樹\n    modify(cur*2+1,mid,r,ql,qr,val);        //遞迴完拉上來的過程中把上面的數值更新成有懶標\n    seg[cur].val = seg[2*cur].rv()+seg[2*cur+1].rv();\n}\n\n//區間詢問\nint query(int cur,int l,int r,int ql,int qr){\n    if(r<=l || ql>=r || qr<=l)return 0;         //空集合直接回傳\n    if(ql<=l && qr>=r)return seg[cur].rv();     //包含在要詢問的範圍中，回傳實際值\n    push(cur);                                  //將懶標在遞迴下去的過程中下推\n    int mid = (l+r)/2;                          //遞迴查詢左右子樹\n    return query(cur*2,l,mid,ql,qr)+query(cur*2+1,mid,r,ql,qr);\n}\n\nsigned main(){\n    ios;\n    cin>>n;\n    for(int i=1;i<=n;i++)cin>>arr[i];\n    build(1,n+1,1);\n    cin>>m;\n    \n    while(m--){\n        int p;cin>>p;\n        if(p==1){\n            int x,y,k;cin>>x>>y>>k;\n            modify(1,1,n+1,x,y+1,k);\n        }\n        else if(p==2){\n            int x,y;cin>>x>>y;\n            int ans = query(1,1,n+1,x,y+1);\n            cout<<ans<<endl;\n        }\n    }\n}\n```\n\n### RMQ˙改\n[題目連結](https://neoj.sprout.tw/problem/367/)\n這一題是Range Maximum Query搭配區間加值，如果直接套用前面RMQ或是區間和的模板就輕鬆許多。這一題主要跟前面題目的不同在於它的sz要維護成1，有別於求區間和要乘上區間大小，每一個值不需要乘上區間大小，因此設成0。\n\n這題第二筆測資明顯就是要卡暴力解法。\n![](https://i.imgur.com/tC2Wucw.png)\n\n```cpp=\n#include <iostream>\n#include <string.h>\n#include <stdio.h>\n#define ios ios::sync_with_stdio(0),cin.tie(0);\n#define N 100005\n#define int long long\nusing namespace std;\nconst int INF = 1e14;\n\nstruct Node{            //線段樹每一個節點\n    int val=0,tag=0,sz=0; //val原本的值、tag懶標、sz區間大小\n    int rv(){           //回傳實際節點的值\n        return val+tag*sz;\n    }\n}seg[4*N];\n\nint arr[N],n,m;\n\nvoid build(int l,int r,int cur){    //建立線段樹\n    seg[cur].sz = 1;                //更新節點的大小\n    if(r<=l)return;                 //空區間回傳\n    if(r-l==1){                     //設定當前節點的值\n        seg[cur].val = arr[l];\n        return;\n    }\n    int m = (l+r)/2;                //分別遞迴建立左右子樹\n    build(l,m,2*cur);\n    build(m,r,2*cur+1);\n    seg[cur].val = max(seg[2*cur].val,seg[2*cur+1].val);\n}\n\n//把id的懶標在query的時候往下推\nvoid push(int id){\n    seg[2*id].tag += seg[id].tag;   //左子樹懶標更新\n    seg[2*id+1].tag += seg[id].tag; //右子樹懶標更新\n    seg[id].val = seg[id].rv();     //更新實際值\n    seg[id].tag = 0;                //往下推完之後設定為預設\n}\n\n//區間修改\nvoid modify(int cur,int l,int r,int ql,int qr,int val){\n    if (r<=l||ql>=r||qr<=l)return;\n    if (ql<=l && qr>=r) {\n        seg[cur].tag += val;               //將被完整包含的區間的懶標加上修改值\n        return;\n    }\n    int mid = (l+r)/2;\n    modify(cur*2,l,mid,ql,qr,val);          //修改左右子樹\n    modify(cur*2+1,mid,r,ql,qr,val);        //遞迴完拉上來的過程中把上面的數值更新成有懶標\n    seg[cur].val = max(seg[2*cur].rv(),seg[2*cur+1].rv());\n}\n\n//區間詢問\nint query(int cur,int l,int r,int ql,int qr){\n    if(r<=l || ql>=r || qr<=l)return -INF;      //空集合直接回傳\n    if(ql<=l && qr>=r)return seg[cur].rv();     //包含在要詢問的範圍中，回傳實際值\n    push(cur);                                  //將懶標在遞迴下去的過程中下推\n    int mid = (l+r)/2;                          //遞迴查詢左右子樹\n    return max(query(cur*2,l,mid,ql,qr),query(cur*2+1,mid,r,ql,qr));\n}\n\nsigned main(){\n    ios;\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)cin>>arr[i];\n    build(1,n+1,1);\n    \n    while(m--){\n        int p;cin>>p;\n        if(p==1){\n            int x,y,k;cin>>x>>y>>k;\n            modify(1,1,n+1,x,y+1,k);\n        }\n        else if(p==2){\n            int x,y;cin>>x>>y;\n            int ans = query(1,1,n+1,x,y+1);\n            cout<<ans<<endl;\n        }\n    }\n}\n```\n\n### 1224 . 矩形覆蓋面積計算\n[題目連結](https://tioj.ck.tp.edu.tw/problems/1224)\n[Submission2:AC](https://tioj.ck.tp.edu.tw/submissions/261541)\n\n> 題意：給你平面上n個矩形，請求出它們覆蓋的總表面積。\n\n這一題所使用的技巧是<font color=\"#f00\">掃描線</font>以及<font color=\"#f00\">線段樹</font>，下圖中的水平藍色線即為掃描線，由y=0開始往上掃描，當遇到了矩形的邊，利用線段樹查詢區間內當前的矩形寬度，乘上兩掃描線的高度差即為面積。當然，掃描線也可以使用垂直方向的線段由左而右的掃描，實作細節是一樣的。\n\n![](https://i.imgur.com/pAsHmXd.jpg)\n\n#### 線段樹維護\n\n##### 方法一\n我們可以定義線段樹$seg[cur]$為區間$[l,r]$中有被**矩形覆蓋的大小**有多大，也就是圖中當前掃描線對應到的區域的寬度。這樣子維護有一個問題，當我們直接用$seg[cur]$儲存答案，我們在修改的時候沒有辦法確切知道這段區間被覆蓋的情況。\n\n下圖為一種模擬的情況，每一個區間的數字代表著非0的數字個數，也就是它的寬度。今天我們要對區間$[4,6]$加減值，將區間拆成$[4,4]$跟$[5,6]$，這時候區間$[3,4]$的數值是1，我們卻不知道到底是3還是4是有被覆蓋到的，必須要遞迴下去到葉節點才能得到完整的覆蓋情況，這時候每一次加減值的複雜就會提升到$O(n)$，因此不能以這種方式維護。\n\n![](https://i.imgur.com/DOeuFyx.png)\n\n\n##### 方法二\n有別於第一種方法對$seg[id]$進行維護，我們可以多開一個區間 $tag$ 來紀錄被矩形覆蓋的情況。下圖有3個矩形，其中的數字代表每一塊區域被覆蓋的情況，這邊使用了$tag$來紀錄（他是附在區間上的，不會像圖中一樣的方式呈現）。tag的數值為非負整數，紀錄當前區間有多少矩形覆蓋在上面，用$tag$來輔助維護$seg[id]$可以在$O(logn)$的時間進行修改與查詢。\n\n![](https://i.imgur.com/xGuEmB4.jpg)\n\n以下程式碼是是 $tag$ 的轉移，當大的區間的tag值不為0，代表有一個矩形曾完整覆蓋這個區間，這時候可以直接回傳區間大小，否則即回傳左右節點的$sed[left],seg[right]$的數值。\n\n這邊定義$seg[id]$為：「考慮 id 的子孫們（不含 id 本身）的所有 tag 值，假設這些子孫只有被tag值作用過，共有多少非0的數字」。\n\n```cpp=\nseg[cur].val = (seg[2*cur].tag?mid-l:seg[2*cur].val)\n              +(seg[2*cur+1].tag?r-mid:seg[2*cur+1].val);\n```\n#### 實作方法\n\n##### 矩形維護\n首先是維護矩形的方法。我們一個矩形總共要維護四個東西：矩形左界x1、矩形右界x2、矩形上下界的y座標（分上下兩條），這兩條邊是下界或是上界val。為什麼要水平方向要分兩條討論？是因為下界代表進入，當掃描線掃到這一條邊的時候表示我們要新增區間 $[x1,x2)$ 進入線段樹；反之如果掃到了上界，則表示離開這個矩形，在線段樹中扣掉區間 $[x1,x2)$。\n\n```cpp=\nstruct Node{    //每一個矩陣分成上下兩條邊\n    int x1;     //矩形左界x1\n    int x2;     //矩形右界x2\n    int y;      //矩形y座標（分上下兩邊）\n    int val;    //val = ±1(進入代表1、離開代表-1)\n    \n}arr[2*N];\n```\n\n上下界我們利用val維護，當 $val=1$ 時表示是矩形的下界； $val=-1$ 則是矩形上界，這兩個搭配在一起剛好就可以用線段樹區間加值的方式進行操作！總共有 $n$ 個矩形，因此我們要掃描線總共掃描 $2n$ 條線段。\n\n##### 線段樹\n一樣對值域（這題是1000000）的4倍開了線段樹，同時維護一個非負整數 $tag$ 表示區間被覆蓋的情況。當每一次修改完成之後，我們可以直接取用根節點 $seg[1]$ 的數值表示寬度（非0的個數）！\n```cpp=+\n//seg[i]表示i的左右兩子樹的區間非0的個數\nstruct node{    //建立線段樹\n    int val;    //維護非0個數\n    int tag;    //使用tag紀錄區間被覆蓋次數\n}seg[4*M];\n```\n接下來就是在程式執行的過程中將 $2n$ 條邊依照y座標進行排序 $O(nlogn)$，接著依序使用掃描線搭配線段樹的修改，計算矩形的面積。最後就是輸出加起來的答案。\n\n{% note info %}\n**Debug 小錯誤**\n[Submission1:WA](https://tioj.ck.tp.edu.tw/submissions/261512)\n可以看到有一筆測資過不了，95分QQQ\n\n![](https://i.imgur.com/1UNrejV.png)\n\n後來debug之後發現到，因為我是對每一個矩形先輸入下界之後才是上界，當我在排序的過程中，上界有可能有機會跑到下界之前，造成 $tag$ 被扣到負的情況，但在定義中可以清楚知道 $tag$ 是非負整數造成錯誤。因此只要把排序的過程改成 stable_sort() 即可！\n\n```cpp=\nstable_sort(arr,arr+(n<<1),cmp);\n```\n{% endnote %}\n\n最後終於是程式碼的部分，以下：\n\n```cpp=\n#include <bits/stdc++.h>\n#define ios ios::sync_with_stdio(0),cin.tie(0);\n#define N 100005\n#define M 1000001\n#define lld long long\nusing namespace std;\nint n;\n\nstruct Node{    //每一個矩陣分成上下兩條邊\n    int x1;     //矩形左界x1\n    int x2;     //矩形右界x2\n    int y;      //矩形y座標（分上下兩邊）\n    int val;    //val = ±1(進入代表1、離開代表-1)\n    \n}arr[2*N];\n\n//seg[i]表示i的左右兩子樹的區間非0的個數\nstruct node{    //建立線段樹\n    int val;    //維護非0個數\n    int tag;    //使用tag紀錄區間被覆蓋次數\n    \n}seg[4*M];\n\nbool cmp(Node a, Node b){\n    return a.y<b.y;\n}\n\n//對區間[ql,qr)進行加值val\nvoid modify(int cur,int l,int r,int ql,int qr,int val){\n    if(r <= l || ql >= r || qr <= l)return;\n    if(ql <= l && qr >= r){\n        seg[cur].tag += val;\n        return;\n    }\n    int mid = (l+r)/2;\n    modify(2*cur,l,mid,ql,qr,val);\n    modify(2*cur+1,mid,r,ql,qr,val);\n    \n    //左右節點如有tag表示被完全覆蓋，直接加上區間大小，否則加上seg[左右子樹]\n    seg[cur].val = (seg[2*cur].tag?mid-l:seg[2*cur].val)\n                  +(seg[2*cur+1].tag?r-mid:seg[2*cur+1].val);\n}\n\nint main(){\n    ios;\n    memset(arr,0,sizeof(arr));\n    memset(seg,0,sizeof(seg));\n    \n    cin>>n;                                   //依序輸入左右下上：x1,x2,y1,y2\n    for(int i=0;i<(n<<1);i+=2){\n        int x1,x2,y1,y2;cin>>x1>>x2>>y1>>y2;\n        arr[i] = (Node){x1,x2,y1,1};          //插入矩形下邊，帶入val = 1\n        arr[i+1] = (Node){x1,x2,y2,-1};       //上邊要val = -1\n    }\n    stable_sort(arr,arr+(n<<1),cmp);          //依照y座標由小到大排序\n    \n    int y0 = 0,val = 0;                       //有下而上的枚舉所有水平邊\n    lld ans = 0LL;                            //上一條y的座標，計算高，val為矩形結合起來的寬\n    for(int i=0;i<(n<<1);i++){                //枚舉2n條y的邊\n        ans += (lld)(arr[i].y-y0)*val;        //計算面積（寬*高）\n        modify(1,0,M,arr[i].x1,arr[i].x2,arr[i].val);\n        y0 = arr[i].y;\n        val = seg[1].val;                     //修改後（下一輪）的矩陣寬度\n    }\n    cout<<ans<<'\\n';\n}\n```","source":"_posts/Segment_Tree_problem.md","raw":"---\ntitle: 2020資訊之芽—線段樹例題\ndate: 2021-8-6\ntags: \n    - 2020資訊之芽\n    - 2021暑假筆記\ncategories: \n    - C++進階主題\n    - 線段樹\n\nmathjax: true\n---\n\n## 題目目錄\n- NEOJ 80 RMQ練習\n- NEOJ 249 最大連續和？\n- ZJ d799 區間求和\n- NEOJ 367 RMQ˙改\n- TIOJ 1224 矩形覆蓋面積計算\n<!-- more -->\n\n### RMQ練習\n[題目連結](https://neoj.sprout.tw/problem/80/)\nRMQ = Range minimun query，也就是詢問一個區間的最小值。分析一下兩種不同作法的複雜度：\n{% note default %}\n對於數列 $a_n$ 共n項，k筆詢問，每一次詢問區間$[l,r]$的最大、最小值\n\n**1. 暴力做**\n時間複雜度：<font color=\"#f00\">詢問$O(n)$</font>\n對於每一筆詢問都暴力搜索，最多掃過n個數字，時間複雜度$O(kn)$，對於數字大一點的情況就會TLE\n<br> \n\n**2. 分塊算法**\n可以參見 [這篇文章](https://hackmd.io/@peienwu/rkCDKEcjd)\n\n**3. 線段樹**\n時間複雜度：<font color=\"#f00\">預處理 $O(n)$、詢問$O(logn)$</font>\n首先是預處理建立線段樹，線段樹上約有$2n$個節點，因此空間複雜度是$O(n)$，也就表示預處理是$O(n)$，之後便可$O(logn)$查詢每一筆詢問。以下是各種操作複雜度：\n\n\n* **初始建構**：所有節點恰會建構一次，每個節點 $O(1)$，配合節點樹可得為 $O(𝑛)$\n* **單點修改**：該點的所有祖先節點都會被修改到，其他都不會被修改到，$𝑂(logn)$\n* **區間查詢**：每筆詢問最多詢問到深度為 $O(logn)$ 的節點。在一次詢問中，每一層不會有超過2個節點被詢問，總複雜度為$𝑂(log𝑛)$\n<br> \n\n**4. 稀疏表(Sparse Table)**\n時間複雜度：<font color=\"#f00\">預處理 $O(nlogn)$、詢問$O(1)$</font>\n參考 [這篇文章](https://hackmd.io/@peienwu/H1W1Y18Gt)\n{% endnote %}\n\n這一題就是基礎的要有支援區間查詢、單點修改的線段樹，也是最簡單的一種！\n```cpp=\n#include <bits/stdc++.h>\n#define ios ios::sync_with_stdio(0),cin.tie(0);\n#define N 1000000\n#define INF 1e9\nusing namespace std;\nint seg[4 * N],arr[N],n,m;\n\nvoid build(int l,int r,int cur){\n    if(r<=l)return;\n    if(r-l==1){\n        seg[cur] = arr[l];\n        return;\n    }\n    int m = (l+r)/2;\n    build(l,m,2*cur);\n    build(m,r,2*cur+1);\n    seg[cur] = min(seg[2*cur],seg[2*cur+1]);\n}\n\n//單點修改\nvoid modify(int cur,int l,int r,int ind,int val){\n    if(r<=l)return;\n    if(r-l==1 && l==ind){\n        seg[cur]=val;\n        return;\n    }\n    int mid = (l+r)/2;\n    if(ind<mid)modify(cur*2,l,mid,ind,val);\n    else modify(cur*2+1,mid,r,ind,val);\n    seg[cur] = min(seg[2*cur],seg[2*cur+1]);\n}\n\n//區間詢問\nint query(int cur,int l,int r,int ql,int qr){\n    if(r<=l || ql>=r || qr<=l)return INF;\n    if(ql<=l && qr>=r){\n        return seg[cur];\n    }\n    int mid = (l+r)/2;\n    return min(query(cur*2,l,mid,ql,qr),query(cur*2+1,mid,r,ql,qr));\n}\n\nint main(){\n    ios;\n    cin>>m>>n;\n    for(int i=1;i<=n;i++)cin>>arr[i];\n    build(1,n+1,1);\n    \n    while(m--){\n        int p;cin>>p;\n        if(p==2){\n            int x,y;cin>>x>>y;\n            modify(1,1,n+1,x+1,y);\n        }\n        else if(p==1){\n            int x,y;cin>>x>>y;\n            int ans = query(1,1,n+1,x+1,y+2);\n            cout<<ans<<endl;\n        }\n    }\n}\n```\n\n### 最大連續和？\n[題目連結](https://neoj.sprout.tw/problem/249/)\n這題題結果我是WA在INF太大可能會溢位的問題，把INF調整成 $5\\times 10^{14}$ 是差不多的\n\n這一題要維護區間最大連續和，跟dp的最大連續和差了「區間」兩字，整個實作的方式跟複雜度就不一樣了。DP的作法如果直接套用在這一題的話，複雜度約為：$O(QN)$，絕對會炸裂，因此只能用線段樹維護這個東西。\n\n{% note primary %}\n**區間最大連續和**\n在分治法的單元有提到分治法最重要的是假定左右兩側（對應過來就是兩子樹）是維護好的，也就是符合定義，要想的是要如何處理橫跨左右子樹的情況。\n要如何知道橫跨中間的最大值呢？這時候我們可以維護4個數值，來更新每一個線段樹上的節點的數值。\n1. **總和(sum)**\n$cur.sum = left.sum+right.sum$\n3. **最大前綴和(lmax)**\n$cur.lmax = max(left.lmax,left.sum+right.lmax)$\n5. **最大後綴和(rmax)**\n$cur.rmax = max(right.rmax,right.sum+left.rmax)$\n7. **區間最大連續和(tmax)**\n$cur.tmax = max(left.tmax,right.tmax,left.rmax+right.lmax)$\n{% endnote %}\n維護最大後綴跟最大前綴和（首跟末有被取到的情況），就可以$O(1)$ 維護每一個節點的區間最大連續和，複雜度：詢問$O(logn)$，因此總時間$O(Qlogn)$就可以AC了!\n\n\n```cpp=\n#include <bits/stdc++.h>\n#define ios ios::sync_with_stdio(0),cin.tie(0);\n#define int long long\n#define N 100005\n#define INF 500000000000000\nusing namespace std;\nint arr[N],n,m;\n\nstruct Node{\n    int sum;    //區間總和\n    int lmax;   //最大前綴和\n    int rmax;   //最大後綴和\n    int tmax;   //區間連續最大和\n}seg[N<<2];\n\n//求當下的區間連續最大和\nvoid modify(Node &cur,Node &left,Node &right){\n    cur.sum = left.sum+right.sum;\n    cur.lmax = max(left.lmax,left.sum+right.lmax);\n    cur.rmax = max(right.rmax,right.sum+left.rmax);\n    cur.tmax = max(max(left.tmax,right.tmax),left.rmax+right.lmax);\n}\n\n//建立線段樹：[l,r)\nvoid build(int l,int r,int cur){\n    if(r<=l)return;\n    if(r-l==1){\n        seg[cur] = {arr[l],arr[l],arr[l],arr[l]};\n        return;\n    }\n    int mid = (l+r)/2;\n    build(l,mid,2*cur);\n    build(mid,r,2*cur+1);\n    modify(seg[cur],seg[2*cur],seg[2*cur+1]);\n}\n\n//區間詢問：[l,r)\nNode query(int cur,int l,int r,int ql,int qr){\n    if(r<=l || ql>=r || qr<=l)return {-INF,-INF,-INF,-INF};\n    if(ql<=l && qr>=r)return seg[cur];\n    int mid = (l+r)/2;\n    auto left = query(2*cur,l,mid,ql,qr);\n    auto right = query(2*cur+1,mid,r,ql,qr);\n    Node temp;\n    modify(temp,left,right);\n    return temp;\n}\n\nsigned main(){\n    ios;\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)cin>>arr[i];\n    build(1,n+1,1);\n    \n    while(m--){\n        int l,r;cin>>l>>r;\n        auto ans = query(1,1,n+1,l,r+1);\n        cout<<max(ans.tmax,(long long)0)<<endl;\n    }\n}\n```\n\n### d799區間求和\n[題目連結](https://zerojudge.tw/ShowProblem?problemid=d799)\n這一題要求兩個操作，區間加值跟區間查詢，這時候就必須用到**懶標(lazy tags)** 輔助求和。\n\n> 範例測資：\n> 10\n> 1 2 3 4 5 6 7 8 9 10\n> 3\n> 2 2 4\n> 1 3 6 3\n> 2 2 4\n\n![](https://i.imgur.com/MJMDQE9.jpg)\n左邊是整棵線段樹，右邊則是懶標，可以看到3要往下推，但學長的程式碼中並沒有執行這個步驟，這樣會導致query的時候發生錯誤。\n\n```cpp=\n#include <iostream>\n#include <string.h>\n#include <stdio.h>\n#define ios ios::sync_with_stdio(0),cin.tie(0);\n#define N 500005\n#define int long long\nusing namespace std;\n\nstruct Node{            //線段樹每一個節點\n    int val=0,tag=0,sz; //val原本的值、tag懶標、sz區間大小\n    int rv(){           //回傳實際節點的值\n        return val+tag*sz;\n    }\n}seg[4*N];\n\nint arr[N],n,m;\n\nvoid build(int l,int r,int cur){    //建立線段樹\n    seg[cur].sz = r-l;              //更新節點的大小\n    if(r<=l)return;                 //空區間回傳\n    if(r-l==1){                     //設定當前節點的值\n        seg[cur].val = arr[l];\n        return;\n    }\n    int m = (l+r)/2;                //分別遞迴建立左右子樹\n    build(l,m,2*cur);\n    build(m,r,2*cur+1);\n    seg[cur].val = seg[2*cur].val+seg[2*cur+1].val;\n}\n\n//把id的懶標在query的時候往下推\nvoid push(int id){\n    seg[2*id].tag += seg[id].tag;   //左子樹懶標更新\n    seg[2*id+1].tag += seg[id].tag; //右子樹懶標更新\n    seg[id].val = seg[id].rv();     //更新實際值\n    seg[id].tag = 0;                //往下推完之後設定為預設\n}\n\n//區間修改\nvoid modify(int cur,int l,int r,int ql,int qr,int val){\n    if (r<=l||ql>=r||qr<=l)return;\n    if (ql<=l && qr>=r) {\n        seg[cur].tag += val;               //將被完整包含的區間的懶標加上修改值\n        return;\n    }\n    int mid = (l+r)/2;\n    modify(cur*2,l,mid,ql,qr,val);          //修改左右子樹\n    modify(cur*2+1,mid,r,ql,qr,val);        //遞迴完拉上來的過程中把上面的數值更新成有懶標\n    seg[cur].val = seg[2*cur].rv()+seg[2*cur+1].rv();\n}\n\n//區間詢問\nint query(int cur,int l,int r,int ql,int qr){\n    if(r<=l || ql>=r || qr<=l)return 0;         //空集合直接回傳\n    if(ql<=l && qr>=r)return seg[cur].rv();     //包含在要詢問的範圍中，回傳實際值\n    push(cur);                                  //將懶標在遞迴下去的過程中下推\n    int mid = (l+r)/2;                          //遞迴查詢左右子樹\n    return query(cur*2,l,mid,ql,qr)+query(cur*2+1,mid,r,ql,qr);\n}\n\nsigned main(){\n    ios;\n    cin>>n;\n    for(int i=1;i<=n;i++)cin>>arr[i];\n    build(1,n+1,1);\n    cin>>m;\n    \n    while(m--){\n        int p;cin>>p;\n        if(p==1){\n            int x,y,k;cin>>x>>y>>k;\n            modify(1,1,n+1,x,y+1,k);\n        }\n        else if(p==2){\n            int x,y;cin>>x>>y;\n            int ans = query(1,1,n+1,x,y+1);\n            cout<<ans<<endl;\n        }\n    }\n}\n```\n\n### RMQ˙改\n[題目連結](https://neoj.sprout.tw/problem/367/)\n這一題是Range Maximum Query搭配區間加值，如果直接套用前面RMQ或是區間和的模板就輕鬆許多。這一題主要跟前面題目的不同在於它的sz要維護成1，有別於求區間和要乘上區間大小，每一個值不需要乘上區間大小，因此設成0。\n\n這題第二筆測資明顯就是要卡暴力解法。\n![](https://i.imgur.com/tC2Wucw.png)\n\n```cpp=\n#include <iostream>\n#include <string.h>\n#include <stdio.h>\n#define ios ios::sync_with_stdio(0),cin.tie(0);\n#define N 100005\n#define int long long\nusing namespace std;\nconst int INF = 1e14;\n\nstruct Node{            //線段樹每一個節點\n    int val=0,tag=0,sz=0; //val原本的值、tag懶標、sz區間大小\n    int rv(){           //回傳實際節點的值\n        return val+tag*sz;\n    }\n}seg[4*N];\n\nint arr[N],n,m;\n\nvoid build(int l,int r,int cur){    //建立線段樹\n    seg[cur].sz = 1;                //更新節點的大小\n    if(r<=l)return;                 //空區間回傳\n    if(r-l==1){                     //設定當前節點的值\n        seg[cur].val = arr[l];\n        return;\n    }\n    int m = (l+r)/2;                //分別遞迴建立左右子樹\n    build(l,m,2*cur);\n    build(m,r,2*cur+1);\n    seg[cur].val = max(seg[2*cur].val,seg[2*cur+1].val);\n}\n\n//把id的懶標在query的時候往下推\nvoid push(int id){\n    seg[2*id].tag += seg[id].tag;   //左子樹懶標更新\n    seg[2*id+1].tag += seg[id].tag; //右子樹懶標更新\n    seg[id].val = seg[id].rv();     //更新實際值\n    seg[id].tag = 0;                //往下推完之後設定為預設\n}\n\n//區間修改\nvoid modify(int cur,int l,int r,int ql,int qr,int val){\n    if (r<=l||ql>=r||qr<=l)return;\n    if (ql<=l && qr>=r) {\n        seg[cur].tag += val;               //將被完整包含的區間的懶標加上修改值\n        return;\n    }\n    int mid = (l+r)/2;\n    modify(cur*2,l,mid,ql,qr,val);          //修改左右子樹\n    modify(cur*2+1,mid,r,ql,qr,val);        //遞迴完拉上來的過程中把上面的數值更新成有懶標\n    seg[cur].val = max(seg[2*cur].rv(),seg[2*cur+1].rv());\n}\n\n//區間詢問\nint query(int cur,int l,int r,int ql,int qr){\n    if(r<=l || ql>=r || qr<=l)return -INF;      //空集合直接回傳\n    if(ql<=l && qr>=r)return seg[cur].rv();     //包含在要詢問的範圍中，回傳實際值\n    push(cur);                                  //將懶標在遞迴下去的過程中下推\n    int mid = (l+r)/2;                          //遞迴查詢左右子樹\n    return max(query(cur*2,l,mid,ql,qr),query(cur*2+1,mid,r,ql,qr));\n}\n\nsigned main(){\n    ios;\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)cin>>arr[i];\n    build(1,n+1,1);\n    \n    while(m--){\n        int p;cin>>p;\n        if(p==1){\n            int x,y,k;cin>>x>>y>>k;\n            modify(1,1,n+1,x,y+1,k);\n        }\n        else if(p==2){\n            int x,y;cin>>x>>y;\n            int ans = query(1,1,n+1,x,y+1);\n            cout<<ans<<endl;\n        }\n    }\n}\n```\n\n### 1224 . 矩形覆蓋面積計算\n[題目連結](https://tioj.ck.tp.edu.tw/problems/1224)\n[Submission2:AC](https://tioj.ck.tp.edu.tw/submissions/261541)\n\n> 題意：給你平面上n個矩形，請求出它們覆蓋的總表面積。\n\n這一題所使用的技巧是<font color=\"#f00\">掃描線</font>以及<font color=\"#f00\">線段樹</font>，下圖中的水平藍色線即為掃描線，由y=0開始往上掃描，當遇到了矩形的邊，利用線段樹查詢區間內當前的矩形寬度，乘上兩掃描線的高度差即為面積。當然，掃描線也可以使用垂直方向的線段由左而右的掃描，實作細節是一樣的。\n\n![](https://i.imgur.com/pAsHmXd.jpg)\n\n#### 線段樹維護\n\n##### 方法一\n我們可以定義線段樹$seg[cur]$為區間$[l,r]$中有被**矩形覆蓋的大小**有多大，也就是圖中當前掃描線對應到的區域的寬度。這樣子維護有一個問題，當我們直接用$seg[cur]$儲存答案，我們在修改的時候沒有辦法確切知道這段區間被覆蓋的情況。\n\n下圖為一種模擬的情況，每一個區間的數字代表著非0的數字個數，也就是它的寬度。今天我們要對區間$[4,6]$加減值，將區間拆成$[4,4]$跟$[5,6]$，這時候區間$[3,4]$的數值是1，我們卻不知道到底是3還是4是有被覆蓋到的，必須要遞迴下去到葉節點才能得到完整的覆蓋情況，這時候每一次加減值的複雜就會提升到$O(n)$，因此不能以這種方式維護。\n\n![](https://i.imgur.com/DOeuFyx.png)\n\n\n##### 方法二\n有別於第一種方法對$seg[id]$進行維護，我們可以多開一個區間 $tag$ 來紀錄被矩形覆蓋的情況。下圖有3個矩形，其中的數字代表每一塊區域被覆蓋的情況，這邊使用了$tag$來紀錄（他是附在區間上的，不會像圖中一樣的方式呈現）。tag的數值為非負整數，紀錄當前區間有多少矩形覆蓋在上面，用$tag$來輔助維護$seg[id]$可以在$O(logn)$的時間進行修改與查詢。\n\n![](https://i.imgur.com/xGuEmB4.jpg)\n\n以下程式碼是是 $tag$ 的轉移，當大的區間的tag值不為0，代表有一個矩形曾完整覆蓋這個區間，這時候可以直接回傳區間大小，否則即回傳左右節點的$sed[left],seg[right]$的數值。\n\n這邊定義$seg[id]$為：「考慮 id 的子孫們（不含 id 本身）的所有 tag 值，假設這些子孫只有被tag值作用過，共有多少非0的數字」。\n\n```cpp=\nseg[cur].val = (seg[2*cur].tag?mid-l:seg[2*cur].val)\n              +(seg[2*cur+1].tag?r-mid:seg[2*cur+1].val);\n```\n#### 實作方法\n\n##### 矩形維護\n首先是維護矩形的方法。我們一個矩形總共要維護四個東西：矩形左界x1、矩形右界x2、矩形上下界的y座標（分上下兩條），這兩條邊是下界或是上界val。為什麼要水平方向要分兩條討論？是因為下界代表進入，當掃描線掃到這一條邊的時候表示我們要新增區間 $[x1,x2)$ 進入線段樹；反之如果掃到了上界，則表示離開這個矩形，在線段樹中扣掉區間 $[x1,x2)$。\n\n```cpp=\nstruct Node{    //每一個矩陣分成上下兩條邊\n    int x1;     //矩形左界x1\n    int x2;     //矩形右界x2\n    int y;      //矩形y座標（分上下兩邊）\n    int val;    //val = ±1(進入代表1、離開代表-1)\n    \n}arr[2*N];\n```\n\n上下界我們利用val維護，當 $val=1$ 時表示是矩形的下界； $val=-1$ 則是矩形上界，這兩個搭配在一起剛好就可以用線段樹區間加值的方式進行操作！總共有 $n$ 個矩形，因此我們要掃描線總共掃描 $2n$ 條線段。\n\n##### 線段樹\n一樣對值域（這題是1000000）的4倍開了線段樹，同時維護一個非負整數 $tag$ 表示區間被覆蓋的情況。當每一次修改完成之後，我們可以直接取用根節點 $seg[1]$ 的數值表示寬度（非0的個數）！\n```cpp=+\n//seg[i]表示i的左右兩子樹的區間非0的個數\nstruct node{    //建立線段樹\n    int val;    //維護非0個數\n    int tag;    //使用tag紀錄區間被覆蓋次數\n}seg[4*M];\n```\n接下來就是在程式執行的過程中將 $2n$ 條邊依照y座標進行排序 $O(nlogn)$，接著依序使用掃描線搭配線段樹的修改，計算矩形的面積。最後就是輸出加起來的答案。\n\n{% note info %}\n**Debug 小錯誤**\n[Submission1:WA](https://tioj.ck.tp.edu.tw/submissions/261512)\n可以看到有一筆測資過不了，95分QQQ\n\n![](https://i.imgur.com/1UNrejV.png)\n\n後來debug之後發現到，因為我是對每一個矩形先輸入下界之後才是上界，當我在排序的過程中，上界有可能有機會跑到下界之前，造成 $tag$ 被扣到負的情況，但在定義中可以清楚知道 $tag$ 是非負整數造成錯誤。因此只要把排序的過程改成 stable_sort() 即可！\n\n```cpp=\nstable_sort(arr,arr+(n<<1),cmp);\n```\n{% endnote %}\n\n最後終於是程式碼的部分，以下：\n\n```cpp=\n#include <bits/stdc++.h>\n#define ios ios::sync_with_stdio(0),cin.tie(0);\n#define N 100005\n#define M 1000001\n#define lld long long\nusing namespace std;\nint n;\n\nstruct Node{    //每一個矩陣分成上下兩條邊\n    int x1;     //矩形左界x1\n    int x2;     //矩形右界x2\n    int y;      //矩形y座標（分上下兩邊）\n    int val;    //val = ±1(進入代表1、離開代表-1)\n    \n}arr[2*N];\n\n//seg[i]表示i的左右兩子樹的區間非0的個數\nstruct node{    //建立線段樹\n    int val;    //維護非0個數\n    int tag;    //使用tag紀錄區間被覆蓋次數\n    \n}seg[4*M];\n\nbool cmp(Node a, Node b){\n    return a.y<b.y;\n}\n\n//對區間[ql,qr)進行加值val\nvoid modify(int cur,int l,int r,int ql,int qr,int val){\n    if(r <= l || ql >= r || qr <= l)return;\n    if(ql <= l && qr >= r){\n        seg[cur].tag += val;\n        return;\n    }\n    int mid = (l+r)/2;\n    modify(2*cur,l,mid,ql,qr,val);\n    modify(2*cur+1,mid,r,ql,qr,val);\n    \n    //左右節點如有tag表示被完全覆蓋，直接加上區間大小，否則加上seg[左右子樹]\n    seg[cur].val = (seg[2*cur].tag?mid-l:seg[2*cur].val)\n                  +(seg[2*cur+1].tag?r-mid:seg[2*cur+1].val);\n}\n\nint main(){\n    ios;\n    memset(arr,0,sizeof(arr));\n    memset(seg,0,sizeof(seg));\n    \n    cin>>n;                                   //依序輸入左右下上：x1,x2,y1,y2\n    for(int i=0;i<(n<<1);i+=2){\n        int x1,x2,y1,y2;cin>>x1>>x2>>y1>>y2;\n        arr[i] = (Node){x1,x2,y1,1};          //插入矩形下邊，帶入val = 1\n        arr[i+1] = (Node){x1,x2,y2,-1};       //上邊要val = -1\n    }\n    stable_sort(arr,arr+(n<<1),cmp);          //依照y座標由小到大排序\n    \n    int y0 = 0,val = 0;                       //有下而上的枚舉所有水平邊\n    lld ans = 0LL;                            //上一條y的座標，計算高，val為矩形結合起來的寬\n    for(int i=0;i<(n<<1);i++){                //枚舉2n條y的邊\n        ans += (lld)(arr[i].y-y0)*val;        //計算面積（寬*高）\n        modify(1,0,M,arr[i].x1,arr[i].x2,arr[i].val);\n        y0 = arr[i].y;\n        val = seg[1].val;                     //修改後（下一輪）的矩陣寬度\n    }\n    cout<<ans<<'\\n';\n}\n```","slug":"Segment_Tree_problem","published":1,"updated":"2021-09-19T11:26:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvyspmim002hmuyxg922gdwg","content":"<h2 id=\"題目目錄\"><a href=\"#題目目錄\" class=\"headerlink\" title=\"題目目錄\"></a>題目目錄</h2><ul>\n<li>NEOJ 80 RMQ練習</li>\n<li>NEOJ 249 最大連續和？</li>\n<li>ZJ d799 區間求和</li>\n<li>NEOJ 367 RMQ˙改</li>\n<li>TIOJ 1224 矩形覆蓋面積計算<span id=\"more\"></span>\n</li>\n</ul>\n<h3 id=\"RMQ練習\"><a href=\"#RMQ練習\" class=\"headerlink\" title=\"RMQ練習\"></a>RMQ練習</h3><p><a href=\"https://neoj.sprout.tw/problem/80/\">題目連結</a><br>RMQ = Range minimun query，也就是詢問一個區間的最小值。分析一下兩種不同作法的複雜度：<br><div class=\"note default\">\n            <p>對於數列 $a_n$ 共n項，k筆詢問，每一次詢問區間$[l,r]$的最大、最小值</p><p><strong>1. 暴力做</strong><br>時間複雜度：<font color=\"#f00\">詢問$O(n)$</font><br>對於每一筆詢問都暴力搜索，最多掃過n個數字，時間複雜度$O(kn)$，對於數字大一點的情況就會TLE<br><br> </p><p><strong>2. 分塊算法</strong><br>可以參見 <a href=\"https://hackmd.io/@peienwu/rkCDKEcjd\">這篇文章</a></p><p><strong>3. 線段樹</strong><br>時間複雜度：<font color=\"#f00\">預處理 $O(n)$、詢問$O(logn)$</font><br>首先是預處理建立線段樹，線段樹上約有$2n$個節點，因此空間複雜度是$O(n)$，也就表示預處理是$O(n)$，之後便可$O(logn)$查詢每一筆詢問。以下是各種操作複雜度：</p><ul><li><strong>初始建構</strong>：所有節點恰會建構一次，每個節點 $O(1)$，配合節點樹可得為 $O(𝑛)$</li><li><strong>單點修改</strong>：該點的所有祖先節點都會被修改到，其他都不會被修改到，$𝑂(logn)$</li><li><strong>區間查詢</strong>：每筆詢問最多詢問到深度為 $O(logn)$ 的節點。在一次詢問中，每一層不會有超過2個節點被詢問，總複雜度為$𝑂(log𝑛)$<br><br> </li></ul><p><strong>4. 稀疏表(Sparse Table)</strong><br>時間複雜度：<font color=\"#f00\">預處理 $O(nlogn)$、詢問$O(1)$</font><br>參考 <a href=\"https://hackmd.io/@peienwu/H1W1Y18Gt\">這篇文章</a></p>\n          </div></p>\n<p>這一題就是基礎的要有支援區間查詢、單點修改的線段樹，也是最簡單的一種！<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 1000000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1e9</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> seg[<span class=\"number\">4</span> * N],arr[N],n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> cur)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&lt;=l)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r-l==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        seg[cur] = arr[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = (l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(l,m,<span class=\"number\">2</span>*cur);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(m,r,<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>);</span><br><span class=\"line\">    seg[cur] = <span class=\"built_in\">min</span>(seg[<span class=\"number\">2</span>*cur],seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//單點修改</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"keyword\">int</span> cur,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> ind,<span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&lt;=l)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r-l==<span class=\"number\">1</span> &amp;&amp; l==ind)&#123;</span><br><span class=\"line\">        seg[cur]=val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ind&lt;mid)<span class=\"built_in\">modify</span>(cur*<span class=\"number\">2</span>,l,mid,ind,val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">modify</span>(cur*<span class=\"number\">2</span>+<span class=\"number\">1</span>,mid,r,ind,val);</span><br><span class=\"line\">    seg[cur] = <span class=\"built_in\">min</span>(seg[<span class=\"number\">2</span>*cur],seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//區間詢問</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> cur,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> ql,<span class=\"keyword\">int</span> qr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&lt;=l || ql&gt;=r || qr&lt;=l)<span class=\"keyword\">return</span> INF;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ql&lt;=l &amp;&amp; qr&gt;=r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> seg[cur];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(<span class=\"built_in\">query</span>(cur*<span class=\"number\">2</span>,l,mid,ql,qr),<span class=\"built_in\">query</span>(cur*<span class=\"number\">2</span>+<span class=\"number\">1</span>,mid,r,ql,qr));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios;</span><br><span class=\"line\">    cin&gt;&gt;m&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)cin&gt;&gt;arr[i];</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p;cin&gt;&gt;p;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x,y;cin&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">            <span class=\"built_in\">modify</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,x+<span class=\"number\">1</span>,y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(p==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x,y;cin&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ans = <span class=\"built_in\">query</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,x+<span class=\"number\">1</span>,y+<span class=\"number\">2</span>);</span><br><span class=\"line\">            cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"最大連續和？\"><a href=\"#最大連續和？\" class=\"headerlink\" title=\"最大連續和？\"></a>最大連續和？</h3><p><a href=\"https://neoj.sprout.tw/problem/249/\">題目連結</a><br>這題題結果我是WA在INF太大可能會溢位的問題，把INF調整成 $5\\times 10^{14}$ 是差不多的</p>\n<p>這一題要維護區間最大連續和，跟dp的最大連續和差了「區間」兩字，整個實作的方式跟複雜度就不一樣了。DP的作法如果直接套用在這一題的話，複雜度約為：$O(QN)$，絕對會炸裂，因此只能用線段樹維護這個東西。</p>\n<div class=\"note primary\">\n            <p><strong>區間最大連續和</strong><br>在分治法的單元有提到分治法最重要的是假定左右兩側（對應過來就是兩子樹）是維護好的，也就是符合定義，要想的是要如何處理橫跨左右子樹的情況。<br>要如何知道橫跨中間的最大值呢？這時候我們可以維護4個數值，來更新每一個線段樹上的節點的數值。</p><ol><li><strong>總和(sum)</strong><br>$cur.sum = left.sum+right.sum$</li><li><strong>最大前綴和(lmax)</strong><br>$cur.lmax = max(left.lmax,left.sum+right.lmax)$</li><li><strong>最大後綴和(rmax)</strong><br>$cur.rmax = max(right.rmax,right.sum+left.rmax)$</li><li><strong>區間最大連續和(tmax)</strong><br>$cur.tmax = max(left.tmax,right.tmax,left.rmax+right.lmax)$</li></ol>\n          </div>\n<p>維護最大後綴跟最大前綴和（首跟末有被取到的情況），就可以$O(1)$ 維護每一個節點的區間最大連續和，複雜度：詢問$O(logn)$，因此總時間$O(Qlogn)$就可以AC了!</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 500000000000000</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> arr[N],n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum;    <span class=\"comment\">//區間總和</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> lmax;   <span class=\"comment\">//最大前綴和</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> rmax;   <span class=\"comment\">//最大後綴和</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmax;   <span class=\"comment\">//區間連續最大和</span></span><br><span class=\"line\">&#125;seg[N&lt;&lt;<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//求當下的區間連續最大和</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">(Node &amp;cur,Node &amp;left,Node &amp;right)</span></span>&#123;</span><br><span class=\"line\">    cur.sum = left.sum+right.sum;</span><br><span class=\"line\">    cur.lmax = <span class=\"built_in\">max</span>(left.lmax,left.sum+right.lmax);</span><br><span class=\"line\">    cur.rmax = <span class=\"built_in\">max</span>(right.rmax,right.sum+left.rmax);</span><br><span class=\"line\">    cur.tmax = <span class=\"built_in\">max</span>(<span class=\"built_in\">max</span>(left.tmax,right.tmax),left.rmax+right.lmax);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//建立線段樹：[l,r)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> cur)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&lt;=l)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r-l==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        seg[cur] = &#123;arr[l],arr[l],arr[l],arr[l]&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(l,mid,<span class=\"number\">2</span>*cur);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(mid,r,<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">modify</span>(seg[cur],seg[<span class=\"number\">2</span>*cur],seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//區間詢問：[l,r)</span></span><br><span class=\"line\"><span class=\"function\">Node <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> cur,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> ql,<span class=\"keyword\">int</span> qr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&lt;=l || ql&gt;=r || qr&lt;=l)<span class=\"keyword\">return</span> &#123;-INF,-INF,-INF,-INF&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ql&lt;=l &amp;&amp; qr&gt;=r)<span class=\"keyword\">return</span> seg[cur];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> left = <span class=\"built_in\">query</span>(<span class=\"number\">2</span>*cur,l,mid,ql,qr);</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> right = <span class=\"built_in\">query</span>(<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>,mid,r,ql,qr);</span><br><span class=\"line\">    Node temp;</span><br><span class=\"line\">    <span class=\"built_in\">modify</span>(temp,left,right);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)cin&gt;&gt;arr[i];</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l,r;cin&gt;&gt;l&gt;&gt;r;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> ans = <span class=\"built_in\">query</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,l,r+<span class=\"number\">1</span>);</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"built_in\">max</span>(ans.tmax,(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)<span class=\"number\">0</span>)&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"d799區間求和\"><a href=\"#d799區間求和\" class=\"headerlink\" title=\"d799區間求和\"></a>d799區間求和</h3><p><a href=\"https://zerojudge.tw/ShowProblem?problemid=d799\">題目連結</a><br>這一題要求兩個操作，區間加值跟區間查詢，這時候就必須用到<strong>懶標(lazy tags)</strong> 輔助求和。</p>\n<blockquote>\n<p>範例測資：<br>10<br>1 2 3 4 5 6 7 8 9 10<br>3<br>2 2 4<br>1 3 6 3<br>2 2 4</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/MJMDQE9.jpg\" alt=\"\"><br>左邊是整棵線段樹，右邊則是懶標，可以看到3要往下推，但學長的程式碼中並沒有執行這個步驟，這樣會導致query的時候發生錯誤。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 500005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span>            <span class=\"comment\">//線段樹每一個節點</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> val=<span class=\"number\">0</span>,tag=<span class=\"number\">0</span>,sz; <span class=\"comment\">//val原本的值、tag懶標、sz區間大小</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rv</span><span class=\"params\">()</span></span>&#123;           <span class=\"comment\">//回傳實際節點的值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> val+tag*sz;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;seg[<span class=\"number\">4</span>*N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> arr[N],n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> cur)</span></span>&#123;    <span class=\"comment\">//建立線段樹</span></span><br><span class=\"line\">    seg[cur].sz = r-l;              <span class=\"comment\">//更新節點的大小</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&lt;=l)<span class=\"keyword\">return</span>;                 <span class=\"comment\">//空區間回傳</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r-l==<span class=\"number\">1</span>)&#123;                     <span class=\"comment\">//設定當前節點的值</span></span><br><span class=\"line\">        seg[cur].val = arr[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = (l+r)/<span class=\"number\">2</span>;                <span class=\"comment\">//分別遞迴建立左右子樹</span></span><br><span class=\"line\">    <span class=\"built_in\">build</span>(l,m,<span class=\"number\">2</span>*cur);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(m,r,<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>);</span><br><span class=\"line\">    seg[cur].val = seg[<span class=\"number\">2</span>*cur].val+seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>].val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把id的懶標在query的時候往下推</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>&#123;</span><br><span class=\"line\">    seg[<span class=\"number\">2</span>*id].tag += seg[id].tag;   <span class=\"comment\">//左子樹懶標更新</span></span><br><span class=\"line\">    seg[<span class=\"number\">2</span>*id+<span class=\"number\">1</span>].tag += seg[id].tag; <span class=\"comment\">//右子樹懶標更新</span></span><br><span class=\"line\">    seg[id].val = seg[id].<span class=\"built_in\">rv</span>();     <span class=\"comment\">//更新實際值</span></span><br><span class=\"line\">    seg[id].tag = <span class=\"number\">0</span>;                <span class=\"comment\">//往下推完之後設定為預設</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//區間修改</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"keyword\">int</span> cur,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> ql,<span class=\"keyword\">int</span> qr,<span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r&lt;=l||ql&gt;=r||qr&lt;=l)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ql&lt;=l &amp;&amp; qr&gt;=r) &#123;</span><br><span class=\"line\">        seg[cur].tag += val;               <span class=\"comment\">//將被完整包含的區間的懶標加上修改值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">modify</span>(cur*<span class=\"number\">2</span>,l,mid,ql,qr,val);          <span class=\"comment\">//修改左右子樹</span></span><br><span class=\"line\">    <span class=\"built_in\">modify</span>(cur*<span class=\"number\">2</span>+<span class=\"number\">1</span>,mid,r,ql,qr,val);        <span class=\"comment\">//遞迴完拉上來的過程中把上面的數值更新成有懶標</span></span><br><span class=\"line\">    seg[cur].val = seg[<span class=\"number\">2</span>*cur].<span class=\"built_in\">rv</span>()+seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>].<span class=\"built_in\">rv</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//區間詢問</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> cur,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> ql,<span class=\"keyword\">int</span> qr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&lt;=l || ql&gt;=r || qr&lt;=l)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;         <span class=\"comment\">//空集合直接回傳</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ql&lt;=l &amp;&amp; qr&gt;=r)<span class=\"keyword\">return</span> seg[cur].<span class=\"built_in\">rv</span>();     <span class=\"comment\">//包含在要詢問的範圍中，回傳實際值</span></span><br><span class=\"line\">    <span class=\"built_in\">push</span>(cur);                                  <span class=\"comment\">//將懶標在遞迴下去的過程中下推</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>;                          <span class=\"comment\">//遞迴查詢左右子樹</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(cur*<span class=\"number\">2</span>,l,mid,ql,qr)+<span class=\"built_in\">query</span>(cur*<span class=\"number\">2</span>+<span class=\"number\">1</span>,mid,r,ql,qr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)cin&gt;&gt;arr[i];</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    cin&gt;&gt;m;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p;cin&gt;&gt;p;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x,y,k;cin&gt;&gt;x&gt;&gt;y&gt;&gt;k;</span><br><span class=\"line\">            <span class=\"built_in\">modify</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,x,y+<span class=\"number\">1</span>,k);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(p==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x,y;cin&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ans = <span class=\"built_in\">query</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,x,y+<span class=\"number\">1</span>);</span><br><span class=\"line\">            cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"RMQ˙改\"><a href=\"#RMQ˙改\" class=\"headerlink\" title=\"RMQ˙改\"></a>RMQ˙改</h3><p><a href=\"https://neoj.sprout.tw/problem/367/\">題目連結</a><br>這一題是Range Maximum Query搭配區間加值，如果直接套用前面RMQ或是區間和的模板就輕鬆許多。這一題主要跟前面題目的不同在於它的sz要維護成1，有別於求區間和要乘上區間大小，每一個值不需要乘上區間大小，因此設成0。</p>\n<p>這題第二筆測資明顯就是要卡暴力解法。<br><img src=\"https://i.imgur.com/tC2Wucw.png\" alt=\"\"></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">1e14</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span>            <span class=\"comment\">//線段樹每一個節點</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> val=<span class=\"number\">0</span>,tag=<span class=\"number\">0</span>,sz=<span class=\"number\">0</span>; <span class=\"comment\">//val原本的值、tag懶標、sz區間大小</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rv</span><span class=\"params\">()</span></span>&#123;           <span class=\"comment\">//回傳實際節點的值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> val+tag*sz;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;seg[<span class=\"number\">4</span>*N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> arr[N],n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> cur)</span></span>&#123;    <span class=\"comment\">//建立線段樹</span></span><br><span class=\"line\">    seg[cur].sz = <span class=\"number\">1</span>;                <span class=\"comment\">//更新節點的大小</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&lt;=l)<span class=\"keyword\">return</span>;                 <span class=\"comment\">//空區間回傳</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r-l==<span class=\"number\">1</span>)&#123;                     <span class=\"comment\">//設定當前節點的值</span></span><br><span class=\"line\">        seg[cur].val = arr[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = (l+r)/<span class=\"number\">2</span>;                <span class=\"comment\">//分別遞迴建立左右子樹</span></span><br><span class=\"line\">    <span class=\"built_in\">build</span>(l,m,<span class=\"number\">2</span>*cur);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(m,r,<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>);</span><br><span class=\"line\">    seg[cur].val = <span class=\"built_in\">max</span>(seg[<span class=\"number\">2</span>*cur].val,seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>].val);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把id的懶標在query的時候往下推</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>&#123;</span><br><span class=\"line\">    seg[<span class=\"number\">2</span>*id].tag += seg[id].tag;   <span class=\"comment\">//左子樹懶標更新</span></span><br><span class=\"line\">    seg[<span class=\"number\">2</span>*id+<span class=\"number\">1</span>].tag += seg[id].tag; <span class=\"comment\">//右子樹懶標更新</span></span><br><span class=\"line\">    seg[id].val = seg[id].<span class=\"built_in\">rv</span>();     <span class=\"comment\">//更新實際值</span></span><br><span class=\"line\">    seg[id].tag = <span class=\"number\">0</span>;                <span class=\"comment\">//往下推完之後設定為預設</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//區間修改</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"keyword\">int</span> cur,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> ql,<span class=\"keyword\">int</span> qr,<span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r&lt;=l||ql&gt;=r||qr&lt;=l)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ql&lt;=l &amp;&amp; qr&gt;=r) &#123;</span><br><span class=\"line\">        seg[cur].tag += val;               <span class=\"comment\">//將被完整包含的區間的懶標加上修改值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">modify</span>(cur*<span class=\"number\">2</span>,l,mid,ql,qr,val);          <span class=\"comment\">//修改左右子樹</span></span><br><span class=\"line\">    <span class=\"built_in\">modify</span>(cur*<span class=\"number\">2</span>+<span class=\"number\">1</span>,mid,r,ql,qr,val);        <span class=\"comment\">//遞迴完拉上來的過程中把上面的數值更新成有懶標</span></span><br><span class=\"line\">    seg[cur].val = <span class=\"built_in\">max</span>(seg[<span class=\"number\">2</span>*cur].<span class=\"built_in\">rv</span>(),seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>].<span class=\"built_in\">rv</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//區間詢問</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> cur,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> ql,<span class=\"keyword\">int</span> qr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&lt;=l || ql&gt;=r || qr&lt;=l)<span class=\"keyword\">return</span> -INF;      <span class=\"comment\">//空集合直接回傳</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ql&lt;=l &amp;&amp; qr&gt;=r)<span class=\"keyword\">return</span> seg[cur].<span class=\"built_in\">rv</span>();     <span class=\"comment\">//包含在要詢問的範圍中，回傳實際值</span></span><br><span class=\"line\">    <span class=\"built_in\">push</span>(cur);                                  <span class=\"comment\">//將懶標在遞迴下去的過程中下推</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>;                          <span class=\"comment\">//遞迴查詢左右子樹</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(<span class=\"built_in\">query</span>(cur*<span class=\"number\">2</span>,l,mid,ql,qr),<span class=\"built_in\">query</span>(cur*<span class=\"number\">2</span>+<span class=\"number\">1</span>,mid,r,ql,qr));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)cin&gt;&gt;arr[i];</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p;cin&gt;&gt;p;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x,y,k;cin&gt;&gt;x&gt;&gt;y&gt;&gt;k;</span><br><span class=\"line\">            <span class=\"built_in\">modify</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,x,y+<span class=\"number\">1</span>,k);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(p==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x,y;cin&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ans = <span class=\"built_in\">query</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,x,y+<span class=\"number\">1</span>);</span><br><span class=\"line\">            cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1224-矩形覆蓋面積計算\"><a href=\"#1224-矩形覆蓋面積計算\" class=\"headerlink\" title=\"1224 . 矩形覆蓋面積計算\"></a>1224 . 矩形覆蓋面積計算</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1224\">題目連結</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/261541\">Submission2:AC</a></p>\n<blockquote>\n<p>題意：給你平面上n個矩形，請求出它們覆蓋的總表面積。</p>\n</blockquote>\n<p>這一題所使用的技巧是<font color=\"#f00\">掃描線</font>以及<font color=\"#f00\">線段樹</font>，下圖中的水平藍色線即為掃描線，由y=0開始往上掃描，當遇到了矩形的邊，利用線段樹查詢區間內當前的矩形寬度，乘上兩掃描線的高度差即為面積。當然，掃描線也可以使用垂直方向的線段由左而右的掃描，實作細節是一樣的。</p>\n<p><img src=\"https://i.imgur.com/pAsHmXd.jpg\" alt=\"\"></p>\n<h4 id=\"線段樹維護\"><a href=\"#線段樹維護\" class=\"headerlink\" title=\"線段樹維護\"></a>線段樹維護</h4><h5 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h5><p>我們可以定義線段樹$seg[cur]$為區間$[l,r]$中有被<strong>矩形覆蓋的大小</strong>有多大，也就是圖中當前掃描線對應到的區域的寬度。這樣子維護有一個問題，當我們直接用$seg[cur]$儲存答案，我們在修改的時候沒有辦法確切知道這段區間被覆蓋的情況。</p>\n<p>下圖為一種模擬的情況，每一個區間的數字代表著非0的數字個數，也就是它的寬度。今天我們要對區間$[4,6]$加減值，將區間拆成$[4,4]$跟$[5,6]$，這時候區間$[3,4]$的數值是1，我們卻不知道到底是3還是4是有被覆蓋到的，必須要遞迴下去到葉節點才能得到完整的覆蓋情況，這時候每一次加減值的複雜就會提升到$O(n)$，因此不能以這種方式維護。</p>\n<p><img src=\"https://i.imgur.com/DOeuFyx.png\" alt=\"\"></p>\n<h5 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h5><p>有別於第一種方法對$seg[id]$進行維護，我們可以多開一個區間 $tag$ 來紀錄被矩形覆蓋的情況。下圖有3個矩形，其中的數字代表每一塊區域被覆蓋的情況，這邊使用了$tag$來紀錄（他是附在區間上的，不會像圖中一樣的方式呈現）。tag的數值為非負整數，紀錄當前區間有多少矩形覆蓋在上面，用$tag$來輔助維護$seg[id]$可以在$O(logn)$的時間進行修改與查詢。</p>\n<p><img src=\"https://i.imgur.com/xGuEmB4.jpg\" alt=\"\"></p>\n<p>以下程式碼是是 $tag$ 的轉移，當大的區間的tag值不為0，代表有一個矩形曾完整覆蓋這個區間，這時候可以直接回傳區間大小，否則即回傳左右節點的$sed[left],seg[right]$的數值。</p>\n<p>這邊定義$seg[id]$為：「考慮 id 的子孫們（不含 id 本身）的所有 tag 值，假設這些子孫只有被tag值作用過，共有多少非0的數字」。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">seg[cur].val = (seg[<span class=\"number\">2</span>*cur].tag?mid-l:seg[<span class=\"number\">2</span>*cur].val)</span><br><span class=\"line\">              +(seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>].tag?r-mid:seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>].val);</span><br></pre></td></tr></table></figure>\n<h4 id=\"實作方法\"><a href=\"#實作方法\" class=\"headerlink\" title=\"實作方法\"></a>實作方法</h4><h5 id=\"矩形維護\"><a href=\"#矩形維護\" class=\"headerlink\" title=\"矩形維護\"></a>矩形維護</h5><p>首先是維護矩形的方法。我們一個矩形總共要維護四個東西：矩形左界x1、矩形右界x2、矩形上下界的y座標（分上下兩條），這兩條邊是下界或是上界val。為什麼要水平方向要分兩條討論？是因為下界代表進入，當掃描線掃到這一條邊的時候表示我們要新增區間 $[x1,x2)$ 進入線段樹；反之如果掃到了上界，則表示離開這個矩形，在線段樹中扣掉區間 $[x1,x2)$。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span>    <span class=\"comment\">//每一個矩陣分成上下兩條邊</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x1;     <span class=\"comment\">//矩形左界x1</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x2;     <span class=\"comment\">//矩形右界x2</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> y;      <span class=\"comment\">//矩形y座標（分上下兩邊）</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;    <span class=\"comment\">//val = ±1(進入代表1、離開代表-1)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;arr[<span class=\"number\">2</span>*N];</span><br></pre></td></tr></table></figure>\n<p>上下界我們利用val維護，當 $val=1$ 時表示是矩形的下界； $val=-1$ 則是矩形上界，這兩個搭配在一起剛好就可以用線段樹區間加值的方式進行操作！總共有 $n$ 個矩形，因此我們要掃描線總共掃描 $2n$ 條線段。</p>\n<h5 id=\"線段樹\"><a href=\"#線段樹\" class=\"headerlink\" title=\"線段樹\"></a>線段樹</h5><p>一樣對值域（這題是1000000）的4倍開了線段樹，同時維護一個非負整數 $tag$ 表示區間被覆蓋的情況。當每一次修改完成之後，我們可以直接取用根節點 $seg[1]$ 的數值表示寬度（非0的個數）！<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//seg[i]表示i的左右兩子樹的區間非0的個數</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span>    <span class=\"comment\">//建立線段樹</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;    <span class=\"comment\">//維護非0個數</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> tag;    <span class=\"comment\">//使用tag紀錄區間被覆蓋次數</span></span><br><span class=\"line\">&#125;seg[<span class=\"number\">4</span>*M];</span><br></pre></td></tr></table></figure><br>接下來就是在程式執行的過程中將 $2n$ 條邊依照y座標進行排序 $O(nlogn)$，接著依序使用掃描線搭配線段樹的修改，計算矩形的面積。最後就是輸出加起來的答案。</p>\n<div class=\"note info\">\n            <p><strong>Debug 小錯誤</strong><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/261512\">Submission1:WA</a><br>可以看到有一筆測資過不了，95分QQQ</p><p><img src=\"https://i.imgur.com/1UNrejV.png\" alt=\"\"></p><p>後來debug之後發現到，因為我是對每一個矩形先輸入下界之後才是上界，當我在排序的過程中，上界有可能有機會跑到下界之前，造成 $tag$ 被扣到負的情況，但在定義中可以清楚知道 $tag$ 是非負整數造成錯誤。因此只要把排序的過程改成 stable_sort() 即可！</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">stable_sort</span>(arr,arr+(n&lt;&lt;<span class=\"number\">1</span>),cmp);</span><br></pre></td></tr></table></figure>\n          </div>\n<p>最後終於是程式碼的部分，以下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 1000001</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lld long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span>    <span class=\"comment\">//每一個矩陣分成上下兩條邊</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x1;     <span class=\"comment\">//矩形左界x1</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x2;     <span class=\"comment\">//矩形右界x2</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> y;      <span class=\"comment\">//矩形y座標（分上下兩邊）</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;    <span class=\"comment\">//val = ±1(進入代表1、離開代表-1)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;arr[<span class=\"number\">2</span>*N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//seg[i]表示i的左右兩子樹的區間非0的個數</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span>    <span class=\"comment\">//建立線段樹</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;    <span class=\"comment\">//維護非0個數</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> tag;    <span class=\"comment\">//使用tag紀錄區間被覆蓋次數</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;seg[<span class=\"number\">4</span>*M];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(Node a, Node b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.y&lt;b.y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//對區間[ql,qr)進行加值val</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"keyword\">int</span> cur,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> ql,<span class=\"keyword\">int</span> qr,<span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= l || ql &gt;= r || qr &lt;= l)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ql &lt;= l &amp;&amp; qr &gt;= r)&#123;</span><br><span class=\"line\">        seg[cur].tag += val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">modify</span>(<span class=\"number\">2</span>*cur,l,mid,ql,qr,val);</span><br><span class=\"line\">    <span class=\"built_in\">modify</span>(<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>,mid,r,ql,qr,val);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//左右節點如有tag表示被完全覆蓋，直接加上區間大小，否則加上seg[左右子樹]</span></span><br><span class=\"line\">    seg[cur].val = (seg[<span class=\"number\">2</span>*cur].tag?mid-l:seg[<span class=\"number\">2</span>*cur].val)</span><br><span class=\"line\">                  +(seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>].tag?r-mid:seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>].val);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(arr,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(arr));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(seg,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(seg));</span><br><span class=\"line\">    </span><br><span class=\"line\">    cin&gt;&gt;n;                                   <span class=\"comment\">//依序輸入左右下上：x1,x2,y1,y2</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;(n&lt;&lt;<span class=\"number\">1</span>);i+=<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x1,x2,y1,y2;cin&gt;&gt;x1&gt;&gt;x2&gt;&gt;y1&gt;&gt;y2;</span><br><span class=\"line\">        arr[i] = (Node)&#123;x1,x2,y1,<span class=\"number\">1</span>&#125;;          <span class=\"comment\">//插入矩形下邊，帶入val = 1</span></span><br><span class=\"line\">        arr[i+<span class=\"number\">1</span>] = (Node)&#123;x1,x2,y2,<span class=\"number\">-1</span>&#125;;       <span class=\"comment\">//上邊要val = -1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">stable_sort</span>(arr,arr+(n&lt;&lt;<span class=\"number\">1</span>),cmp);          <span class=\"comment\">//依照y座標由小到大排序</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> y0 = <span class=\"number\">0</span>,val = <span class=\"number\">0</span>;                       <span class=\"comment\">//有下而上的枚舉所有水平邊</span></span><br><span class=\"line\">    lld ans = <span class=\"number\">0LL</span>;                            <span class=\"comment\">//上一條y的座標，計算高，val為矩形結合起來的寬</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;(n&lt;&lt;<span class=\"number\">1</span>);i++)&#123;                <span class=\"comment\">//枚舉2n條y的邊</span></span><br><span class=\"line\">        ans += (lld)(arr[i].y-y0)*val;        <span class=\"comment\">//計算面積（寬*高）</span></span><br><span class=\"line\">        <span class=\"built_in\">modify</span>(<span class=\"number\">1</span>,<span class=\"number\">0</span>,M,arr[i].x1,arr[i].x2,arr[i].val);</span><br><span class=\"line\">        y0 = arr[i].y;</span><br><span class=\"line\">        val = seg[<span class=\"number\">1</span>].val;                     <span class=\"comment\">//修改後（下一輪）的矩陣寬度</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":11379,"excerpt":"<h2 id=\"題目目錄\"><a href=\"#題目目錄\" class=\"headerlink\" title=\"題目目錄\"></a>題目目錄</h2><ul>\n<li>NEOJ 80 RMQ練習</li>\n<li>NEOJ 249 最大連續和？</li>\n<li>ZJ d799 區間求和</li>\n<li>NEOJ 367 RMQ˙改</li>\n<li>TIOJ 1224 矩形覆蓋面積計算","more":"</li>\n</ul>\n<h3 id=\"RMQ練習\"><a href=\"#RMQ練習\" class=\"headerlink\" title=\"RMQ練習\"></a>RMQ練習</h3><p><a href=\"https://neoj.sprout.tw/problem/80/\">題目連結</a><br>RMQ = Range minimun query，也就是詢問一個區間的最小值。分析一下兩種不同作法的複雜度：<br><div class=\"note default\">\n            <p>對於數列 $a_n$ 共n項，k筆詢問，每一次詢問區間$[l,r]$的最大、最小值</p><p><strong>1. 暴力做</strong><br>時間複雜度：<font color=\"#f00\">詢問$O(n)$</font><br>對於每一筆詢問都暴力搜索，最多掃過n個數字，時間複雜度$O(kn)$，對於數字大一點的情況就會TLE<br><br> </p><p><strong>2. 分塊算法</strong><br>可以參見 <a href=\"https://hackmd.io/@peienwu/rkCDKEcjd\">這篇文章</a></p><p><strong>3. 線段樹</strong><br>時間複雜度：<font color=\"#f00\">預處理 $O(n)$、詢問$O(logn)$</font><br>首先是預處理建立線段樹，線段樹上約有$2n$個節點，因此空間複雜度是$O(n)$，也就表示預處理是$O(n)$，之後便可$O(logn)$查詢每一筆詢問。以下是各種操作複雜度：</p><ul><li><strong>初始建構</strong>：所有節點恰會建構一次，每個節點 $O(1)$，配合節點樹可得為 $O(𝑛)$</li><li><strong>單點修改</strong>：該點的所有祖先節點都會被修改到，其他都不會被修改到，$𝑂(logn)$</li><li><strong>區間查詢</strong>：每筆詢問最多詢問到深度為 $O(logn)$ 的節點。在一次詢問中，每一層不會有超過2個節點被詢問，總複雜度為$𝑂(log𝑛)$<br><br> </li></ul><p><strong>4. 稀疏表(Sparse Table)</strong><br>時間複雜度：<font color=\"#f00\">預處理 $O(nlogn)$、詢問$O(1)$</font><br>參考 <a href=\"https://hackmd.io/@peienwu/H1W1Y18Gt\">這篇文章</a></p>\n          </div></p>\n<p>這一題就是基礎的要有支援區間查詢、單點修改的線段樹，也是最簡單的一種！<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 1000000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1e9</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> seg[<span class=\"number\">4</span> * N],arr[N],n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> cur)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&lt;=l)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r-l==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        seg[cur] = arr[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = (l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(l,m,<span class=\"number\">2</span>*cur);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(m,r,<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>);</span><br><span class=\"line\">    seg[cur] = <span class=\"built_in\">min</span>(seg[<span class=\"number\">2</span>*cur],seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//單點修改</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"keyword\">int</span> cur,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> ind,<span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&lt;=l)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r-l==<span class=\"number\">1</span> &amp;&amp; l==ind)&#123;</span><br><span class=\"line\">        seg[cur]=val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ind&lt;mid)<span class=\"built_in\">modify</span>(cur*<span class=\"number\">2</span>,l,mid,ind,val);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">modify</span>(cur*<span class=\"number\">2</span>+<span class=\"number\">1</span>,mid,r,ind,val);</span><br><span class=\"line\">    seg[cur] = <span class=\"built_in\">min</span>(seg[<span class=\"number\">2</span>*cur],seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//區間詢問</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> cur,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> ql,<span class=\"keyword\">int</span> qr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&lt;=l || ql&gt;=r || qr&lt;=l)<span class=\"keyword\">return</span> INF;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ql&lt;=l &amp;&amp; qr&gt;=r)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> seg[cur];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(<span class=\"built_in\">query</span>(cur*<span class=\"number\">2</span>,l,mid,ql,qr),<span class=\"built_in\">query</span>(cur*<span class=\"number\">2</span>+<span class=\"number\">1</span>,mid,r,ql,qr));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios;</span><br><span class=\"line\">    cin&gt;&gt;m&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)cin&gt;&gt;arr[i];</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p;cin&gt;&gt;p;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x,y;cin&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">            <span class=\"built_in\">modify</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,x+<span class=\"number\">1</span>,y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(p==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x,y;cin&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ans = <span class=\"built_in\">query</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,x+<span class=\"number\">1</span>,y+<span class=\"number\">2</span>);</span><br><span class=\"line\">            cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"最大連續和？\"><a href=\"#最大連續和？\" class=\"headerlink\" title=\"最大連續和？\"></a>最大連續和？</h3><p><a href=\"https://neoj.sprout.tw/problem/249/\">題目連結</a><br>這題題結果我是WA在INF太大可能會溢位的問題，把INF調整成 $5\\times 10^{14}$ 是差不多的</p>\n<p>這一題要維護區間最大連續和，跟dp的最大連續和差了「區間」兩字，整個實作的方式跟複雜度就不一樣了。DP的作法如果直接套用在這一題的話，複雜度約為：$O(QN)$，絕對會炸裂，因此只能用線段樹維護這個東西。</p>\n<div class=\"note primary\">\n            <p><strong>區間最大連續和</strong><br>在分治法的單元有提到分治法最重要的是假定左右兩側（對應過來就是兩子樹）是維護好的，也就是符合定義，要想的是要如何處理橫跨左右子樹的情況。<br>要如何知道橫跨中間的最大值呢？這時候我們可以維護4個數值，來更新每一個線段樹上的節點的數值。</p><ol><li><strong>總和(sum)</strong><br>$cur.sum = left.sum+right.sum$</li><li><strong>最大前綴和(lmax)</strong><br>$cur.lmax = max(left.lmax,left.sum+right.lmax)$</li><li><strong>最大後綴和(rmax)</strong><br>$cur.rmax = max(right.rmax,right.sum+left.rmax)$</li><li><strong>區間最大連續和(tmax)</strong><br>$cur.tmax = max(left.tmax,right.tmax,left.rmax+right.lmax)$</li></ol>\n          </div>\n<p>維護最大後綴跟最大前綴和（首跟末有被取到的情況），就可以$O(1)$ 維護每一個節點的區間最大連續和，複雜度：詢問$O(logn)$，因此總時間$O(Qlogn)$就可以AC了!</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 500000000000000</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> arr[N],n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum;    <span class=\"comment\">//區間總和</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> lmax;   <span class=\"comment\">//最大前綴和</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> rmax;   <span class=\"comment\">//最大後綴和</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmax;   <span class=\"comment\">//區間連續最大和</span></span><br><span class=\"line\">&#125;seg[N&lt;&lt;<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//求當下的區間連續最大和</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">(Node &amp;cur,Node &amp;left,Node &amp;right)</span></span>&#123;</span><br><span class=\"line\">    cur.sum = left.sum+right.sum;</span><br><span class=\"line\">    cur.lmax = <span class=\"built_in\">max</span>(left.lmax,left.sum+right.lmax);</span><br><span class=\"line\">    cur.rmax = <span class=\"built_in\">max</span>(right.rmax,right.sum+left.rmax);</span><br><span class=\"line\">    cur.tmax = <span class=\"built_in\">max</span>(<span class=\"built_in\">max</span>(left.tmax,right.tmax),left.rmax+right.lmax);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//建立線段樹：[l,r)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> cur)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&lt;=l)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r-l==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        seg[cur] = &#123;arr[l],arr[l],arr[l],arr[l]&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(l,mid,<span class=\"number\">2</span>*cur);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(mid,r,<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">modify</span>(seg[cur],seg[<span class=\"number\">2</span>*cur],seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//區間詢問：[l,r)</span></span><br><span class=\"line\"><span class=\"function\">Node <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> cur,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> ql,<span class=\"keyword\">int</span> qr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&lt;=l || ql&gt;=r || qr&lt;=l)<span class=\"keyword\">return</span> &#123;-INF,-INF,-INF,-INF&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ql&lt;=l &amp;&amp; qr&gt;=r)<span class=\"keyword\">return</span> seg[cur];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> left = <span class=\"built_in\">query</span>(<span class=\"number\">2</span>*cur,l,mid,ql,qr);</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> right = <span class=\"built_in\">query</span>(<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>,mid,r,ql,qr);</span><br><span class=\"line\">    Node temp;</span><br><span class=\"line\">    <span class=\"built_in\">modify</span>(temp,left,right);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)cin&gt;&gt;arr[i];</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l,r;cin&gt;&gt;l&gt;&gt;r;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> ans = <span class=\"built_in\">query</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,l,r+<span class=\"number\">1</span>);</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"built_in\">max</span>(ans.tmax,(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)<span class=\"number\">0</span>)&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"d799區間求和\"><a href=\"#d799區間求和\" class=\"headerlink\" title=\"d799區間求和\"></a>d799區間求和</h3><p><a href=\"https://zerojudge.tw/ShowProblem?problemid=d799\">題目連結</a><br>這一題要求兩個操作，區間加值跟區間查詢，這時候就必須用到<strong>懶標(lazy tags)</strong> 輔助求和。</p>\n<blockquote>\n<p>範例測資：<br>10<br>1 2 3 4 5 6 7 8 9 10<br>3<br>2 2 4<br>1 3 6 3<br>2 2 4</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/MJMDQE9.jpg\" alt=\"\"><br>左邊是整棵線段樹，右邊則是懶標，可以看到3要往下推，但學長的程式碼中並沒有執行這個步驟，這樣會導致query的時候發生錯誤。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 500005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span>            <span class=\"comment\">//線段樹每一個節點</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> val=<span class=\"number\">0</span>,tag=<span class=\"number\">0</span>,sz; <span class=\"comment\">//val原本的值、tag懶標、sz區間大小</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rv</span><span class=\"params\">()</span></span>&#123;           <span class=\"comment\">//回傳實際節點的值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> val+tag*sz;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;seg[<span class=\"number\">4</span>*N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> arr[N],n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> cur)</span></span>&#123;    <span class=\"comment\">//建立線段樹</span></span><br><span class=\"line\">    seg[cur].sz = r-l;              <span class=\"comment\">//更新節點的大小</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&lt;=l)<span class=\"keyword\">return</span>;                 <span class=\"comment\">//空區間回傳</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r-l==<span class=\"number\">1</span>)&#123;                     <span class=\"comment\">//設定當前節點的值</span></span><br><span class=\"line\">        seg[cur].val = arr[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = (l+r)/<span class=\"number\">2</span>;                <span class=\"comment\">//分別遞迴建立左右子樹</span></span><br><span class=\"line\">    <span class=\"built_in\">build</span>(l,m,<span class=\"number\">2</span>*cur);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(m,r,<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>);</span><br><span class=\"line\">    seg[cur].val = seg[<span class=\"number\">2</span>*cur].val+seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>].val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把id的懶標在query的時候往下推</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>&#123;</span><br><span class=\"line\">    seg[<span class=\"number\">2</span>*id].tag += seg[id].tag;   <span class=\"comment\">//左子樹懶標更新</span></span><br><span class=\"line\">    seg[<span class=\"number\">2</span>*id+<span class=\"number\">1</span>].tag += seg[id].tag; <span class=\"comment\">//右子樹懶標更新</span></span><br><span class=\"line\">    seg[id].val = seg[id].<span class=\"built_in\">rv</span>();     <span class=\"comment\">//更新實際值</span></span><br><span class=\"line\">    seg[id].tag = <span class=\"number\">0</span>;                <span class=\"comment\">//往下推完之後設定為預設</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//區間修改</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"keyword\">int</span> cur,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> ql,<span class=\"keyword\">int</span> qr,<span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r&lt;=l||ql&gt;=r||qr&lt;=l)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ql&lt;=l &amp;&amp; qr&gt;=r) &#123;</span><br><span class=\"line\">        seg[cur].tag += val;               <span class=\"comment\">//將被完整包含的區間的懶標加上修改值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">modify</span>(cur*<span class=\"number\">2</span>,l,mid,ql,qr,val);          <span class=\"comment\">//修改左右子樹</span></span><br><span class=\"line\">    <span class=\"built_in\">modify</span>(cur*<span class=\"number\">2</span>+<span class=\"number\">1</span>,mid,r,ql,qr,val);        <span class=\"comment\">//遞迴完拉上來的過程中把上面的數值更新成有懶標</span></span><br><span class=\"line\">    seg[cur].val = seg[<span class=\"number\">2</span>*cur].<span class=\"built_in\">rv</span>()+seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>].<span class=\"built_in\">rv</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//區間詢問</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> cur,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> ql,<span class=\"keyword\">int</span> qr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&lt;=l || ql&gt;=r || qr&lt;=l)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;         <span class=\"comment\">//空集合直接回傳</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ql&lt;=l &amp;&amp; qr&gt;=r)<span class=\"keyword\">return</span> seg[cur].<span class=\"built_in\">rv</span>();     <span class=\"comment\">//包含在要詢問的範圍中，回傳實際值</span></span><br><span class=\"line\">    <span class=\"built_in\">push</span>(cur);                                  <span class=\"comment\">//將懶標在遞迴下去的過程中下推</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>;                          <span class=\"comment\">//遞迴查詢左右子樹</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(cur*<span class=\"number\">2</span>,l,mid,ql,qr)+<span class=\"built_in\">query</span>(cur*<span class=\"number\">2</span>+<span class=\"number\">1</span>,mid,r,ql,qr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)cin&gt;&gt;arr[i];</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    cin&gt;&gt;m;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p;cin&gt;&gt;p;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x,y,k;cin&gt;&gt;x&gt;&gt;y&gt;&gt;k;</span><br><span class=\"line\">            <span class=\"built_in\">modify</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,x,y+<span class=\"number\">1</span>,k);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(p==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x,y;cin&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ans = <span class=\"built_in\">query</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,x,y+<span class=\"number\">1</span>);</span><br><span class=\"line\">            cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"RMQ˙改\"><a href=\"#RMQ˙改\" class=\"headerlink\" title=\"RMQ˙改\"></a>RMQ˙改</h3><p><a href=\"https://neoj.sprout.tw/problem/367/\">題目連結</a><br>這一題是Range Maximum Query搭配區間加值，如果直接套用前面RMQ或是區間和的模板就輕鬆許多。這一題主要跟前面題目的不同在於它的sz要維護成1，有別於求區間和要乘上區間大小，每一個值不需要乘上區間大小，因此設成0。</p>\n<p>這題第二筆測資明顯就是要卡暴力解法。<br><img src=\"https://i.imgur.com/tC2Wucw.png\" alt=\"\"></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">1e14</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span>            <span class=\"comment\">//線段樹每一個節點</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> val=<span class=\"number\">0</span>,tag=<span class=\"number\">0</span>,sz=<span class=\"number\">0</span>; <span class=\"comment\">//val原本的值、tag懶標、sz區間大小</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rv</span><span class=\"params\">()</span></span>&#123;           <span class=\"comment\">//回傳實際節點的值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> val+tag*sz;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;seg[<span class=\"number\">4</span>*N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> arr[N],n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> cur)</span></span>&#123;    <span class=\"comment\">//建立線段樹</span></span><br><span class=\"line\">    seg[cur].sz = <span class=\"number\">1</span>;                <span class=\"comment\">//更新節點的大小</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&lt;=l)<span class=\"keyword\">return</span>;                 <span class=\"comment\">//空區間回傳</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r-l==<span class=\"number\">1</span>)&#123;                     <span class=\"comment\">//設定當前節點的值</span></span><br><span class=\"line\">        seg[cur].val = arr[l];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m = (l+r)/<span class=\"number\">2</span>;                <span class=\"comment\">//分別遞迴建立左右子樹</span></span><br><span class=\"line\">    <span class=\"built_in\">build</span>(l,m,<span class=\"number\">2</span>*cur);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(m,r,<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>);</span><br><span class=\"line\">    seg[cur].val = <span class=\"built_in\">max</span>(seg[<span class=\"number\">2</span>*cur].val,seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>].val);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把id的懶標在query的時候往下推</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>&#123;</span><br><span class=\"line\">    seg[<span class=\"number\">2</span>*id].tag += seg[id].tag;   <span class=\"comment\">//左子樹懶標更新</span></span><br><span class=\"line\">    seg[<span class=\"number\">2</span>*id+<span class=\"number\">1</span>].tag += seg[id].tag; <span class=\"comment\">//右子樹懶標更新</span></span><br><span class=\"line\">    seg[id].val = seg[id].<span class=\"built_in\">rv</span>();     <span class=\"comment\">//更新實際值</span></span><br><span class=\"line\">    seg[id].tag = <span class=\"number\">0</span>;                <span class=\"comment\">//往下推完之後設定為預設</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//區間修改</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"keyword\">int</span> cur,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> ql,<span class=\"keyword\">int</span> qr,<span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r&lt;=l||ql&gt;=r||qr&lt;=l)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ql&lt;=l &amp;&amp; qr&gt;=r) &#123;</span><br><span class=\"line\">        seg[cur].tag += val;               <span class=\"comment\">//將被完整包含的區間的懶標加上修改值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">modify</span>(cur*<span class=\"number\">2</span>,l,mid,ql,qr,val);          <span class=\"comment\">//修改左右子樹</span></span><br><span class=\"line\">    <span class=\"built_in\">modify</span>(cur*<span class=\"number\">2</span>+<span class=\"number\">1</span>,mid,r,ql,qr,val);        <span class=\"comment\">//遞迴完拉上來的過程中把上面的數值更新成有懶標</span></span><br><span class=\"line\">    seg[cur].val = <span class=\"built_in\">max</span>(seg[<span class=\"number\">2</span>*cur].<span class=\"built_in\">rv</span>(),seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>].<span class=\"built_in\">rv</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//區間詢問</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> cur,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> ql,<span class=\"keyword\">int</span> qr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r&lt;=l || ql&gt;=r || qr&lt;=l)<span class=\"keyword\">return</span> -INF;      <span class=\"comment\">//空集合直接回傳</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ql&lt;=l &amp;&amp; qr&gt;=r)<span class=\"keyword\">return</span> seg[cur].<span class=\"built_in\">rv</span>();     <span class=\"comment\">//包含在要詢問的範圍中，回傳實際值</span></span><br><span class=\"line\">    <span class=\"built_in\">push</span>(cur);                                  <span class=\"comment\">//將懶標在遞迴下去的過程中下推</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>;                          <span class=\"comment\">//遞迴查詢左右子樹</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(<span class=\"built_in\">query</span>(cur*<span class=\"number\">2</span>,l,mid,ql,qr),<span class=\"built_in\">query</span>(cur*<span class=\"number\">2</span>+<span class=\"number\">1</span>,mid,r,ql,qr));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)cin&gt;&gt;arr[i];</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p;cin&gt;&gt;p;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x,y,k;cin&gt;&gt;x&gt;&gt;y&gt;&gt;k;</span><br><span class=\"line\">            <span class=\"built_in\">modify</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,x,y+<span class=\"number\">1</span>,k);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(p==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x,y;cin&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ans = <span class=\"built_in\">query</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,x,y+<span class=\"number\">1</span>);</span><br><span class=\"line\">            cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1224-矩形覆蓋面積計算\"><a href=\"#1224-矩形覆蓋面積計算\" class=\"headerlink\" title=\"1224 . 矩形覆蓋面積計算\"></a>1224 . 矩形覆蓋面積計算</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1224\">題目連結</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/261541\">Submission2:AC</a></p>\n<blockquote>\n<p>題意：給你平面上n個矩形，請求出它們覆蓋的總表面積。</p>\n</blockquote>\n<p>這一題所使用的技巧是<font color=\"#f00\">掃描線</font>以及<font color=\"#f00\">線段樹</font>，下圖中的水平藍色線即為掃描線，由y=0開始往上掃描，當遇到了矩形的邊，利用線段樹查詢區間內當前的矩形寬度，乘上兩掃描線的高度差即為面積。當然，掃描線也可以使用垂直方向的線段由左而右的掃描，實作細節是一樣的。</p>\n<p><img src=\"https://i.imgur.com/pAsHmXd.jpg\" alt=\"\"></p>\n<h4 id=\"線段樹維護\"><a href=\"#線段樹維護\" class=\"headerlink\" title=\"線段樹維護\"></a>線段樹維護</h4><h5 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h5><p>我們可以定義線段樹$seg[cur]$為區間$[l,r]$中有被<strong>矩形覆蓋的大小</strong>有多大，也就是圖中當前掃描線對應到的區域的寬度。這樣子維護有一個問題，當我們直接用$seg[cur]$儲存答案，我們在修改的時候沒有辦法確切知道這段區間被覆蓋的情況。</p>\n<p>下圖為一種模擬的情況，每一個區間的數字代表著非0的數字個數，也就是它的寬度。今天我們要對區間$[4,6]$加減值，將區間拆成$[4,4]$跟$[5,6]$，這時候區間$[3,4]$的數值是1，我們卻不知道到底是3還是4是有被覆蓋到的，必須要遞迴下去到葉節點才能得到完整的覆蓋情況，這時候每一次加減值的複雜就會提升到$O(n)$，因此不能以這種方式維護。</p>\n<p><img src=\"https://i.imgur.com/DOeuFyx.png\" alt=\"\"></p>\n<h5 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h5><p>有別於第一種方法對$seg[id]$進行維護，我們可以多開一個區間 $tag$ 來紀錄被矩形覆蓋的情況。下圖有3個矩形，其中的數字代表每一塊區域被覆蓋的情況，這邊使用了$tag$來紀錄（他是附在區間上的，不會像圖中一樣的方式呈現）。tag的數值為非負整數，紀錄當前區間有多少矩形覆蓋在上面，用$tag$來輔助維護$seg[id]$可以在$O(logn)$的時間進行修改與查詢。</p>\n<p><img src=\"https://i.imgur.com/xGuEmB4.jpg\" alt=\"\"></p>\n<p>以下程式碼是是 $tag$ 的轉移，當大的區間的tag值不為0，代表有一個矩形曾完整覆蓋這個區間，這時候可以直接回傳區間大小，否則即回傳左右節點的$sed[left],seg[right]$的數值。</p>\n<p>這邊定義$seg[id]$為：「考慮 id 的子孫們（不含 id 本身）的所有 tag 值，假設這些子孫只有被tag值作用過，共有多少非0的數字」。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">seg[cur].val = (seg[<span class=\"number\">2</span>*cur].tag?mid-l:seg[<span class=\"number\">2</span>*cur].val)</span><br><span class=\"line\">              +(seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>].tag?r-mid:seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>].val);</span><br></pre></td></tr></table></figure>\n<h4 id=\"實作方法\"><a href=\"#實作方法\" class=\"headerlink\" title=\"實作方法\"></a>實作方法</h4><h5 id=\"矩形維護\"><a href=\"#矩形維護\" class=\"headerlink\" title=\"矩形維護\"></a>矩形維護</h5><p>首先是維護矩形的方法。我們一個矩形總共要維護四個東西：矩形左界x1、矩形右界x2、矩形上下界的y座標（分上下兩條），這兩條邊是下界或是上界val。為什麼要水平方向要分兩條討論？是因為下界代表進入，當掃描線掃到這一條邊的時候表示我們要新增區間 $[x1,x2)$ 進入線段樹；反之如果掃到了上界，則表示離開這個矩形，在線段樹中扣掉區間 $[x1,x2)$。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span>    <span class=\"comment\">//每一個矩陣分成上下兩條邊</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x1;     <span class=\"comment\">//矩形左界x1</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x2;     <span class=\"comment\">//矩形右界x2</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> y;      <span class=\"comment\">//矩形y座標（分上下兩邊）</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;    <span class=\"comment\">//val = ±1(進入代表1、離開代表-1)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;arr[<span class=\"number\">2</span>*N];</span><br></pre></td></tr></table></figure>\n<p>上下界我們利用val維護，當 $val=1$ 時表示是矩形的下界； $val=-1$ 則是矩形上界，這兩個搭配在一起剛好就可以用線段樹區間加值的方式進行操作！總共有 $n$ 個矩形，因此我們要掃描線總共掃描 $2n$ 條線段。</p>\n<h5 id=\"線段樹\"><a href=\"#線段樹\" class=\"headerlink\" title=\"線段樹\"></a>線段樹</h5><p>一樣對值域（這題是1000000）的4倍開了線段樹，同時維護一個非負整數 $tag$ 表示區間被覆蓋的情況。當每一次修改完成之後，我們可以直接取用根節點 $seg[1]$ 的數值表示寬度（非0的個數）！<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//seg[i]表示i的左右兩子樹的區間非0的個數</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span>    <span class=\"comment\">//建立線段樹</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;    <span class=\"comment\">//維護非0個數</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> tag;    <span class=\"comment\">//使用tag紀錄區間被覆蓋次數</span></span><br><span class=\"line\">&#125;seg[<span class=\"number\">4</span>*M];</span><br></pre></td></tr></table></figure><br>接下來就是在程式執行的過程中將 $2n$ 條邊依照y座標進行排序 $O(nlogn)$，接著依序使用掃描線搭配線段樹的修改，計算矩形的面積。最後就是輸出加起來的答案。</p>\n<div class=\"note info\">\n            <p><strong>Debug 小錯誤</strong><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/261512\">Submission1:WA</a><br>可以看到有一筆測資過不了，95分QQQ</p><p><img src=\"https://i.imgur.com/1UNrejV.png\" alt=\"\"></p><p>後來debug之後發現到，因為我是對每一個矩形先輸入下界之後才是上界，當我在排序的過程中，上界有可能有機會跑到下界之前，造成 $tag$ 被扣到負的情況，但在定義中可以清楚知道 $tag$ 是非負整數造成錯誤。因此只要把排序的過程改成 stable_sort() 即可！</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">stable_sort</span>(arr,arr+(n&lt;&lt;<span class=\"number\">1</span>),cmp);</span><br></pre></td></tr></table></figure>\n          </div>\n<p>最後終於是程式碼的部分，以下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> M 1000001</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lld long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span>    <span class=\"comment\">//每一個矩陣分成上下兩條邊</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x1;     <span class=\"comment\">//矩形左界x1</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x2;     <span class=\"comment\">//矩形右界x2</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> y;      <span class=\"comment\">//矩形y座標（分上下兩邊）</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;    <span class=\"comment\">//val = ±1(進入代表1、離開代表-1)</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;arr[<span class=\"number\">2</span>*N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//seg[i]表示i的左右兩子樹的區間非0的個數</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span>    <span class=\"comment\">//建立線段樹</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;    <span class=\"comment\">//維護非0個數</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> tag;    <span class=\"comment\">//使用tag紀錄區間被覆蓋次數</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;seg[<span class=\"number\">4</span>*M];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(Node a, Node b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.y&lt;b.y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//對區間[ql,qr)進行加值val</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"keyword\">int</span> cur,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> ql,<span class=\"keyword\">int</span> qr,<span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt;= l || ql &gt;= r || qr &lt;= l)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ql &lt;= l &amp;&amp; qr &gt;= r)&#123;</span><br><span class=\"line\">        seg[cur].tag += val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">modify</span>(<span class=\"number\">2</span>*cur,l,mid,ql,qr,val);</span><br><span class=\"line\">    <span class=\"built_in\">modify</span>(<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>,mid,r,ql,qr,val);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//左右節點如有tag表示被完全覆蓋，直接加上區間大小，否則加上seg[左右子樹]</span></span><br><span class=\"line\">    seg[cur].val = (seg[<span class=\"number\">2</span>*cur].tag?mid-l:seg[<span class=\"number\">2</span>*cur].val)</span><br><span class=\"line\">                  +(seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>].tag?r-mid:seg[<span class=\"number\">2</span>*cur+<span class=\"number\">1</span>].val);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(arr,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(arr));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(seg,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(seg));</span><br><span class=\"line\">    </span><br><span class=\"line\">    cin&gt;&gt;n;                                   <span class=\"comment\">//依序輸入左右下上：x1,x2,y1,y2</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;(n&lt;&lt;<span class=\"number\">1</span>);i+=<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x1,x2,y1,y2;cin&gt;&gt;x1&gt;&gt;x2&gt;&gt;y1&gt;&gt;y2;</span><br><span class=\"line\">        arr[i] = (Node)&#123;x1,x2,y1,<span class=\"number\">1</span>&#125;;          <span class=\"comment\">//插入矩形下邊，帶入val = 1</span></span><br><span class=\"line\">        arr[i+<span class=\"number\">1</span>] = (Node)&#123;x1,x2,y2,<span class=\"number\">-1</span>&#125;;       <span class=\"comment\">//上邊要val = -1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">stable_sort</span>(arr,arr+(n&lt;&lt;<span class=\"number\">1</span>),cmp);          <span class=\"comment\">//依照y座標由小到大排序</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> y0 = <span class=\"number\">0</span>,val = <span class=\"number\">0</span>;                       <span class=\"comment\">//有下而上的枚舉所有水平邊</span></span><br><span class=\"line\">    lld ans = <span class=\"number\">0LL</span>;                            <span class=\"comment\">//上一條y的座標，計算高，val為矩形結合起來的寬</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;(n&lt;&lt;<span class=\"number\">1</span>);i++)&#123;                <span class=\"comment\">//枚舉2n條y的邊</span></span><br><span class=\"line\">        ans += (lld)(arr[i].y-y0)*val;        <span class=\"comment\">//計算面積（寬*高）</span></span><br><span class=\"line\">        <span class=\"built_in\">modify</span>(<span class=\"number\">1</span>,<span class=\"number\">0</span>,M,arr[i].x1,arr[i].x2,arr[i].val);</span><br><span class=\"line\">        y0 = arr[i].y;</span><br><span class=\"line\">        val = seg[<span class=\"number\">1</span>].val;                     <span class=\"comment\">//修改後（下一輪）的矩陣寬度</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"字串演算法 (String)","date":"2021-09-03T16:00:00.000Z","mathjax":true,"_content":"\n這個暑假看了動態規劃(1),(2)，線段樹、最短路徑、計算幾何、字串演算法，這一篇的完成算是暑假的一個里程吧！接下來繼續學習不同的主題，再把筆記更新到部落格中！\n\n## 課程內容\n### 字串\n\n- 定義\n    - 大寫 $\\Sigma$ 表示字元集\n    - 字串：有限個字元集組成\n    - $|\\Sigma|$ 字元集大小、|S|字串長度\n    - S[a:b]表示連續從字元a到b\n<!--more-->\n- 子字串：S[a:b]\n- 前綴：S[0:b]\n- 後綴：S[a:|S|-1]\n\n### 字典樹Trie\n\n- 定義\n    - 例題：字串出現次數\n    - 一顆由根、邊一綠往下指的有向樹\n    - 每個邊為字元、每一點代表字串\n    - 每經過一條邊，字串加上邊的字元\n    - 根節點為空字串！\n- 操作\n    - 查詢字串：$O(L)$，由根順著邊往下找\n    - 插入字串：$O(L)$，不斷往下走直到空節點，在Trie加入一個節點\n    - 節點必須記錄當前是否為有效字串\n    - Trie結構中包含：字串、紀錄字串出現次數\n\n### KMP\n\n- 功能：進行字串匹配\n- 例題：字串S在字串T哪些位置出現\n    - 暴力匹配：時間 $O(|S|\\times|T|)$\n-  F[i]表示當配對成功A[0:i]後即配對失敗，將A[F[i]]對齊原本A[i]的位置\n- 搭配F[i]調整在串移動的長度\n- 匹配：複雜度 $O(|T|)$，建立F函數：$O(|S|)$\n\n### 漢明距離(Hamming distance)\n- 兩個等長字符串對應位置的不同字符的個數\n\n### Z-value\n- z[i] 是指由 s[i] 開始的字串，與 s[0] 開始的字串可以匹配到多長\n- S[0:k-1] = S[i:i+k-1]\n- z[0] = 0\n\n### Rolling Hash\n- 之前隨機講過\n\n### 後綴數組（Suffix Array）\n- 將一個字串的所有後綴進行排序\n- 基數排序（Radix Sort）\n\n### 最長共同前綴（LCP,Longest Common Prefix）\n- 兩字串的最長共同前綴\n- 將最長共同前綴轉換成區間最小值問題\n\n## 字串演算法主題\n\n### 字典樹Trie\n字典樹是以指標型態建立的一棵樹，邊代表一個字元、節點代表從根一路走來的邊形成的字串，從根節點開始（根節點為空），每經過一條邊，就把字串加上那一條邊對應的字元，直到找出要匹配的字串。如果有多筆獨立的詢問，只要加上Delete函數就可以了！\n\n#### Trie結構\n實作上的陣列c指向個別的字元，不一定要用cnt，根據題目的所求調整不同的變數設定。\n\n```cpp=\nstruct Trie{        //利用指標建立一棵樹\n    Trie* c[26];    //對應a-z每一條邊\n    int cnt;        //字串出現次數\n    Trie(): cnt(0){ //初始設定\n        memset(c,0,sizeof(c));\n    }\n};\nTrie* root;\n```\n#### Insert函數\n\n在插入的過程中言錄新增路徑，一樣嘢可以根據題目要求在過程中進行變數紀錄等。如**NEOJ 267 自動完成系統**。\n\n```cpp=+\nvoid insert(char *s){\n    Trie *ptr = root;           //從根節點尋找\n    while(*s){\n        if(!ptr->c[ch(*s)])     //如果樹上無此字元則new\n            ptr->c[ch(*s)] = new Trie();\n        ptr = ptr->c[ch(*s)];   //繼續造訪Trie\n        s += 1;                 //字串下一個字元\n    }\n    ptr->cnt += 1;              //字串出現次數(字串對應唯一葉節點)\n}\n```\n\n#### 查詢函數\n一個字串對應到唯一的路徑，從根節點根據每一個字元決定路徑。\n\n```cpp=+\nint find(char *s){              //查找字串s\n    Trie *ptr = root;           //根節點尋找\n    while(*s){                  //無此字串，回傳次數0\n        if(!ptr->c[ch(*s)])return 0;\n        ptr = ptr->c[ch(*s)];\n        s += 1;                 //字串下一個字元\n    }\n    return ptr->cnt;            //回傳字串出現次數\n}\n```\n\n#### Delete函數\n\n\n```cpp=\nvoid clear(Trie *s){\n    for(int i=0;i<26;i++){\n        if(s->c[i]){\n            clear(s->c[i]);\n            delete s->c[i];\n            s->c[i] = nullptr;    //很重要\n        }\n    }\n}\n```\n\n### KMP Algorithm\n\n首先要求出Failure Function，它可以在 $O(|S|)$ 建立。失敗函數的定義是：\n> $F[i]$ 表示當成功配對 $A[0:i]$ 之後，配對失敗時，我們會將 $A[ F[i]]$ 對齊原本 $A[i]$ 的位置\n\n如果寫成數學式的定義：\n\n$$ F_A(J)=\\left\\{\n\\begin{array}{l}\n-1,&&\\text{if j = 0}\\\\\nmax\\{p:A_{0...p} = A_{j-p...j} \\text{ and 0≤p<j}\\},&&\\text{otherwise}\\\\\n\\end{array} \\right. $$\n\n這個函式以中文來說就是「**最大前綴後綴**」！\n\n這個函數可以讓我們知道，當配對在較短字串 $S$ 在第 $i$ 位配對失敗時，要找到第 $F[i]$ 去繼續比對。從比較直觀的角度去理解，就是把字串要往右移幾格才能正確匹配上，如果配對失敗，則尋找更前面更短的子字串試試看。\n\n以比較數學的角度看到底要怎麼建立Failure Function，可以從以下推導得知：\n\n{% note info %}\n假設 $F[i] = x, x≠-1$，根據上面的定義有這樣的等式：$A[0:x] = A[i-x:i]$\n分成以下兩種情況做討論：\n* $A[x+1] = A[i+1]$\n這種情況就是兩邊的下一個字串都相同，直接將繼承前面的長度為x的子字串，因此有關係式$F[i+1] = x+1$\n\n* $A[x+1] ≠ A[i+1]$\n這種情況比較棘手，我們無法繼續使用之前長度為x的子字串，因此我們要尋找前面更短的字串進行匹配。假設我們找到 $K$ 滿足 k<x，同時 $A[0:k] = A[i-k:i]$ ，這時候我們只需確認 $A[k+1]=A[i+1]$ 是否成立即可，如果不成立則繼續尋找比 $K$ 更短的子字串。\n\n<br>\n\n從剛剛的關係式，我們可以繼續寫下去： $A[0:k] = A[i-k:i]=A[x-k:x]$，理由是i的後綴與x後綴相同，因此 k的後綴就會和x的後綴相同。由失敗函式的定義推斷，我們要找的 $k$ 就會是 x 的失敗函式，$K = F[x]$。\n\n如果找到的k不滿足 $A[k+1]=A[i+1]$ ，則會繼續尋找下一個更小的 $k$ 值直到滿足條件或是 $k=-1$ 為止。\n{% endnote %}\n\n再來則是KMP MATCH，能在時間複雜度 $O(|T|)$ 內將匹配出來的位置找出來。具體的方法與建立Failure Function 相近，如果 $A[p+1]≠A[i+1]$，則尋找更小的字串長度 $k<F[i]$ 看能否繼續匹配。當匹配成功，記得把p設為F[p]，因為匹配完成其實也可以看作是下一個字元匹配失敗（$S$ 的空字元對上 $T$ 的下一個）。\n\n至於時間複雜度的部分，分析一下while迴圈總共會執行的次數，當每執行一次，p的值一定會遞減，而p只會在每一個迴圈最多加上一，因此p的增加會是字串長度 $|T|$ 的常數倍，使總複雜度為 $O(|T|)$。\n\n#### Build Function\n```cpp=\n//O(|S|)要配對的字串以及Fail Function\nvoid KMP_build(char *S,int *F){\n    int p = F[0] = -1;              //初始設定為-1\n    for(int i=1;S[i];i++){          //1到接下來字元\n        while(p!=-1 && S[p+1]!=S[i])\n            p = F[p];               //無法繼續配對，尋找更短字串\n        if(S[p+1] == S[i])          //配對成功(如都沒有一樣的就-1)\n            p += 1;\n        F[i] = p;                   //設定F[i]\n    }\n}\n```\n\n#### Match Function\n```cpp=+\nvector<int> KMP_match(char *S,int *F,char *T){\n    vector<int> ans;            //回傳匹配相同地方\n    int p = -1;                 //紀錄短字串有多少被匹配\n    for(int i=0;T[i];i++){      //每一迴圈都讓T[i]被匹配到\n        while(p!=-1 && S[p+1]!=T[i])\n            p = F[p];           //使T[i]一定可以被匹配到\n        if(S[p+1] == T[i])\n            p += 1;             //T的第i個與S的p+1可以匹配\n        if(!S[p+1]){            //S[p]已經匹配完成\n            ans.push_back(i-p); //回推匹配開頭\n            p = F[p];           //繼續下一輪匹配\n        }\n    }\n    return ans;\n}\n```\n\n### Hash (Robin-Karp Algorithm)\n\n雜湊算法的核心概念就是以下公式，可以透過它進行字串比對等等。\n$$H(s[1:n]) = \\sum_{i=0}^n S_i\\times C^{n-i}$$\n詳細內容可以參閱這一篇：[隨機演算法](https://hackmd.io/@peienwu/random)\n\n\n### Z Algorithm (Gusfield's Algorithm) \n\nZ函數的定義是對於字串長度 $n$ 的字串 $S$ ，$z[i]$ 函數代表 $S[0:n-1]$ 和 $S[i:n-1]$ 的**最長共同前綴**，也就是LCP長度。定義 $z[0] = 0$。\n\n有講義上面寫Z Function很簡單，但我覺得有夠難，難度跟KMP的理解差不多。根據Z函數的定義，我們可以$O(N^2)$建立z函數，顯然時間有些太多了。如果我們算 $Z[i]$ 的值可以用 $Z[0:i-1]$ 轉移過來，會省下許多時間，把時間降成 $O(N)$。\n\n#### 算法概念\n\n整個算法的核心概念就是利用前面已經算好的Z Function去推現在的值，有點像動態規劃的概念。在整個過程中我們會維護右端點最大的匹配段（與前綴匹配），其表示為 $[l:l+Z[l]]$，也可以寫作 $[l:r]$，保證 $l ≤ r$。在計算 $Z[i]$ 的過程中，分別討論以下三種情形：\n\n1. $i ≤ r$\n根據定義，因為區間 $[l:r]$ 本身是前綴，因此當 $i$ 在區間中間時會將區間分成左右兩半邊，將正個區間往前平移會讓 $i$ 對應到 $i-l$ 的位置，又此時區間為 $[0:r-l]$ ，因此$z[i] = min(z[i-l],r-i)$。\n\n    * $z[i-l] ≤ r-i$\n已經知道 $z[i-l] < r-i$ 表示在前後兩區間（分別從0,i開始）在一樣的情況下做多不超過 $z[i-l]$ 長度的匹配，因此第 $z[i-l]$ 的下一個字元必定無法繼續匹配成前綴。\n    * $z[i-l] > r-i$\n在這種情況下已知 $s[0:r-l] = s[l:r]$，根據定義 $s[i-l:r-l] = s[i:r]$。因為 $z[i-l] > r-i$，$z[i-l]$ 右端的範圍會超過 $r$ ，也就是說超過 $r$ 之後這個性質 $s[i-l:r-l] = s[i:r]$ 就不會成立，但可以確定 $z[i]$ 至少為 $r-i$。接著就暴力枚舉即可！\n\n上面的內容可以用下圖解釋，兩條紅線段是一樣的，$x=i-l$ ，接著討論$Z[x]$ 的長度就可以知道該如何更新。\n![](https://i.imgur.com/6WU1JWG.png)\n\n\n2. $i > r$\n這種情況我們可以直接暴力跟前綴匹配。\n\n#### 程式實作1\n程式碼中 $bst$ 表示的是左界 $l$，右界則是 $bst+Z[bst]$。\n```cpp=\nvoid Z_algo1(char *S,int *Z){\n    int bst = 0;                            //相當於左界，大小為z[bst]\n    Z[0] = 0;\n    for(int i=1;S[i];i++){\n        if(Z[bst]+bst < i)Z[i] = 0;         //直接暴力枚舉\n        else Z[i] = min(Z[i-bst],bst+Z[bst]-i);\n        while(S[Z[i]]==S[i+Z[i]])Z[i]++;    //依序暴力枚舉\n        if(Z[i]+i > bst+Z[bst])bst = i;     //更新更遠的右界\n    }\n}\n```\n\n#### 程式實作2\n這個實作超級短，沒有幾行就解決了，但他的效果卻是一樣的！\n\n```cpp=\nvoid Z_algo2(char *S,int *Z){\n    int l = 0, r = 0;                       //左右界\n    Z[0] = 0;\n    for(int i=1;S[i];i++){\n        Z[i] = max(min(Z[i-l],r-i),0);\n        while(S[i+Z[i]] && S[Z[i]] == S[i+Z[i]]){\n            r = i+Z[i];               //更新右界\n            Z[i]++;\n        }//保證當Z[i]從Z[i-l]轉移時不會被更新！\n    }\n}\n```\n#### 時間複雜度\n根據以上兩個程式碼可以發現，右界 $r$ 或是 $bst+Z[bst]$ 在過程中是不斷增大的，且r必定不會超過n，因此迴圈跑下來複雜度會是 $O(N)$。\n\n### LPS (Manacher's Algorithm)\nLPS (Longest Palindromic Substring)就是最長回文子字串，Naive的作法是每次 $O(n)$ 向兩側擴展，時間是 $O(n^2)$。\n\nManacher's Algorithm這個演算法的概念和Z Alogorithm相近，可以在 $O(n)$ 的時間內找出以每一個點為中心之最長回文長度。回文的定義是無論從正序或是逆序看一個字串都是一樣的，分為兩種：一種是奇數的對稱，也就是以一個字元為對稱中心往兩側擴展；另一種則是以字元間的空格為對稱中心向兩側對稱。\n\n這兩個的性質很不同，在處理的時候我們也不知道到底是呈現怎麼樣對稱的狀況，因此可以使用一種手法：將每一個字元中間插入同樣沒有出現過的字元，如此一來不論是偶數或是奇數長度的字串，在加入這個沒有出現過的字元之後，都會變成奇數長度的回文了！\n\n定義 $z[i]$ 為以 $s[i]$ 為中心，最長的回文長度LPS（如果字元i是自己回文，定義Z[i] = 0]）。以字串abba來說就是以下情況：\n\n\n| 編號   | 1   | 2   | 3   | 4   | 5   | 6   | 7   | 8   | 9   |\n| ------ | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| 原字串 | a | b | b | a  |   |     |     | ||    \n| 變更後| . | a  | . | b | . | b | . | a | . \n| Z函數 | 1 | 2 | 1 | 2 | 5 | 2 | 1 | 2 | 1 |\n\n\n跟Z Alogrithm 一樣，維護一個右界最遠的區間 $[l,r]$，作為在算 $z[i]$ 時能使用到的 $z[0:i-1]$ 的最大值，令他為 $r$。取j滿足 $j+z[j]$ 有最大值，分成以下兩個條件做討論：\n\n**1. r < i**\n這種情況就表示不能用之前算的東西去更新現在的值，因此只能暴力枚舉 $s[i]$ 的左右兩側，看最長回文的長度為何。\n\n**2. r > i**\n分成三種情況討論（比z algorithm多了一個），首先因為 $r > i$，右界覆蓋了 $i$，表示我們可以從 $j$ 的另外一端映射出與 $s[i]$ 相同的 $s[i']$（以 $j$ 為中心回文呈現兩側對稱），映射的索引值為 $2j-i$，如下圖：\n\n![](https://i.imgur.com/Pf1S21i.png)\n\n因為 $z[i']$ 已經計算過了，因此可以將 $r-i$ 以及 $z[i']$ 的大小分成三種情況討論：\n\n* $z[i'] < r-i$\n這種情況表示 $z[i']$ 無法繼續往右邊更新，因為 $i$ 與 $i'$ 都是在以 $j$ 為中心的回文中，兩邊是一樣的，代表 $z[i] = z[i']$ 且不可能再被更新成更大的範圍。\n\n* $z[i'] = r-i$\n這種情況下是要枚舉的，從兩側映射的關係知道 $z[i]$ 的長度至少為 $r-i-1$，因此將 $z[i]$ 設為 $r-i$ 繼續枚舉就可以了！\n\n* $z[i'] > r-i$\n由下圖觀察發現，$z[i]$ 不可能比 $r-i$ 還要大，直接將值設為 $r-i$ 即可。\n![](https://i.imgur.com/zsb6blx.png)\n\n\n#### 時間複雜度\n觀察到while迴圈執行的狀況，只有當 $r < i$ 以及 $z[i'] = r-i$ 時右界才有被更新的可能，兩種情況都會讓右界 $r$ 遞增，範圍最大到 $n$ ，因為不會減小的關係，總時間複雜度為線性的 $O(n)$！\n\n\n#### 程式碼\n```cpp=\nvoid Longest(){\n    n = strlen(T);m = 2*n+1;\n    memset(S,'.',m);\n    for(int i=0;i<n;i++)S[2*i+1] = T[i];    //間隔插入沒出現過字元\n    Z[0] = 1;                               //計算時使用右開區間\n    int l = 0,r = 0;                        //維護最大右界左右界\n    for(int i=1;i<m;i++){\n        Z[i] = max(min(Z[2*l-i],r-i),1);\n        while(i-Z[i]>=0 && i+Z[i] < m && S[i+Z[i]]==S[i-Z[i]]){\n            l = i;r = i+Z[i];\n            Z[i]++;\n        }\n    }\n}\n```\n\n### 後綴數組\n\n一些基本定義，我們定義 $suf[i]$ 是字串 $S$ 從 $i$ 開始的後綴，也就是 $S[i:n-1]$。將一個字串所有的後綴取出來按照字典序進行排序，就是**後綴數組**。總共有三個複雜度：$O(n^2\\log n)$、$O(n\\log^2 n)$、$O(n\\log n)$ 分別是使用暴力、倍增、基數排序的優化。\n\n#### 暴力解 $O(N^2\\log n)$\n$O(n)$ 的字串比對，排序 $O(n\\log n)$，因此時間複雜度為 $O(n^2\\log n)$。\n\n```cpp=\nint n,m;\nchar S[10] = \"algorithm\";\n\nbool cmp(int a,int b){\n    return strcmp(S+a,S+b) < 0;\n}\n\nint main(){\n    int SA[10];\n    n = strlen(S);\n    rep(i,0,n-1)SA[i] = i;\n    sort(SA,SA+n,cmp);\n    rep(i,0,n-1)cout<<SA[i]<<\" \";\n    cout<<endl;\n}\n```\n\n#### 倍增+Quick Sort\n使用倍增可以讓複雜度做到 $O(n\\log^2 n)$，其原理主要是讓比較的時間併入排序，同時多做 $O(\\log n)$ 層的排序。定義 $sa[i]$ 為將後綴排序後第 $i$ 小的後綴編號；$rk[i]$ 表示後綴 $i$ 的排名。\n\n倍增顧名思義，跟將數量乘上兩倍有關，因此會帶一個log。下圖就是一個排序的示例，首先按這字典序初始每一個字元的排名 $rk[i]$，進行 $O(\\log n)$ 層，每一層用 $O(n\\log n)$ 的時間進行排序。倍增讓原本的字串比較 $O(n)$ 降到 $O(\\log n)$ 。\n\n接下來的每一層的每一個字元 $s[i]$，在比較大小的時候，將 $rk[i]$ 以及 $rk[i+k]$ 組成一個 $pair$ 進行排序，從第一層開始，每一層的 $k$ 都會增加為2倍（倍增的概念）。pair的first就好比倍增時前 $s[i:i+k]$ 的排名、second就是 $s[i+k+1:i+2k]$ 的排名，搭配字典序是按照由前到後進行排名，比完fisrt才會比second，如此一來我們可以利用倍增的性質，也就是已經排名好的較短長度的字串，直接利用排好的名次進行下一輪的排序，這就導致我們不需要對每一個字元都看過一遍！\n\n![](https://i.imgur.com/l1aGK8f.png)\n[圖片出處](https://oi-wiki.org/string/sa/)圖中的黑線岔開距離都會因為每一層而越岔越開（乘上2倍），也就是「倍增」所代表的意義！\n\n```cpp=\nvoid suffix_array(string S){\n    n = S.size();\n    int lg = 32-__builtin_clz(n);//回傳第一個1之前0的個數（二進位）\n    vector<pt> cur(n,{0,0,0});\n    vector<int> rk(n+1,-1);\n    rep(i,0,n-1)cur[i] = {S[i],0,i};\n    rep(p,0,lg){                //進行O(lgn)次\n        int k = 1 << p;         //現在倍增的大小\n        sort(all(cur),cmp);\n        rk[cur[0].id] = 0;\n        rep(i,1,n-1)            //設定rk，與前一個相同則設定跟前一個一樣\n            rk[cur[i].id] = (cur[i-1]==cur[i] ? rk[cur[i-1].id]:i);\n        rep(i,0,n-1)            //倍增pair的second\n            cur[i] = {rk[i],rk[min(n,i+k)],i};\n    }\n    sort(all(cur),cmp);\n    rep(i,0,n-1)sa[i] = cur[i].id;\n}\n```\n\n\n#### 搭配 Radix Sort\n\n基數排序 (Raddix sort) 以及計數排序 (Counting sort) 兩者是有點從屬的關係，計數排序是基數排序的子程序，也就是說基數排序是透過對每一位進行計數排序完成的！\n\n首先，我們需要 $O(n)$ 的空間進行每一輪的計數排序，對每一個元素進行排名（從1到n-1），如此一來才能確保不會有溢位的問題。先對第二個關鍵字進行排序，排完之後再按照第一個關鍵字排序。Raddix Sort 是穩定的，相同元素為在前面在排序之後一定會在前面。\n\n有幾個地方有實作上進行基數排序的限制，首先第一輪會按照個別字母的字典序進行排序，用快排等基於比較的排序方法可以順利完成，但可惜基數排序不行，一定要乖乖的按照 1 到 n-1 順序進行排名。因此在第一輪會先使用 $std::sort$ 排名，之後進行raddix_sort！\n\n最後一個小小的地方，就是當第二個 key 的值為 -1的情況（倍增超出範圍），在比較時可以直接push進去答案裡面，因為並沒有一個box的index 是-1，同時他們也是最小，丟進去即可。\n\n**時間複雜度：** 每一層進行 $O(n)$ 排序，因為倍增共有 $O(\\log n)$ 層，因此總時間複雜度為 $O(n)\\times O(\\log n) = O(n\\log n)$！\n\n\n```cpp=\nvoid raddix_sort(vector<pt> &cur){\n    init();\n    rep(i,0,n-1){\n        if(cur[i].y == -1)temp.push_back(cur[i]);\n        else box[cur[i].y].push_back(cur[i]);\n    }\n    rep(i,0,n-1)\n        for(auto j : box[i])temp.push_back(j);\n    rep(i,0,n-1)box[i].clear();\n    rep(i,0,n-1)\n        box[temp[i].x].push_back(temp[i]);\n    cur.clear();\n    rep(i,0,n-1)\n        for(auto j : box[i])cur.push_back(j);\n}\n```\n### 最長共同前綴 LCP (Kasai's Algorithm)\n\n最長共同前綴，以現在字串演算法中，假設 $lcp(i,j)$ 為後綴 $i$ 與 $j$ 的最長共同前綴。在[這篇文章](https://www.geeksforgeeks.org/%C2%AD%C2%ADkasais-algorithm-for-construction-of-lcp-array-from-suffix-array/)中給出這個定義：\n> A value lcp[i] indicates length of the longest common prefix of the suffixes inexed by suffix[i] and suffix[i+1]\n\n定義 $lcp[i]$ 為後綴 $i$ 與後綴 $i+1$ 的最長共同前綴，其中 $lcp[n-1]$ 沒有定義。再複習一下，$rk[i]$ 為第 $i$ 個後綴數組的排名$rk[i]$、$sa[i]$ 為排名為 $i$ 的字串所對應到的從 $sa[i]$ 開始的後綴數組。\n\n到底我們要求的LCP是什麼？如果只是給兩個字串要求出共同最長前綴，那我們只要 $O(min(L_A,L_B))$ 就好，是可以接受的複雜度。但Kasai's Algorithm不是要求這個。一般都在講到後綴字串之後講到LCP，為的就是要求出所有的後綴數組中，任兩個字串的共同最長前綴為何。以一個字串長度為 $l$ 來說，後綴的配對數量共有 $O(l^2)$ 組，暴力肯定會TLE。\n\n\n求出 $lcs$ 需要有兩個引理：\n\n* **第一個引理**\n$$lcp[rk[i]] ≥ lcp[rk[i-1]]-1$$\n其中 $i$ 為**尚未經過排序**的從 $i$ 開始的後綴字串。\n\n**說明：** 將後綴數組排序之後有點像將相似的字串排在一起（按字典序由小排到大），鄰近的字串其實代表著一個意義，兩者相似程度越高。因此 $lcp[rk[i-1]]$ 某種意義代表著與 $i-1$ 開始的後綴數組（簡稱後綴 $i-1$）跟其他字串最大的共同前綴長度。\n\n接著我們看 $lcp[rk[i]]$ ，後綴 $i$ 就是後綴 $i-1$ 刪掉一個前綴字元的結果。我們假設跟後綴 $i-1$ 相近的那個字串叫做 $T$ （其實就是後綴 $rk[i-1]+1$），把 $T$ 刪除一個前綴字元之後所形成的字串（也就是比 $T$ 再短一字元的後綴）也就可以跟後綴 $i$ 進行匹配，其長度因為被刪掉一個前綴字元所以少一，因此得到了以上式子。\n\n聽說很難證明，不過至少可以情感上的接受這件事是對的！\n\n\n* **第二個引理**\n$$lcp(S_i,S-j) = min_{i≤k<j}(S_k,S_{k+1})$$\n\n為什麼可以算出最近的排名的LCP即可得到最長的LCP？從這個定理可以看出來，對於後綴 $i$ 以及後綴 $j$ ，取 $min$ 的原因是要確保所有的中間後綴 $k$ 都包含了下界 $k$ ，也就是說每個在 $i$ 與 $j$ 中間的人都至少跟前一個人相同個字元。\n\n---\n以下以字串 $aabaabc$ 作為範例：\n\n| 後綴 | RK  | String  |\n| ---- | --- |:------- |\n| 0    | 0   | aabaabc |\n| 1    | 2   | abaabc  |\n| 2    | 4   | baabc   |\n| 3    | 1   | aabc    |\n| 4    | 3   | abc     |\n| 5    | 5   | bc      |\n| 6    | 6   | c       |\n\n以下是SA與對應的String\n\n| RK  | SA  | String  | LCP |\n| --- | --- | ------- | --- |\n| 0   | 0   | aabaabc | 3   |\n| 1   | 3   | aabc    | 1   |\n| 2   | 1   | abaabc  | 2   |\n| 3   | 4   | abc     | 0   |\n| 4   | 2   | baabc   | 1   |\n| 5   | 5   | bc      | 0   |\n| 6   | 6   | c       | 0   |\n\n以下是找LCP流程：\n* 首先從後綴0開始，找到對應的下一個rk，也就是後綴3，得到LCP為3\n* 接下來看後綴1，查表得到RK為2，找到RK為3的找LCP，得到2\n* 看後綴2，與RK為4,5名找LCA，得到1\n* 後綴3，看RK 1,2，LCA為1\n* 接下來以此推累\n\n接下來有兩種不同設定方法，端看要採用的是上表還是下表的字串排序方法。我以上表為例，程式執行時印出順序：$3211000$；也可以採用後綴數組排序後的結果（一般都採用此方法），直接對應出順序（對照的是下表）：$3120100$。\n\n\n```cpp=\nvector<int> LCP(string s){\n    vector<int> rk(n,0),lcp(n,0);\n    rep(i,0,n-1)rk[sa[i]] = i;      //利用sa反函數得到rk\n    int k = 0;\n    rep(i,0,n-1){\n        if(k)k--;\n        if(rk[i] == n-1)continue;   //rk[n-1]未定義\n        int j = sa[rk[i]+1];        //下一名後綴從何開始\n        while(i+k<n && j+k<n && s[i+k] == s[j+k])k++;\n        lcp[rk[i]] = k;\n    }\n    return lcp;\n}\n```\n\n**時間複雜度：** 主要觀察 $k$ 的變化，$k$ 最多就是n，最少是0，最差的情況是 $k$ 被減掉 $n$ 次，加上 $2n$ 次，因此複雜度是線性 $O(n)$！\n\n","source":"_posts/String.md","raw":"---\ntitle: 字串演算法 (String)\ndate: 2021-9-4\ntags: \n    - 字串\n    - 演算法\ncategories:\n\t- C++進階主題\n\t- 字串演算法\n\nmathjax: true\n---\n\n這個暑假看了動態規劃(1),(2)，線段樹、最短路徑、計算幾何、字串演算法，這一篇的完成算是暑假的一個里程吧！接下來繼續學習不同的主題，再把筆記更新到部落格中！\n\n## 課程內容\n### 字串\n\n- 定義\n    - 大寫 $\\Sigma$ 表示字元集\n    - 字串：有限個字元集組成\n    - $|\\Sigma|$ 字元集大小、|S|字串長度\n    - S[a:b]表示連續從字元a到b\n<!--more-->\n- 子字串：S[a:b]\n- 前綴：S[0:b]\n- 後綴：S[a:|S|-1]\n\n### 字典樹Trie\n\n- 定義\n    - 例題：字串出現次數\n    - 一顆由根、邊一綠往下指的有向樹\n    - 每個邊為字元、每一點代表字串\n    - 每經過一條邊，字串加上邊的字元\n    - 根節點為空字串！\n- 操作\n    - 查詢字串：$O(L)$，由根順著邊往下找\n    - 插入字串：$O(L)$，不斷往下走直到空節點，在Trie加入一個節點\n    - 節點必須記錄當前是否為有效字串\n    - Trie結構中包含：字串、紀錄字串出現次數\n\n### KMP\n\n- 功能：進行字串匹配\n- 例題：字串S在字串T哪些位置出現\n    - 暴力匹配：時間 $O(|S|\\times|T|)$\n-  F[i]表示當配對成功A[0:i]後即配對失敗，將A[F[i]]對齊原本A[i]的位置\n- 搭配F[i]調整在串移動的長度\n- 匹配：複雜度 $O(|T|)$，建立F函數：$O(|S|)$\n\n### 漢明距離(Hamming distance)\n- 兩個等長字符串對應位置的不同字符的個數\n\n### Z-value\n- z[i] 是指由 s[i] 開始的字串，與 s[0] 開始的字串可以匹配到多長\n- S[0:k-1] = S[i:i+k-1]\n- z[0] = 0\n\n### Rolling Hash\n- 之前隨機講過\n\n### 後綴數組（Suffix Array）\n- 將一個字串的所有後綴進行排序\n- 基數排序（Radix Sort）\n\n### 最長共同前綴（LCP,Longest Common Prefix）\n- 兩字串的最長共同前綴\n- 將最長共同前綴轉換成區間最小值問題\n\n## 字串演算法主題\n\n### 字典樹Trie\n字典樹是以指標型態建立的一棵樹，邊代表一個字元、節點代表從根一路走來的邊形成的字串，從根節點開始（根節點為空），每經過一條邊，就把字串加上那一條邊對應的字元，直到找出要匹配的字串。如果有多筆獨立的詢問，只要加上Delete函數就可以了！\n\n#### Trie結構\n實作上的陣列c指向個別的字元，不一定要用cnt，根據題目的所求調整不同的變數設定。\n\n```cpp=\nstruct Trie{        //利用指標建立一棵樹\n    Trie* c[26];    //對應a-z每一條邊\n    int cnt;        //字串出現次數\n    Trie(): cnt(0){ //初始設定\n        memset(c,0,sizeof(c));\n    }\n};\nTrie* root;\n```\n#### Insert函數\n\n在插入的過程中言錄新增路徑，一樣嘢可以根據題目要求在過程中進行變數紀錄等。如**NEOJ 267 自動完成系統**。\n\n```cpp=+\nvoid insert(char *s){\n    Trie *ptr = root;           //從根節點尋找\n    while(*s){\n        if(!ptr->c[ch(*s)])     //如果樹上無此字元則new\n            ptr->c[ch(*s)] = new Trie();\n        ptr = ptr->c[ch(*s)];   //繼續造訪Trie\n        s += 1;                 //字串下一個字元\n    }\n    ptr->cnt += 1;              //字串出現次數(字串對應唯一葉節點)\n}\n```\n\n#### 查詢函數\n一個字串對應到唯一的路徑，從根節點根據每一個字元決定路徑。\n\n```cpp=+\nint find(char *s){              //查找字串s\n    Trie *ptr = root;           //根節點尋找\n    while(*s){                  //無此字串，回傳次數0\n        if(!ptr->c[ch(*s)])return 0;\n        ptr = ptr->c[ch(*s)];\n        s += 1;                 //字串下一個字元\n    }\n    return ptr->cnt;            //回傳字串出現次數\n}\n```\n\n#### Delete函數\n\n\n```cpp=\nvoid clear(Trie *s){\n    for(int i=0;i<26;i++){\n        if(s->c[i]){\n            clear(s->c[i]);\n            delete s->c[i];\n            s->c[i] = nullptr;    //很重要\n        }\n    }\n}\n```\n\n### KMP Algorithm\n\n首先要求出Failure Function，它可以在 $O(|S|)$ 建立。失敗函數的定義是：\n> $F[i]$ 表示當成功配對 $A[0:i]$ 之後，配對失敗時，我們會將 $A[ F[i]]$ 對齊原本 $A[i]$ 的位置\n\n如果寫成數學式的定義：\n\n$$ F_A(J)=\\left\\{\n\\begin{array}{l}\n-1,&&\\text{if j = 0}\\\\\nmax\\{p:A_{0...p} = A_{j-p...j} \\text{ and 0≤p<j}\\},&&\\text{otherwise}\\\\\n\\end{array} \\right. $$\n\n這個函式以中文來說就是「**最大前綴後綴**」！\n\n這個函數可以讓我們知道，當配對在較短字串 $S$ 在第 $i$ 位配對失敗時，要找到第 $F[i]$ 去繼續比對。從比較直觀的角度去理解，就是把字串要往右移幾格才能正確匹配上，如果配對失敗，則尋找更前面更短的子字串試試看。\n\n以比較數學的角度看到底要怎麼建立Failure Function，可以從以下推導得知：\n\n{% note info %}\n假設 $F[i] = x, x≠-1$，根據上面的定義有這樣的等式：$A[0:x] = A[i-x:i]$\n分成以下兩種情況做討論：\n* $A[x+1] = A[i+1]$\n這種情況就是兩邊的下一個字串都相同，直接將繼承前面的長度為x的子字串，因此有關係式$F[i+1] = x+1$\n\n* $A[x+1] ≠ A[i+1]$\n這種情況比較棘手，我們無法繼續使用之前長度為x的子字串，因此我們要尋找前面更短的字串進行匹配。假設我們找到 $K$ 滿足 k<x，同時 $A[0:k] = A[i-k:i]$ ，這時候我們只需確認 $A[k+1]=A[i+1]$ 是否成立即可，如果不成立則繼續尋找比 $K$ 更短的子字串。\n\n<br>\n\n從剛剛的關係式，我們可以繼續寫下去： $A[0:k] = A[i-k:i]=A[x-k:x]$，理由是i的後綴與x後綴相同，因此 k的後綴就會和x的後綴相同。由失敗函式的定義推斷，我們要找的 $k$ 就會是 x 的失敗函式，$K = F[x]$。\n\n如果找到的k不滿足 $A[k+1]=A[i+1]$ ，則會繼續尋找下一個更小的 $k$ 值直到滿足條件或是 $k=-1$ 為止。\n{% endnote %}\n\n再來則是KMP MATCH，能在時間複雜度 $O(|T|)$ 內將匹配出來的位置找出來。具體的方法與建立Failure Function 相近，如果 $A[p+1]≠A[i+1]$，則尋找更小的字串長度 $k<F[i]$ 看能否繼續匹配。當匹配成功，記得把p設為F[p]，因為匹配完成其實也可以看作是下一個字元匹配失敗（$S$ 的空字元對上 $T$ 的下一個）。\n\n至於時間複雜度的部分，分析一下while迴圈總共會執行的次數，當每執行一次，p的值一定會遞減，而p只會在每一個迴圈最多加上一，因此p的增加會是字串長度 $|T|$ 的常數倍，使總複雜度為 $O(|T|)$。\n\n#### Build Function\n```cpp=\n//O(|S|)要配對的字串以及Fail Function\nvoid KMP_build(char *S,int *F){\n    int p = F[0] = -1;              //初始設定為-1\n    for(int i=1;S[i];i++){          //1到接下來字元\n        while(p!=-1 && S[p+1]!=S[i])\n            p = F[p];               //無法繼續配對，尋找更短字串\n        if(S[p+1] == S[i])          //配對成功(如都沒有一樣的就-1)\n            p += 1;\n        F[i] = p;                   //設定F[i]\n    }\n}\n```\n\n#### Match Function\n```cpp=+\nvector<int> KMP_match(char *S,int *F,char *T){\n    vector<int> ans;            //回傳匹配相同地方\n    int p = -1;                 //紀錄短字串有多少被匹配\n    for(int i=0;T[i];i++){      //每一迴圈都讓T[i]被匹配到\n        while(p!=-1 && S[p+1]!=T[i])\n            p = F[p];           //使T[i]一定可以被匹配到\n        if(S[p+1] == T[i])\n            p += 1;             //T的第i個與S的p+1可以匹配\n        if(!S[p+1]){            //S[p]已經匹配完成\n            ans.push_back(i-p); //回推匹配開頭\n            p = F[p];           //繼續下一輪匹配\n        }\n    }\n    return ans;\n}\n```\n\n### Hash (Robin-Karp Algorithm)\n\n雜湊算法的核心概念就是以下公式，可以透過它進行字串比對等等。\n$$H(s[1:n]) = \\sum_{i=0}^n S_i\\times C^{n-i}$$\n詳細內容可以參閱這一篇：[隨機演算法](https://hackmd.io/@peienwu/random)\n\n\n### Z Algorithm (Gusfield's Algorithm) \n\nZ函數的定義是對於字串長度 $n$ 的字串 $S$ ，$z[i]$ 函數代表 $S[0:n-1]$ 和 $S[i:n-1]$ 的**最長共同前綴**，也就是LCP長度。定義 $z[0] = 0$。\n\n有講義上面寫Z Function很簡單，但我覺得有夠難，難度跟KMP的理解差不多。根據Z函數的定義，我們可以$O(N^2)$建立z函數，顯然時間有些太多了。如果我們算 $Z[i]$ 的值可以用 $Z[0:i-1]$ 轉移過來，會省下許多時間，把時間降成 $O(N)$。\n\n#### 算法概念\n\n整個算法的核心概念就是利用前面已經算好的Z Function去推現在的值，有點像動態規劃的概念。在整個過程中我們會維護右端點最大的匹配段（與前綴匹配），其表示為 $[l:l+Z[l]]$，也可以寫作 $[l:r]$，保證 $l ≤ r$。在計算 $Z[i]$ 的過程中，分別討論以下三種情形：\n\n1. $i ≤ r$\n根據定義，因為區間 $[l:r]$ 本身是前綴，因此當 $i$ 在區間中間時會將區間分成左右兩半邊，將正個區間往前平移會讓 $i$ 對應到 $i-l$ 的位置，又此時區間為 $[0:r-l]$ ，因此$z[i] = min(z[i-l],r-i)$。\n\n    * $z[i-l] ≤ r-i$\n已經知道 $z[i-l] < r-i$ 表示在前後兩區間（分別從0,i開始）在一樣的情況下做多不超過 $z[i-l]$ 長度的匹配，因此第 $z[i-l]$ 的下一個字元必定無法繼續匹配成前綴。\n    * $z[i-l] > r-i$\n在這種情況下已知 $s[0:r-l] = s[l:r]$，根據定義 $s[i-l:r-l] = s[i:r]$。因為 $z[i-l] > r-i$，$z[i-l]$ 右端的範圍會超過 $r$ ，也就是說超過 $r$ 之後這個性質 $s[i-l:r-l] = s[i:r]$ 就不會成立，但可以確定 $z[i]$ 至少為 $r-i$。接著就暴力枚舉即可！\n\n上面的內容可以用下圖解釋，兩條紅線段是一樣的，$x=i-l$ ，接著討論$Z[x]$ 的長度就可以知道該如何更新。\n![](https://i.imgur.com/6WU1JWG.png)\n\n\n2. $i > r$\n這種情況我們可以直接暴力跟前綴匹配。\n\n#### 程式實作1\n程式碼中 $bst$ 表示的是左界 $l$，右界則是 $bst+Z[bst]$。\n```cpp=\nvoid Z_algo1(char *S,int *Z){\n    int bst = 0;                            //相當於左界，大小為z[bst]\n    Z[0] = 0;\n    for(int i=1;S[i];i++){\n        if(Z[bst]+bst < i)Z[i] = 0;         //直接暴力枚舉\n        else Z[i] = min(Z[i-bst],bst+Z[bst]-i);\n        while(S[Z[i]]==S[i+Z[i]])Z[i]++;    //依序暴力枚舉\n        if(Z[i]+i > bst+Z[bst])bst = i;     //更新更遠的右界\n    }\n}\n```\n\n#### 程式實作2\n這個實作超級短，沒有幾行就解決了，但他的效果卻是一樣的！\n\n```cpp=\nvoid Z_algo2(char *S,int *Z){\n    int l = 0, r = 0;                       //左右界\n    Z[0] = 0;\n    for(int i=1;S[i];i++){\n        Z[i] = max(min(Z[i-l],r-i),0);\n        while(S[i+Z[i]] && S[Z[i]] == S[i+Z[i]]){\n            r = i+Z[i];               //更新右界\n            Z[i]++;\n        }//保證當Z[i]從Z[i-l]轉移時不會被更新！\n    }\n}\n```\n#### 時間複雜度\n根據以上兩個程式碼可以發現，右界 $r$ 或是 $bst+Z[bst]$ 在過程中是不斷增大的，且r必定不會超過n，因此迴圈跑下來複雜度會是 $O(N)$。\n\n### LPS (Manacher's Algorithm)\nLPS (Longest Palindromic Substring)就是最長回文子字串，Naive的作法是每次 $O(n)$ 向兩側擴展，時間是 $O(n^2)$。\n\nManacher's Algorithm這個演算法的概念和Z Alogorithm相近，可以在 $O(n)$ 的時間內找出以每一個點為中心之最長回文長度。回文的定義是無論從正序或是逆序看一個字串都是一樣的，分為兩種：一種是奇數的對稱，也就是以一個字元為對稱中心往兩側擴展；另一種則是以字元間的空格為對稱中心向兩側對稱。\n\n這兩個的性質很不同，在處理的時候我們也不知道到底是呈現怎麼樣對稱的狀況，因此可以使用一種手法：將每一個字元中間插入同樣沒有出現過的字元，如此一來不論是偶數或是奇數長度的字串，在加入這個沒有出現過的字元之後，都會變成奇數長度的回文了！\n\n定義 $z[i]$ 為以 $s[i]$ 為中心，最長的回文長度LPS（如果字元i是自己回文，定義Z[i] = 0]）。以字串abba來說就是以下情況：\n\n\n| 編號   | 1   | 2   | 3   | 4   | 5   | 6   | 7   | 8   | 9   |\n| ------ | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| 原字串 | a | b | b | a  |   |     |     | ||    \n| 變更後| . | a  | . | b | . | b | . | a | . \n| Z函數 | 1 | 2 | 1 | 2 | 5 | 2 | 1 | 2 | 1 |\n\n\n跟Z Alogrithm 一樣，維護一個右界最遠的區間 $[l,r]$，作為在算 $z[i]$ 時能使用到的 $z[0:i-1]$ 的最大值，令他為 $r$。取j滿足 $j+z[j]$ 有最大值，分成以下兩個條件做討論：\n\n**1. r < i**\n這種情況就表示不能用之前算的東西去更新現在的值，因此只能暴力枚舉 $s[i]$ 的左右兩側，看最長回文的長度為何。\n\n**2. r > i**\n分成三種情況討論（比z algorithm多了一個），首先因為 $r > i$，右界覆蓋了 $i$，表示我們可以從 $j$ 的另外一端映射出與 $s[i]$ 相同的 $s[i']$（以 $j$ 為中心回文呈現兩側對稱），映射的索引值為 $2j-i$，如下圖：\n\n![](https://i.imgur.com/Pf1S21i.png)\n\n因為 $z[i']$ 已經計算過了，因此可以將 $r-i$ 以及 $z[i']$ 的大小分成三種情況討論：\n\n* $z[i'] < r-i$\n這種情況表示 $z[i']$ 無法繼續往右邊更新，因為 $i$ 與 $i'$ 都是在以 $j$ 為中心的回文中，兩邊是一樣的，代表 $z[i] = z[i']$ 且不可能再被更新成更大的範圍。\n\n* $z[i'] = r-i$\n這種情況下是要枚舉的，從兩側映射的關係知道 $z[i]$ 的長度至少為 $r-i-1$，因此將 $z[i]$ 設為 $r-i$ 繼續枚舉就可以了！\n\n* $z[i'] > r-i$\n由下圖觀察發現，$z[i]$ 不可能比 $r-i$ 還要大，直接將值設為 $r-i$ 即可。\n![](https://i.imgur.com/zsb6blx.png)\n\n\n#### 時間複雜度\n觀察到while迴圈執行的狀況，只有當 $r < i$ 以及 $z[i'] = r-i$ 時右界才有被更新的可能，兩種情況都會讓右界 $r$ 遞增，範圍最大到 $n$ ，因為不會減小的關係，總時間複雜度為線性的 $O(n)$！\n\n\n#### 程式碼\n```cpp=\nvoid Longest(){\n    n = strlen(T);m = 2*n+1;\n    memset(S,'.',m);\n    for(int i=0;i<n;i++)S[2*i+1] = T[i];    //間隔插入沒出現過字元\n    Z[0] = 1;                               //計算時使用右開區間\n    int l = 0,r = 0;                        //維護最大右界左右界\n    for(int i=1;i<m;i++){\n        Z[i] = max(min(Z[2*l-i],r-i),1);\n        while(i-Z[i]>=0 && i+Z[i] < m && S[i+Z[i]]==S[i-Z[i]]){\n            l = i;r = i+Z[i];\n            Z[i]++;\n        }\n    }\n}\n```\n\n### 後綴數組\n\n一些基本定義，我們定義 $suf[i]$ 是字串 $S$ 從 $i$ 開始的後綴，也就是 $S[i:n-1]$。將一個字串所有的後綴取出來按照字典序進行排序，就是**後綴數組**。總共有三個複雜度：$O(n^2\\log n)$、$O(n\\log^2 n)$、$O(n\\log n)$ 分別是使用暴力、倍增、基數排序的優化。\n\n#### 暴力解 $O(N^2\\log n)$\n$O(n)$ 的字串比對，排序 $O(n\\log n)$，因此時間複雜度為 $O(n^2\\log n)$。\n\n```cpp=\nint n,m;\nchar S[10] = \"algorithm\";\n\nbool cmp(int a,int b){\n    return strcmp(S+a,S+b) < 0;\n}\n\nint main(){\n    int SA[10];\n    n = strlen(S);\n    rep(i,0,n-1)SA[i] = i;\n    sort(SA,SA+n,cmp);\n    rep(i,0,n-1)cout<<SA[i]<<\" \";\n    cout<<endl;\n}\n```\n\n#### 倍增+Quick Sort\n使用倍增可以讓複雜度做到 $O(n\\log^2 n)$，其原理主要是讓比較的時間併入排序，同時多做 $O(\\log n)$ 層的排序。定義 $sa[i]$ 為將後綴排序後第 $i$ 小的後綴編號；$rk[i]$ 表示後綴 $i$ 的排名。\n\n倍增顧名思義，跟將數量乘上兩倍有關，因此會帶一個log。下圖就是一個排序的示例，首先按這字典序初始每一個字元的排名 $rk[i]$，進行 $O(\\log n)$ 層，每一層用 $O(n\\log n)$ 的時間進行排序。倍增讓原本的字串比較 $O(n)$ 降到 $O(\\log n)$ 。\n\n接下來的每一層的每一個字元 $s[i]$，在比較大小的時候，將 $rk[i]$ 以及 $rk[i+k]$ 組成一個 $pair$ 進行排序，從第一層開始，每一層的 $k$ 都會增加為2倍（倍增的概念）。pair的first就好比倍增時前 $s[i:i+k]$ 的排名、second就是 $s[i+k+1:i+2k]$ 的排名，搭配字典序是按照由前到後進行排名，比完fisrt才會比second，如此一來我們可以利用倍增的性質，也就是已經排名好的較短長度的字串，直接利用排好的名次進行下一輪的排序，這就導致我們不需要對每一個字元都看過一遍！\n\n![](https://i.imgur.com/l1aGK8f.png)\n[圖片出處](https://oi-wiki.org/string/sa/)圖中的黑線岔開距離都會因為每一層而越岔越開（乘上2倍），也就是「倍增」所代表的意義！\n\n```cpp=\nvoid suffix_array(string S){\n    n = S.size();\n    int lg = 32-__builtin_clz(n);//回傳第一個1之前0的個數（二進位）\n    vector<pt> cur(n,{0,0,0});\n    vector<int> rk(n+1,-1);\n    rep(i,0,n-1)cur[i] = {S[i],0,i};\n    rep(p,0,lg){                //進行O(lgn)次\n        int k = 1 << p;         //現在倍增的大小\n        sort(all(cur),cmp);\n        rk[cur[0].id] = 0;\n        rep(i,1,n-1)            //設定rk，與前一個相同則設定跟前一個一樣\n            rk[cur[i].id] = (cur[i-1]==cur[i] ? rk[cur[i-1].id]:i);\n        rep(i,0,n-1)            //倍增pair的second\n            cur[i] = {rk[i],rk[min(n,i+k)],i};\n    }\n    sort(all(cur),cmp);\n    rep(i,0,n-1)sa[i] = cur[i].id;\n}\n```\n\n\n#### 搭配 Radix Sort\n\n基數排序 (Raddix sort) 以及計數排序 (Counting sort) 兩者是有點從屬的關係，計數排序是基數排序的子程序，也就是說基數排序是透過對每一位進行計數排序完成的！\n\n首先，我們需要 $O(n)$ 的空間進行每一輪的計數排序，對每一個元素進行排名（從1到n-1），如此一來才能確保不會有溢位的問題。先對第二個關鍵字進行排序，排完之後再按照第一個關鍵字排序。Raddix Sort 是穩定的，相同元素為在前面在排序之後一定會在前面。\n\n有幾個地方有實作上進行基數排序的限制，首先第一輪會按照個別字母的字典序進行排序，用快排等基於比較的排序方法可以順利完成，但可惜基數排序不行，一定要乖乖的按照 1 到 n-1 順序進行排名。因此在第一輪會先使用 $std::sort$ 排名，之後進行raddix_sort！\n\n最後一個小小的地方，就是當第二個 key 的值為 -1的情況（倍增超出範圍），在比較時可以直接push進去答案裡面，因為並沒有一個box的index 是-1，同時他們也是最小，丟進去即可。\n\n**時間複雜度：** 每一層進行 $O(n)$ 排序，因為倍增共有 $O(\\log n)$ 層，因此總時間複雜度為 $O(n)\\times O(\\log n) = O(n\\log n)$！\n\n\n```cpp=\nvoid raddix_sort(vector<pt> &cur){\n    init();\n    rep(i,0,n-1){\n        if(cur[i].y == -1)temp.push_back(cur[i]);\n        else box[cur[i].y].push_back(cur[i]);\n    }\n    rep(i,0,n-1)\n        for(auto j : box[i])temp.push_back(j);\n    rep(i,0,n-1)box[i].clear();\n    rep(i,0,n-1)\n        box[temp[i].x].push_back(temp[i]);\n    cur.clear();\n    rep(i,0,n-1)\n        for(auto j : box[i])cur.push_back(j);\n}\n```\n### 最長共同前綴 LCP (Kasai's Algorithm)\n\n最長共同前綴，以現在字串演算法中，假設 $lcp(i,j)$ 為後綴 $i$ 與 $j$ 的最長共同前綴。在[這篇文章](https://www.geeksforgeeks.org/%C2%AD%C2%ADkasais-algorithm-for-construction-of-lcp-array-from-suffix-array/)中給出這個定義：\n> A value lcp[i] indicates length of the longest common prefix of the suffixes inexed by suffix[i] and suffix[i+1]\n\n定義 $lcp[i]$ 為後綴 $i$ 與後綴 $i+1$ 的最長共同前綴，其中 $lcp[n-1]$ 沒有定義。再複習一下，$rk[i]$ 為第 $i$ 個後綴數組的排名$rk[i]$、$sa[i]$ 為排名為 $i$ 的字串所對應到的從 $sa[i]$ 開始的後綴數組。\n\n到底我們要求的LCP是什麼？如果只是給兩個字串要求出共同最長前綴，那我們只要 $O(min(L_A,L_B))$ 就好，是可以接受的複雜度。但Kasai's Algorithm不是要求這個。一般都在講到後綴字串之後講到LCP，為的就是要求出所有的後綴數組中，任兩個字串的共同最長前綴為何。以一個字串長度為 $l$ 來說，後綴的配對數量共有 $O(l^2)$ 組，暴力肯定會TLE。\n\n\n求出 $lcs$ 需要有兩個引理：\n\n* **第一個引理**\n$$lcp[rk[i]] ≥ lcp[rk[i-1]]-1$$\n其中 $i$ 為**尚未經過排序**的從 $i$ 開始的後綴字串。\n\n**說明：** 將後綴數組排序之後有點像將相似的字串排在一起（按字典序由小排到大），鄰近的字串其實代表著一個意義，兩者相似程度越高。因此 $lcp[rk[i-1]]$ 某種意義代表著與 $i-1$ 開始的後綴數組（簡稱後綴 $i-1$）跟其他字串最大的共同前綴長度。\n\n接著我們看 $lcp[rk[i]]$ ，後綴 $i$ 就是後綴 $i-1$ 刪掉一個前綴字元的結果。我們假設跟後綴 $i-1$ 相近的那個字串叫做 $T$ （其實就是後綴 $rk[i-1]+1$），把 $T$ 刪除一個前綴字元之後所形成的字串（也就是比 $T$ 再短一字元的後綴）也就可以跟後綴 $i$ 進行匹配，其長度因為被刪掉一個前綴字元所以少一，因此得到了以上式子。\n\n聽說很難證明，不過至少可以情感上的接受這件事是對的！\n\n\n* **第二個引理**\n$$lcp(S_i,S-j) = min_{i≤k<j}(S_k,S_{k+1})$$\n\n為什麼可以算出最近的排名的LCP即可得到最長的LCP？從這個定理可以看出來，對於後綴 $i$ 以及後綴 $j$ ，取 $min$ 的原因是要確保所有的中間後綴 $k$ 都包含了下界 $k$ ，也就是說每個在 $i$ 與 $j$ 中間的人都至少跟前一個人相同個字元。\n\n---\n以下以字串 $aabaabc$ 作為範例：\n\n| 後綴 | RK  | String  |\n| ---- | --- |:------- |\n| 0    | 0   | aabaabc |\n| 1    | 2   | abaabc  |\n| 2    | 4   | baabc   |\n| 3    | 1   | aabc    |\n| 4    | 3   | abc     |\n| 5    | 5   | bc      |\n| 6    | 6   | c       |\n\n以下是SA與對應的String\n\n| RK  | SA  | String  | LCP |\n| --- | --- | ------- | --- |\n| 0   | 0   | aabaabc | 3   |\n| 1   | 3   | aabc    | 1   |\n| 2   | 1   | abaabc  | 2   |\n| 3   | 4   | abc     | 0   |\n| 4   | 2   | baabc   | 1   |\n| 5   | 5   | bc      | 0   |\n| 6   | 6   | c       | 0   |\n\n以下是找LCP流程：\n* 首先從後綴0開始，找到對應的下一個rk，也就是後綴3，得到LCP為3\n* 接下來看後綴1，查表得到RK為2，找到RK為3的找LCP，得到2\n* 看後綴2，與RK為4,5名找LCA，得到1\n* 後綴3，看RK 1,2，LCA為1\n* 接下來以此推累\n\n接下來有兩種不同設定方法，端看要採用的是上表還是下表的字串排序方法。我以上表為例，程式執行時印出順序：$3211000$；也可以採用後綴數組排序後的結果（一般都採用此方法），直接對應出順序（對照的是下表）：$3120100$。\n\n\n```cpp=\nvector<int> LCP(string s){\n    vector<int> rk(n,0),lcp(n,0);\n    rep(i,0,n-1)rk[sa[i]] = i;      //利用sa反函數得到rk\n    int k = 0;\n    rep(i,0,n-1){\n        if(k)k--;\n        if(rk[i] == n-1)continue;   //rk[n-1]未定義\n        int j = sa[rk[i]+1];        //下一名後綴從何開始\n        while(i+k<n && j+k<n && s[i+k] == s[j+k])k++;\n        lcp[rk[i]] = k;\n    }\n    return lcp;\n}\n```\n\n**時間複雜度：** 主要觀察 $k$ 的變化，$k$ 最多就是n，最少是0，最差的情況是 $k$ 被減掉 $n$ 次，加上 $2n$ 次，因此複雜度是線性 $O(n)$！\n\n","slug":"String","published":1,"updated":"2021-09-19T11:26:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvyspmiq002imuyxazl7dcb7","content":"<p>這個暑假看了動態規劃(1),(2)，線段樹、最短路徑、計算幾何、字串演算法，這一篇的完成算是暑假的一個里程吧！接下來繼續學習不同的主題，再把筆記更新到部落格中！</p>\n<h2 id=\"課程內容\"><a href=\"#課程內容\" class=\"headerlink\" title=\"課程內容\"></a>課程內容</h2><h3 id=\"字串\"><a href=\"#字串\" class=\"headerlink\" title=\"字串\"></a>字串</h3><ul>\n<li>定義<ul>\n<li>大寫 $\\Sigma$ 表示字元集</li>\n<li>字串：有限個字元集組成</li>\n<li>$|\\Sigma|$ 字元集大小、|S|字串長度</li>\n<li>S[a:b]表示連續從字元a到b<span id=\"more\"></span></li>\n</ul>\n</li>\n<li>子字串：S[a:b]</li>\n<li>前綴：S[0:b]</li>\n<li>後綴：S[a:|S|-1]</li>\n</ul>\n<h3 id=\"字典樹Trie\"><a href=\"#字典樹Trie\" class=\"headerlink\" title=\"字典樹Trie\"></a>字典樹Trie</h3><ul>\n<li>定義<ul>\n<li>例題：字串出現次數</li>\n<li>一顆由根、邊一綠往下指的有向樹</li>\n<li>每個邊為字元、每一點代表字串</li>\n<li>每經過一條邊，字串加上邊的字元</li>\n<li>根節點為空字串！</li>\n</ul>\n</li>\n<li>操作<ul>\n<li>查詢字串：$O(L)$，由根順著邊往下找</li>\n<li>插入字串：$O(L)$，不斷往下走直到空節點，在Trie加入一個節點</li>\n<li>節點必須記錄當前是否為有效字串</li>\n<li>Trie結構中包含：字串、紀錄字串出現次數</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"KMP\"><a href=\"#KMP\" class=\"headerlink\" title=\"KMP\"></a>KMP</h3><ul>\n<li>功能：進行字串匹配</li>\n<li>例題：字串S在字串T哪些位置出現<ul>\n<li>暴力匹配：時間 $O(|S|\\times|T|)$</li>\n</ul>\n</li>\n<li>F[i]表示當配對成功A[0:i]後即配對失敗，將A[F[i]]對齊原本A[i]的位置</li>\n<li>搭配F[i]調整在串移動的長度</li>\n<li>匹配：複雜度 $O(|T|)$，建立F函數：$O(|S|)$</li>\n</ul>\n<h3 id=\"漢明距離-Hamming-distance\"><a href=\"#漢明距離-Hamming-distance\" class=\"headerlink\" title=\"漢明距離(Hamming distance)\"></a>漢明距離(Hamming distance)</h3><ul>\n<li>兩個等長字符串對應位置的不同字符的個數</li>\n</ul>\n<h3 id=\"Z-value\"><a href=\"#Z-value\" class=\"headerlink\" title=\"Z-value\"></a>Z-value</h3><ul>\n<li>z[i] 是指由 s[i] 開始的字串，與 s[0] 開始的字串可以匹配到多長</li>\n<li>S[0:k-1] = S[i:i+k-1]</li>\n<li>z[0] = 0</li>\n</ul>\n<h3 id=\"Rolling-Hash\"><a href=\"#Rolling-Hash\" class=\"headerlink\" title=\"Rolling Hash\"></a>Rolling Hash</h3><ul>\n<li>之前隨機講過</li>\n</ul>\n<h3 id=\"後綴數組（Suffix-Array）\"><a href=\"#後綴數組（Suffix-Array）\" class=\"headerlink\" title=\"後綴數組（Suffix Array）\"></a>後綴數組（Suffix Array）</h3><ul>\n<li>將一個字串的所有後綴進行排序</li>\n<li>基數排序（Radix Sort）</li>\n</ul>\n<h3 id=\"最長共同前綴（LCP-Longest-Common-Prefix）\"><a href=\"#最長共同前綴（LCP-Longest-Common-Prefix）\" class=\"headerlink\" title=\"最長共同前綴（LCP,Longest Common Prefix）\"></a>最長共同前綴（LCP,Longest Common Prefix）</h3><ul>\n<li>兩字串的最長共同前綴</li>\n<li>將最長共同前綴轉換成區間最小值問題</li>\n</ul>\n<h2 id=\"字串演算法主題\"><a href=\"#字串演算法主題\" class=\"headerlink\" title=\"字串演算法主題\"></a>字串演算法主題</h2><h3 id=\"字典樹Trie-1\"><a href=\"#字典樹Trie-1\" class=\"headerlink\" title=\"字典樹Trie\"></a>字典樹Trie</h3><p>字典樹是以指標型態建立的一棵樹，邊代表一個字元、節點代表從根一路走來的邊形成的字串，從根節點開始（根節點為空），每經過一條邊，就把字串加上那一條邊對應的字元，直到找出要匹配的字串。如果有多筆獨立的詢問，只要加上Delete函數就可以了！</p>\n<h4 id=\"Trie結構\"><a href=\"#Trie結構\" class=\"headerlink\" title=\"Trie結構\"></a>Trie結構</h4><p>實作上的陣列c指向個別的字元，不一定要用cnt，根據題目的所求調整不同的變數設定。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Trie</span>&#123;</span>        <span class=\"comment\">//利用指標建立一棵樹</span></span><br><span class=\"line\">    Trie* c[<span class=\"number\">26</span>];    <span class=\"comment\">//對應a-z每一條邊</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt;        <span class=\"comment\">//字串出現次數</span></span><br><span class=\"line\">    <span class=\"built_in\">Trie</span>(): <span class=\"built_in\">cnt</span>(<span class=\"number\">0</span>)&#123; <span class=\"comment\">//初始設定</span></span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(c,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(c));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Trie* root;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Insert函數\"><a href=\"#Insert函數\" class=\"headerlink\" title=\"Insert函數\"></a>Insert函數</h4><p>在插入的過程中言錄新增路徑，一樣嘢可以根據題目要求在過程中進行變數紀錄等。如<strong>NEOJ 267 自動完成系統</strong>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">char</span> *s)</span></span>&#123;</span><br><span class=\"line\">    Trie *ptr = root;           <span class=\"comment\">//從根節點尋找</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(*s)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)])     <span class=\"comment\">//如果樹上無此字元則new</span></span><br><span class=\"line\">            ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)] = <span class=\"keyword\">new</span> <span class=\"built_in\">Trie</span>();</span><br><span class=\"line\">        ptr = ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)];   <span class=\"comment\">//繼續造訪Trie</span></span><br><span class=\"line\">        s += <span class=\"number\">1</span>;                 <span class=\"comment\">//字串下一個字元</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ptr-&gt;cnt += <span class=\"number\">1</span>;              <span class=\"comment\">//字串出現次數(字串對應唯一葉節點)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"查詢函數\"><a href=\"#查詢函數\" class=\"headerlink\" title=\"查詢函數\"></a>查詢函數</h4><p>一個字串對應到唯一的路徑，從根節點根據每一個字元決定路徑。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">char</span> *s)</span></span>&#123;              <span class=\"comment\">//查找字串s</span></span><br><span class=\"line\">    Trie *ptr = root;           <span class=\"comment\">//根節點尋找</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(*s)&#123;                  <span class=\"comment\">//無此字串，回傳次數0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)])<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        ptr = ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)];</span><br><span class=\"line\">        s += <span class=\"number\">1</span>;                 <span class=\"comment\">//字串下一個字元</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ptr-&gt;cnt;            <span class=\"comment\">//回傳字串出現次數</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Delete函數\"><a href=\"#Delete函數\" class=\"headerlink\" title=\"Delete函數\"></a>Delete函數</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">(Trie *s)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">26</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s-&gt;c[i])&#123;</span><br><span class=\"line\">            <span class=\"built_in\">clear</span>(s-&gt;c[i]);</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> s-&gt;c[i];</span><br><span class=\"line\">            s-&gt;c[i] = <span class=\"literal\">nullptr</span>;    <span class=\"comment\">//很重要</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"KMP-Algorithm\"><a href=\"#KMP-Algorithm\" class=\"headerlink\" title=\"KMP Algorithm\"></a>KMP Algorithm</h3><p>首先要求出Failure Function，它可以在 $O(|S|)$ 建立。失敗函數的定義是：</p>\n<blockquote>\n<p>$F[i]$ 表示當成功配對 $A[0:i]$ 之後，配對失敗時，我們會將 $A[ F[i]]$ 對齊原本 $A[i]$ 的位置</p>\n</blockquote>\n<p>如果寫成數學式的定義：</p>\n<script type=\"math/tex; mode=display\">F_A(J)=\\left\\{\n\\begin{array}{l}\n-1,&&\\text{if j = 0}\\\\\nmax\\{p:A_{0...p} = A_{j-p...j} \\text{ and 0≤p<j}\\},&&\\text{otherwise}\\\\\n\\end{array} \\right.</script><p>這個函式以中文來說就是「<strong>最大前綴後綴</strong>」！</p>\n<p>這個函數可以讓我們知道，當配對在較短字串 $S$ 在第 $i$ 位配對失敗時，要找到第 $F[i]$ 去繼續比對。從比較直觀的角度去理解，就是把字串要往右移幾格才能正確匹配上，如果配對失敗，則尋找更前面更短的子字串試試看。</p>\n<p>以比較數學的角度看到底要怎麼建立Failure Function，可以從以下推導得知：</p>\n<div class=\"note info\">\n            <p>假設 $F[i] = x, x≠-1$，根據上面的定義有這樣的等式：$A[0:x] = A[i-x:i]$<br>分成以下兩種情況做討論：</p><ul><li><p>$A[x+1] = A[i+1]$<br>這種情況就是兩邊的下一個字串都相同，直接將繼承前面的長度為x的子字串，因此有關係式$F[i+1] = x+1$</p></li><li><p>$A[x+1] ≠ A[i+1]$<br>這種情況比較棘手，我們無法繼續使用之前長度為x的子字串，因此我們要尋找前面更短的字串進行匹配。假設我們找到 $K$ 滿足 k&lt;x，同時 $A[0:k] = A[i-k:i]$ ，這時候我們只需確認 $A[k+1]=A[i+1]$ 是否成立即可，如果不成立則繼續尋找比 $K$ 更短的子字串。</p></li></ul><p><br></p><p>從剛剛的關係式，我們可以繼續寫下去： $A[0:k] = A[i-k:i]=A[x-k:x]$，理由是i的後綴與x後綴相同，因此 k的後綴就會和x的後綴相同。由失敗函式的定義推斷，我們要找的 $k$ 就會是 x 的失敗函式，$K = F[x]$。</p><p>如果找到的k不滿足 $A[k+1]=A[i+1]$ ，則會繼續尋找下一個更小的 $k$ 值直到滿足條件或是 $k=-1$ 為止。</p>\n          </div>\n<p>再來則是KMP MATCH，能在時間複雜度 $O(|T|)$ 內將匹配出來的位置找出來。具體的方法與建立Failure Function 相近，如果 $A[p+1]≠A[i+1]$，則尋找更小的字串長度 $k&lt;F[i]$ 看能否繼續匹配。當匹配成功，記得把p設為F[p]，因為匹配完成其實也可以看作是下一個字元匹配失敗（$S$ 的空字元對上 $T$ 的下一個）。</p>\n<p>至於時間複雜度的部分，分析一下while迴圈總共會執行的次數，當每執行一次，p的值一定會遞減，而p只會在每一個迴圈最多加上一，因此p的增加會是字串長度 $|T|$ 的常數倍，使總複雜度為 $O(|T|)$。</p>\n<h4 id=\"Build-Function\"><a href=\"#Build-Function\" class=\"headerlink\" title=\"Build Function\"></a>Build Function</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//O(|S|)要配對的字串以及Fail Function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">KMP_build</span><span class=\"params\">(<span class=\"keyword\">char</span> *S,<span class=\"keyword\">int</span> *F)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = F[<span class=\"number\">0</span>] = <span class=\"number\">-1</span>;              <span class=\"comment\">//初始設定為-1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;S[i];i++)&#123;          <span class=\"comment\">//1到接下來字元</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p!=<span class=\"number\">-1</span> &amp;&amp; S[p+<span class=\"number\">1</span>]!=S[i])</span><br><span class=\"line\">            p = F[p];               <span class=\"comment\">//無法繼續配對，尋找更短字串</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S[p+<span class=\"number\">1</span>] == S[i])          <span class=\"comment\">//配對成功(如都沒有一樣的就-1)</span></span><br><span class=\"line\">            p += <span class=\"number\">1</span>;</span><br><span class=\"line\">        F[i] = p;                   <span class=\"comment\">//設定F[i]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Match-Function\"><a href=\"#Match-Function\" class=\"headerlink\" title=\"Match Function\"></a>Match Function</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">KMP_match</span><span class=\"params\">(<span class=\"keyword\">char</span> *S,<span class=\"keyword\">int</span> *F,<span class=\"keyword\">char</span> *T)</span></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt; ans;            <span class=\"comment\">//回傳匹配相同地方</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">-1</span>;                 <span class=\"comment\">//紀錄短字串有多少被匹配</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;T[i];i++)&#123;      <span class=\"comment\">//每一迴圈都讓T[i]被匹配到</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p!=<span class=\"number\">-1</span> &amp;&amp; S[p+<span class=\"number\">1</span>]!=T[i])</span><br><span class=\"line\">            p = F[p];           <span class=\"comment\">//使T[i]一定可以被匹配到</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S[p+<span class=\"number\">1</span>] == T[i])</span><br><span class=\"line\">            p += <span class=\"number\">1</span>;             <span class=\"comment\">//T的第i個與S的p+1可以匹配</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!S[p+<span class=\"number\">1</span>])&#123;            <span class=\"comment\">//S[p]已經匹配完成</span></span><br><span class=\"line\">            ans.<span class=\"built_in\">push_back</span>(i-p); <span class=\"comment\">//回推匹配開頭</span></span><br><span class=\"line\">            p = F[p];           <span class=\"comment\">//繼續下一輪匹配</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Hash-Robin-Karp-Algorithm\"><a href=\"#Hash-Robin-Karp-Algorithm\" class=\"headerlink\" title=\"Hash (Robin-Karp Algorithm)\"></a>Hash (Robin-Karp Algorithm)</h3><p>雜湊算法的核心概念就是以下公式，可以透過它進行字串比對等等。</p>\n<script type=\"math/tex; mode=display\">H(s[1:n]) = \\sum_{i=0}^n S_i\\times C^{n-i}</script><p>詳細內容可以參閱這一篇：<a href=\"https://hackmd.io/@peienwu/random\">隨機演算法</a></p>\n<h3 id=\"Z-Algorithm-Gusfield’s-Algorithm\"><a href=\"#Z-Algorithm-Gusfield’s-Algorithm\" class=\"headerlink\" title=\"Z Algorithm (Gusfield’s Algorithm)\"></a>Z Algorithm (Gusfield’s Algorithm)</h3><p>Z函數的定義是對於字串長度 $n$ 的字串 $S$ ，$z[i]$ 函數代表 $S[0:n-1]$ 和 $S[i:n-1]$ 的<strong>最長共同前綴</strong>，也就是LCP長度。定義 $z[0] = 0$。</p>\n<p>有講義上面寫Z Function很簡單，但我覺得有夠難，難度跟KMP的理解差不多。根據Z函數的定義，我們可以$O(N^2)$建立z函數，顯然時間有些太多了。如果我們算 $Z[i]$ 的值可以用 $Z[0:i-1]$ 轉移過來，會省下許多時間，把時間降成 $O(N)$。</p>\n<h4 id=\"算法概念\"><a href=\"#算法概念\" class=\"headerlink\" title=\"算法概念\"></a>算法概念</h4><p>整個算法的核心概念就是利用前面已經算好的Z Function去推現在的值，有點像動態規劃的概念。在整個過程中我們會維護右端點最大的匹配段（與前綴匹配），其表示為 $[l:l+Z[l]]$，也可以寫作 $[l:r]$，保證 $l ≤ r$。在計算 $Z[i]$ 的過程中，分別討論以下三種情形：</p>\n<ol>\n<li><p>$i ≤ r$<br>根據定義，因為區間 $[l:r]$ 本身是前綴，因此當 $i$ 在區間中間時會將區間分成左右兩半邊，將正個區間往前平移會讓 $i$ 對應到 $i-l$ 的位置，又此時區間為 $[0:r-l]$ ，因此$z[i] = min(z[i-l],r-i)$。</p>\n<ul>\n<li>$z[i-l] ≤ r-i$<br>已經知道 $z[i-l] &lt; r-i$ 表示在前後兩區間（分別從0,i開始）在一樣的情況下做多不超過 $z[i-l]$ 長度的匹配，因此第 $z[i-l]$ 的下一個字元必定無法繼續匹配成前綴。</li>\n<li>$z[i-l] &gt; r-i$<br>在這種情況下已知 $s[0:r-l] = s[l:r]$，根據定義 $s[i-l:r-l] = s[i:r]$。因為 $z[i-l] &gt; r-i$，$z[i-l]$ 右端的範圍會超過 $r$ ，也就是說超過 $r$ 之後這個性質 $s[i-l:r-l] = s[i:r]$ 就不會成立，但可以確定 $z[i]$ 至少為 $r-i$。接著就暴力枚舉即可！</li>\n</ul>\n</li>\n</ol>\n<p>上面的內容可以用下圖解釋，兩條紅線段是一樣的，$x=i-l$ ，接著討論$Z[x]$ 的長度就可以知道該如何更新。<br><img src=\"https://i.imgur.com/6WU1JWG.png\" alt=\"\"></p>\n<ol>\n<li>$i &gt; r$<br>這種情況我們可以直接暴力跟前綴匹配。</li>\n</ol>\n<h4 id=\"程式實作1\"><a href=\"#程式實作1\" class=\"headerlink\" title=\"程式實作1\"></a>程式實作1</h4><p>程式碼中 $bst$ 表示的是左界 $l$，右界則是 $bst+Z[bst]$。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Z_algo1</span><span class=\"params\">(<span class=\"keyword\">char</span> *S,<span class=\"keyword\">int</span> *Z)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> bst = <span class=\"number\">0</span>;                            <span class=\"comment\">//相當於左界，大小為z[bst]</span></span><br><span class=\"line\">    Z[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;S[i];i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Z[bst]+bst &lt; i)Z[i] = <span class=\"number\">0</span>;         <span class=\"comment\">//直接暴力枚舉</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> Z[i] = <span class=\"built_in\">min</span>(Z[i-bst],bst+Z[bst]-i);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(S[Z[i]]==S[i+Z[i]])Z[i]++;    <span class=\"comment\">//依序暴力枚舉</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Z[i]+i &gt; bst+Z[bst])bst = i;     <span class=\"comment\">//更新更遠的右界</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"程式實作2\"><a href=\"#程式實作2\" class=\"headerlink\" title=\"程式實作2\"></a>程式實作2</h4><p>這個實作超級短，沒有幾行就解決了，但他的效果卻是一樣的！</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Z_algo2</span><span class=\"params\">(<span class=\"keyword\">char</span> *S,<span class=\"keyword\">int</span> *Z)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>, r = <span class=\"number\">0</span>;                       <span class=\"comment\">//左右界</span></span><br><span class=\"line\">    Z[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;S[i];i++)&#123;</span><br><span class=\"line\">        Z[i] = <span class=\"built_in\">max</span>(<span class=\"built_in\">min</span>(Z[i-l],r-i),<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(S[i+Z[i]] &amp;&amp; S[Z[i]] == S[i+Z[i]])&#123;</span><br><span class=\"line\">            r = i+Z[i];               <span class=\"comment\">//更新右界</span></span><br><span class=\"line\">            Z[i]++;</span><br><span class=\"line\">        &#125;<span class=\"comment\">//保證當Z[i]從Z[i-l]轉移時不會被更新！</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"時間複雜度\"><a href=\"#時間複雜度\" class=\"headerlink\" title=\"時間複雜度\"></a>時間複雜度</h4><p>根據以上兩個程式碼可以發現，右界 $r$ 或是 $bst+Z[bst]$ 在過程中是不斷增大的，且r必定不會超過n，因此迴圈跑下來複雜度會是 $O(N)$。</p>\n<h3 id=\"LPS-Manacher’s-Algorithm\"><a href=\"#LPS-Manacher’s-Algorithm\" class=\"headerlink\" title=\"LPS (Manacher’s Algorithm)\"></a>LPS (Manacher’s Algorithm)</h3><p>LPS (Longest Palindromic Substring)就是最長回文子字串，Naive的作法是每次 $O(n)$ 向兩側擴展，時間是 $O(n^2)$。</p>\n<p>Manacher’s Algorithm這個演算法的概念和Z Alogorithm相近，可以在 $O(n)$ 的時間內找出以每一個點為中心之最長回文長度。回文的定義是無論從正序或是逆序看一個字串都是一樣的，分為兩種：一種是奇數的對稱，也就是以一個字元為對稱中心往兩側擴展；另一種則是以字元間的空格為對稱中心向兩側對稱。</p>\n<p>這兩個的性質很不同，在處理的時候我們也不知道到底是呈現怎麼樣對稱的狀況，因此可以使用一種手法：將每一個字元中間插入同樣沒有出現過的字元，如此一來不論是偶數或是奇數長度的字串，在加入這個沒有出現過的字元之後，都會變成奇數長度的回文了！</p>\n<p>定義 $z[i]$ 為以 $s[i]$ 為中心，最長的回文長度LPS（如果字元i是自己回文，定義Z[i] = 0]）。以字串abba來說就是以下情況：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>編號</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>原字串</td>\n<td>a</td>\n<td>b</td>\n<td>b</td>\n<td>a</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>變更後</td>\n<td>.</td>\n<td>a</td>\n<td>.</td>\n<td>b</td>\n<td>.</td>\n<td>b</td>\n<td>.</td>\n<td>a</td>\n<td>. </td>\n</tr>\n<tr>\n<td>Z函數</td>\n<td>1</td>\n<td>2</td>\n<td>1</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n<td>1</td>\n<td>2</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>跟Z Alogrithm 一樣，維護一個右界最遠的區間 $[l,r]$，作為在算 $z[i]$ 時能使用到的 $z[0:i-1]$ 的最大值，令他為 $r$。取j滿足 $j+z[j]$ 有最大值，分成以下兩個條件做討論：</p>\n<p><strong>1. r &lt; i</strong><br>這種情況就表示不能用之前算的東西去更新現在的值，因此只能暴力枚舉 $s[i]$ 的左右兩側，看最長回文的長度為何。</p>\n<p><strong>2. r &gt; i</strong><br>分成三種情況討論（比z algorithm多了一個），首先因為 $r &gt; i$，右界覆蓋了 $i$，表示我們可以從 $j$ 的另外一端映射出與 $s[i]$ 相同的 $s[i’]$（以 $j$ 為中心回文呈現兩側對稱），映射的索引值為 $2j-i$，如下圖：</p>\n<p><img src=\"https://i.imgur.com/Pf1S21i.png\" alt=\"\"></p>\n<p>因為 $z[i’]$ 已經計算過了，因此可以將 $r-i$ 以及 $z[i’]$ 的大小分成三種情況討論：</p>\n<ul>\n<li><p>$z[i’] &lt; r-i$<br>這種情況表示 $z[i’]$ 無法繼續往右邊更新，因為 $i$ 與 $i’$ 都是在以 $j$ 為中心的回文中，兩邊是一樣的，代表 $z[i] = z[i’]$ 且不可能再被更新成更大的範圍。</p>\n</li>\n<li><p>$z[i’] = r-i$<br>這種情況下是要枚舉的，從兩側映射的關係知道 $z[i]$ 的長度至少為 $r-i-1$，因此將 $z[i]$ 設為 $r-i$ 繼續枚舉就可以了！</p>\n</li>\n<li><p>$z[i’] &gt; r-i$<br>由下圖觀察發現，$z[i]$ 不可能比 $r-i$ 還要大，直接將值設為 $r-i$ 即可。<br><img src=\"https://i.imgur.com/zsb6blx.png\" alt=\"\"></p>\n</li>\n</ul>\n<h4 id=\"時間複雜度-1\"><a href=\"#時間複雜度-1\" class=\"headerlink\" title=\"時間複雜度\"></a>時間複雜度</h4><p>觀察到while迴圈執行的狀況，只有當 $r &lt; i$ 以及 $z[i’] = r-i$ 時右界才有被更新的可能，兩種情況都會讓右界 $r$ 遞增，範圍最大到 $n$ ，因為不會減小的關係，總時間複雜度為線性的 $O(n)$！</p>\n<h4 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Longest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">strlen</span>(T);m = <span class=\"number\">2</span>*n+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(S,<span class=\"string\">&#x27;.&#x27;</span>,m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)S[<span class=\"number\">2</span>*i+<span class=\"number\">1</span>] = T[i];    <span class=\"comment\">//間隔插入沒出現過字元</span></span><br><span class=\"line\">    Z[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;                               <span class=\"comment\">//計算時使用右開區間</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>,r = <span class=\"number\">0</span>;                        <span class=\"comment\">//維護最大右界左右界</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        Z[i] = <span class=\"built_in\">max</span>(<span class=\"built_in\">min</span>(Z[<span class=\"number\">2</span>*l-i],r-i),<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i-Z[i]&gt;=<span class=\"number\">0</span> &amp;&amp; i+Z[i] &lt; m &amp;&amp; S[i+Z[i]]==S[i-Z[i]])&#123;</span><br><span class=\"line\">            l = i;r = i+Z[i];</span><br><span class=\"line\">            Z[i]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"後綴數組\"><a href=\"#後綴數組\" class=\"headerlink\" title=\"後綴數組\"></a>後綴數組</h3><p>一些基本定義，我們定義 $suf[i]$ 是字串 $S$ 從 $i$ 開始的後綴，也就是 $S[i:n-1]$。將一個字串所有的後綴取出來按照字典序進行排序，就是<strong>後綴數組</strong>。總共有三個複雜度：$O(n^2\\log n)$、$O(n\\log^2 n)$、$O(n\\log n)$ 分別是使用暴力、倍增、基數排序的優化。</p>\n<h4 id=\"暴力解-O-N-2-log-n\"><a href=\"#暴力解-O-N-2-log-n\" class=\"headerlink\" title=\"暴力解 $O(N^2\\log n)$\"></a>暴力解 $O(N^2\\log n)$</h4><p>$O(n)$ 的字串比對，排序 $O(n\\log n)$，因此時間複雜度為 $O(n^2\\log n)$。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\"><span class=\"keyword\">char</span> S[<span class=\"number\">10</span>] = <span class=\"string\">&quot;algorithm&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">strcmp</span>(S+a,S+b) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SA[<span class=\"number\">10</span>];</span><br><span class=\"line\">    n = <span class=\"built_in\">strlen</span>(S);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)SA[i] = i;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(SA,SA+n,cmp);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cout&lt;&lt;SA[i]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    cout&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"倍增-Quick-Sort\"><a href=\"#倍增-Quick-Sort\" class=\"headerlink\" title=\"倍增+Quick Sort\"></a>倍增+Quick Sort</h4><p>使用倍增可以讓複雜度做到 $O(n\\log^2 n)$，其原理主要是讓比較的時間併入排序，同時多做 $O(\\log n)$ 層的排序。定義 $sa[i]$ 為將後綴排序後第 $i$ 小的後綴編號；$rk[i]$ 表示後綴 $i$ 的排名。</p>\n<p>倍增顧名思義，跟將數量乘上兩倍有關，因此會帶一個log。下圖就是一個排序的示例，首先按這字典序初始每一個字元的排名 $rk[i]$，進行 $O(\\log n)$ 層，每一層用 $O(n\\log n)$ 的時間進行排序。倍增讓原本的字串比較 $O(n)$ 降到 $O(\\log n)$ 。</p>\n<p>接下來的每一層的每一個字元 $s[i]$，在比較大小的時候，將 $rk[i]$ 以及 $rk[i+k]$ 組成一個 $pair$ 進行排序，從第一層開始，每一層的 $k$ 都會增加為2倍（倍增的概念）。pair的first就好比倍增時前 $s[i:i+k]$ 的排名、second就是 $s[i+k+1:i+2k]$ 的排名，搭配字典序是按照由前到後進行排名，比完fisrt才會比second，如此一來我們可以利用倍增的性質，也就是已經排名好的較短長度的字串，直接利用排好的名次進行下一輪的排序，這就導致我們不需要對每一個字元都看過一遍！</p>\n<p><img src=\"https://i.imgur.com/l1aGK8f.png\" alt=\"\"><br><a href=\"https://oi-wiki.org/string/sa/\">圖片出處</a>圖中的黑線岔開距離都會因為每一層而越岔越開（乘上2倍），也就是「倍增」所代表的意義！</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">suffix_array</span><span class=\"params\">(string S)</span></span>&#123;</span><br><span class=\"line\">    n = S.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lg = <span class=\"number\">32</span>-__builtin_clz(n);<span class=\"comment\">//回傳第一個1之前0的個數（二進位）</span></span><br><span class=\"line\">    <span class=\"function\">vector&lt;pt&gt; <span class=\"title\">cur</span><span class=\"params\">(n,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">rk</span><span class=\"params\">(n+<span class=\"number\">1</span>,<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cur[i] = &#123;S[i],<span class=\"number\">0</span>,i&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(p,<span class=\"number\">0</span>,lg)&#123;                <span class=\"comment\">//進行O(lgn)次</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = <span class=\"number\">1</span> &lt;&lt; p;         <span class=\"comment\">//現在倍增的大小</span></span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(cur),cmp);</span><br><span class=\"line\">        rk[cur[<span class=\"number\">0</span>].id] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,n<span class=\"number\">-1</span>)            <span class=\"comment\">//設定rk，與前一個相同則設定跟前一個一樣</span></span><br><span class=\"line\">            rk[cur[i].id] = (cur[i<span class=\"number\">-1</span>]==cur[i] ? rk[cur[i<span class=\"number\">-1</span>].id]:i);</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)            <span class=\"comment\">//倍增pair的second</span></span><br><span class=\"line\">            cur[i] = &#123;rk[i],rk[<span class=\"built_in\">min</span>(n,i+k)],i&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(cur),cmp);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)sa[i] = cur[i].id;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"搭配-Radix-Sort\"><a href=\"#搭配-Radix-Sort\" class=\"headerlink\" title=\"搭配 Radix Sort\"></a>搭配 Radix Sort</h4><p>基數排序 (Raddix sort) 以及計數排序 (Counting sort) 兩者是有點從屬的關係，計數排序是基數排序的子程序，也就是說基數排序是透過對每一位進行計數排序完成的！</p>\n<p>首先，我們需要 $O(n)$ 的空間進行每一輪的計數排序，對每一個元素進行排名（從1到n-1），如此一來才能確保不會有溢位的問題。先對第二個關鍵字進行排序，排完之後再按照第一個關鍵字排序。Raddix Sort 是穩定的，相同元素為在前面在排序之後一定會在前面。</p>\n<p>有幾個地方有實作上進行基數排序的限制，首先第一輪會按照個別字母的字典序進行排序，用快排等基於比較的排序方法可以順利完成，但可惜基數排序不行，一定要乖乖的按照 1 到 n-1 順序進行排名。因此在第一輪會先使用 $std::sort$ 排名，之後進行raddix_sort！</p>\n<p>最後一個小小的地方，就是當第二個 key 的值為 -1的情況（倍增超出範圍），在比較時可以直接push進去答案裡面，因為並沒有一個box的index 是-1，同時他們也是最小，丟進去即可。</p>\n<p><strong>時間複雜度：</strong> 每一層進行 $O(n)$ 排序，因為倍增共有 $O(\\log n)$ 層，因此總時間複雜度為 $O(n)\\times O(\\log n) = O(n\\log n)$！</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">raddix_sort</span><span class=\"params\">(vector&lt;pt&gt; &amp;cur)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">init</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur[i].y == <span class=\"number\">-1</span>)temp.<span class=\"built_in\">push_back</span>(cur[i]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> box[cur[i].y].<span class=\"built_in\">push_back</span>(cur[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> j : box[i])temp.<span class=\"built_in\">push_back</span>(j);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)box[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)</span><br><span class=\"line\">        box[temp[i].x].<span class=\"built_in\">push_back</span>(temp[i]);</span><br><span class=\"line\">    cur.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> j : box[i])cur.<span class=\"built_in\">push_back</span>(j);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"最長共同前綴-LCP-Kasai’s-Algorithm\"><a href=\"#最長共同前綴-LCP-Kasai’s-Algorithm\" class=\"headerlink\" title=\"最長共同前綴 LCP (Kasai’s Algorithm)\"></a>最長共同前綴 LCP (Kasai’s Algorithm)</h3><p>最長共同前綴，以現在字串演算法中，假設 $lcp(i,j)$ 為後綴 $i$ 與 $j$ 的最長共同前綴。在<a href=\"https://www.geeksforgeeks.org/%C2%AD%C2%ADkasais-algorithm-for-construction-of-lcp-array-from-suffix-array/\">這篇文章</a>中給出這個定義：</p>\n<blockquote>\n<p>A value lcp[i] indicates length of the longest common prefix of the suffixes inexed by suffix[i] and suffix[i+1]</p>\n</blockquote>\n<p>定義 $lcp[i]$ 為後綴 $i$ 與後綴 $i+1$ 的最長共同前綴，其中 $lcp[n-1]$ 沒有定義。再複習一下，$rk[i]$ 為第 $i$ 個後綴數組的排名$rk[i]$、$sa[i]$ 為排名為 $i$ 的字串所對應到的從 $sa[i]$ 開始的後綴數組。</p>\n<p>到底我們要求的LCP是什麼？如果只是給兩個字串要求出共同最長前綴，那我們只要 $O(min(L_A,L_B))$ 就好，是可以接受的複雜度。但Kasai’s Algorithm不是要求這個。一般都在講到後綴字串之後講到LCP，為的就是要求出所有的後綴數組中，任兩個字串的共同最長前綴為何。以一個字串長度為 $l$ 來說，後綴的配對數量共有 $O(l^2)$ 組，暴力肯定會TLE。</p>\n<p>求出 $lcs$ 需要有兩個引理：</p>\n<ul>\n<li><strong>第一個引理</strong><script type=\"math/tex; mode=display\">lcp[rk[i]] ≥ lcp[rk[i-1]]-1</script>其中 $i$ 為<strong>尚未經過排序</strong>的從 $i$ 開始的後綴字串。</li>\n</ul>\n<p><strong>說明：</strong> 將後綴數組排序之後有點像將相似的字串排在一起（按字典序由小排到大），鄰近的字串其實代表著一個意義，兩者相似程度越高。因此 $lcp[rk[i-1]]$ 某種意義代表著與 $i-1$ 開始的後綴數組（簡稱後綴 $i-1$）跟其他字串最大的共同前綴長度。</p>\n<p>接著我們看 $lcp[rk[i]]$ ，後綴 $i$ 就是後綴 $i-1$ 刪掉一個前綴字元的結果。我們假設跟後綴 $i-1$ 相近的那個字串叫做 $T$ （其實就是後綴 $rk[i-1]+1$），把 $T$ 刪除一個前綴字元之後所形成的字串（也就是比 $T$ 再短一字元的後綴）也就可以跟後綴 $i$ 進行匹配，其長度因為被刪掉一個前綴字元所以少一，因此得到了以上式子。</p>\n<p>聽說很難證明，不過至少可以情感上的接受這件事是對的！</p>\n<ul>\n<li><strong>第二個引理</strong><script type=\"math/tex; mode=display\">lcp(S_i,S-j) = min_{i≤k<j}(S_k,S_{k+1})</script></li>\n</ul>\n<p>為什麼可以算出最近的排名的LCP即可得到最長的LCP？從這個定理可以看出來，對於後綴 $i$ 以及後綴 $j$ ，取 $min$ 的原因是要確保所有的中間後綴 $k$ 都包含了下界 $k$ ，也就是說每個在 $i$ 與 $j$ 中間的人都至少跟前一個人相同個字元。</p>\n<hr>\n<p>以下以字串 $aabaabc$ 作為範例：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>後綴</th>\n<th>RK</th>\n<th style=\"text-align:left\">String</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td style=\"text-align:left\">aabaabc</td>\n</tr>\n<tr>\n<td>1</td>\n<td>2</td>\n<td style=\"text-align:left\">abaabc</td>\n</tr>\n<tr>\n<td>2</td>\n<td>4</td>\n<td style=\"text-align:left\">baabc</td>\n</tr>\n<tr>\n<td>3</td>\n<td>1</td>\n<td style=\"text-align:left\">aabc</td>\n</tr>\n<tr>\n<td>4</td>\n<td>3</td>\n<td style=\"text-align:left\">abc</td>\n</tr>\n<tr>\n<td>5</td>\n<td>5</td>\n<td style=\"text-align:left\">bc</td>\n</tr>\n<tr>\n<td>6</td>\n<td>6</td>\n<td style=\"text-align:left\">c</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>以下是SA與對應的String</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>RK</th>\n<th>SA</th>\n<th>String</th>\n<th>LCP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>aabaabc</td>\n<td>3</td>\n</tr>\n<tr>\n<td>1</td>\n<td>3</td>\n<td>aabc</td>\n<td>1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1</td>\n<td>abaabc</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>4</td>\n<td>abc</td>\n<td>0</td>\n</tr>\n<tr>\n<td>4</td>\n<td>2</td>\n<td>baabc</td>\n<td>1</td>\n</tr>\n<tr>\n<td>5</td>\n<td>5</td>\n<td>bc</td>\n<td>0</td>\n</tr>\n<tr>\n<td>6</td>\n<td>6</td>\n<td>c</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>以下是找LCP流程：</p>\n<ul>\n<li>首先從後綴0開始，找到對應的下一個rk，也就是後綴3，得到LCP為3</li>\n<li>接下來看後綴1，查表得到RK為2，找到RK為3的找LCP，得到2</li>\n<li>看後綴2，與RK為4,5名找LCA，得到1</li>\n<li>後綴3，看RK 1,2，LCA為1</li>\n<li>接下來以此推累</li>\n</ul>\n<p>接下來有兩種不同設定方法，端看要採用的是上表還是下表的字串排序方法。我以上表為例，程式執行時印出順序：$3211000$；也可以採用後綴數組排序後的結果（一般都採用此方法），直接對應出順序（對照的是下表）：$3120100$。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">LCP</span><span class=\"params\">(string s)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">rk</span><span class=\"params\">(n,<span class=\"number\">0</span>)</span>,<span class=\"title\">lcp</span><span class=\"params\">(n,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)rk[sa[i]] = i;      <span class=\"comment\">//利用sa反函數得到rk</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k)k--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rk[i] == n<span class=\"number\">-1</span>)<span class=\"keyword\">continue</span>;   <span class=\"comment\">//rk[n-1]未定義</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = sa[rk[i]+<span class=\"number\">1</span>];        <span class=\"comment\">//下一名後綴從何開始</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i+k&lt;n &amp;&amp; j+k&lt;n &amp;&amp; s[i+k] == s[j+k])k++;</span><br><span class=\"line\">        lcp[rk[i]] = k;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lcp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>時間複雜度：</strong> 主要觀察 $k$ 的變化，$k$ 最多就是n，最少是0，最差的情況是 $k$ 被減掉 $n$ 次，加上 $2n$ 次，因此複雜度是線性 $O(n)$！</p>\n","site":{"data":{}},"length":1925,"excerpt":"<p>這個暑假看了動態規劃(1),(2)，線段樹、最短路徑、計算幾何、字串演算法，這一篇的完成算是暑假的一個里程吧！接下來繼續學習不同的主題，再把筆記更新到部落格中！</p>\n<h2 id=\"課程內容\"><a href=\"#課程內容\" class=\"headerlink\" title=\"課程內容\"></a>課程內容</h2><h3 id=\"字串\"><a href=\"#字串\" class=\"headerlink\" title=\"字串\"></a>字串</h3><ul>\n<li>定義<ul>\n<li>大寫 $\\Sigma$ 表示字元集</li>\n<li>字串：有限個字元集組成</li>\n<li>$|\\Sigma|$ 字元集大小、|S|字串長度</li>\n<li>S[a:b]表示連續從字元a到b","more":"</li>\n</ul>\n</li>\n<li>子字串：S[a:b]</li>\n<li>前綴：S[0:b]</li>\n<li>後綴：S[a:|S|-1]</li>\n</ul>\n<h3 id=\"字典樹Trie\"><a href=\"#字典樹Trie\" class=\"headerlink\" title=\"字典樹Trie\"></a>字典樹Trie</h3><ul>\n<li>定義<ul>\n<li>例題：字串出現次數</li>\n<li>一顆由根、邊一綠往下指的有向樹</li>\n<li>每個邊為字元、每一點代表字串</li>\n<li>每經過一條邊，字串加上邊的字元</li>\n<li>根節點為空字串！</li>\n</ul>\n</li>\n<li>操作<ul>\n<li>查詢字串：$O(L)$，由根順著邊往下找</li>\n<li>插入字串：$O(L)$，不斷往下走直到空節點，在Trie加入一個節點</li>\n<li>節點必須記錄當前是否為有效字串</li>\n<li>Trie結構中包含：字串、紀錄字串出現次數</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"KMP\"><a href=\"#KMP\" class=\"headerlink\" title=\"KMP\"></a>KMP</h3><ul>\n<li>功能：進行字串匹配</li>\n<li>例題：字串S在字串T哪些位置出現<ul>\n<li>暴力匹配：時間 $O(|S|\\times|T|)$</li>\n</ul>\n</li>\n<li>F[i]表示當配對成功A[0:i]後即配對失敗，將A[F[i]]對齊原本A[i]的位置</li>\n<li>搭配F[i]調整在串移動的長度</li>\n<li>匹配：複雜度 $O(|T|)$，建立F函數：$O(|S|)$</li>\n</ul>\n<h3 id=\"漢明距離-Hamming-distance\"><a href=\"#漢明距離-Hamming-distance\" class=\"headerlink\" title=\"漢明距離(Hamming distance)\"></a>漢明距離(Hamming distance)</h3><ul>\n<li>兩個等長字符串對應位置的不同字符的個數</li>\n</ul>\n<h3 id=\"Z-value\"><a href=\"#Z-value\" class=\"headerlink\" title=\"Z-value\"></a>Z-value</h3><ul>\n<li>z[i] 是指由 s[i] 開始的字串，與 s[0] 開始的字串可以匹配到多長</li>\n<li>S[0:k-1] = S[i:i+k-1]</li>\n<li>z[0] = 0</li>\n</ul>\n<h3 id=\"Rolling-Hash\"><a href=\"#Rolling-Hash\" class=\"headerlink\" title=\"Rolling Hash\"></a>Rolling Hash</h3><ul>\n<li>之前隨機講過</li>\n</ul>\n<h3 id=\"後綴數組（Suffix-Array）\"><a href=\"#後綴數組（Suffix-Array）\" class=\"headerlink\" title=\"後綴數組（Suffix Array）\"></a>後綴數組（Suffix Array）</h3><ul>\n<li>將一個字串的所有後綴進行排序</li>\n<li>基數排序（Radix Sort）</li>\n</ul>\n<h3 id=\"最長共同前綴（LCP-Longest-Common-Prefix）\"><a href=\"#最長共同前綴（LCP-Longest-Common-Prefix）\" class=\"headerlink\" title=\"最長共同前綴（LCP,Longest Common Prefix）\"></a>最長共同前綴（LCP,Longest Common Prefix）</h3><ul>\n<li>兩字串的最長共同前綴</li>\n<li>將最長共同前綴轉換成區間最小值問題</li>\n</ul>\n<h2 id=\"字串演算法主題\"><a href=\"#字串演算法主題\" class=\"headerlink\" title=\"字串演算法主題\"></a>字串演算法主題</h2><h3 id=\"字典樹Trie-1\"><a href=\"#字典樹Trie-1\" class=\"headerlink\" title=\"字典樹Trie\"></a>字典樹Trie</h3><p>字典樹是以指標型態建立的一棵樹，邊代表一個字元、節點代表從根一路走來的邊形成的字串，從根節點開始（根節點為空），每經過一條邊，就把字串加上那一條邊對應的字元，直到找出要匹配的字串。如果有多筆獨立的詢問，只要加上Delete函數就可以了！</p>\n<h4 id=\"Trie結構\"><a href=\"#Trie結構\" class=\"headerlink\" title=\"Trie結構\"></a>Trie結構</h4><p>實作上的陣列c指向個別的字元，不一定要用cnt，根據題目的所求調整不同的變數設定。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Trie</span>&#123;</span>        <span class=\"comment\">//利用指標建立一棵樹</span></span><br><span class=\"line\">    Trie* c[<span class=\"number\">26</span>];    <span class=\"comment\">//對應a-z每一條邊</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt;        <span class=\"comment\">//字串出現次數</span></span><br><span class=\"line\">    <span class=\"built_in\">Trie</span>(): <span class=\"built_in\">cnt</span>(<span class=\"number\">0</span>)&#123; <span class=\"comment\">//初始設定</span></span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(c,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(c));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Trie* root;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Insert函數\"><a href=\"#Insert函數\" class=\"headerlink\" title=\"Insert函數\"></a>Insert函數</h4><p>在插入的過程中言錄新增路徑，一樣嘢可以根據題目要求在過程中進行變數紀錄等。如<strong>NEOJ 267 自動完成系統</strong>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">char</span> *s)</span></span>&#123;</span><br><span class=\"line\">    Trie *ptr = root;           <span class=\"comment\">//從根節點尋找</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(*s)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)])     <span class=\"comment\">//如果樹上無此字元則new</span></span><br><span class=\"line\">            ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)] = <span class=\"keyword\">new</span> <span class=\"built_in\">Trie</span>();</span><br><span class=\"line\">        ptr = ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)];   <span class=\"comment\">//繼續造訪Trie</span></span><br><span class=\"line\">        s += <span class=\"number\">1</span>;                 <span class=\"comment\">//字串下一個字元</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ptr-&gt;cnt += <span class=\"number\">1</span>;              <span class=\"comment\">//字串出現次數(字串對應唯一葉節點)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"查詢函數\"><a href=\"#查詢函數\" class=\"headerlink\" title=\"查詢函數\"></a>查詢函數</h4><p>一個字串對應到唯一的路徑，從根節點根據每一個字元決定路徑。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">char</span> *s)</span></span>&#123;              <span class=\"comment\">//查找字串s</span></span><br><span class=\"line\">    Trie *ptr = root;           <span class=\"comment\">//根節點尋找</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(*s)&#123;                  <span class=\"comment\">//無此字串，回傳次數0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)])<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        ptr = ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)];</span><br><span class=\"line\">        s += <span class=\"number\">1</span>;                 <span class=\"comment\">//字串下一個字元</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ptr-&gt;cnt;            <span class=\"comment\">//回傳字串出現次數</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Delete函數\"><a href=\"#Delete函數\" class=\"headerlink\" title=\"Delete函數\"></a>Delete函數</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">(Trie *s)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">26</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s-&gt;c[i])&#123;</span><br><span class=\"line\">            <span class=\"built_in\">clear</span>(s-&gt;c[i]);</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> s-&gt;c[i];</span><br><span class=\"line\">            s-&gt;c[i] = <span class=\"literal\">nullptr</span>;    <span class=\"comment\">//很重要</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"KMP-Algorithm\"><a href=\"#KMP-Algorithm\" class=\"headerlink\" title=\"KMP Algorithm\"></a>KMP Algorithm</h3><p>首先要求出Failure Function，它可以在 $O(|S|)$ 建立。失敗函數的定義是：</p>\n<blockquote>\n<p>$F[i]$ 表示當成功配對 $A[0:i]$ 之後，配對失敗時，我們會將 $A[ F[i]]$ 對齊原本 $A[i]$ 的位置</p>\n</blockquote>\n<p>如果寫成數學式的定義：</p>\n<script type=\"math/tex; mode=display\">F_A(J)=\\left\\{\n\\begin{array}{l}\n-1,&&\\text{if j = 0}\\\\\nmax\\{p:A_{0...p} = A_{j-p...j} \\text{ and 0≤p<j}\\},&&\\text{otherwise}\\\\\n\\end{array} \\right.</script><p>這個函式以中文來說就是「<strong>最大前綴後綴</strong>」！</p>\n<p>這個函數可以讓我們知道，當配對在較短字串 $S$ 在第 $i$ 位配對失敗時，要找到第 $F[i]$ 去繼續比對。從比較直觀的角度去理解，就是把字串要往右移幾格才能正確匹配上，如果配對失敗，則尋找更前面更短的子字串試試看。</p>\n<p>以比較數學的角度看到底要怎麼建立Failure Function，可以從以下推導得知：</p>\n<div class=\"note info\">\n            <p>假設 $F[i] = x, x≠-1$，根據上面的定義有這樣的等式：$A[0:x] = A[i-x:i]$<br>分成以下兩種情況做討論：</p><ul><li><p>$A[x+1] = A[i+1]$<br>這種情況就是兩邊的下一個字串都相同，直接將繼承前面的長度為x的子字串，因此有關係式$F[i+1] = x+1$</p></li><li><p>$A[x+1] ≠ A[i+1]$<br>這種情況比較棘手，我們無法繼續使用之前長度為x的子字串，因此我們要尋找前面更短的字串進行匹配。假設我們找到 $K$ 滿足 k&lt;x，同時 $A[0:k] = A[i-k:i]$ ，這時候我們只需確認 $A[k+1]=A[i+1]$ 是否成立即可，如果不成立則繼續尋找比 $K$ 更短的子字串。</p></li></ul><p><br></p><p>從剛剛的關係式，我們可以繼續寫下去： $A[0:k] = A[i-k:i]=A[x-k:x]$，理由是i的後綴與x後綴相同，因此 k的後綴就會和x的後綴相同。由失敗函式的定義推斷，我們要找的 $k$ 就會是 x 的失敗函式，$K = F[x]$。</p><p>如果找到的k不滿足 $A[k+1]=A[i+1]$ ，則會繼續尋找下一個更小的 $k$ 值直到滿足條件或是 $k=-1$ 為止。</p>\n          </div>\n<p>再來則是KMP MATCH，能在時間複雜度 $O(|T|)$ 內將匹配出來的位置找出來。具體的方法與建立Failure Function 相近，如果 $A[p+1]≠A[i+1]$，則尋找更小的字串長度 $k&lt;F[i]$ 看能否繼續匹配。當匹配成功，記得把p設為F[p]，因為匹配完成其實也可以看作是下一個字元匹配失敗（$S$ 的空字元對上 $T$ 的下一個）。</p>\n<p>至於時間複雜度的部分，分析一下while迴圈總共會執行的次數，當每執行一次，p的值一定會遞減，而p只會在每一個迴圈最多加上一，因此p的增加會是字串長度 $|T|$ 的常數倍，使總複雜度為 $O(|T|)$。</p>\n<h4 id=\"Build-Function\"><a href=\"#Build-Function\" class=\"headerlink\" title=\"Build Function\"></a>Build Function</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//O(|S|)要配對的字串以及Fail Function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">KMP_build</span><span class=\"params\">(<span class=\"keyword\">char</span> *S,<span class=\"keyword\">int</span> *F)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = F[<span class=\"number\">0</span>] = <span class=\"number\">-1</span>;              <span class=\"comment\">//初始設定為-1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;S[i];i++)&#123;          <span class=\"comment\">//1到接下來字元</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p!=<span class=\"number\">-1</span> &amp;&amp; S[p+<span class=\"number\">1</span>]!=S[i])</span><br><span class=\"line\">            p = F[p];               <span class=\"comment\">//無法繼續配對，尋找更短字串</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S[p+<span class=\"number\">1</span>] == S[i])          <span class=\"comment\">//配對成功(如都沒有一樣的就-1)</span></span><br><span class=\"line\">            p += <span class=\"number\">1</span>;</span><br><span class=\"line\">        F[i] = p;                   <span class=\"comment\">//設定F[i]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Match-Function\"><a href=\"#Match-Function\" class=\"headerlink\" title=\"Match Function\"></a>Match Function</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">KMP_match</span><span class=\"params\">(<span class=\"keyword\">char</span> *S,<span class=\"keyword\">int</span> *F,<span class=\"keyword\">char</span> *T)</span></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt; ans;            <span class=\"comment\">//回傳匹配相同地方</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">-1</span>;                 <span class=\"comment\">//紀錄短字串有多少被匹配</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;T[i];i++)&#123;      <span class=\"comment\">//每一迴圈都讓T[i]被匹配到</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p!=<span class=\"number\">-1</span> &amp;&amp; S[p+<span class=\"number\">1</span>]!=T[i])</span><br><span class=\"line\">            p = F[p];           <span class=\"comment\">//使T[i]一定可以被匹配到</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S[p+<span class=\"number\">1</span>] == T[i])</span><br><span class=\"line\">            p += <span class=\"number\">1</span>;             <span class=\"comment\">//T的第i個與S的p+1可以匹配</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!S[p+<span class=\"number\">1</span>])&#123;            <span class=\"comment\">//S[p]已經匹配完成</span></span><br><span class=\"line\">            ans.<span class=\"built_in\">push_back</span>(i-p); <span class=\"comment\">//回推匹配開頭</span></span><br><span class=\"line\">            p = F[p];           <span class=\"comment\">//繼續下一輪匹配</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Hash-Robin-Karp-Algorithm\"><a href=\"#Hash-Robin-Karp-Algorithm\" class=\"headerlink\" title=\"Hash (Robin-Karp Algorithm)\"></a>Hash (Robin-Karp Algorithm)</h3><p>雜湊算法的核心概念就是以下公式，可以透過它進行字串比對等等。</p>\n<script type=\"math/tex; mode=display\">H(s[1:n]) = \\sum_{i=0}^n S_i\\times C^{n-i}</script><p>詳細內容可以參閱這一篇：<a href=\"https://hackmd.io/@peienwu/random\">隨機演算法</a></p>\n<h3 id=\"Z-Algorithm-Gusfield’s-Algorithm\"><a href=\"#Z-Algorithm-Gusfield’s-Algorithm\" class=\"headerlink\" title=\"Z Algorithm (Gusfield’s Algorithm)\"></a>Z Algorithm (Gusfield’s Algorithm)</h3><p>Z函數的定義是對於字串長度 $n$ 的字串 $S$ ，$z[i]$ 函數代表 $S[0:n-1]$ 和 $S[i:n-1]$ 的<strong>最長共同前綴</strong>，也就是LCP長度。定義 $z[0] = 0$。</p>\n<p>有講義上面寫Z Function很簡單，但我覺得有夠難，難度跟KMP的理解差不多。根據Z函數的定義，我們可以$O(N^2)$建立z函數，顯然時間有些太多了。如果我們算 $Z[i]$ 的值可以用 $Z[0:i-1]$ 轉移過來，會省下許多時間，把時間降成 $O(N)$。</p>\n<h4 id=\"算法概念\"><a href=\"#算法概念\" class=\"headerlink\" title=\"算法概念\"></a>算法概念</h4><p>整個算法的核心概念就是利用前面已經算好的Z Function去推現在的值，有點像動態規劃的概念。在整個過程中我們會維護右端點最大的匹配段（與前綴匹配），其表示為 $[l:l+Z[l]]$，也可以寫作 $[l:r]$，保證 $l ≤ r$。在計算 $Z[i]$ 的過程中，分別討論以下三種情形：</p>\n<ol>\n<li><p>$i ≤ r$<br>根據定義，因為區間 $[l:r]$ 本身是前綴，因此當 $i$ 在區間中間時會將區間分成左右兩半邊，將正個區間往前平移會讓 $i$ 對應到 $i-l$ 的位置，又此時區間為 $[0:r-l]$ ，因此$z[i] = min(z[i-l],r-i)$。</p>\n<ul>\n<li>$z[i-l] ≤ r-i$<br>已經知道 $z[i-l] &lt; r-i$ 表示在前後兩區間（分別從0,i開始）在一樣的情況下做多不超過 $z[i-l]$ 長度的匹配，因此第 $z[i-l]$ 的下一個字元必定無法繼續匹配成前綴。</li>\n<li>$z[i-l] &gt; r-i$<br>在這種情況下已知 $s[0:r-l] = s[l:r]$，根據定義 $s[i-l:r-l] = s[i:r]$。因為 $z[i-l] &gt; r-i$，$z[i-l]$ 右端的範圍會超過 $r$ ，也就是說超過 $r$ 之後這個性質 $s[i-l:r-l] = s[i:r]$ 就不會成立，但可以確定 $z[i]$ 至少為 $r-i$。接著就暴力枚舉即可！</li>\n</ul>\n</li>\n</ol>\n<p>上面的內容可以用下圖解釋，兩條紅線段是一樣的，$x=i-l$ ，接著討論$Z[x]$ 的長度就可以知道該如何更新。<br><img src=\"https://i.imgur.com/6WU1JWG.png\" alt=\"\"></p>\n<ol>\n<li>$i &gt; r$<br>這種情況我們可以直接暴力跟前綴匹配。</li>\n</ol>\n<h4 id=\"程式實作1\"><a href=\"#程式實作1\" class=\"headerlink\" title=\"程式實作1\"></a>程式實作1</h4><p>程式碼中 $bst$ 表示的是左界 $l$，右界則是 $bst+Z[bst]$。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Z_algo1</span><span class=\"params\">(<span class=\"keyword\">char</span> *S,<span class=\"keyword\">int</span> *Z)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> bst = <span class=\"number\">0</span>;                            <span class=\"comment\">//相當於左界，大小為z[bst]</span></span><br><span class=\"line\">    Z[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;S[i];i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Z[bst]+bst &lt; i)Z[i] = <span class=\"number\">0</span>;         <span class=\"comment\">//直接暴力枚舉</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> Z[i] = <span class=\"built_in\">min</span>(Z[i-bst],bst+Z[bst]-i);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(S[Z[i]]==S[i+Z[i]])Z[i]++;    <span class=\"comment\">//依序暴力枚舉</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Z[i]+i &gt; bst+Z[bst])bst = i;     <span class=\"comment\">//更新更遠的右界</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"程式實作2\"><a href=\"#程式實作2\" class=\"headerlink\" title=\"程式實作2\"></a>程式實作2</h4><p>這個實作超級短，沒有幾行就解決了，但他的效果卻是一樣的！</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Z_algo2</span><span class=\"params\">(<span class=\"keyword\">char</span> *S,<span class=\"keyword\">int</span> *Z)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>, r = <span class=\"number\">0</span>;                       <span class=\"comment\">//左右界</span></span><br><span class=\"line\">    Z[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;S[i];i++)&#123;</span><br><span class=\"line\">        Z[i] = <span class=\"built_in\">max</span>(<span class=\"built_in\">min</span>(Z[i-l],r-i),<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(S[i+Z[i]] &amp;&amp; S[Z[i]] == S[i+Z[i]])&#123;</span><br><span class=\"line\">            r = i+Z[i];               <span class=\"comment\">//更新右界</span></span><br><span class=\"line\">            Z[i]++;</span><br><span class=\"line\">        &#125;<span class=\"comment\">//保證當Z[i]從Z[i-l]轉移時不會被更新！</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"時間複雜度\"><a href=\"#時間複雜度\" class=\"headerlink\" title=\"時間複雜度\"></a>時間複雜度</h4><p>根據以上兩個程式碼可以發現，右界 $r$ 或是 $bst+Z[bst]$ 在過程中是不斷增大的，且r必定不會超過n，因此迴圈跑下來複雜度會是 $O(N)$。</p>\n<h3 id=\"LPS-Manacher’s-Algorithm\"><a href=\"#LPS-Manacher’s-Algorithm\" class=\"headerlink\" title=\"LPS (Manacher’s Algorithm)\"></a>LPS (Manacher’s Algorithm)</h3><p>LPS (Longest Palindromic Substring)就是最長回文子字串，Naive的作法是每次 $O(n)$ 向兩側擴展，時間是 $O(n^2)$。</p>\n<p>Manacher’s Algorithm這個演算法的概念和Z Alogorithm相近，可以在 $O(n)$ 的時間內找出以每一個點為中心之最長回文長度。回文的定義是無論從正序或是逆序看一個字串都是一樣的，分為兩種：一種是奇數的對稱，也就是以一個字元為對稱中心往兩側擴展；另一種則是以字元間的空格為對稱中心向兩側對稱。</p>\n<p>這兩個的性質很不同，在處理的時候我們也不知道到底是呈現怎麼樣對稱的狀況，因此可以使用一種手法：將每一個字元中間插入同樣沒有出現過的字元，如此一來不論是偶數或是奇數長度的字串，在加入這個沒有出現過的字元之後，都會變成奇數長度的回文了！</p>\n<p>定義 $z[i]$ 為以 $s[i]$ 為中心，最長的回文長度LPS（如果字元i是自己回文，定義Z[i] = 0]）。以字串abba來說就是以下情況：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>編號</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>原字串</td>\n<td>a</td>\n<td>b</td>\n<td>b</td>\n<td>a</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>變更後</td>\n<td>.</td>\n<td>a</td>\n<td>.</td>\n<td>b</td>\n<td>.</td>\n<td>b</td>\n<td>.</td>\n<td>a</td>\n<td>. </td>\n</tr>\n<tr>\n<td>Z函數</td>\n<td>1</td>\n<td>2</td>\n<td>1</td>\n<td>2</td>\n<td>5</td>\n<td>2</td>\n<td>1</td>\n<td>2</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>跟Z Alogrithm 一樣，維護一個右界最遠的區間 $[l,r]$，作為在算 $z[i]$ 時能使用到的 $z[0:i-1]$ 的最大值，令他為 $r$。取j滿足 $j+z[j]$ 有最大值，分成以下兩個條件做討論：</p>\n<p><strong>1. r &lt; i</strong><br>這種情況就表示不能用之前算的東西去更新現在的值，因此只能暴力枚舉 $s[i]$ 的左右兩側，看最長回文的長度為何。</p>\n<p><strong>2. r &gt; i</strong><br>分成三種情況討論（比z algorithm多了一個），首先因為 $r &gt; i$，右界覆蓋了 $i$，表示我們可以從 $j$ 的另外一端映射出與 $s[i]$ 相同的 $s[i’]$（以 $j$ 為中心回文呈現兩側對稱），映射的索引值為 $2j-i$，如下圖：</p>\n<p><img src=\"https://i.imgur.com/Pf1S21i.png\" alt=\"\"></p>\n<p>因為 $z[i’]$ 已經計算過了，因此可以將 $r-i$ 以及 $z[i’]$ 的大小分成三種情況討論：</p>\n<ul>\n<li><p>$z[i’] &lt; r-i$<br>這種情況表示 $z[i’]$ 無法繼續往右邊更新，因為 $i$ 與 $i’$ 都是在以 $j$ 為中心的回文中，兩邊是一樣的，代表 $z[i] = z[i’]$ 且不可能再被更新成更大的範圍。</p>\n</li>\n<li><p>$z[i’] = r-i$<br>這種情況下是要枚舉的，從兩側映射的關係知道 $z[i]$ 的長度至少為 $r-i-1$，因此將 $z[i]$ 設為 $r-i$ 繼續枚舉就可以了！</p>\n</li>\n<li><p>$z[i’] &gt; r-i$<br>由下圖觀察發現，$z[i]$ 不可能比 $r-i$ 還要大，直接將值設為 $r-i$ 即可。<br><img src=\"https://i.imgur.com/zsb6blx.png\" alt=\"\"></p>\n</li>\n</ul>\n<h4 id=\"時間複雜度-1\"><a href=\"#時間複雜度-1\" class=\"headerlink\" title=\"時間複雜度\"></a>時間複雜度</h4><p>觀察到while迴圈執行的狀況，只有當 $r &lt; i$ 以及 $z[i’] = r-i$ 時右界才有被更新的可能，兩種情況都會讓右界 $r$ 遞增，範圍最大到 $n$ ，因為不會減小的關係，總時間複雜度為線性的 $O(n)$！</p>\n<h4 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Longest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">strlen</span>(T);m = <span class=\"number\">2</span>*n+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(S,<span class=\"string\">&#x27;.&#x27;</span>,m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)S[<span class=\"number\">2</span>*i+<span class=\"number\">1</span>] = T[i];    <span class=\"comment\">//間隔插入沒出現過字元</span></span><br><span class=\"line\">    Z[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;                               <span class=\"comment\">//計算時使用右開區間</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>,r = <span class=\"number\">0</span>;                        <span class=\"comment\">//維護最大右界左右界</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        Z[i] = <span class=\"built_in\">max</span>(<span class=\"built_in\">min</span>(Z[<span class=\"number\">2</span>*l-i],r-i),<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i-Z[i]&gt;=<span class=\"number\">0</span> &amp;&amp; i+Z[i] &lt; m &amp;&amp; S[i+Z[i]]==S[i-Z[i]])&#123;</span><br><span class=\"line\">            l = i;r = i+Z[i];</span><br><span class=\"line\">            Z[i]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"後綴數組\"><a href=\"#後綴數組\" class=\"headerlink\" title=\"後綴數組\"></a>後綴數組</h3><p>一些基本定義，我們定義 $suf[i]$ 是字串 $S$ 從 $i$ 開始的後綴，也就是 $S[i:n-1]$。將一個字串所有的後綴取出來按照字典序進行排序，就是<strong>後綴數組</strong>。總共有三個複雜度：$O(n^2\\log n)$、$O(n\\log^2 n)$、$O(n\\log n)$ 分別是使用暴力、倍增、基數排序的優化。</p>\n<h4 id=\"暴力解-O-N-2-log-n\"><a href=\"#暴力解-O-N-2-log-n\" class=\"headerlink\" title=\"暴力解 $O(N^2\\log n)$\"></a>暴力解 $O(N^2\\log n)$</h4><p>$O(n)$ 的字串比對，排序 $O(n\\log n)$，因此時間複雜度為 $O(n^2\\log n)$。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\"><span class=\"keyword\">char</span> S[<span class=\"number\">10</span>] = <span class=\"string\">&quot;algorithm&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">strcmp</span>(S+a,S+b) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> SA[<span class=\"number\">10</span>];</span><br><span class=\"line\">    n = <span class=\"built_in\">strlen</span>(S);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)SA[i] = i;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(SA,SA+n,cmp);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cout&lt;&lt;SA[i]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    cout&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"倍增-Quick-Sort\"><a href=\"#倍增-Quick-Sort\" class=\"headerlink\" title=\"倍增+Quick Sort\"></a>倍增+Quick Sort</h4><p>使用倍增可以讓複雜度做到 $O(n\\log^2 n)$，其原理主要是讓比較的時間併入排序，同時多做 $O(\\log n)$ 層的排序。定義 $sa[i]$ 為將後綴排序後第 $i$ 小的後綴編號；$rk[i]$ 表示後綴 $i$ 的排名。</p>\n<p>倍增顧名思義，跟將數量乘上兩倍有關，因此會帶一個log。下圖就是一個排序的示例，首先按這字典序初始每一個字元的排名 $rk[i]$，進行 $O(\\log n)$ 層，每一層用 $O(n\\log n)$ 的時間進行排序。倍增讓原本的字串比較 $O(n)$ 降到 $O(\\log n)$ 。</p>\n<p>接下來的每一層的每一個字元 $s[i]$，在比較大小的時候，將 $rk[i]$ 以及 $rk[i+k]$ 組成一個 $pair$ 進行排序，從第一層開始，每一層的 $k$ 都會增加為2倍（倍增的概念）。pair的first就好比倍增時前 $s[i:i+k]$ 的排名、second就是 $s[i+k+1:i+2k]$ 的排名，搭配字典序是按照由前到後進行排名，比完fisrt才會比second，如此一來我們可以利用倍增的性質，也就是已經排名好的較短長度的字串，直接利用排好的名次進行下一輪的排序，這就導致我們不需要對每一個字元都看過一遍！</p>\n<p><img src=\"https://i.imgur.com/l1aGK8f.png\" alt=\"\"><br><a href=\"https://oi-wiki.org/string/sa/\">圖片出處</a>圖中的黑線岔開距離都會因為每一層而越岔越開（乘上2倍），也就是「倍增」所代表的意義！</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">suffix_array</span><span class=\"params\">(string S)</span></span>&#123;</span><br><span class=\"line\">    n = S.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lg = <span class=\"number\">32</span>-__builtin_clz(n);<span class=\"comment\">//回傳第一個1之前0的個數（二進位）</span></span><br><span class=\"line\">    <span class=\"function\">vector&lt;pt&gt; <span class=\"title\">cur</span><span class=\"params\">(n,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">rk</span><span class=\"params\">(n+<span class=\"number\">1</span>,<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cur[i] = &#123;S[i],<span class=\"number\">0</span>,i&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(p,<span class=\"number\">0</span>,lg)&#123;                <span class=\"comment\">//進行O(lgn)次</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = <span class=\"number\">1</span> &lt;&lt; p;         <span class=\"comment\">//現在倍增的大小</span></span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(cur),cmp);</span><br><span class=\"line\">        rk[cur[<span class=\"number\">0</span>].id] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,n<span class=\"number\">-1</span>)            <span class=\"comment\">//設定rk，與前一個相同則設定跟前一個一樣</span></span><br><span class=\"line\">            rk[cur[i].id] = (cur[i<span class=\"number\">-1</span>]==cur[i] ? rk[cur[i<span class=\"number\">-1</span>].id]:i);</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)            <span class=\"comment\">//倍增pair的second</span></span><br><span class=\"line\">            cur[i] = &#123;rk[i],rk[<span class=\"built_in\">min</span>(n,i+k)],i&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(cur),cmp);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)sa[i] = cur[i].id;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"搭配-Radix-Sort\"><a href=\"#搭配-Radix-Sort\" class=\"headerlink\" title=\"搭配 Radix Sort\"></a>搭配 Radix Sort</h4><p>基數排序 (Raddix sort) 以及計數排序 (Counting sort) 兩者是有點從屬的關係，計數排序是基數排序的子程序，也就是說基數排序是透過對每一位進行計數排序完成的！</p>\n<p>首先，我們需要 $O(n)$ 的空間進行每一輪的計數排序，對每一個元素進行排名（從1到n-1），如此一來才能確保不會有溢位的問題。先對第二個關鍵字進行排序，排完之後再按照第一個關鍵字排序。Raddix Sort 是穩定的，相同元素為在前面在排序之後一定會在前面。</p>\n<p>有幾個地方有實作上進行基數排序的限制，首先第一輪會按照個別字母的字典序進行排序，用快排等基於比較的排序方法可以順利完成，但可惜基數排序不行，一定要乖乖的按照 1 到 n-1 順序進行排名。因此在第一輪會先使用 $std::sort$ 排名，之後進行raddix_sort！</p>\n<p>最後一個小小的地方，就是當第二個 key 的值為 -1的情況（倍增超出範圍），在比較時可以直接push進去答案裡面，因為並沒有一個box的index 是-1，同時他們也是最小，丟進去即可。</p>\n<p><strong>時間複雜度：</strong> 每一層進行 $O(n)$ 排序，因為倍增共有 $O(\\log n)$ 層，因此總時間複雜度為 $O(n)\\times O(\\log n) = O(n\\log n)$！</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">raddix_sort</span><span class=\"params\">(vector&lt;pt&gt; &amp;cur)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">init</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur[i].y == <span class=\"number\">-1</span>)temp.<span class=\"built_in\">push_back</span>(cur[i]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> box[cur[i].y].<span class=\"built_in\">push_back</span>(cur[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> j : box[i])temp.<span class=\"built_in\">push_back</span>(j);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)box[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)</span><br><span class=\"line\">        box[temp[i].x].<span class=\"built_in\">push_back</span>(temp[i]);</span><br><span class=\"line\">    cur.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> j : box[i])cur.<span class=\"built_in\">push_back</span>(j);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"最長共同前綴-LCP-Kasai’s-Algorithm\"><a href=\"#最長共同前綴-LCP-Kasai’s-Algorithm\" class=\"headerlink\" title=\"最長共同前綴 LCP (Kasai’s Algorithm)\"></a>最長共同前綴 LCP (Kasai’s Algorithm)</h3><p>最長共同前綴，以現在字串演算法中，假設 $lcp(i,j)$ 為後綴 $i$ 與 $j$ 的最長共同前綴。在<a href=\"https://www.geeksforgeeks.org/%C2%AD%C2%ADkasais-algorithm-for-construction-of-lcp-array-from-suffix-array/\">這篇文章</a>中給出這個定義：</p>\n<blockquote>\n<p>A value lcp[i] indicates length of the longest common prefix of the suffixes inexed by suffix[i] and suffix[i+1]</p>\n</blockquote>\n<p>定義 $lcp[i]$ 為後綴 $i$ 與後綴 $i+1$ 的最長共同前綴，其中 $lcp[n-1]$ 沒有定義。再複習一下，$rk[i]$ 為第 $i$ 個後綴數組的排名$rk[i]$、$sa[i]$ 為排名為 $i$ 的字串所對應到的從 $sa[i]$ 開始的後綴數組。</p>\n<p>到底我們要求的LCP是什麼？如果只是給兩個字串要求出共同最長前綴，那我們只要 $O(min(L_A,L_B))$ 就好，是可以接受的複雜度。但Kasai’s Algorithm不是要求這個。一般都在講到後綴字串之後講到LCP，為的就是要求出所有的後綴數組中，任兩個字串的共同最長前綴為何。以一個字串長度為 $l$ 來說，後綴的配對數量共有 $O(l^2)$ 組，暴力肯定會TLE。</p>\n<p>求出 $lcs$ 需要有兩個引理：</p>\n<ul>\n<li><strong>第一個引理</strong><script type=\"math/tex; mode=display\">lcp[rk[i]] ≥ lcp[rk[i-1]]-1</script>其中 $i$ 為<strong>尚未經過排序</strong>的從 $i$ 開始的後綴字串。</li>\n</ul>\n<p><strong>說明：</strong> 將後綴數組排序之後有點像將相似的字串排在一起（按字典序由小排到大），鄰近的字串其實代表著一個意義，兩者相似程度越高。因此 $lcp[rk[i-1]]$ 某種意義代表著與 $i-1$ 開始的後綴數組（簡稱後綴 $i-1$）跟其他字串最大的共同前綴長度。</p>\n<p>接著我們看 $lcp[rk[i]]$ ，後綴 $i$ 就是後綴 $i-1$ 刪掉一個前綴字元的結果。我們假設跟後綴 $i-1$ 相近的那個字串叫做 $T$ （其實就是後綴 $rk[i-1]+1$），把 $T$ 刪除一個前綴字元之後所形成的字串（也就是比 $T$ 再短一字元的後綴）也就可以跟後綴 $i$ 進行匹配，其長度因為被刪掉一個前綴字元所以少一，因此得到了以上式子。</p>\n<p>聽說很難證明，不過至少可以情感上的接受這件事是對的！</p>\n<ul>\n<li><strong>第二個引理</strong><script type=\"math/tex; mode=display\">lcp(S_i,S-j) = min_{i≤k<j}(S_k,S_{k+1})</script></li>\n</ul>\n<p>為什麼可以算出最近的排名的LCP即可得到最長的LCP？從這個定理可以看出來，對於後綴 $i$ 以及後綴 $j$ ，取 $min$ 的原因是要確保所有的中間後綴 $k$ 都包含了下界 $k$ ，也就是說每個在 $i$ 與 $j$ 中間的人都至少跟前一個人相同個字元。</p>\n<hr>\n<p>以下以字串 $aabaabc$ 作為範例：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>後綴</th>\n<th>RK</th>\n<th style=\"text-align:left\">String</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td style=\"text-align:left\">aabaabc</td>\n</tr>\n<tr>\n<td>1</td>\n<td>2</td>\n<td style=\"text-align:left\">abaabc</td>\n</tr>\n<tr>\n<td>2</td>\n<td>4</td>\n<td style=\"text-align:left\">baabc</td>\n</tr>\n<tr>\n<td>3</td>\n<td>1</td>\n<td style=\"text-align:left\">aabc</td>\n</tr>\n<tr>\n<td>4</td>\n<td>3</td>\n<td style=\"text-align:left\">abc</td>\n</tr>\n<tr>\n<td>5</td>\n<td>5</td>\n<td style=\"text-align:left\">bc</td>\n</tr>\n<tr>\n<td>6</td>\n<td>6</td>\n<td style=\"text-align:left\">c</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>以下是SA與對應的String</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>RK</th>\n<th>SA</th>\n<th>String</th>\n<th>LCP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>aabaabc</td>\n<td>3</td>\n</tr>\n<tr>\n<td>1</td>\n<td>3</td>\n<td>aabc</td>\n<td>1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1</td>\n<td>abaabc</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>4</td>\n<td>abc</td>\n<td>0</td>\n</tr>\n<tr>\n<td>4</td>\n<td>2</td>\n<td>baabc</td>\n<td>1</td>\n</tr>\n<tr>\n<td>5</td>\n<td>5</td>\n<td>bc</td>\n<td>0</td>\n</tr>\n<tr>\n<td>6</td>\n<td>6</td>\n<td>c</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>以下是找LCP流程：</p>\n<ul>\n<li>首先從後綴0開始，找到對應的下一個rk，也就是後綴3，得到LCP為3</li>\n<li>接下來看後綴1，查表得到RK為2，找到RK為3的找LCP，得到2</li>\n<li>看後綴2，與RK為4,5名找LCA，得到1</li>\n<li>後綴3，看RK 1,2，LCA為1</li>\n<li>接下來以此推累</li>\n</ul>\n<p>接下來有兩種不同設定方法，端看要採用的是上表還是下表的字串排序方法。我以上表為例，程式執行時印出順序：$3211000$；也可以採用後綴數組排序後的結果（一般都採用此方法），直接對應出順序（對照的是下表）：$3120100$。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">LCP</span><span class=\"params\">(string s)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">rk</span><span class=\"params\">(n,<span class=\"number\">0</span>)</span>,<span class=\"title\">lcp</span><span class=\"params\">(n,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)rk[sa[i]] = i;      <span class=\"comment\">//利用sa反函數得到rk</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k)k--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rk[i] == n<span class=\"number\">-1</span>)<span class=\"keyword\">continue</span>;   <span class=\"comment\">//rk[n-1]未定義</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = sa[rk[i]+<span class=\"number\">1</span>];        <span class=\"comment\">//下一名後綴從何開始</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i+k&lt;n &amp;&amp; j+k&lt;n &amp;&amp; s[i+k] == s[j+k])k++;</span><br><span class=\"line\">        lcp[rk[i]] = k;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lcp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>時間複雜度：</strong> 主要觀察 $k$ 的變化，$k$ 最多就是n，最少是0，最差的情況是 $k$ 被減掉 $n$ 次，加上 $2n$ 次，因此複雜度是線性 $O(n)$！</p>"},{"title":"字串演算法例題","date":"2021-09-04T16:00:00.000Z","mathjax":true,"_content":"\n## 題目目錄\n- NEOJ 266 溫力的故事\n- NEOJ 265 欸迪的字串\n- NEOJ 267 自動完成系統\n- NEOJ 264 欸迪的字串\n- ZJ d518: 文字抄寫 II\n- TIOJ 1306 字串中的字串\n- TIOJ 1321 好多回文 ndromePali\n- ZJ d978: 最长回文字串\n- TIOJ 1725 Massacre at Camp Happy\n- TIOJ 1497 喝醉的宿主 The drunk host\n- TIOJ 1515 Problem E. 似曾相識\n<!-- more -->\n\n### NEOJ 266 溫力的故事\n[題目連結](https://neoj.sprout.tw/problem/266/)\n[Submission](https://neoj.sprout.tw/challenge/179031/)\n> 題目敘述\n> 給你n個字串m筆詢問一個字串，對每一筆詢問輸出詢問在n個字串中出現的次數。\n\n這一題在**隨機算法**做過，今天用字典樹Trie做一次。在隨機算法中，透過Rolling Hash的公式，對每一個字串生成一個值，利用這個值查詢出現的次數。如果我們用Trie的話，則是建立一棵指標樹，透過走法這一棵字典樹得知詢問字串出現的次數！\n\n#### 程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define N 2000\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,m;\n\nstruct Trie{        //利用指標建立一棵樹\n    Trie* c[26];    //對應a-z每一條邊\n    int cnt;        //字串出現次數\n    Trie(): cnt(0){ //初始設定\n        memset(c,0,sizeof(c));\n    }\n};\nTrie* root = new Trie();\n\nint ch(char temp){\n    return temp-'a';\n}\n\nvoid insert(char *s){\n    Trie *ptr = root;           //從根節點尋找\n    while(*s){\n        if(!ptr->c[ch(*s)])     //如果樹上無此字元則new\n            ptr->c[ch(*s)] = new Trie();\n        ptr = ptr->c[ch(*s)];   //繼續造訪Trie\n        s += 1;                 //字串下一個字元\n    }\n    ptr->cnt += 1;              //字串出現次數(字串對應唯一葉節點)\n}\n\nint find(char *s){              //查找字串s\n    Trie *ptr = root;           //根節點尋找\n    while(*s){                  //無此字串，回傳次數0\n        if(!ptr->c[ch(*s)])return 0;\n        ptr = ptr->c[ch(*s)];\n        s += 1;                 //字串下一個字元\n    }\n    return ptr->cnt;            //回傳字串出現次數\n}\n\nsigned main(){\n    Orz;\n    cin>>n>>m;\n    rep(i,0,n-1){\n        char s[105];cin>>s;\n        insert(s);\n    }\n    rep(i,0,m-1){\n        char s[105];cin>>s;\n        cout<<find(s)<<endl;\n    }\n}\n```\n\n### NEOJ 265 欸迪的字串\n[題目連結](https://neoj.sprout.tw/problem/265/)\n[Submission](https://neoj.sprout.tw/challenge/179036/)\n> 題目敘述\n> 給你字串S和字串T，求出S在T中出現的位置\n\n這一題在**隨機演算法**也有出現過，當時是用Rolling Hash的方式透過扣掉Hash的方法比對字串是否相同（推一下公式就知道）。現在要用的是**KMP演算法**，很複雜不好想。\n\n\n\n比較一下隨機跟KMP的時間，下方為KMP，上方則是隨機算法，兩者時間差了將近1倍，雖然兩者都可以在O(|T|)時間內進行匹配，但是建立Rolling Hash的常數是比較大的！\n![](https://i.imgur.com/a7CPjyi.png)\n\n#### 程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define int long long\n#define N 500005\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,m;\n\nvector<int> KMP_match(char *S,int *F,char *T){\n    vector<int> ans;            //回傳匹配相同地方\n    int p = -1;                 //紀錄短字串有多少被匹配\n    for(int i=0;T[i];i++){      //每一迴圈都讓T[i]被匹配到\n        while(p!=-1 && S[p+1]!=T[i])\n            p = F[p];           //使T[i]一定可以被匹配到\n        if(S[p+1] == T[i])\n            p += 1;             //T的第i個與S的p+1可以匹配\n        if(!S[p+1]){            //S[p]已經匹配完成\n            ans.push_back(i-p); //回推匹配開頭\n            p = F[p];           //繼續下一輪匹配\n        }\n    }\n    return ans;\n}\n\n//O(|S|)要配對的字串以及Fail Function\nvoid KMP_build(char *S,int *F){\n    int p = F[0] = -1;              //初始設定為-1\n    for(int i=1;S[i];i++){          //1到接下來字元\n        while(p!=-1 && S[p+1]!=S[i])\n            p = F[p];               //無法繼續配對，尋找更短字串\n        if(S[p+1] == S[i])          //配對成功(如都沒有一樣的就-1)\n            p += 1;\n        F[i] = p;                   //設定F[i]\n    }\n}\n\nsigned main(){\n    Orz;\n    char S[N],T[N];     //詢問短字串、長在串\n    int F[N];           //失敗函數\n    cin>>S>>T;\n    KMP_build(S,F);\n    vector<int> ans = KMP_match(S,F,T);\n    if(ans.size()>0){\n        cout<<ans[0];\n        rep(i,1,ans.size()-1)cout<<\" \"<<ans[i];\n    }\n    cout<<endl;\n}\n```\n\n### NEOJ 267 自動完成系統\n[題目連結](https://neoj.sprout.tw/problem/267/)\n[Submission](https://neoj.sprout.tw/challenge/179148/)\n> 題目敘述\n[點這裡](https://www.facebook.com/codingcompetitions/hacker-cup/2015/round-1/problems/B)有FB Hacker Cup的原題連結，簡單來說就是想像手機的自動填入系統，每加入一個字串會記錄到資料庫中，當資料庫裡面沒有相同前綴的字串時就輸出前綴長度。\n\n用字典樹Trie插入每一個字串，插入過程中返回從頭到開始new新的節點之間經過的節點樹，代表需要輸入多少個字元才能觸發自動完成系統。這一題是基礎的Trie應用。\n\n#### 程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define N 1000005\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint t,n;\nchar S[N];\n\nint ch(char a){\n    return a-'a';\n}\n\nstruct Trie{\n    Trie* c[26];\n    Trie(){\n        memset(c,0,sizeof(c));\n    }\n};\nTrie *root = new Trie();\n\nint insert(char *S){\n    Trie *ptr = root;\n    int step = 0,f = 1;\n    while(*S){\n        if(f)step++;\n        if(!ptr->c[ch(*S)]){\n            ptr->c[ch(*S)] = new Trie();\n            f = 0;\n        }\n        ptr = ptr->c[ch(*S)];\n        S++;\n    }\n    return step;\n}\nvoid clear(Trie *s){\n    for(int i=0;i<26;i++){\n        if(s->c[i]){\n            clear(s->c[i]);\n            delete s->c[i];\n            s->c[i] = nullptr;\n        }\n    }\n}\n\nint main(){\n    cin>>t;\n    int cnt = 0;\n    while(t--){\n        cnt++;\n        cin>>n;\n        int step = 0;\n        rep(i,0,n-1){\n            cin>>S;\n            step +=insert(S);\n        }\n        cout<<\"Case #\"<<cnt<<\": \"<<step<<endl;\n        clear(root);\n    }\n}\n```\n\n### NEOJ 264 欸迪的字串\n[題目連結](https://neoj.sprout.tw/problem/264/)\n[Submission](https://neoj.sprout.tw/challenge/179060/)\n> 題目敘述\n> 給你字串S，求一個最短字串T的長度，滿足經由複製若干次後接起來會是字串S。\n\n這一題在一開始看到感覺好難，不過在慢慢理解 Z_Algorithm 之後，在講義中發現到這個問題也可以用這個演算法來解決！因為Z函數是滿足從i開始的最長前綴，因此當 $i$ 為 字串長度 $n$ 的因數的時候，只要 $i+Z[i+1]=n$ 成立，就必定可以用 $S[1:i]$ 組成字串 $S$ 。實作上要注意字串是0-base，i+1就相等於字串第i個位置，處理上要特別注意！\n\n#### 程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define N 500005\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,m;\n\nvoid Z_algo(char *S,int *Z){\n    int l = 0,r = 0;\n    Z[0] = 0;\n    for(int i=1;S[i];i++){\n        Z[i] = max(0,min(Z[i-l],r-i));\n        while(S[Z[i]]&&S[Z[i]] == S[i+Z[i]]){\n            l = i;r = i+Z[i];\n            Z[i]++;\n        }\n    }\n}\n\nsigned main(){\n    Orz;\n    char s[N];cin>>s;\n    int Z[N],n = strlen(s),ans = n;\n    Z_algo(s,Z);\n    \n    rep(i,1,n-1){\n        if(n%i==0 && i+Z[i]==n){\n            ans = i;\n            break;\n        }\n    }\n    cout<<ans<<endl;\n}\n```\n\n### ZJ d518: 文字抄寫 II\n[題目連結](https://zerojudge.tw/ShowProblem?problemid=d518)\n> 題目敘述\n若這個字串之前已經出現過，則輸出的出現號碼，若沒有則輸出它將被編寫的號碼.\n\n裸題Trie，不過要注意每一次要重置，將所有的實體Delete掉。\n\n#### 程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define N 110\n#define Orz ios::sync_with_stdio(0),cin.tie(0),cout.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,m;\n\nstruct Trie{\n    Trie* c[26];\n    int ind;\n    Trie(): ind(0){\n        memset(c,0,sizeof(c));\n    }\n};\nTrie* root = new Trie();\n\nint ch(char temp){\n    return temp-'a';\n}\nvoid clear(Trie *cur){\n    for(int i=0;i<26;i++){\n        if(cur->c[i]){\n            clear(cur->c[i]);\n            delete[] cur->c[i];\n            cur->c[i] = NULL;\n        }\n    }\n}\n\nvoid insert(char *s,int num){\n    Trie *ptr = root;           //從根節點尋找\n    while(*s){\n        if(!ptr->c[ch(*s)])     //如果樹上無此字元則new\n            ptr->c[ch(*s)] = new Trie();\n        ptr = ptr->c[ch(*s)];   //繼續造訪Trie\n        s += 1;                 //字串下一個字元\n    }\n    ptr->ind = num;\n}\n\nint find(char *s){              //查找字串s\n    Trie *ptr = root;           //根節點尋找\n    while(*s){                  //無此字串，回傳次數0\n        if(!ptr->c[ch(*s)])return 0;\n        ptr = ptr->c[ch(*s)];\n        s += 1;                 //字串下一個字元\n    }\n    return ptr->ind;\n}\n\nsigned main(){\n    while(scanf(\"%d\",&n)!=EOF){\n        int ans,cur_id = 1;\n        rep(i,1,n){\n            char s[N];scanf(\"%s\",s);\n            ans = find(s);\n            if(ans == 0){\n                printf(\"New! %d\\n\",cur_id);\n                insert(s,cur_id);\n                cur_id += 1;\n            }\n            else{\n                printf(\"Old! %d\\n\",ans);\n            }\n        }\n        clear(root);\n    }\n}\n```\n\n### TIOJ 1306 字串中的字串\n[題目連結](https://tioj.ck.tp.edu.tw/problems/1306)\n[Submission](https://tioj.ck.tp.edu.tw/submissions/263572)\n> 題目敘述\n裸字串匹配。對於每個詢問輸出 $S$ 在 $T$ 中出現過幾次。\n\n裸KMP字串匹配，統計出現次數。可以嘗試不要看資料自己寫一次，會更了解KMP算法！\n\n#### 程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define int long long\n#define N 10005\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint t,n,F[N];;\nchar T[N],S[N];\n\nint KMP_match(char *S,char *T,int *F){\n    int p = -1,ans = 0;\n    for(int i=0;T[i];i++){\n        while(p!=-1 && S[p+1]!=T[i])\n            p = F[p];\n        if(S[p+1] == T[i])\n            p += 1;\n        if(!S[p+1]){\n            ans += 1;\n            p = F[p];\n        }\n    }\n    return ans;\n}\n\nvoid KMP_build(char *S,int *F){\n    int p = F[0] = -1;\n    for(int i=1;S[i];i++){\n        while(p!=-1 && S[p+1]!=S[i])\n            p = F[p];\n        if(S[p+1] == S[i])\n            p += 1;\n        F[i] = p;\n    }\n}\n\nvoid solve(){\n    while(n--){\n        memset(F,0,sizeof(F));\n        cin>>S;\n        KMP_build(S,F);\n        cout<<KMP_match(S,T,F)<<endl;\n    }\n}\n\nsigned main(){\n    Orz;\n    cin>>t;\n    while(t--){\n        cin>>T>>n;\n        solve();\n    }\n}\n```\n\n\n### TIOJ 1321 好多回文 ndromePali\n[題目連結](https://tioj.ck.tp.edu.tw/problems/1321)\n[Submission](https://tioj.ck.tp.edu.tw/submissions/263962)\n> 題目敘述\n給一個長度 ≤ $10^6$ 的字串 A，問有幾種把該字串的某前綴搬到最後面的方法，使得最後的字串為回文。\n(提示:可以用類似 Z 函數的概念計算出以某字元為中心的最長回文長度。)\n\n這一題搞得我快掛了QQQ。為什麼呢？看看以下照片就知道了：\n\n![](https://i.imgur.com/i8Gx5Yo.png)\n\n根據上面的「提示」，要用類似Z函數的概念把以某點為中心的最長回文算出來。一個Naive裸的作法，把用 $O(n)$ 枚舉每一個點為分割點，把分割點前面的子字串接到後面，用 $O(n)$ 的時間看是否為一回文字串。如此一來時間複雜度為 $O(n^2)$ ，對這一題來說顯然是不可行的，因為字串長度達到 $10^6$！\n\n當我們用Manacher’s Algorithm $O(n)$ 的時間每一個字元的最大回文之後，就可以枚舉每一個可以作為分割點的地方，檢查回文的狀況。討論分割點在前半部分的情況下，也就是把短的（長度小於一半）前綴搬到後面的狀況。當分割的索引值為 $i$ ，必須保證 $s[0:i]$ 跟 $s[i:2i]$ 對稱，移到字串尾巴才能成為回文。除此之外，也必須滿足 $Z[mid+i] = mid-i$ 的情況，以就是剩下不是分割點兩側的字串必須是回文，把前綴接到後面之後才能對稱！\n\n實作上很多細節，我DEBUG超久最後才想到不能枚舉所有字元，會出事（就像上面的三色WA），只要枚舉以 $'.'$ 為分割點的情況（分割在字元上就不行），還有很多細節，WA很多次才會知道XD\n\n\n\n#### 程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define N 1000005\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,m,Z[2*N];\nbool ans[2*N];\nchar S[2*N],T[N];\n//T原字串、S插入點字串\n\nvoid Longest(){\n    n = strlen(T);m = 2*n+1;\n    memset(S,'.',m);\n    for(int i=0;i<n;i++)S[2*i+1] = T[i];\n    Z[0] = 1;\n    int l = 0,r = 0;\n    for(int i=1;i<m;i++){\n        Z[i] = max(min(Z[2*l-i],r-i),1);\n        while(i-Z[i]>=0 && i+Z[i] < m && S[i+Z[i]]==S[i-Z[i]]){\n            l = i;r = i+Z[i];\n            Z[i]++;\n        }\n    }\n}\n\nsigned main(){\n    Orz;\n    cin>>T;\n    Longest();\n    \n    for(int i=0;i<m;i++)Z[i]--;\n    memset(ans,0,sizeof(ans));\n    \n    int mid = (m-1)/2,i;\n    \n    if(Z[mid] == mid)ans[0] = 1;\n    for(i=2;i<mid;i+=2){\n        if(Z[i] == i && Z[mid+i] == mid-i){\n            ans[(i/2)] = 1;\n        }\n    }\n    for(;i<m;i+=2){\n        if(Z[i] == m-i-1 && Z[i-mid] == i-mid){\n            ans[(i/2)] = 1;\n        }\n    }\n    \n    int sum = 0;\n    for(int i=0;i<n;i++)if(ans[i])sum++;\n    if(sum == 0)cout<<\"none\"<<endl;\n    else{\n        cout<<sum<<\":\";\n        for(int i=0;i<n;i++)if(ans[i])cout<<\" \"<<i;\n        cout<<endl;\n    }\n}\n```\n\n### ZJ d978: 最长回文字串\n[題目連結](https://zerojudge.tw/ShowProblem?problemid=d978)\n> 題目敘述\n題目即題意，給你一個字串，求出最長的回文字串長度為何？\n\n一題LPS的裸題，用Manacher's Algorithm可以將時間複雜度做到 $O(n)$！\n\n\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define N 500005\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,m,Z[2*N],t;\nbool ans[2*N];\nchar S[2*N],T[N];\n//T原字串、S插入點字串\n\nvoid Longest(){\n    n = strlen(T);m = 2*n+1;\n    memset(S,'.',m);\n    for(int i=0;i<n;i++)S[2*i+1] = T[i];\n    Z[0] = 1;\n    int l = 0,r = 0;\n    for(int i=1;i<m;i++){\n        Z[i] = max(min(Z[2*l-i],r-i),1);\n        while(i-Z[i]>=0 && i+Z[i] < m && S[i+Z[i]]==S[i-Z[i]]){\n            l = i;r = i+Z[i];\n            Z[i]++;\n        }\n    }\n}\n\nsigned main(){\n    Orz;\n    cin>>t;\n    while(t--){\n        cin>>T;\n        Longest();\n        int ans = 0;\n        for(int i=0;i<m;i++){\n            int z = (Z[i]-1);\n            ans = max(ans,z);\n        }\n        cout<<ans<<endl;\n    }\n}\n```\n\n\n### TIOJ 1725 Massacre at Camp Happy\n[題目連結](https://tioj.ck.tp.edu.tw/problems/1725)\n[Submission](https://tioj.ck.tp.edu.tw/submissions/264017)\n\n> 題目敘述：\n定義字串 A 和 B「k-幾乎相同」代表把字串 A 的前 k 字元搬到最後面時，與 B 恰有一個字元相異。給你兩個長度 ≤ $10^6$ 的字串 A 和 B，求所有使 A 和 B「k-幾乎相同」成立的 k 值。\n\n\n這一題好特別，一樣要用 $O(n)$ 的時間求出答案，對於每一個操作將前k個字元搬到後面，只能用 $O(1)$ 算出來到底符不符合一字元相異的條件。\n以兩個相等長度的字串 $A,B$ 為例，長度為 $l$，假設 $A=aabba,B = aacba$，兩者相差一個字元的情況下，必定會滿足$l = LCP(A,B)+LCP(rev(A),rev(B))+1$，其中rev函數表示reverse。\n\n我們要做的就是在 $O(1)$ 的時間內求出LCP，因為題目的字串 $A$ 要求不同的起始位置，因此我們假設一個非常特別的字串 $B@AA$ ，其中@為任意沒出現過的字元。只要計算這一個字串的Z函數，就表示了 $A$ 和 $B$ 的最長共同前綴，需要兩個A的原因是因為模擬不同的k-位移下情形。\n\n![](https://i.imgur.com/5Ir8Hjt.png)\n\n{% note success %}\n**實作小細節**\n程式碼的第42行可以試著推推看逆序之後的尾巴的索引值為何。我是利用列出幾個數字之後推出來的，不過應該可以寫成比較嚴謹的數學證明！\n```cpp=\nZ1[n+1+i]+Z2[2*n-i+1]+1 == n\n```\n{% endnote %}\n\n#### 時間複雜度\n$O(n)$ 建立z函數，$O(n)$ 枚舉每一個起始點，總時間為 $O(n)$。\n\n#### 程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define N 1000005\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,m,Z1[3*N],Z2[3*N];\nchar A[3*N],B[3*N];\n\nvoid Z_algo(int *z,char *S){\n    int l = 0,r = 0;\n    z[0] = 0;\n    for(int i=1;i<m;i++){\n        z[i] = max(min(z[i-l],r-i),0);\n        while(S[i+z[i]] && S[z[i]] == S[i+z[i]]){\n            l = i;r = i+z[i];\n            z[i]++;\n        }\n    }\n}\n\nsigned main(){\n    Orz;\n    cin>>n>>A>>B;\n    m = 3*n+1;\n    B[n] = '@';\n    //正常序列求Z value\n    rep(i,n+1,2*n)B[i] = A[i-n-1];\n    rep(i,2*n+1,3*n)B[i] = A[i-2*n-1];\n    Z_algo(Z1,B);\n    //逆序求Z value\n    reverse(B,B+n);reverse(B+n+1,B+m);\n    Z_algo(Z2,B);\n    \n    vector<int> vec;\n    for(int i=0;i<n;i++){\n        if(Z1[n+1+i]+Z2[2*n-i+1]+1 == n)vec.push_back(i);\n    }\n    if(vec.size()){\n        cout<<\"TAK\"<<endl;\n        for(auto i:vec)cout<<i<<\" \";\n        cout<<endl;\n    }\n    else cout<<\"NIE\"<<endl;\n    \n}\n//[0,n-1][n,n][n+1,2n][2n+1,3n]\n```\n\n### TIOJ 1497 喝醉的宿主 The drunk host\n[題目連結](https://tioj.ck.tp.edu.tw/problems/1497)\n[Submission](https://tioj.ck.tp.edu.tw/submissions/264189)\n> 題目敘述\n裸後綴數組。\n\n後綴數組我看了好久（大概有4天吧），一直對著它發呆，不知道它的精髓到底在哪裡。。剛好又遇到開學，不能整天快樂寫題XD\n\n#### 倍增優化\n\n對著螢幕發呆的日子終於結束了，直到我看了[這一篇](https://oi-wiki.org/string/sa/)（雖然說我前幾天也有看但看不懂，可能是消化的天數不夠多吧），尤其是裡面的一張圖，深刻說明了倍增的精髓。\n\n後綴數組求法就不多解釋（上面有），放幾個實作上的小細節。\n\n{% note primary %}\n**實作小細節**\n我們要求進行 $O(\\log n)$ 層的倍增，可以使用C++內建的log10()再用ceil去處理，但顯然有點慢，如果套用以下函數，它會回傳數字二進位之後最大的1前面總共有多少個0（前綴0的數量），與32相減（32是long long的關係）就是我們要的log的次數。\n\n\n```cpp=\nint lg = __builtin_clz(n)\n```\n\n另外一個小小細節，就是在字串的後半部分，如果跟前面一樣倍增一個比較大的數字，有可能會超出範圍，這時候初始值就很重要了！初始設定rk[n] = -1，導致任何只要超出範圍的都會取到這個-1，表示只要後面沒有字串、如果前面都相同但長度比較長的字串比起來，較短的會排在比較前面的位置！\n{% endnote %}\n這個算法是 $O(n\\log^2 n)$，TIOJ這一題可以過，不過到[SPOJ](https://www.spoj.com/problems/SARRAY/)就會被卡TLE\n\n> $O(n^2 log(n))$ is expected to score about 20-30. (Naive sorting all suffixes)\n> $O(n log^2(n))$ is expected to score about 40. (OK for most programming contest problems)\n> $O(n log n)$ is expected to score about 60-70. (Use counting sort for small alphabet size)\n> $O(n)$ without tweaks is expected to score about 80-90.\n> $O(n)$ with tweaks is expected to score 100. (This is meant for fun only :)\n\n越後面就越毒瘤XD\n\n> test 1 - AC (score=0.000000, sig=0, time=0.009123, mem=5372)\n> test 2 - AC (score=0.000000, sig=0, time=0.006427, mem=5508)\n> test 3 - AC (score=0.000000, sig=0, time=0.014975, mem=5468)\n> test 4 - AC (score=0.000000, sig=0, time=0.031332, mem=5536)\n> test 5 - AC (score=0.000000, sig=0, time=0.026948, mem=5456)\n> test 6 - AC (score=0.000000, sig=0, time=0.023113, mem=5396)\n> test 7 - TLE (score=0.000000, sig=0, time=0.210000, mem=7340)\n> test 8 - TLE (score=0.000000, sig=0, time=0.210000, mem=7152)\n> test 9 - AC (score=0.000000, sig=0, time=0.170094, mem=7284)\n> test 10 - AC (score=0.000000, sig=0, time=0.140098, mem=7340)\n\n\n#### 程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define int long long\n#define N 100005\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define all(x) x.begin(),x.end()\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,sa[N];\n\nstruct pt{\n    int x,y,id;\n    bool operator==(pt b){\n        if(x==b.x && y==b.y)return true;\n        return false;\n    }\n};\n//第一位、第二位比較以及後綴編號\n\nbool cmp(pt a,pt b){\n    if(a.x != b.x)return a.x < b.x;\n    return a.y < b.y;\n}\n\nvoid suffix_array(string S){\n    n = S.size();\n    int lg = 32-__builtin_clz(n);\n    //回傳第一個1之前0的個數（二進位）\n    vector<pt> cur(n,{0,0,0});\n    vector<int> rk(n+1,-1);\n    rep(i,0,n-1)cur[i] = {S[i],0,i};\n    rep(p,0,lg){\n        int k = 1 << p;         //現在倍增的大小\n        sort(all(cur),cmp);\n        rk[cur[0].id] = 0;\n        rep(i,1,n-1){\n            rk[cur[i].id] = (cur[i-1]==cur[i] ? rk[cur[i-1].id]:i);\n            //設定rk，與前一個相同則設定跟前一個一樣\n        }\n        rep(i,0,n-1){\n            cur[i] = {rk[i],rk[min(n,i+k)],i};\n        }\n    }\n    sort(all(cur),cmp);\n    rep(i,0,n-1)sa[i] = cur[i].id;\n}\n\nsigned main(){\n    Orz;\n    string S;getline(cin,S);\n    suffix_array(S);\n    rep(i,0,n-1)cout<<sa[i]<<'\\n';\n}\n```\n#### Radix Sort 優化\n[Submission](https://tioj.ck.tp.edu.tw/submissions/264407)\n\n比較一下 $O(n\\log^2 n)$ 以及 $O(n\\log n)$ 的時間，兩者花了近兩倍的時間差距。看了一下這一題的TopCoder，竟然可以做到十位數毫秒！如果要繼續優化成線性 $O(n)$ 的複雜度，就會使用到 DC3 的演算法，雖然好像很複雜不實用QQ\n\n![](https://i.imgur.com/tQph2uA.png)\n\n![](https://i.imgur.com/1wcKazZ.png)\n\n![](https://i.imgur.com/i4WSvw8.png)\n\n使用 $O(n\\log^2n)$ 的算法會TLE第八、九筆測資，不過使用基數排序就可以AC了！\n\n> test 1 - AC (score=0.000000, sig=0, time=0.006565, mem=6048)\n> test 2 - AC (score=0.000000, sig=0, time=0.006594, mem=6300)\n> test 3 - AC (score=0.000000, sig=0, time=0.012431, mem=7860)\n> test 4 - AC (score=0.000000, sig=0, time=0.012267, mem=7208)\n> test 5 - AC (score=0.000000, sig=0, time=0.011158, mem=6804)\n> test 6 - AC (score=0.000000, sig=0, time=0.012057, mem=7892)\n> test 7 - AC (score=0.000000, sig=0, time=0.140876, mem=17720)\n> test 8 - AC (score=0.000000, sig=0, time=0.077631, mem=21952)\n> test 9 - AC (score=0.000000, sig=0, time=0.074905, mem=21340)\n> test 10 - AC (score=0.000000, sig=0, time=0.076732, mem=30160)\n\n\n\n#### 程式碼\n\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define N 100005\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define all(x) x.begin(),x.end()\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,sa[N];\n\nstruct pt{\n    int x,y,id;\n    bool operator==(pt b){\n        if(x==b.x && y==b.y)return true;\n        return false;\n    }\n};\n//第一位、第二位比較以及後綴編號\nvector<pt> temp,box[N];\n\nvoid init(){\n    temp.clear();\n    rep(i,0,n-1)box[i].clear();\n}\n\nbool cmp(pt a,pt b){\n    if(a.x == b.x)return a.y < b.y;\n    return a.x < b.x;\n}\n\nvoid raddix_sort(vector<pt> &cur){\n    init();\n    rep(i,0,n-1){\n        if(cur[i].y == -1)temp.push_back(cur[i]);\n        else box[cur[i].y].push_back(cur[i]);\n    }\n    rep(i,0,n-1)\n        for(auto j : box[i])temp.push_back(j);\n    rep(i,0,n-1)box[i].clear();\n    rep(i,0,n-1)\n        box[temp[i].x].push_back(temp[i]);\n    cur.clear();\n    rep(i,0,n-1)\n        for(auto j : box[i])cur.push_back(j);\n}\n\nvoid suffix_array(string S){\n    n = S.size();\n    int lg = 32-__builtin_clz(n);//回傳第一個1之前0的個數（二進位）\n    vector<pt> cur(n,{0,0,0});\n    vector<int> rk(n+1,-1);\n    rep(i,0,n-1) cur[i] = {S[i],0,i};\n    sort(all(cur),cmp);\n    rk[cur[0].id] = 0;\n    rep(i,1,n-1)\n        rk[cur[i].id] = (cur[i]==cur[i-1])?rk[cur[i-1].id]:i;\n    rep(i,0,n-1)cur[i] = {rk[i],0,i};\n    rep(p,0,lg){                //進行O(lgn)次\n        int k = 1 << p;         //現在倍增的大小\n        raddix_sort(cur);\n        rk[cur[0].id] = 0;\n        rep(i,1,n-1)            //設定rk，與前一個相同則設定跟前一個一樣\n            rk[cur[i].id] = (cur[i-1]==cur[i] ? rk[cur[i-1].id]:i);\n        rep(i,0,n-1)            //倍增pair的second\n            cur[i] = {rk[i],rk[min(n,i+k)],i};\n    }\n    raddix_sort(cur);\n    rep(i,0,n-1)sa[i] = cur[i].id;\n}\n\nsigned main(){\n    Orz;\n    string S;getline(cin,S);\n    suffix_array(S);\n    rep(i,0,n-1)cout<<sa[i]<<'\\n';\n}\n```\n\n### TIOJ 1515 Problem E. 似曾相識\n[題目連結](https://tioj.ck.tp.edu.tw/problems/1515)\n[Submission](https://tioj.ck.tp.edu.tw/submissions/264483)\n> 題目敘述\n裸後綴數組 LCP。\n\n這題我想好久，一直想不通轉移的條件以及k-1的原因，不過最後還是想通了！這一題只要把 $lcp$ 求出來之後，找最大值就是題目要求的答案。\n\n\n#### 程式碼\n\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define int long long\n#define N 200005\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define all(x) x.begin(),x.end()\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,sa[N];\n\nstruct pt{\n    int x,y,id;\n    bool operator==(pt b){\n        if(x==b.x && y==b.y)return true;\n        return false;\n    }\n};\n//第一位、第二位比較以及後綴編號\n\nbool cmp(pt a,pt b){\n    if(a.x != b.x)return a.x < b.x;\n    return a.y < b.y;\n}\n\nvoid suffix_array(string S){\n    n = S.size();\n    int lg = 32-__builtin_clz(n);\n    //回傳第一個1之前0的個數（二進位）\n    vector<pt> cur(n,{0,0,0});\n    vector<int> rk(n+1,-1);\n    rep(i,0,n-1)cur[i] = {S[i],0,i};\n    rep(p,0,lg){\n        int k = 1 << p;         //現在倍增的大小\n        sort(all(cur),cmp);\n        rk[cur[0].id] = 0;\n        rep(i,1,n-1)\n            rk[cur[i].id] = (cur[i-1]==cur[i] ? rk[cur[i-1].id]:i);\n            //設定rk，與前一個相同則設定跟前一個一樣\n        rep(i,0,n-1){\n            cur[i] = {rk[i],rk[min(n,i+k)],i};\n        }\n    }\n    sort(all(cur),cmp);\n    rep(i,0,n-1)sa[i] = cur[i].id;\n}\n\nvector<int> LCP(string s){\n    vector<int> rk(n,0),lcp(n,0);\n    rep(i,0,n-1)rk[sa[i]] = i;      //利用sa反函數得到rk\n    int k = 0;\n    rep(i,0,n-1){\n        if(k)k--;\n        if(rk[i] == n-1)continue;   //rk[n-1]未定義\n        int j = sa[rk[i]+1];        //下一名後綴從何開始\n        while(i+k<n && j+k<n && s[i+k] == s[j+k])k++;\n        lcp[rk[i]] = k;\n    }\n    return lcp;\n}\n\nsigned main(){\n    Orz;\n    cin>>n;cin.ignore();\n    string S;getline(cin,S);\n    suffix_array(S);\n    vector<int> lcp = LCP(S);\n    \n    int ans = 0;\n    rep(i,0,n-1)ans = max(lcp[i],ans);\n    cout<<ans<<endl;\n}\n```\n\n## 心得\n\n字串演算法跟最短路徑、計算幾何比起來，數學推導成分就多了很多，有許多的遞迴概念，例如失敗函數以及z函數的概念，也有很多是要理解在不同條件下做什麼事，以及其他優化處理。最初的是字典樹Trie，就是一些資料結構的運用；接下來的KMP、Z Algorithm以及LPS就很吃觀念，追蹤整個程式的過程。最後是後綴數組，在這邊卡了超久，遲遲無法理解倍增的概念、以及LCP的作法。可能這就是頓悟吧，每天看了同篇解說很久之後，總有一天會突然頓悟，想到演算法的精髓！\n\n","source":"_posts/String_problems.md","raw":"---\ntitle: 字串演算法例題\ndate: 2021-9-5\ntags: \n    - 字串\n    - 演算法\ncategories:\n\t- C++進階主題\n\t- 字串演算法\n\nmathjax: true\n---\n\n## 題目目錄\n- NEOJ 266 溫力的故事\n- NEOJ 265 欸迪的字串\n- NEOJ 267 自動完成系統\n- NEOJ 264 欸迪的字串\n- ZJ d518: 文字抄寫 II\n- TIOJ 1306 字串中的字串\n- TIOJ 1321 好多回文 ndromePali\n- ZJ d978: 最长回文字串\n- TIOJ 1725 Massacre at Camp Happy\n- TIOJ 1497 喝醉的宿主 The drunk host\n- TIOJ 1515 Problem E. 似曾相識\n<!-- more -->\n\n### NEOJ 266 溫力的故事\n[題目連結](https://neoj.sprout.tw/problem/266/)\n[Submission](https://neoj.sprout.tw/challenge/179031/)\n> 題目敘述\n> 給你n個字串m筆詢問一個字串，對每一筆詢問輸出詢問在n個字串中出現的次數。\n\n這一題在**隨機算法**做過，今天用字典樹Trie做一次。在隨機算法中，透過Rolling Hash的公式，對每一個字串生成一個值，利用這個值查詢出現的次數。如果我們用Trie的話，則是建立一棵指標樹，透過走法這一棵字典樹得知詢問字串出現的次數！\n\n#### 程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define N 2000\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,m;\n\nstruct Trie{        //利用指標建立一棵樹\n    Trie* c[26];    //對應a-z每一條邊\n    int cnt;        //字串出現次數\n    Trie(): cnt(0){ //初始設定\n        memset(c,0,sizeof(c));\n    }\n};\nTrie* root = new Trie();\n\nint ch(char temp){\n    return temp-'a';\n}\n\nvoid insert(char *s){\n    Trie *ptr = root;           //從根節點尋找\n    while(*s){\n        if(!ptr->c[ch(*s)])     //如果樹上無此字元則new\n            ptr->c[ch(*s)] = new Trie();\n        ptr = ptr->c[ch(*s)];   //繼續造訪Trie\n        s += 1;                 //字串下一個字元\n    }\n    ptr->cnt += 1;              //字串出現次數(字串對應唯一葉節點)\n}\n\nint find(char *s){              //查找字串s\n    Trie *ptr = root;           //根節點尋找\n    while(*s){                  //無此字串，回傳次數0\n        if(!ptr->c[ch(*s)])return 0;\n        ptr = ptr->c[ch(*s)];\n        s += 1;                 //字串下一個字元\n    }\n    return ptr->cnt;            //回傳字串出現次數\n}\n\nsigned main(){\n    Orz;\n    cin>>n>>m;\n    rep(i,0,n-1){\n        char s[105];cin>>s;\n        insert(s);\n    }\n    rep(i,0,m-1){\n        char s[105];cin>>s;\n        cout<<find(s)<<endl;\n    }\n}\n```\n\n### NEOJ 265 欸迪的字串\n[題目連結](https://neoj.sprout.tw/problem/265/)\n[Submission](https://neoj.sprout.tw/challenge/179036/)\n> 題目敘述\n> 給你字串S和字串T，求出S在T中出現的位置\n\n這一題在**隨機演算法**也有出現過，當時是用Rolling Hash的方式透過扣掉Hash的方法比對字串是否相同（推一下公式就知道）。現在要用的是**KMP演算法**，很複雜不好想。\n\n\n\n比較一下隨機跟KMP的時間，下方為KMP，上方則是隨機算法，兩者時間差了將近1倍，雖然兩者都可以在O(|T|)時間內進行匹配，但是建立Rolling Hash的常數是比較大的！\n![](https://i.imgur.com/a7CPjyi.png)\n\n#### 程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define int long long\n#define N 500005\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,m;\n\nvector<int> KMP_match(char *S,int *F,char *T){\n    vector<int> ans;            //回傳匹配相同地方\n    int p = -1;                 //紀錄短字串有多少被匹配\n    for(int i=0;T[i];i++){      //每一迴圈都讓T[i]被匹配到\n        while(p!=-1 && S[p+1]!=T[i])\n            p = F[p];           //使T[i]一定可以被匹配到\n        if(S[p+1] == T[i])\n            p += 1;             //T的第i個與S的p+1可以匹配\n        if(!S[p+1]){            //S[p]已經匹配完成\n            ans.push_back(i-p); //回推匹配開頭\n            p = F[p];           //繼續下一輪匹配\n        }\n    }\n    return ans;\n}\n\n//O(|S|)要配對的字串以及Fail Function\nvoid KMP_build(char *S,int *F){\n    int p = F[0] = -1;              //初始設定為-1\n    for(int i=1;S[i];i++){          //1到接下來字元\n        while(p!=-1 && S[p+1]!=S[i])\n            p = F[p];               //無法繼續配對，尋找更短字串\n        if(S[p+1] == S[i])          //配對成功(如都沒有一樣的就-1)\n            p += 1;\n        F[i] = p;                   //設定F[i]\n    }\n}\n\nsigned main(){\n    Orz;\n    char S[N],T[N];     //詢問短字串、長在串\n    int F[N];           //失敗函數\n    cin>>S>>T;\n    KMP_build(S,F);\n    vector<int> ans = KMP_match(S,F,T);\n    if(ans.size()>0){\n        cout<<ans[0];\n        rep(i,1,ans.size()-1)cout<<\" \"<<ans[i];\n    }\n    cout<<endl;\n}\n```\n\n### NEOJ 267 自動完成系統\n[題目連結](https://neoj.sprout.tw/problem/267/)\n[Submission](https://neoj.sprout.tw/challenge/179148/)\n> 題目敘述\n[點這裡](https://www.facebook.com/codingcompetitions/hacker-cup/2015/round-1/problems/B)有FB Hacker Cup的原題連結，簡單來說就是想像手機的自動填入系統，每加入一個字串會記錄到資料庫中，當資料庫裡面沒有相同前綴的字串時就輸出前綴長度。\n\n用字典樹Trie插入每一個字串，插入過程中返回從頭到開始new新的節點之間經過的節點樹，代表需要輸入多少個字元才能觸發自動完成系統。這一題是基礎的Trie應用。\n\n#### 程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define N 1000005\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint t,n;\nchar S[N];\n\nint ch(char a){\n    return a-'a';\n}\n\nstruct Trie{\n    Trie* c[26];\n    Trie(){\n        memset(c,0,sizeof(c));\n    }\n};\nTrie *root = new Trie();\n\nint insert(char *S){\n    Trie *ptr = root;\n    int step = 0,f = 1;\n    while(*S){\n        if(f)step++;\n        if(!ptr->c[ch(*S)]){\n            ptr->c[ch(*S)] = new Trie();\n            f = 0;\n        }\n        ptr = ptr->c[ch(*S)];\n        S++;\n    }\n    return step;\n}\nvoid clear(Trie *s){\n    for(int i=0;i<26;i++){\n        if(s->c[i]){\n            clear(s->c[i]);\n            delete s->c[i];\n            s->c[i] = nullptr;\n        }\n    }\n}\n\nint main(){\n    cin>>t;\n    int cnt = 0;\n    while(t--){\n        cnt++;\n        cin>>n;\n        int step = 0;\n        rep(i,0,n-1){\n            cin>>S;\n            step +=insert(S);\n        }\n        cout<<\"Case #\"<<cnt<<\": \"<<step<<endl;\n        clear(root);\n    }\n}\n```\n\n### NEOJ 264 欸迪的字串\n[題目連結](https://neoj.sprout.tw/problem/264/)\n[Submission](https://neoj.sprout.tw/challenge/179060/)\n> 題目敘述\n> 給你字串S，求一個最短字串T的長度，滿足經由複製若干次後接起來會是字串S。\n\n這一題在一開始看到感覺好難，不過在慢慢理解 Z_Algorithm 之後，在講義中發現到這個問題也可以用這個演算法來解決！因為Z函數是滿足從i開始的最長前綴，因此當 $i$ 為 字串長度 $n$ 的因數的時候，只要 $i+Z[i+1]=n$ 成立，就必定可以用 $S[1:i]$ 組成字串 $S$ 。實作上要注意字串是0-base，i+1就相等於字串第i個位置，處理上要特別注意！\n\n#### 程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define N 500005\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,m;\n\nvoid Z_algo(char *S,int *Z){\n    int l = 0,r = 0;\n    Z[0] = 0;\n    for(int i=1;S[i];i++){\n        Z[i] = max(0,min(Z[i-l],r-i));\n        while(S[Z[i]]&&S[Z[i]] == S[i+Z[i]]){\n            l = i;r = i+Z[i];\n            Z[i]++;\n        }\n    }\n}\n\nsigned main(){\n    Orz;\n    char s[N];cin>>s;\n    int Z[N],n = strlen(s),ans = n;\n    Z_algo(s,Z);\n    \n    rep(i,1,n-1){\n        if(n%i==0 && i+Z[i]==n){\n            ans = i;\n            break;\n        }\n    }\n    cout<<ans<<endl;\n}\n```\n\n### ZJ d518: 文字抄寫 II\n[題目連結](https://zerojudge.tw/ShowProblem?problemid=d518)\n> 題目敘述\n若這個字串之前已經出現過，則輸出的出現號碼，若沒有則輸出它將被編寫的號碼.\n\n裸題Trie，不過要注意每一次要重置，將所有的實體Delete掉。\n\n#### 程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define N 110\n#define Orz ios::sync_with_stdio(0),cin.tie(0),cout.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,m;\n\nstruct Trie{\n    Trie* c[26];\n    int ind;\n    Trie(): ind(0){\n        memset(c,0,sizeof(c));\n    }\n};\nTrie* root = new Trie();\n\nint ch(char temp){\n    return temp-'a';\n}\nvoid clear(Trie *cur){\n    for(int i=0;i<26;i++){\n        if(cur->c[i]){\n            clear(cur->c[i]);\n            delete[] cur->c[i];\n            cur->c[i] = NULL;\n        }\n    }\n}\n\nvoid insert(char *s,int num){\n    Trie *ptr = root;           //從根節點尋找\n    while(*s){\n        if(!ptr->c[ch(*s)])     //如果樹上無此字元則new\n            ptr->c[ch(*s)] = new Trie();\n        ptr = ptr->c[ch(*s)];   //繼續造訪Trie\n        s += 1;                 //字串下一個字元\n    }\n    ptr->ind = num;\n}\n\nint find(char *s){              //查找字串s\n    Trie *ptr = root;           //根節點尋找\n    while(*s){                  //無此字串，回傳次數0\n        if(!ptr->c[ch(*s)])return 0;\n        ptr = ptr->c[ch(*s)];\n        s += 1;                 //字串下一個字元\n    }\n    return ptr->ind;\n}\n\nsigned main(){\n    while(scanf(\"%d\",&n)!=EOF){\n        int ans,cur_id = 1;\n        rep(i,1,n){\n            char s[N];scanf(\"%s\",s);\n            ans = find(s);\n            if(ans == 0){\n                printf(\"New! %d\\n\",cur_id);\n                insert(s,cur_id);\n                cur_id += 1;\n            }\n            else{\n                printf(\"Old! %d\\n\",ans);\n            }\n        }\n        clear(root);\n    }\n}\n```\n\n### TIOJ 1306 字串中的字串\n[題目連結](https://tioj.ck.tp.edu.tw/problems/1306)\n[Submission](https://tioj.ck.tp.edu.tw/submissions/263572)\n> 題目敘述\n裸字串匹配。對於每個詢問輸出 $S$ 在 $T$ 中出現過幾次。\n\n裸KMP字串匹配，統計出現次數。可以嘗試不要看資料自己寫一次，會更了解KMP算法！\n\n#### 程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define int long long\n#define N 10005\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint t,n,F[N];;\nchar T[N],S[N];\n\nint KMP_match(char *S,char *T,int *F){\n    int p = -1,ans = 0;\n    for(int i=0;T[i];i++){\n        while(p!=-1 && S[p+1]!=T[i])\n            p = F[p];\n        if(S[p+1] == T[i])\n            p += 1;\n        if(!S[p+1]){\n            ans += 1;\n            p = F[p];\n        }\n    }\n    return ans;\n}\n\nvoid KMP_build(char *S,int *F){\n    int p = F[0] = -1;\n    for(int i=1;S[i];i++){\n        while(p!=-1 && S[p+1]!=S[i])\n            p = F[p];\n        if(S[p+1] == S[i])\n            p += 1;\n        F[i] = p;\n    }\n}\n\nvoid solve(){\n    while(n--){\n        memset(F,0,sizeof(F));\n        cin>>S;\n        KMP_build(S,F);\n        cout<<KMP_match(S,T,F)<<endl;\n    }\n}\n\nsigned main(){\n    Orz;\n    cin>>t;\n    while(t--){\n        cin>>T>>n;\n        solve();\n    }\n}\n```\n\n\n### TIOJ 1321 好多回文 ndromePali\n[題目連結](https://tioj.ck.tp.edu.tw/problems/1321)\n[Submission](https://tioj.ck.tp.edu.tw/submissions/263962)\n> 題目敘述\n給一個長度 ≤ $10^6$ 的字串 A，問有幾種把該字串的某前綴搬到最後面的方法，使得最後的字串為回文。\n(提示:可以用類似 Z 函數的概念計算出以某字元為中心的最長回文長度。)\n\n這一題搞得我快掛了QQQ。為什麼呢？看看以下照片就知道了：\n\n![](https://i.imgur.com/i8Gx5Yo.png)\n\n根據上面的「提示」，要用類似Z函數的概念把以某點為中心的最長回文算出來。一個Naive裸的作法，把用 $O(n)$ 枚舉每一個點為分割點，把分割點前面的子字串接到後面，用 $O(n)$ 的時間看是否為一回文字串。如此一來時間複雜度為 $O(n^2)$ ，對這一題來說顯然是不可行的，因為字串長度達到 $10^6$！\n\n當我們用Manacher’s Algorithm $O(n)$ 的時間每一個字元的最大回文之後，就可以枚舉每一個可以作為分割點的地方，檢查回文的狀況。討論分割點在前半部分的情況下，也就是把短的（長度小於一半）前綴搬到後面的狀況。當分割的索引值為 $i$ ，必須保證 $s[0:i]$ 跟 $s[i:2i]$ 對稱，移到字串尾巴才能成為回文。除此之外，也必須滿足 $Z[mid+i] = mid-i$ 的情況，以就是剩下不是分割點兩側的字串必須是回文，把前綴接到後面之後才能對稱！\n\n實作上很多細節，我DEBUG超久最後才想到不能枚舉所有字元，會出事（就像上面的三色WA），只要枚舉以 $'.'$ 為分割點的情況（分割在字元上就不行），還有很多細節，WA很多次才會知道XD\n\n\n\n#### 程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define N 1000005\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,m,Z[2*N];\nbool ans[2*N];\nchar S[2*N],T[N];\n//T原字串、S插入點字串\n\nvoid Longest(){\n    n = strlen(T);m = 2*n+1;\n    memset(S,'.',m);\n    for(int i=0;i<n;i++)S[2*i+1] = T[i];\n    Z[0] = 1;\n    int l = 0,r = 0;\n    for(int i=1;i<m;i++){\n        Z[i] = max(min(Z[2*l-i],r-i),1);\n        while(i-Z[i]>=0 && i+Z[i] < m && S[i+Z[i]]==S[i-Z[i]]){\n            l = i;r = i+Z[i];\n            Z[i]++;\n        }\n    }\n}\n\nsigned main(){\n    Orz;\n    cin>>T;\n    Longest();\n    \n    for(int i=0;i<m;i++)Z[i]--;\n    memset(ans,0,sizeof(ans));\n    \n    int mid = (m-1)/2,i;\n    \n    if(Z[mid] == mid)ans[0] = 1;\n    for(i=2;i<mid;i+=2){\n        if(Z[i] == i && Z[mid+i] == mid-i){\n            ans[(i/2)] = 1;\n        }\n    }\n    for(;i<m;i+=2){\n        if(Z[i] == m-i-1 && Z[i-mid] == i-mid){\n            ans[(i/2)] = 1;\n        }\n    }\n    \n    int sum = 0;\n    for(int i=0;i<n;i++)if(ans[i])sum++;\n    if(sum == 0)cout<<\"none\"<<endl;\n    else{\n        cout<<sum<<\":\";\n        for(int i=0;i<n;i++)if(ans[i])cout<<\" \"<<i;\n        cout<<endl;\n    }\n}\n```\n\n### ZJ d978: 最长回文字串\n[題目連結](https://zerojudge.tw/ShowProblem?problemid=d978)\n> 題目敘述\n題目即題意，給你一個字串，求出最長的回文字串長度為何？\n\n一題LPS的裸題，用Manacher's Algorithm可以將時間複雜度做到 $O(n)$！\n\n\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define N 500005\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,m,Z[2*N],t;\nbool ans[2*N];\nchar S[2*N],T[N];\n//T原字串、S插入點字串\n\nvoid Longest(){\n    n = strlen(T);m = 2*n+1;\n    memset(S,'.',m);\n    for(int i=0;i<n;i++)S[2*i+1] = T[i];\n    Z[0] = 1;\n    int l = 0,r = 0;\n    for(int i=1;i<m;i++){\n        Z[i] = max(min(Z[2*l-i],r-i),1);\n        while(i-Z[i]>=0 && i+Z[i] < m && S[i+Z[i]]==S[i-Z[i]]){\n            l = i;r = i+Z[i];\n            Z[i]++;\n        }\n    }\n}\n\nsigned main(){\n    Orz;\n    cin>>t;\n    while(t--){\n        cin>>T;\n        Longest();\n        int ans = 0;\n        for(int i=0;i<m;i++){\n            int z = (Z[i]-1);\n            ans = max(ans,z);\n        }\n        cout<<ans<<endl;\n    }\n}\n```\n\n\n### TIOJ 1725 Massacre at Camp Happy\n[題目連結](https://tioj.ck.tp.edu.tw/problems/1725)\n[Submission](https://tioj.ck.tp.edu.tw/submissions/264017)\n\n> 題目敘述：\n定義字串 A 和 B「k-幾乎相同」代表把字串 A 的前 k 字元搬到最後面時，與 B 恰有一個字元相異。給你兩個長度 ≤ $10^6$ 的字串 A 和 B，求所有使 A 和 B「k-幾乎相同」成立的 k 值。\n\n\n這一題好特別，一樣要用 $O(n)$ 的時間求出答案，對於每一個操作將前k個字元搬到後面，只能用 $O(1)$ 算出來到底符不符合一字元相異的條件。\n以兩個相等長度的字串 $A,B$ 為例，長度為 $l$，假設 $A=aabba,B = aacba$，兩者相差一個字元的情況下，必定會滿足$l = LCP(A,B)+LCP(rev(A),rev(B))+1$，其中rev函數表示reverse。\n\n我們要做的就是在 $O(1)$ 的時間內求出LCP，因為題目的字串 $A$ 要求不同的起始位置，因此我們假設一個非常特別的字串 $B@AA$ ，其中@為任意沒出現過的字元。只要計算這一個字串的Z函數，就表示了 $A$ 和 $B$ 的最長共同前綴，需要兩個A的原因是因為模擬不同的k-位移下情形。\n\n![](https://i.imgur.com/5Ir8Hjt.png)\n\n{% note success %}\n**實作小細節**\n程式碼的第42行可以試著推推看逆序之後的尾巴的索引值為何。我是利用列出幾個數字之後推出來的，不過應該可以寫成比較嚴謹的數學證明！\n```cpp=\nZ1[n+1+i]+Z2[2*n-i+1]+1 == n\n```\n{% endnote %}\n\n#### 時間複雜度\n$O(n)$ 建立z函數，$O(n)$ 枚舉每一個起始點，總時間為 $O(n)$。\n\n#### 程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define N 1000005\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,m,Z1[3*N],Z2[3*N];\nchar A[3*N],B[3*N];\n\nvoid Z_algo(int *z,char *S){\n    int l = 0,r = 0;\n    z[0] = 0;\n    for(int i=1;i<m;i++){\n        z[i] = max(min(z[i-l],r-i),0);\n        while(S[i+z[i]] && S[z[i]] == S[i+z[i]]){\n            l = i;r = i+z[i];\n            z[i]++;\n        }\n    }\n}\n\nsigned main(){\n    Orz;\n    cin>>n>>A>>B;\n    m = 3*n+1;\n    B[n] = '@';\n    //正常序列求Z value\n    rep(i,n+1,2*n)B[i] = A[i-n-1];\n    rep(i,2*n+1,3*n)B[i] = A[i-2*n-1];\n    Z_algo(Z1,B);\n    //逆序求Z value\n    reverse(B,B+n);reverse(B+n+1,B+m);\n    Z_algo(Z2,B);\n    \n    vector<int> vec;\n    for(int i=0;i<n;i++){\n        if(Z1[n+1+i]+Z2[2*n-i+1]+1 == n)vec.push_back(i);\n    }\n    if(vec.size()){\n        cout<<\"TAK\"<<endl;\n        for(auto i:vec)cout<<i<<\" \";\n        cout<<endl;\n    }\n    else cout<<\"NIE\"<<endl;\n    \n}\n//[0,n-1][n,n][n+1,2n][2n+1,3n]\n```\n\n### TIOJ 1497 喝醉的宿主 The drunk host\n[題目連結](https://tioj.ck.tp.edu.tw/problems/1497)\n[Submission](https://tioj.ck.tp.edu.tw/submissions/264189)\n> 題目敘述\n裸後綴數組。\n\n後綴數組我看了好久（大概有4天吧），一直對著它發呆，不知道它的精髓到底在哪裡。。剛好又遇到開學，不能整天快樂寫題XD\n\n#### 倍增優化\n\n對著螢幕發呆的日子終於結束了，直到我看了[這一篇](https://oi-wiki.org/string/sa/)（雖然說我前幾天也有看但看不懂，可能是消化的天數不夠多吧），尤其是裡面的一張圖，深刻說明了倍增的精髓。\n\n後綴數組求法就不多解釋（上面有），放幾個實作上的小細節。\n\n{% note primary %}\n**實作小細節**\n我們要求進行 $O(\\log n)$ 層的倍增，可以使用C++內建的log10()再用ceil去處理，但顯然有點慢，如果套用以下函數，它會回傳數字二進位之後最大的1前面總共有多少個0（前綴0的數量），與32相減（32是long long的關係）就是我們要的log的次數。\n\n\n```cpp=\nint lg = __builtin_clz(n)\n```\n\n另外一個小小細節，就是在字串的後半部分，如果跟前面一樣倍增一個比較大的數字，有可能會超出範圍，這時候初始值就很重要了！初始設定rk[n] = -1，導致任何只要超出範圍的都會取到這個-1，表示只要後面沒有字串、如果前面都相同但長度比較長的字串比起來，較短的會排在比較前面的位置！\n{% endnote %}\n這個算法是 $O(n\\log^2 n)$，TIOJ這一題可以過，不過到[SPOJ](https://www.spoj.com/problems/SARRAY/)就會被卡TLE\n\n> $O(n^2 log(n))$ is expected to score about 20-30. (Naive sorting all suffixes)\n> $O(n log^2(n))$ is expected to score about 40. (OK for most programming contest problems)\n> $O(n log n)$ is expected to score about 60-70. (Use counting sort for small alphabet size)\n> $O(n)$ without tweaks is expected to score about 80-90.\n> $O(n)$ with tweaks is expected to score 100. (This is meant for fun only :)\n\n越後面就越毒瘤XD\n\n> test 1 - AC (score=0.000000, sig=0, time=0.009123, mem=5372)\n> test 2 - AC (score=0.000000, sig=0, time=0.006427, mem=5508)\n> test 3 - AC (score=0.000000, sig=0, time=0.014975, mem=5468)\n> test 4 - AC (score=0.000000, sig=0, time=0.031332, mem=5536)\n> test 5 - AC (score=0.000000, sig=0, time=0.026948, mem=5456)\n> test 6 - AC (score=0.000000, sig=0, time=0.023113, mem=5396)\n> test 7 - TLE (score=0.000000, sig=0, time=0.210000, mem=7340)\n> test 8 - TLE (score=0.000000, sig=0, time=0.210000, mem=7152)\n> test 9 - AC (score=0.000000, sig=0, time=0.170094, mem=7284)\n> test 10 - AC (score=0.000000, sig=0, time=0.140098, mem=7340)\n\n\n#### 程式碼\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define int long long\n#define N 100005\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define all(x) x.begin(),x.end()\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,sa[N];\n\nstruct pt{\n    int x,y,id;\n    bool operator==(pt b){\n        if(x==b.x && y==b.y)return true;\n        return false;\n    }\n};\n//第一位、第二位比較以及後綴編號\n\nbool cmp(pt a,pt b){\n    if(a.x != b.x)return a.x < b.x;\n    return a.y < b.y;\n}\n\nvoid suffix_array(string S){\n    n = S.size();\n    int lg = 32-__builtin_clz(n);\n    //回傳第一個1之前0的個數（二進位）\n    vector<pt> cur(n,{0,0,0});\n    vector<int> rk(n+1,-1);\n    rep(i,0,n-1)cur[i] = {S[i],0,i};\n    rep(p,0,lg){\n        int k = 1 << p;         //現在倍增的大小\n        sort(all(cur),cmp);\n        rk[cur[0].id] = 0;\n        rep(i,1,n-1){\n            rk[cur[i].id] = (cur[i-1]==cur[i] ? rk[cur[i-1].id]:i);\n            //設定rk，與前一個相同則設定跟前一個一樣\n        }\n        rep(i,0,n-1){\n            cur[i] = {rk[i],rk[min(n,i+k)],i};\n        }\n    }\n    sort(all(cur),cmp);\n    rep(i,0,n-1)sa[i] = cur[i].id;\n}\n\nsigned main(){\n    Orz;\n    string S;getline(cin,S);\n    suffix_array(S);\n    rep(i,0,n-1)cout<<sa[i]<<'\\n';\n}\n```\n#### Radix Sort 優化\n[Submission](https://tioj.ck.tp.edu.tw/submissions/264407)\n\n比較一下 $O(n\\log^2 n)$ 以及 $O(n\\log n)$ 的時間，兩者花了近兩倍的時間差距。看了一下這一題的TopCoder，竟然可以做到十位數毫秒！如果要繼續優化成線性 $O(n)$ 的複雜度，就會使用到 DC3 的演算法，雖然好像很複雜不實用QQ\n\n![](https://i.imgur.com/tQph2uA.png)\n\n![](https://i.imgur.com/1wcKazZ.png)\n\n![](https://i.imgur.com/i4WSvw8.png)\n\n使用 $O(n\\log^2n)$ 的算法會TLE第八、九筆測資，不過使用基數排序就可以AC了！\n\n> test 1 - AC (score=0.000000, sig=0, time=0.006565, mem=6048)\n> test 2 - AC (score=0.000000, sig=0, time=0.006594, mem=6300)\n> test 3 - AC (score=0.000000, sig=0, time=0.012431, mem=7860)\n> test 4 - AC (score=0.000000, sig=0, time=0.012267, mem=7208)\n> test 5 - AC (score=0.000000, sig=0, time=0.011158, mem=6804)\n> test 6 - AC (score=0.000000, sig=0, time=0.012057, mem=7892)\n> test 7 - AC (score=0.000000, sig=0, time=0.140876, mem=17720)\n> test 8 - AC (score=0.000000, sig=0, time=0.077631, mem=21952)\n> test 9 - AC (score=0.000000, sig=0, time=0.074905, mem=21340)\n> test 10 - AC (score=0.000000, sig=0, time=0.076732, mem=30160)\n\n\n\n#### 程式碼\n\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define N 100005\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define all(x) x.begin(),x.end()\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,sa[N];\n\nstruct pt{\n    int x,y,id;\n    bool operator==(pt b){\n        if(x==b.x && y==b.y)return true;\n        return false;\n    }\n};\n//第一位、第二位比較以及後綴編號\nvector<pt> temp,box[N];\n\nvoid init(){\n    temp.clear();\n    rep(i,0,n-1)box[i].clear();\n}\n\nbool cmp(pt a,pt b){\n    if(a.x == b.x)return a.y < b.y;\n    return a.x < b.x;\n}\n\nvoid raddix_sort(vector<pt> &cur){\n    init();\n    rep(i,0,n-1){\n        if(cur[i].y == -1)temp.push_back(cur[i]);\n        else box[cur[i].y].push_back(cur[i]);\n    }\n    rep(i,0,n-1)\n        for(auto j : box[i])temp.push_back(j);\n    rep(i,0,n-1)box[i].clear();\n    rep(i,0,n-1)\n        box[temp[i].x].push_back(temp[i]);\n    cur.clear();\n    rep(i,0,n-1)\n        for(auto j : box[i])cur.push_back(j);\n}\n\nvoid suffix_array(string S){\n    n = S.size();\n    int lg = 32-__builtin_clz(n);//回傳第一個1之前0的個數（二進位）\n    vector<pt> cur(n,{0,0,0});\n    vector<int> rk(n+1,-1);\n    rep(i,0,n-1) cur[i] = {S[i],0,i};\n    sort(all(cur),cmp);\n    rk[cur[0].id] = 0;\n    rep(i,1,n-1)\n        rk[cur[i].id] = (cur[i]==cur[i-1])?rk[cur[i-1].id]:i;\n    rep(i,0,n-1)cur[i] = {rk[i],0,i};\n    rep(p,0,lg){                //進行O(lgn)次\n        int k = 1 << p;         //現在倍增的大小\n        raddix_sort(cur);\n        rk[cur[0].id] = 0;\n        rep(i,1,n-1)            //設定rk，與前一個相同則設定跟前一個一樣\n            rk[cur[i].id] = (cur[i-1]==cur[i] ? rk[cur[i-1].id]:i);\n        rep(i,0,n-1)            //倍增pair的second\n            cur[i] = {rk[i],rk[min(n,i+k)],i};\n    }\n    raddix_sort(cur);\n    rep(i,0,n-1)sa[i] = cur[i].id;\n}\n\nsigned main(){\n    Orz;\n    string S;getline(cin,S);\n    suffix_array(S);\n    rep(i,0,n-1)cout<<sa[i]<<'\\n';\n}\n```\n\n### TIOJ 1515 Problem E. 似曾相識\n[題目連結](https://tioj.ck.tp.edu.tw/problems/1515)\n[Submission](https://tioj.ck.tp.edu.tw/submissions/264483)\n> 題目敘述\n裸後綴數組 LCP。\n\n這題我想好久，一直想不通轉移的條件以及k-1的原因，不過最後還是想通了！這一題只要把 $lcp$ 求出來之後，找最大值就是題目要求的答案。\n\n\n#### 程式碼\n\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define int long long\n#define N 200005\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define all(x) x.begin(),x.end()\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,sa[N];\n\nstruct pt{\n    int x,y,id;\n    bool operator==(pt b){\n        if(x==b.x && y==b.y)return true;\n        return false;\n    }\n};\n//第一位、第二位比較以及後綴編號\n\nbool cmp(pt a,pt b){\n    if(a.x != b.x)return a.x < b.x;\n    return a.y < b.y;\n}\n\nvoid suffix_array(string S){\n    n = S.size();\n    int lg = 32-__builtin_clz(n);\n    //回傳第一個1之前0的個數（二進位）\n    vector<pt> cur(n,{0,0,0});\n    vector<int> rk(n+1,-1);\n    rep(i,0,n-1)cur[i] = {S[i],0,i};\n    rep(p,0,lg){\n        int k = 1 << p;         //現在倍增的大小\n        sort(all(cur),cmp);\n        rk[cur[0].id] = 0;\n        rep(i,1,n-1)\n            rk[cur[i].id] = (cur[i-1]==cur[i] ? rk[cur[i-1].id]:i);\n            //設定rk，與前一個相同則設定跟前一個一樣\n        rep(i,0,n-1){\n            cur[i] = {rk[i],rk[min(n,i+k)],i};\n        }\n    }\n    sort(all(cur),cmp);\n    rep(i,0,n-1)sa[i] = cur[i].id;\n}\n\nvector<int> LCP(string s){\n    vector<int> rk(n,0),lcp(n,0);\n    rep(i,0,n-1)rk[sa[i]] = i;      //利用sa反函數得到rk\n    int k = 0;\n    rep(i,0,n-1){\n        if(k)k--;\n        if(rk[i] == n-1)continue;   //rk[n-1]未定義\n        int j = sa[rk[i]+1];        //下一名後綴從何開始\n        while(i+k<n && j+k<n && s[i+k] == s[j+k])k++;\n        lcp[rk[i]] = k;\n    }\n    return lcp;\n}\n\nsigned main(){\n    Orz;\n    cin>>n;cin.ignore();\n    string S;getline(cin,S);\n    suffix_array(S);\n    vector<int> lcp = LCP(S);\n    \n    int ans = 0;\n    rep(i,0,n-1)ans = max(lcp[i],ans);\n    cout<<ans<<endl;\n}\n```\n\n## 心得\n\n字串演算法跟最短路徑、計算幾何比起來，數學推導成分就多了很多，有許多的遞迴概念，例如失敗函數以及z函數的概念，也有很多是要理解在不同條件下做什麼事，以及其他優化處理。最初的是字典樹Trie，就是一些資料結構的運用；接下來的KMP、Z Algorithm以及LPS就很吃觀念，追蹤整個程式的過程。最後是後綴數組，在這邊卡了超久，遲遲無法理解倍增的概念、以及LCP的作法。可能這就是頓悟吧，每天看了同篇解說很久之後，總有一天會突然頓悟，想到演算法的精髓！\n\n","slug":"String_problems","published":1,"updated":"2021-09-19T11:26:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvyspmis002kmuyxfgc597e3","content":"<h2 id=\"題目目錄\"><a href=\"#題目目錄\" class=\"headerlink\" title=\"題目目錄\"></a>題目目錄</h2><ul>\n<li>NEOJ 266 溫力的故事</li>\n<li>NEOJ 265 欸迪的字串</li>\n<li>NEOJ 267 自動完成系統</li>\n<li>NEOJ 264 欸迪的字串</li>\n<li>ZJ d518: 文字抄寫 II</li>\n<li>TIOJ 1306 字串中的字串</li>\n<li>TIOJ 1321 好多回文 ndromePali</li>\n<li>ZJ d978: 最长回文字串</li>\n<li>TIOJ 1725 Massacre at Camp Happy</li>\n<li>TIOJ 1497 喝醉的宿主 The drunk host</li>\n<li>TIOJ 1515 Problem E. 似曾相識<span id=\"more\"></span>\n</li>\n</ul>\n<h3 id=\"NEOJ-266-溫力的故事\"><a href=\"#NEOJ-266-溫力的故事\" class=\"headerlink\" title=\"NEOJ 266 溫力的故事\"></a>NEOJ 266 溫力的故事</h3><p><a href=\"https://neoj.sprout.tw/problem/266/\">題目連結</a><br><a href=\"https://neoj.sprout.tw/challenge/179031/\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>給你n個字串m筆詢問一個字串，對每一筆詢問輸出詢問在n個字串中出現的次數。</p>\n</blockquote>\n<p>這一題在<strong>隨機算法</strong>做過，今天用字典樹Trie做一次。在隨機算法中，透過Rolling Hash的公式，對每一個字串生成一個值，利用這個值查詢出現的次數。如果我們用Trie的話，則是建立一棵指標樹，透過走法這一棵字典樹得知詢問字串出現的次數！</p>\n<h4 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 2000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Trie</span>&#123;</span>        <span class=\"comment\">//利用指標建立一棵樹</span></span><br><span class=\"line\">    Trie* c[<span class=\"number\">26</span>];    <span class=\"comment\">//對應a-z每一條邊</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt;        <span class=\"comment\">//字串出現次數</span></span><br><span class=\"line\">    <span class=\"built_in\">Trie</span>(): <span class=\"built_in\">cnt</span>(<span class=\"number\">0</span>)&#123; <span class=\"comment\">//初始設定</span></span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(c,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(c));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Trie* root = <span class=\"keyword\">new</span> <span class=\"built_in\">Trie</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ch</span><span class=\"params\">(<span class=\"keyword\">char</span> temp)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp-<span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">char</span> *s)</span></span>&#123;</span><br><span class=\"line\">    Trie *ptr = root;           <span class=\"comment\">//從根節點尋找</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(*s)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)])     <span class=\"comment\">//如果樹上無此字元則new</span></span><br><span class=\"line\">            ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)] = <span class=\"keyword\">new</span> <span class=\"built_in\">Trie</span>();</span><br><span class=\"line\">        ptr = ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)];   <span class=\"comment\">//繼續造訪Trie</span></span><br><span class=\"line\">        s += <span class=\"number\">1</span>;                 <span class=\"comment\">//字串下一個字元</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ptr-&gt;cnt += <span class=\"number\">1</span>;              <span class=\"comment\">//字串出現次數(字串對應唯一葉節點)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">char</span> *s)</span></span>&#123;              <span class=\"comment\">//查找字串s</span></span><br><span class=\"line\">    Trie *ptr = root;           <span class=\"comment\">//根節點尋找</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(*s)&#123;                  <span class=\"comment\">//無此字串，回傳次數0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)])<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        ptr = ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)];</span><br><span class=\"line\">        s += <span class=\"number\">1</span>;                 <span class=\"comment\">//字串下一個字元</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ptr-&gt;cnt;            <span class=\"comment\">//回傳字串出現次數</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> s[<span class=\"number\">105</span>];cin&gt;&gt;s;</span><br><span class=\"line\">        <span class=\"built_in\">insert</span>(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,m<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> s[<span class=\"number\">105</span>];cin&gt;&gt;s;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"built_in\">find</span>(s)&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"NEOJ-265-欸迪的字串\"><a href=\"#NEOJ-265-欸迪的字串\" class=\"headerlink\" title=\"NEOJ 265 欸迪的字串\"></a>NEOJ 265 欸迪的字串</h3><p><a href=\"https://neoj.sprout.tw/problem/265/\">題目連結</a><br><a href=\"https://neoj.sprout.tw/challenge/179036/\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>給你字串S和字串T，求出S在T中出現的位置</p>\n</blockquote>\n<p>這一題在<strong>隨機演算法</strong>也有出現過，當時是用Rolling Hash的方式透過扣掉Hash的方法比對字串是否相同（推一下公式就知道）。現在要用的是<strong>KMP演算法</strong>，很複雜不好想。</p>\n<p>比較一下隨機跟KMP的時間，下方為KMP，上方則是隨機算法，兩者時間差了將近1倍，雖然兩者都可以在O(|T|)時間內進行匹配，但是建立Rolling Hash的常數是比較大的！<br><img src=\"https://i.imgur.com/a7CPjyi.png\" alt=\"\"></p>\n<h4 id=\"程式碼-1\"><a href=\"#程式碼-1\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 500005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">KMP_match</span><span class=\"params\">(<span class=\"keyword\">char</span> *S,<span class=\"keyword\">int</span> *F,<span class=\"keyword\">char</span> *T)</span></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt; ans;            <span class=\"comment\">//回傳匹配相同地方</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">-1</span>;                 <span class=\"comment\">//紀錄短字串有多少被匹配</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;T[i];i++)&#123;      <span class=\"comment\">//每一迴圈都讓T[i]被匹配到</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p!=<span class=\"number\">-1</span> &amp;&amp; S[p+<span class=\"number\">1</span>]!=T[i])</span><br><span class=\"line\">            p = F[p];           <span class=\"comment\">//使T[i]一定可以被匹配到</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S[p+<span class=\"number\">1</span>] == T[i])</span><br><span class=\"line\">            p += <span class=\"number\">1</span>;             <span class=\"comment\">//T的第i個與S的p+1可以匹配</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!S[p+<span class=\"number\">1</span>])&#123;            <span class=\"comment\">//S[p]已經匹配完成</span></span><br><span class=\"line\">            ans.<span class=\"built_in\">push_back</span>(i-p); <span class=\"comment\">//回推匹配開頭</span></span><br><span class=\"line\">            p = F[p];           <span class=\"comment\">//繼續下一輪匹配</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//O(|S|)要配對的字串以及Fail Function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">KMP_build</span><span class=\"params\">(<span class=\"keyword\">char</span> *S,<span class=\"keyword\">int</span> *F)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = F[<span class=\"number\">0</span>] = <span class=\"number\">-1</span>;              <span class=\"comment\">//初始設定為-1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;S[i];i++)&#123;          <span class=\"comment\">//1到接下來字元</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p!=<span class=\"number\">-1</span> &amp;&amp; S[p+<span class=\"number\">1</span>]!=S[i])</span><br><span class=\"line\">            p = F[p];               <span class=\"comment\">//無法繼續配對，尋找更短字串</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S[p+<span class=\"number\">1</span>] == S[i])          <span class=\"comment\">//配對成功(如都沒有一樣的就-1)</span></span><br><span class=\"line\">            p += <span class=\"number\">1</span>;</span><br><span class=\"line\">        F[i] = p;                   <span class=\"comment\">//設定F[i]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> S[N],T[N];     <span class=\"comment\">//詢問短字串、長在串</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> F[N];           <span class=\"comment\">//失敗函數</span></span><br><span class=\"line\">    cin&gt;&gt;S&gt;&gt;T;</span><br><span class=\"line\">    <span class=\"built_in\">KMP_build</span>(S,F);</span><br><span class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt; ans = <span class=\"built_in\">KMP_match</span>(S,F,T);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ans.<span class=\"built_in\">size</span>()&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        cout&lt;&lt;ans[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,ans.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>)cout&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;ans[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"NEOJ-267-自動完成系統\"><a href=\"#NEOJ-267-自動完成系統\" class=\"headerlink\" title=\"NEOJ 267 自動完成系統\"></a>NEOJ 267 自動完成系統</h3><p><a href=\"https://neoj.sprout.tw/problem/267/\">題目連結</a><br><a href=\"https://neoj.sprout.tw/challenge/179148/\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br><a href=\"https://www.facebook.com/codingcompetitions/hacker-cup/2015/round-1/problems/B\">點這裡</a>有FB Hacker Cup的原題連結，簡單來說就是想像手機的自動填入系統，每加入一個字串會記錄到資料庫中，當資料庫裡面沒有相同前綴的字串時就輸出前綴長度。</p>\n</blockquote>\n<p>用字典樹Trie插入每一個字串，插入過程中返回從頭到開始new新的節點之間經過的節點樹，代表需要輸入多少個字元才能觸發自動完成系統。這一題是基礎的Trie應用。</p>\n<h4 id=\"程式碼-2\"><a href=\"#程式碼-2\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 1000005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> t,n;</span><br><span class=\"line\"><span class=\"keyword\">char</span> S[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ch</span><span class=\"params\">(<span class=\"keyword\">char</span> a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a-<span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Trie</span>&#123;</span></span><br><span class=\"line\">    Trie* c[<span class=\"number\">26</span>];</span><br><span class=\"line\">    <span class=\"built_in\">Trie</span>()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(c,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(c));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Trie *root = <span class=\"keyword\">new</span> <span class=\"built_in\">Trie</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">char</span> *S)</span></span>&#123;</span><br><span class=\"line\">    Trie *ptr = root;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> step = <span class=\"number\">0</span>,f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(*S)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f)step++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!ptr-&gt;c[<span class=\"built_in\">ch</span>(*S)])&#123;</span><br><span class=\"line\">            ptr-&gt;c[<span class=\"built_in\">ch</span>(*S)] = <span class=\"keyword\">new</span> <span class=\"built_in\">Trie</span>();</span><br><span class=\"line\">            f = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ptr = ptr-&gt;c[<span class=\"built_in\">ch</span>(*S)];</span><br><span class=\"line\">        S++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> step;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">(Trie *s)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">26</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s-&gt;c[i])&#123;</span><br><span class=\"line\">            <span class=\"built_in\">clear</span>(s-&gt;c[i]);</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> s-&gt;c[i];</span><br><span class=\"line\">            s-&gt;c[i] = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">        cin&gt;&gt;n;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> step = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            cin&gt;&gt;S;</span><br><span class=\"line\">            step +=<span class=\"built_in\">insert</span>(S);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;Case #&quot;</span>&lt;&lt;cnt&lt;&lt;<span class=\"string\">&quot;: &quot;</span>&lt;&lt;step&lt;&lt;endl;</span><br><span class=\"line\">        <span class=\"built_in\">clear</span>(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"NEOJ-264-欸迪的字串\"><a href=\"#NEOJ-264-欸迪的字串\" class=\"headerlink\" title=\"NEOJ 264 欸迪的字串\"></a>NEOJ 264 欸迪的字串</h3><p><a href=\"https://neoj.sprout.tw/problem/264/\">題目連結</a><br><a href=\"https://neoj.sprout.tw/challenge/179060/\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>給你字串S，求一個最短字串T的長度，滿足經由複製若干次後接起來會是字串S。</p>\n</blockquote>\n<p>這一題在一開始看到感覺好難，不過在慢慢理解 Z_Algorithm 之後，在講義中發現到這個問題也可以用這個演算法來解決！因為Z函數是滿足從i開始的最長前綴，因此當 $i$ 為 字串長度 $n$ 的因數的時候，只要 $i+Z[i+1]=n$ 成立，就必定可以用 $S[1:i]$ 組成字串 $S$ 。實作上要注意字串是0-base，i+1就相等於字串第i個位置，處理上要特別注意！</p>\n<h4 id=\"程式碼-3\"><a href=\"#程式碼-3\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 500005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Z_algo</span><span class=\"params\">(<span class=\"keyword\">char</span> *S,<span class=\"keyword\">int</span> *Z)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>,r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    Z[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;S[i];i++)&#123;</span><br><span class=\"line\">        Z[i] = <span class=\"built_in\">max</span>(<span class=\"number\">0</span>,<span class=\"built_in\">min</span>(Z[i-l],r-i));</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(S[Z[i]]&amp;&amp;S[Z[i]] == S[i+Z[i]])&#123;</span><br><span class=\"line\">            l = i;r = i+Z[i];</span><br><span class=\"line\">            Z[i]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> s[N];cin&gt;&gt;s;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> Z[N],n = <span class=\"built_in\">strlen</span>(s),ans = n;</span><br><span class=\"line\">    <span class=\"built_in\">Z_algo</span>(s,Z);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n%i==<span class=\"number\">0</span> &amp;&amp; i+Z[i]==n)&#123;</span><br><span class=\"line\">            ans = i;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ZJ-d518-文字抄寫-II\"><a href=\"#ZJ-d518-文字抄寫-II\" class=\"headerlink\" title=\"ZJ d518: 文字抄寫 II\"></a>ZJ d518: 文字抄寫 II</h3><p><a href=\"https://zerojudge.tw/ShowProblem?problemid=d518\">題目連結</a></p>\n<blockquote>\n<p>題目敘述<br>若這個字串之前已經出現過，則輸出的出現號碼，若沒有則輸出它將被編寫的號碼.</p>\n</blockquote>\n<p>裸題Trie，不過要注意每一次要重置，將所有的實體Delete掉。</p>\n<h4 id=\"程式碼-4\"><a href=\"#程式碼-4\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 110</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Trie</span>&#123;</span></span><br><span class=\"line\">    Trie* c[<span class=\"number\">26</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ind;</span><br><span class=\"line\">    <span class=\"built_in\">Trie</span>(): <span class=\"built_in\">ind</span>(<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(c,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(c));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Trie* root = <span class=\"keyword\">new</span> <span class=\"built_in\">Trie</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ch</span><span class=\"params\">(<span class=\"keyword\">char</span> temp)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp-<span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">(Trie *cur)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">26</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur-&gt;c[i])&#123;</span><br><span class=\"line\">            <span class=\"built_in\">clear</span>(cur-&gt;c[i]);</span><br><span class=\"line\">            <span class=\"keyword\">delete</span>[] cur-&gt;c[i];</span><br><span class=\"line\">            cur-&gt;c[i] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">char</span> *s,<span class=\"keyword\">int</span> num)</span></span>&#123;</span><br><span class=\"line\">    Trie *ptr = root;           <span class=\"comment\">//從根節點尋找</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(*s)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)])     <span class=\"comment\">//如果樹上無此字元則new</span></span><br><span class=\"line\">            ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)] = <span class=\"keyword\">new</span> <span class=\"built_in\">Trie</span>();</span><br><span class=\"line\">        ptr = ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)];   <span class=\"comment\">//繼續造訪Trie</span></span><br><span class=\"line\">        s += <span class=\"number\">1</span>;                 <span class=\"comment\">//字串下一個字元</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ptr-&gt;ind = num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">char</span> *s)</span></span>&#123;              <span class=\"comment\">//查找字串s</span></span><br><span class=\"line\">    Trie *ptr = root;           <span class=\"comment\">//根節點尋找</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(*s)&#123;                  <span class=\"comment\">//無此字串，回傳次數0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)])<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        ptr = ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)];</span><br><span class=\"line\">        s += <span class=\"number\">1</span>;                 <span class=\"comment\">//字串下一個字元</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ptr-&gt;ind;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n)!=EOF)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans,cur_id = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,n)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> s[N];<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,s);</span><br><span class=\"line\">            ans = <span class=\"built_in\">find</span>(s);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ans == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;New! %d\\n&quot;</span>,cur_id);</span><br><span class=\"line\">                <span class=\"built_in\">insert</span>(s,cur_id);</span><br><span class=\"line\">                cur_id += <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Old! %d\\n&quot;</span>,ans);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">clear</span>(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"TIOJ-1306-字串中的字串\"><a href=\"#TIOJ-1306-字串中的字串\" class=\"headerlink\" title=\"TIOJ 1306 字串中的字串\"></a>TIOJ 1306 字串中的字串</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1306\">題目連結</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/263572\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>裸字串匹配。對於每個詢問輸出 $S$ 在 $T$ 中出現過幾次。</p>\n</blockquote>\n<p>裸KMP字串匹配，統計出現次數。可以嘗試不要看資料自己寫一次，會更了解KMP算法！</p>\n<h4 id=\"程式碼-5\"><a href=\"#程式碼-5\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 10005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> t,n,F[N];;</span><br><span class=\"line\"><span class=\"keyword\">char</span> T[N],S[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">KMP_match</span><span class=\"params\">(<span class=\"keyword\">char</span> *S,<span class=\"keyword\">char</span> *T,<span class=\"keyword\">int</span> *F)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">-1</span>,ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;T[i];i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p!=<span class=\"number\">-1</span> &amp;&amp; S[p+<span class=\"number\">1</span>]!=T[i])</span><br><span class=\"line\">            p = F[p];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S[p+<span class=\"number\">1</span>] == T[i])</span><br><span class=\"line\">            p += <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!S[p+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">            ans += <span class=\"number\">1</span>;</span><br><span class=\"line\">            p = F[p];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">KMP_build</span><span class=\"params\">(<span class=\"keyword\">char</span> *S,<span class=\"keyword\">int</span> *F)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = F[<span class=\"number\">0</span>] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;S[i];i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p!=<span class=\"number\">-1</span> &amp;&amp; S[p+<span class=\"number\">1</span>]!=S[i])</span><br><span class=\"line\">            p = F[p];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S[p+<span class=\"number\">1</span>] == S[i])</span><br><span class=\"line\">            p += <span class=\"number\">1</span>;</span><br><span class=\"line\">        F[i] = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(F,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(F));</span><br><span class=\"line\">        cin&gt;&gt;S;</span><br><span class=\"line\">        <span class=\"built_in\">KMP_build</span>(S,F);</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"built_in\">KMP_match</span>(S,T,F)&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        cin&gt;&gt;T&gt;&gt;n;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"TIOJ-1321-好多回文-ndromePali\"><a href=\"#TIOJ-1321-好多回文-ndromePali\" class=\"headerlink\" title=\"TIOJ 1321 好多回文 ndromePali\"></a>TIOJ 1321 好多回文 ndromePali</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1321\">題目連結</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/263962\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>給一個長度 ≤ $10^6$ 的字串 A，問有幾種把該字串的某前綴搬到最後面的方法，使得最後的字串為回文。<br>(提示:可以用類似 Z 函數的概念計算出以某字元為中心的最長回文長度。)</p>\n</blockquote>\n<p>這一題搞得我快掛了QQQ。為什麼呢？看看以下照片就知道了：</p>\n<p><img src=\"https://i.imgur.com/i8Gx5Yo.png\" alt=\"\"></p>\n<p>根據上面的「提示」，要用類似Z函數的概念把以某點為中心的最長回文算出來。一個Naive裸的作法，把用 $O(n)$ 枚舉每一個點為分割點，把分割點前面的子字串接到後面，用 $O(n)$ 的時間看是否為一回文字串。如此一來時間複雜度為 $O(n^2)$ ，對這一題來說顯然是不可行的，因為字串長度達到 $10^6$！</p>\n<p>當我們用Manacher’s Algorithm $O(n)$ 的時間每一個字元的最大回文之後，就可以枚舉每一個可以作為分割點的地方，檢查回文的狀況。討論分割點在前半部分的情況下，也就是把短的（長度小於一半）前綴搬到後面的狀況。當分割的索引值為 $i$ ，必須保證 $s[0:i]$ 跟 $s[i:2i]$ 對稱，移到字串尾巴才能成為回文。除此之外，也必須滿足 $Z[mid+i] = mid-i$ 的情況，以就是剩下不是分割點兩側的字串必須是回文，把前綴接到後面之後才能對稱！</p>\n<p>實作上很多細節，我DEBUG超久最後才想到不能枚舉所有字元，會出事（就像上面的三色WA），只要枚舉以 $’.’$ 為分割點的情況（分割在字元上就不行），還有很多細節，WA很多次才會知道XD</p>\n<h4 id=\"程式碼-6\"><a href=\"#程式碼-6\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 1000005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,Z[<span class=\"number\">2</span>*N];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> ans[<span class=\"number\">2</span>*N];</span><br><span class=\"line\"><span class=\"keyword\">char</span> S[<span class=\"number\">2</span>*N],T[N];</span><br><span class=\"line\"><span class=\"comment\">//T原字串、S插入點字串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Longest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">strlen</span>(T);m = <span class=\"number\">2</span>*n+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(S,<span class=\"string\">&#x27;.&#x27;</span>,m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)S[<span class=\"number\">2</span>*i+<span class=\"number\">1</span>] = T[i];</span><br><span class=\"line\">    Z[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>,r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        Z[i] = <span class=\"built_in\">max</span>(<span class=\"built_in\">min</span>(Z[<span class=\"number\">2</span>*l-i],r-i),<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i-Z[i]&gt;=<span class=\"number\">0</span> &amp;&amp; i+Z[i] &lt; m &amp;&amp; S[i+Z[i]]==S[i-Z[i]])&#123;</span><br><span class=\"line\">            l = i;r = i+Z[i];</span><br><span class=\"line\">            Z[i]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;T;</span><br><span class=\"line\">    <span class=\"built_in\">Longest</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)Z[i]--;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(ans,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(ans));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (m<span class=\"number\">-1</span>)/<span class=\"number\">2</span>,i;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Z[mid] == mid)ans[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">2</span>;i&lt;mid;i+=<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Z[i] == i &amp;&amp; Z[mid+i] == mid-i)&#123;</span><br><span class=\"line\">            ans[(i/<span class=\"number\">2</span>)] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;i&lt;m;i+=<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Z[i] == m-i<span class=\"number\">-1</span> &amp;&amp; Z[i-mid] == i-mid)&#123;</span><br><span class=\"line\">            ans[(i/<span class=\"number\">2</span>)] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)<span class=\"keyword\">if</span>(ans[i])sum++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sum == <span class=\"number\">0</span>)cout&lt;&lt;<span class=\"string\">&quot;none&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        cout&lt;&lt;sum&lt;&lt;<span class=\"string\">&quot;:&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)<span class=\"keyword\">if</span>(ans[i])cout&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;i;</span><br><span class=\"line\">        cout&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ZJ-d978-最长回文字串\"><a href=\"#ZJ-d978-最长回文字串\" class=\"headerlink\" title=\"ZJ d978: 最长回文字串\"></a>ZJ d978: 最长回文字串</h3><p><a href=\"https://zerojudge.tw/ShowProblem?problemid=d978\">題目連結</a></p>\n<blockquote>\n<p>題目敘述<br>題目即題意，給你一個字串，求出最長的回文字串長度為何？</p>\n</blockquote>\n<p>一題LPS的裸題，用Manacher’s Algorithm可以將時間複雜度做到 $O(n)$！</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 500005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,Z[<span class=\"number\">2</span>*N],t;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> ans[<span class=\"number\">2</span>*N];</span><br><span class=\"line\"><span class=\"keyword\">char</span> S[<span class=\"number\">2</span>*N],T[N];</span><br><span class=\"line\"><span class=\"comment\">//T原字串、S插入點字串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Longest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">strlen</span>(T);m = <span class=\"number\">2</span>*n+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(S,<span class=\"string\">&#x27;.&#x27;</span>,m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)S[<span class=\"number\">2</span>*i+<span class=\"number\">1</span>] = T[i];</span><br><span class=\"line\">    Z[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>,r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        Z[i] = <span class=\"built_in\">max</span>(<span class=\"built_in\">min</span>(Z[<span class=\"number\">2</span>*l-i],r-i),<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i-Z[i]&gt;=<span class=\"number\">0</span> &amp;&amp; i+Z[i] &lt; m &amp;&amp; S[i+Z[i]]==S[i-Z[i]])&#123;</span><br><span class=\"line\">            l = i;r = i+Z[i];</span><br><span class=\"line\">            Z[i]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        cin&gt;&gt;T;</span><br><span class=\"line\">        <span class=\"built_in\">Longest</span>();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> z = (Z[i]<span class=\"number\">-1</span>);</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans,z);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"TIOJ-1725-Massacre-at-Camp-Happy\"><a href=\"#TIOJ-1725-Massacre-at-Camp-Happy\" class=\"headerlink\" title=\"TIOJ 1725 Massacre at Camp Happy\"></a>TIOJ 1725 Massacre at Camp Happy</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1725\">題目連結</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/264017\">Submission</a></p>\n<blockquote>\n<p>題目敘述：<br>定義字串 A 和 B「k-幾乎相同」代表把字串 A 的前 k 字元搬到最後面時，與 B 恰有一個字元相異。給你兩個長度 ≤ $10^6$ 的字串 A 和 B，求所有使 A 和 B「k-幾乎相同」成立的 k 值。</p>\n</blockquote>\n<p>這一題好特別，一樣要用 $O(n)$ 的時間求出答案，對於每一個操作將前k個字元搬到後面，只能用 $O(1)$ 算出來到底符不符合一字元相異的條件。<br>以兩個相等長度的字串 $A,B$ 為例，長度為 $l$，假設 $A=aabba,B = aacba$，兩者相差一個字元的情況下，必定會滿足$l = LCP(A,B)+LCP(rev(A),rev(B))+1$，其中rev函數表示reverse。</p>\n<p>我們要做的就是在 $O(1)$ 的時間內求出LCP，因為題目的字串 $A$ 要求不同的起始位置，因此我們假設一個非常特別的字串 $B@AA$ ，其中@為任意沒出現過的字元。只要計算這一個字串的Z函數，就表示了 $A$ 和 $B$ 的最長共同前綴，需要兩個A的原因是因為模擬不同的k-位移下情形。</p>\n<p><img src=\"https://i.imgur.com/5Ir8Hjt.png\" alt=\"\"></p>\n<div class=\"note success\">\n            <p><strong>實作小細節</strong><br>程式碼的第42行可以試著推推看逆序之後的尾巴的索引值為何。我是利用列出幾個數字之後推出來的，不過應該可以寫成比較嚴謹的數學證明！<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Z1[n+<span class=\"number\">1</span>+i]+Z2[<span class=\"number\">2</span>*n-i+<span class=\"number\">1</span>]+<span class=\"number\">1</span> == n</span><br></pre></td></tr></table></figure></p>\n          </div>\n<h4 id=\"時間複雜度\"><a href=\"#時間複雜度\" class=\"headerlink\" title=\"時間複雜度\"></a>時間複雜度</h4><p>$O(n)$ 建立z函數，$O(n)$ 枚舉每一個起始點，總時間為 $O(n)$。</p>\n<h4 id=\"程式碼-7\"><a href=\"#程式碼-7\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 1000005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,Z1[<span class=\"number\">3</span>*N],Z2[<span class=\"number\">3</span>*N];</span><br><span class=\"line\"><span class=\"keyword\">char</span> A[<span class=\"number\">3</span>*N],B[<span class=\"number\">3</span>*N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Z_algo</span><span class=\"params\">(<span class=\"keyword\">int</span> *z,<span class=\"keyword\">char</span> *S)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>,r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    z[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        z[i] = <span class=\"built_in\">max</span>(<span class=\"built_in\">min</span>(z[i-l],r-i),<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(S[i+z[i]] &amp;&amp; S[z[i]] == S[i+z[i]])&#123;</span><br><span class=\"line\">            l = i;r = i+z[i];</span><br><span class=\"line\">            z[i]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;A&gt;&gt;B;</span><br><span class=\"line\">    m = <span class=\"number\">3</span>*n+<span class=\"number\">1</span>;</span><br><span class=\"line\">    B[n] = <span class=\"string\">&#x27;@&#x27;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//正常序列求Z value</span></span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,n+<span class=\"number\">1</span>,<span class=\"number\">2</span>*n)B[i] = A[i-n<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">2</span>*n+<span class=\"number\">1</span>,<span class=\"number\">3</span>*n)B[i] = A[i<span class=\"number\">-2</span>*n<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"built_in\">Z_algo</span>(Z1,B);</span><br><span class=\"line\">    <span class=\"comment\">//逆序求Z value</span></span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(B,B+n);<span class=\"built_in\">reverse</span>(B+n+<span class=\"number\">1</span>,B+m);</span><br><span class=\"line\">    <span class=\"built_in\">Z_algo</span>(Z2,B);</span><br><span class=\"line\">    </span><br><span class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Z1[n+<span class=\"number\">1</span>+i]+Z2[<span class=\"number\">2</span>*n-i+<span class=\"number\">1</span>]+<span class=\"number\">1</span> == n)vec.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vec.<span class=\"built_in\">size</span>())&#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;TAK&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i:vec)cout&lt;&lt;i&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        cout&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> cout&lt;&lt;<span class=\"string\">&quot;NIE&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//[0,n-1][n,n][n+1,2n][2n+1,3n]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"TIOJ-1497-喝醉的宿主-The-drunk-host\"><a href=\"#TIOJ-1497-喝醉的宿主-The-drunk-host\" class=\"headerlink\" title=\"TIOJ 1497 喝醉的宿主 The drunk host\"></a>TIOJ 1497 喝醉的宿主 The drunk host</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1497\">題目連結</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/264189\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>裸後綴數組。</p>\n</blockquote>\n<p>後綴數組我看了好久（大概有4天吧），一直對著它發呆，不知道它的精髓到底在哪裡。。剛好又遇到開學，不能整天快樂寫題XD</p>\n<h4 id=\"倍增優化\"><a href=\"#倍增優化\" class=\"headerlink\" title=\"倍增優化\"></a>倍增優化</h4><p>對著螢幕發呆的日子終於結束了，直到我看了<a href=\"https://oi-wiki.org/string/sa/\">這一篇</a>（雖然說我前幾天也有看但看不懂，可能是消化的天數不夠多吧），尤其是裡面的一張圖，深刻說明了倍增的精髓。</p>\n<p>後綴數組求法就不多解釋（上面有），放幾個實作上的小細節。</p>\n<div class=\"note primary\">\n            <p><strong>實作小細節</strong><br>我們要求進行 $O(\\log n)$ 層的倍增，可以使用C++內建的log10()再用ceil去處理，但顯然有點慢，如果套用以下函數，它會回傳數字二進位之後最大的1前面總共有多少個0（前綴0的數量），與32相減（32是long long的關係）就是我們要的log的次數。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> lg = __builtin_clz(n)</span><br></pre></td></tr></table></figure><p>另外一個小小細節，就是在字串的後半部分，如果跟前面一樣倍增一個比較大的數字，有可能會超出範圍，這時候初始值就很重要了！初始設定rk[n] = -1，導致任何只要超出範圍的都會取到這個-1，表示只要後面沒有字串、如果前面都相同但長度比較長的字串比起來，較短的會排在比較前面的位置！</p>\n          </div>\n<p>這個算法是 $O(n\\log^2 n)$，TIOJ這一題可以過，不過到<a href=\"https://www.spoj.com/problems/SARRAY/\">SPOJ</a>就會被卡TLE</p>\n<blockquote>\n<p>$O(n^2 log(n))$ is expected to score about 20-30. (Naive sorting all suffixes)<br>$O(n log^2(n))$ is expected to score about 40. (OK for most programming contest problems)<br>$O(n log n)$ is expected to score about 60-70. (Use counting sort for small alphabet size)<br>$O(n)$ without tweaks is expected to score about 80-90.<br>$O(n)$ with tweaks is expected to score 100. (This is meant for fun only :)</p>\n</blockquote>\n<p>越後面就越毒瘤XD</p>\n<blockquote>\n<p>test 1 - AC (score=0.000000, sig=0, time=0.009123, mem=5372)<br>test 2 - AC (score=0.000000, sig=0, time=0.006427, mem=5508)<br>test 3 - AC (score=0.000000, sig=0, time=0.014975, mem=5468)<br>test 4 - AC (score=0.000000, sig=0, time=0.031332, mem=5536)<br>test 5 - AC (score=0.000000, sig=0, time=0.026948, mem=5456)<br>test 6 - AC (score=0.000000, sig=0, time=0.023113, mem=5396)<br>test 7 - TLE (score=0.000000, sig=0, time=0.210000, mem=7340)<br>test 8 - TLE (score=0.000000, sig=0, time=0.210000, mem=7152)<br>test 9 - AC (score=0.000000, sig=0, time=0.170094, mem=7284)<br>test 10 - AC (score=0.000000, sig=0, time=0.140098, mem=7340)</p>\n</blockquote>\n<h4 id=\"程式碼-8\"><a href=\"#程式碼-8\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,sa[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y,id;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==b.x &amp;&amp; y==b.y)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//第一位、第二位比較以及後綴編號</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pt a,pt b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.x != b.x)<span class=\"keyword\">return</span> a.x &lt; b.x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.y &lt; b.y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">suffix_array</span><span class=\"params\">(string S)</span></span>&#123;</span><br><span class=\"line\">    n = S.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lg = <span class=\"number\">32</span>-__builtin_clz(n);</span><br><span class=\"line\">    <span class=\"comment\">//回傳第一個1之前0的個數（二進位）</span></span><br><span class=\"line\">    <span class=\"function\">vector&lt;pt&gt; <span class=\"title\">cur</span><span class=\"params\">(n,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">rk</span><span class=\"params\">(n+<span class=\"number\">1</span>,<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cur[i] = &#123;S[i],<span class=\"number\">0</span>,i&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(p,<span class=\"number\">0</span>,lg)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = <span class=\"number\">1</span> &lt;&lt; p;         <span class=\"comment\">//現在倍增的大小</span></span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(cur),cmp);</span><br><span class=\"line\">        rk[cur[<span class=\"number\">0</span>].id] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            rk[cur[i].id] = (cur[i<span class=\"number\">-1</span>]==cur[i] ? rk[cur[i<span class=\"number\">-1</span>].id]:i);</span><br><span class=\"line\">            <span class=\"comment\">//設定rk，與前一個相同則設定跟前一個一樣</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            cur[i] = &#123;rk[i],rk[<span class=\"built_in\">min</span>(n,i+k)],i&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(cur),cmp);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)sa[i] = cur[i].id;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    string S;<span class=\"built_in\">getline</span>(cin,S);</span><br><span class=\"line\">    <span class=\"built_in\">suffix_array</span>(S);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cout&lt;&lt;sa[i]&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Radix-Sort-優化\"><a href=\"#Radix-Sort-優化\" class=\"headerlink\" title=\"Radix Sort 優化\"></a>Radix Sort 優化</h4><p><a href=\"https://tioj.ck.tp.edu.tw/submissions/264407\">Submission</a></p>\n<p>比較一下 $O(n\\log^2 n)$ 以及 $O(n\\log n)$ 的時間，兩者花了近兩倍的時間差距。看了一下這一題的TopCoder，竟然可以做到十位數毫秒！如果要繼續優化成線性 $O(n)$ 的複雜度，就會使用到 DC3 的演算法，雖然好像很複雜不實用QQ</p>\n<p><img src=\"https://i.imgur.com/tQph2uA.png\" alt=\"\"></p>\n<p><img src=\"https://i.imgur.com/1wcKazZ.png\" alt=\"\"></p>\n<p><img src=\"https://i.imgur.com/i4WSvw8.png\" alt=\"\"></p>\n<p>使用 $O(n\\log^2n)$ 的算法會TLE第八、九筆測資，不過使用基數排序就可以AC了！</p>\n<blockquote>\n<p>test 1 - AC (score=0.000000, sig=0, time=0.006565, mem=6048)<br>test 2 - AC (score=0.000000, sig=0, time=0.006594, mem=6300)<br>test 3 - AC (score=0.000000, sig=0, time=0.012431, mem=7860)<br>test 4 - AC (score=0.000000, sig=0, time=0.012267, mem=7208)<br>test 5 - AC (score=0.000000, sig=0, time=0.011158, mem=6804)<br>test 6 - AC (score=0.000000, sig=0, time=0.012057, mem=7892)<br>test 7 - AC (score=0.000000, sig=0, time=0.140876, mem=17720)<br>test 8 - AC (score=0.000000, sig=0, time=0.077631, mem=21952)<br>test 9 - AC (score=0.000000, sig=0, time=0.074905, mem=21340)<br>test 10 - AC (score=0.000000, sig=0, time=0.076732, mem=30160)</p>\n</blockquote>\n<h4 id=\"程式碼-9\"><a href=\"#程式碼-9\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,sa[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y,id;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==b.x &amp;&amp; y==b.y)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//第一位、第二位比較以及後綴編號</span></span><br><span class=\"line\">vector&lt;pt&gt; temp,box[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    temp.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)box[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pt a,pt b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.x == b.x)<span class=\"keyword\">return</span> a.y &lt; b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x &lt; b.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">raddix_sort</span><span class=\"params\">(vector&lt;pt&gt; &amp;cur)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">init</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur[i].y == <span class=\"number\">-1</span>)temp.<span class=\"built_in\">push_back</span>(cur[i]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> box[cur[i].y].<span class=\"built_in\">push_back</span>(cur[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> j : box[i])temp.<span class=\"built_in\">push_back</span>(j);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)box[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)</span><br><span class=\"line\">        box[temp[i].x].<span class=\"built_in\">push_back</span>(temp[i]);</span><br><span class=\"line\">    cur.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> j : box[i])cur.<span class=\"built_in\">push_back</span>(j);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">suffix_array</span><span class=\"params\">(string S)</span></span>&#123;</span><br><span class=\"line\">    n = S.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lg = <span class=\"number\">32</span>-__builtin_clz(n);<span class=\"comment\">//回傳第一個1之前0的個數（二進位）</span></span><br><span class=\"line\">    <span class=\"function\">vector&lt;pt&gt; <span class=\"title\">cur</span><span class=\"params\">(n,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">rk</span><span class=\"params\">(n+<span class=\"number\">1</span>,<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>) cur[i] = &#123;S[i],<span class=\"number\">0</span>,i&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(cur),cmp);</span><br><span class=\"line\">    rk[cur[<span class=\"number\">0</span>].id] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,n<span class=\"number\">-1</span>)</span><br><span class=\"line\">        rk[cur[i].id] = (cur[i]==cur[i<span class=\"number\">-1</span>])?rk[cur[i<span class=\"number\">-1</span>].id]:i;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cur[i] = &#123;rk[i],<span class=\"number\">0</span>,i&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(p,<span class=\"number\">0</span>,lg)&#123;                <span class=\"comment\">//進行O(lgn)次</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = <span class=\"number\">1</span> &lt;&lt; p;         <span class=\"comment\">//現在倍增的大小</span></span><br><span class=\"line\">        <span class=\"built_in\">raddix_sort</span>(cur);</span><br><span class=\"line\">        rk[cur[<span class=\"number\">0</span>].id] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,n<span class=\"number\">-1</span>)            <span class=\"comment\">//設定rk，與前一個相同則設定跟前一個一樣</span></span><br><span class=\"line\">            rk[cur[i].id] = (cur[i<span class=\"number\">-1</span>]==cur[i] ? rk[cur[i<span class=\"number\">-1</span>].id]:i);</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)            <span class=\"comment\">//倍增pair的second</span></span><br><span class=\"line\">            cur[i] = &#123;rk[i],rk[<span class=\"built_in\">min</span>(n,i+k)],i&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">raddix_sort</span>(cur);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)sa[i] = cur[i].id;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    string S;<span class=\"built_in\">getline</span>(cin,S);</span><br><span class=\"line\">    <span class=\"built_in\">suffix_array</span>(S);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cout&lt;&lt;sa[i]&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"TIOJ-1515-Problem-E-似曾相識\"><a href=\"#TIOJ-1515-Problem-E-似曾相識\" class=\"headerlink\" title=\"TIOJ 1515 Problem E. 似曾相識\"></a>TIOJ 1515 Problem E. 似曾相識</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1515\">題目連結</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/264483\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>裸後綴數組 LCP。</p>\n</blockquote>\n<p>這題我想好久，一直想不通轉移的條件以及k-1的原因，不過最後還是想通了！這一題只要把 $lcp$ 求出來之後，找最大值就是題目要求的答案。</p>\n<h4 id=\"程式碼-10\"><a href=\"#程式碼-10\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 200005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,sa[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y,id;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==b.x &amp;&amp; y==b.y)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//第一位、第二位比較以及後綴編號</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pt a,pt b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.x != b.x)<span class=\"keyword\">return</span> a.x &lt; b.x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.y &lt; b.y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">suffix_array</span><span class=\"params\">(string S)</span></span>&#123;</span><br><span class=\"line\">    n = S.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lg = <span class=\"number\">32</span>-__builtin_clz(n);</span><br><span class=\"line\">    <span class=\"comment\">//回傳第一個1之前0的個數（二進位）</span></span><br><span class=\"line\">    <span class=\"function\">vector&lt;pt&gt; <span class=\"title\">cur</span><span class=\"params\">(n,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">rk</span><span class=\"params\">(n+<span class=\"number\">1</span>,<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cur[i] = &#123;S[i],<span class=\"number\">0</span>,i&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(p,<span class=\"number\">0</span>,lg)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = <span class=\"number\">1</span> &lt;&lt; p;         <span class=\"comment\">//現在倍增的大小</span></span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(cur),cmp);</span><br><span class=\"line\">        rk[cur[<span class=\"number\">0</span>].id] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,n<span class=\"number\">-1</span>)</span><br><span class=\"line\">            rk[cur[i].id] = (cur[i<span class=\"number\">-1</span>]==cur[i] ? rk[cur[i<span class=\"number\">-1</span>].id]:i);</span><br><span class=\"line\">            <span class=\"comment\">//設定rk，與前一個相同則設定跟前一個一樣</span></span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            cur[i] = &#123;rk[i],rk[<span class=\"built_in\">min</span>(n,i+k)],i&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(cur),cmp);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)sa[i] = cur[i].id;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">LCP</span><span class=\"params\">(string s)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">rk</span><span class=\"params\">(n,<span class=\"number\">0</span>)</span>,<span class=\"title\">lcp</span><span class=\"params\">(n,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)rk[sa[i]] = i;      <span class=\"comment\">//利用sa反函數得到rk</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k)k--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rk[i] == n<span class=\"number\">-1</span>)<span class=\"keyword\">continue</span>;   <span class=\"comment\">//rk[n-1]未定義</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = sa[rk[i]+<span class=\"number\">1</span>];        <span class=\"comment\">//下一名後綴從何開始</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i+k&lt;n &amp;&amp; j+k&lt;n &amp;&amp; s[i+k] == s[j+k])k++;</span><br><span class=\"line\">        lcp[rk[i]] = k;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lcp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n;cin.<span class=\"built_in\">ignore</span>();</span><br><span class=\"line\">    string S;<span class=\"built_in\">getline</span>(cin,S);</span><br><span class=\"line\">    <span class=\"built_in\">suffix_array</span>(S);</span><br><span class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt; lcp = <span class=\"built_in\">LCP</span>(S);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)ans = <span class=\"built_in\">max</span>(lcp[i],ans);</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><p>字串演算法跟最短路徑、計算幾何比起來，數學推導成分就多了很多，有許多的遞迴概念，例如失敗函數以及z函數的概念，也有很多是要理解在不同條件下做什麼事，以及其他優化處理。最初的是字典樹Trie，就是一些資料結構的運用；接下來的KMP、Z Algorithm以及LPS就很吃觀念，追蹤整個程式的過程。最後是後綴數組，在這邊卡了超久，遲遲無法理解倍增的概念、以及LCP的作法。可能這就是頓悟吧，每天看了同篇解說很久之後，總有一天會突然頓悟，想到演算法的精髓！</p>\n","site":{"data":{}},"length":19575,"excerpt":"<h2 id=\"題目目錄\"><a href=\"#題目目錄\" class=\"headerlink\" title=\"題目目錄\"></a>題目目錄</h2><ul>\n<li>NEOJ 266 溫力的故事</li>\n<li>NEOJ 265 欸迪的字串</li>\n<li>NEOJ 267 自動完成系統</li>\n<li>NEOJ 264 欸迪的字串</li>\n<li>ZJ d518: 文字抄寫 II</li>\n<li>TIOJ 1306 字串中的字串</li>\n<li>TIOJ 1321 好多回文 ndromePali</li>\n<li>ZJ d978: 最长回文字串</li>\n<li>TIOJ 1725 Massacre at Camp Happy</li>\n<li>TIOJ 1497 喝醉的宿主 The drunk host</li>\n<li>TIOJ 1515 Problem E. 似曾相識","more":"</li>\n</ul>\n<h3 id=\"NEOJ-266-溫力的故事\"><a href=\"#NEOJ-266-溫力的故事\" class=\"headerlink\" title=\"NEOJ 266 溫力的故事\"></a>NEOJ 266 溫力的故事</h3><p><a href=\"https://neoj.sprout.tw/problem/266/\">題目連結</a><br><a href=\"https://neoj.sprout.tw/challenge/179031/\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>給你n個字串m筆詢問一個字串，對每一筆詢問輸出詢問在n個字串中出現的次數。</p>\n</blockquote>\n<p>這一題在<strong>隨機算法</strong>做過，今天用字典樹Trie做一次。在隨機算法中，透過Rolling Hash的公式，對每一個字串生成一個值，利用這個值查詢出現的次數。如果我們用Trie的話，則是建立一棵指標樹，透過走法這一棵字典樹得知詢問字串出現的次數！</p>\n<h4 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 2000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Trie</span>&#123;</span>        <span class=\"comment\">//利用指標建立一棵樹</span></span><br><span class=\"line\">    Trie* c[<span class=\"number\">26</span>];    <span class=\"comment\">//對應a-z每一條邊</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt;        <span class=\"comment\">//字串出現次數</span></span><br><span class=\"line\">    <span class=\"built_in\">Trie</span>(): <span class=\"built_in\">cnt</span>(<span class=\"number\">0</span>)&#123; <span class=\"comment\">//初始設定</span></span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(c,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(c));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Trie* root = <span class=\"keyword\">new</span> <span class=\"built_in\">Trie</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ch</span><span class=\"params\">(<span class=\"keyword\">char</span> temp)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp-<span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">char</span> *s)</span></span>&#123;</span><br><span class=\"line\">    Trie *ptr = root;           <span class=\"comment\">//從根節點尋找</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(*s)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)])     <span class=\"comment\">//如果樹上無此字元則new</span></span><br><span class=\"line\">            ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)] = <span class=\"keyword\">new</span> <span class=\"built_in\">Trie</span>();</span><br><span class=\"line\">        ptr = ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)];   <span class=\"comment\">//繼續造訪Trie</span></span><br><span class=\"line\">        s += <span class=\"number\">1</span>;                 <span class=\"comment\">//字串下一個字元</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ptr-&gt;cnt += <span class=\"number\">1</span>;              <span class=\"comment\">//字串出現次數(字串對應唯一葉節點)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">char</span> *s)</span></span>&#123;              <span class=\"comment\">//查找字串s</span></span><br><span class=\"line\">    Trie *ptr = root;           <span class=\"comment\">//根節點尋找</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(*s)&#123;                  <span class=\"comment\">//無此字串，回傳次數0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)])<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        ptr = ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)];</span><br><span class=\"line\">        s += <span class=\"number\">1</span>;                 <span class=\"comment\">//字串下一個字元</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ptr-&gt;cnt;            <span class=\"comment\">//回傳字串出現次數</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> s[<span class=\"number\">105</span>];cin&gt;&gt;s;</span><br><span class=\"line\">        <span class=\"built_in\">insert</span>(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,m<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> s[<span class=\"number\">105</span>];cin&gt;&gt;s;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"built_in\">find</span>(s)&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"NEOJ-265-欸迪的字串\"><a href=\"#NEOJ-265-欸迪的字串\" class=\"headerlink\" title=\"NEOJ 265 欸迪的字串\"></a>NEOJ 265 欸迪的字串</h3><p><a href=\"https://neoj.sprout.tw/problem/265/\">題目連結</a><br><a href=\"https://neoj.sprout.tw/challenge/179036/\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>給你字串S和字串T，求出S在T中出現的位置</p>\n</blockquote>\n<p>這一題在<strong>隨機演算法</strong>也有出現過，當時是用Rolling Hash的方式透過扣掉Hash的方法比對字串是否相同（推一下公式就知道）。現在要用的是<strong>KMP演算法</strong>，很複雜不好想。</p>\n<p>比較一下隨機跟KMP的時間，下方為KMP，上方則是隨機算法，兩者時間差了將近1倍，雖然兩者都可以在O(|T|)時間內進行匹配，但是建立Rolling Hash的常數是比較大的！<br><img src=\"https://i.imgur.com/a7CPjyi.png\" alt=\"\"></p>\n<h4 id=\"程式碼-1\"><a href=\"#程式碼-1\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 500005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">KMP_match</span><span class=\"params\">(<span class=\"keyword\">char</span> *S,<span class=\"keyword\">int</span> *F,<span class=\"keyword\">char</span> *T)</span></span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt; ans;            <span class=\"comment\">//回傳匹配相同地方</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">-1</span>;                 <span class=\"comment\">//紀錄短字串有多少被匹配</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;T[i];i++)&#123;      <span class=\"comment\">//每一迴圈都讓T[i]被匹配到</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p!=<span class=\"number\">-1</span> &amp;&amp; S[p+<span class=\"number\">1</span>]!=T[i])</span><br><span class=\"line\">            p = F[p];           <span class=\"comment\">//使T[i]一定可以被匹配到</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S[p+<span class=\"number\">1</span>] == T[i])</span><br><span class=\"line\">            p += <span class=\"number\">1</span>;             <span class=\"comment\">//T的第i個與S的p+1可以匹配</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!S[p+<span class=\"number\">1</span>])&#123;            <span class=\"comment\">//S[p]已經匹配完成</span></span><br><span class=\"line\">            ans.<span class=\"built_in\">push_back</span>(i-p); <span class=\"comment\">//回推匹配開頭</span></span><br><span class=\"line\">            p = F[p];           <span class=\"comment\">//繼續下一輪匹配</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//O(|S|)要配對的字串以及Fail Function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">KMP_build</span><span class=\"params\">(<span class=\"keyword\">char</span> *S,<span class=\"keyword\">int</span> *F)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = F[<span class=\"number\">0</span>] = <span class=\"number\">-1</span>;              <span class=\"comment\">//初始設定為-1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;S[i];i++)&#123;          <span class=\"comment\">//1到接下來字元</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p!=<span class=\"number\">-1</span> &amp;&amp; S[p+<span class=\"number\">1</span>]!=S[i])</span><br><span class=\"line\">            p = F[p];               <span class=\"comment\">//無法繼續配對，尋找更短字串</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S[p+<span class=\"number\">1</span>] == S[i])          <span class=\"comment\">//配對成功(如都沒有一樣的就-1)</span></span><br><span class=\"line\">            p += <span class=\"number\">1</span>;</span><br><span class=\"line\">        F[i] = p;                   <span class=\"comment\">//設定F[i]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> S[N],T[N];     <span class=\"comment\">//詢問短字串、長在串</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> F[N];           <span class=\"comment\">//失敗函數</span></span><br><span class=\"line\">    cin&gt;&gt;S&gt;&gt;T;</span><br><span class=\"line\">    <span class=\"built_in\">KMP_build</span>(S,F);</span><br><span class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt; ans = <span class=\"built_in\">KMP_match</span>(S,F,T);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ans.<span class=\"built_in\">size</span>()&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        cout&lt;&lt;ans[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,ans.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>)cout&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;ans[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"NEOJ-267-自動完成系統\"><a href=\"#NEOJ-267-自動完成系統\" class=\"headerlink\" title=\"NEOJ 267 自動完成系統\"></a>NEOJ 267 自動完成系統</h3><p><a href=\"https://neoj.sprout.tw/problem/267/\">題目連結</a><br><a href=\"https://neoj.sprout.tw/challenge/179148/\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br><a href=\"https://www.facebook.com/codingcompetitions/hacker-cup/2015/round-1/problems/B\">點這裡</a>有FB Hacker Cup的原題連結，簡單來說就是想像手機的自動填入系統，每加入一個字串會記錄到資料庫中，當資料庫裡面沒有相同前綴的字串時就輸出前綴長度。</p>\n</blockquote>\n<p>用字典樹Trie插入每一個字串，插入過程中返回從頭到開始new新的節點之間經過的節點樹，代表需要輸入多少個字元才能觸發自動完成系統。這一題是基礎的Trie應用。</p>\n<h4 id=\"程式碼-2\"><a href=\"#程式碼-2\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 1000005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> t,n;</span><br><span class=\"line\"><span class=\"keyword\">char</span> S[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ch</span><span class=\"params\">(<span class=\"keyword\">char</span> a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a-<span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Trie</span>&#123;</span></span><br><span class=\"line\">    Trie* c[<span class=\"number\">26</span>];</span><br><span class=\"line\">    <span class=\"built_in\">Trie</span>()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(c,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(c));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Trie *root = <span class=\"keyword\">new</span> <span class=\"built_in\">Trie</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">char</span> *S)</span></span>&#123;</span><br><span class=\"line\">    Trie *ptr = root;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> step = <span class=\"number\">0</span>,f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(*S)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f)step++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!ptr-&gt;c[<span class=\"built_in\">ch</span>(*S)])&#123;</span><br><span class=\"line\">            ptr-&gt;c[<span class=\"built_in\">ch</span>(*S)] = <span class=\"keyword\">new</span> <span class=\"built_in\">Trie</span>();</span><br><span class=\"line\">            f = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ptr = ptr-&gt;c[<span class=\"built_in\">ch</span>(*S)];</span><br><span class=\"line\">        S++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> step;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">(Trie *s)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">26</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s-&gt;c[i])&#123;</span><br><span class=\"line\">            <span class=\"built_in\">clear</span>(s-&gt;c[i]);</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> s-&gt;c[i];</span><br><span class=\"line\">            s-&gt;c[i] = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">        cin&gt;&gt;n;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> step = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            cin&gt;&gt;S;</span><br><span class=\"line\">            step +=<span class=\"built_in\">insert</span>(S);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;Case #&quot;</span>&lt;&lt;cnt&lt;&lt;<span class=\"string\">&quot;: &quot;</span>&lt;&lt;step&lt;&lt;endl;</span><br><span class=\"line\">        <span class=\"built_in\">clear</span>(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"NEOJ-264-欸迪的字串\"><a href=\"#NEOJ-264-欸迪的字串\" class=\"headerlink\" title=\"NEOJ 264 欸迪的字串\"></a>NEOJ 264 欸迪的字串</h3><p><a href=\"https://neoj.sprout.tw/problem/264/\">題目連結</a><br><a href=\"https://neoj.sprout.tw/challenge/179060/\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>給你字串S，求一個最短字串T的長度，滿足經由複製若干次後接起來會是字串S。</p>\n</blockquote>\n<p>這一題在一開始看到感覺好難，不過在慢慢理解 Z_Algorithm 之後，在講義中發現到這個問題也可以用這個演算法來解決！因為Z函數是滿足從i開始的最長前綴，因此當 $i$ 為 字串長度 $n$ 的因數的時候，只要 $i+Z[i+1]=n$ 成立，就必定可以用 $S[1:i]$ 組成字串 $S$ 。實作上要注意字串是0-base，i+1就相等於字串第i個位置，處理上要特別注意！</p>\n<h4 id=\"程式碼-3\"><a href=\"#程式碼-3\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 500005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Z_algo</span><span class=\"params\">(<span class=\"keyword\">char</span> *S,<span class=\"keyword\">int</span> *Z)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>,r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    Z[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;S[i];i++)&#123;</span><br><span class=\"line\">        Z[i] = <span class=\"built_in\">max</span>(<span class=\"number\">0</span>,<span class=\"built_in\">min</span>(Z[i-l],r-i));</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(S[Z[i]]&amp;&amp;S[Z[i]] == S[i+Z[i]])&#123;</span><br><span class=\"line\">            l = i;r = i+Z[i];</span><br><span class=\"line\">            Z[i]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> s[N];cin&gt;&gt;s;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> Z[N],n = <span class=\"built_in\">strlen</span>(s),ans = n;</span><br><span class=\"line\">    <span class=\"built_in\">Z_algo</span>(s,Z);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n%i==<span class=\"number\">0</span> &amp;&amp; i+Z[i]==n)&#123;</span><br><span class=\"line\">            ans = i;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ZJ-d518-文字抄寫-II\"><a href=\"#ZJ-d518-文字抄寫-II\" class=\"headerlink\" title=\"ZJ d518: 文字抄寫 II\"></a>ZJ d518: 文字抄寫 II</h3><p><a href=\"https://zerojudge.tw/ShowProblem?problemid=d518\">題目連結</a></p>\n<blockquote>\n<p>題目敘述<br>若這個字串之前已經出現過，則輸出的出現號碼，若沒有則輸出它將被編寫的號碼.</p>\n</blockquote>\n<p>裸題Trie，不過要注意每一次要重置，將所有的實體Delete掉。</p>\n<h4 id=\"程式碼-4\"><a href=\"#程式碼-4\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 110</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0),cout.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Trie</span>&#123;</span></span><br><span class=\"line\">    Trie* c[<span class=\"number\">26</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ind;</span><br><span class=\"line\">    <span class=\"built_in\">Trie</span>(): <span class=\"built_in\">ind</span>(<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(c,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(c));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Trie* root = <span class=\"keyword\">new</span> <span class=\"built_in\">Trie</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ch</span><span class=\"params\">(<span class=\"keyword\">char</span> temp)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp-<span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">(Trie *cur)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">26</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur-&gt;c[i])&#123;</span><br><span class=\"line\">            <span class=\"built_in\">clear</span>(cur-&gt;c[i]);</span><br><span class=\"line\">            <span class=\"keyword\">delete</span>[] cur-&gt;c[i];</span><br><span class=\"line\">            cur-&gt;c[i] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">char</span> *s,<span class=\"keyword\">int</span> num)</span></span>&#123;</span><br><span class=\"line\">    Trie *ptr = root;           <span class=\"comment\">//從根節點尋找</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(*s)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)])     <span class=\"comment\">//如果樹上無此字元則new</span></span><br><span class=\"line\">            ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)] = <span class=\"keyword\">new</span> <span class=\"built_in\">Trie</span>();</span><br><span class=\"line\">        ptr = ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)];   <span class=\"comment\">//繼續造訪Trie</span></span><br><span class=\"line\">        s += <span class=\"number\">1</span>;                 <span class=\"comment\">//字串下一個字元</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ptr-&gt;ind = num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">char</span> *s)</span></span>&#123;              <span class=\"comment\">//查找字串s</span></span><br><span class=\"line\">    Trie *ptr = root;           <span class=\"comment\">//根節點尋找</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(*s)&#123;                  <span class=\"comment\">//無此字串，回傳次數0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)])<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        ptr = ptr-&gt;c[<span class=\"built_in\">ch</span>(*s)];</span><br><span class=\"line\">        s += <span class=\"number\">1</span>;                 <span class=\"comment\">//字串下一個字元</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ptr-&gt;ind;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n)!=EOF)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans,cur_id = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,n)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> s[N];<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,s);</span><br><span class=\"line\">            ans = <span class=\"built_in\">find</span>(s);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ans == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;New! %d\\n&quot;</span>,cur_id);</span><br><span class=\"line\">                <span class=\"built_in\">insert</span>(s,cur_id);</span><br><span class=\"line\">                cur_id += <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Old! %d\\n&quot;</span>,ans);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">clear</span>(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"TIOJ-1306-字串中的字串\"><a href=\"#TIOJ-1306-字串中的字串\" class=\"headerlink\" title=\"TIOJ 1306 字串中的字串\"></a>TIOJ 1306 字串中的字串</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1306\">題目連結</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/263572\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>裸字串匹配。對於每個詢問輸出 $S$ 在 $T$ 中出現過幾次。</p>\n</blockquote>\n<p>裸KMP字串匹配，統計出現次數。可以嘗試不要看資料自己寫一次，會更了解KMP算法！</p>\n<h4 id=\"程式碼-5\"><a href=\"#程式碼-5\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 10005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> t,n,F[N];;</span><br><span class=\"line\"><span class=\"keyword\">char</span> T[N],S[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">KMP_match</span><span class=\"params\">(<span class=\"keyword\">char</span> *S,<span class=\"keyword\">char</span> *T,<span class=\"keyword\">int</span> *F)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">-1</span>,ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;T[i];i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p!=<span class=\"number\">-1</span> &amp;&amp; S[p+<span class=\"number\">1</span>]!=T[i])</span><br><span class=\"line\">            p = F[p];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S[p+<span class=\"number\">1</span>] == T[i])</span><br><span class=\"line\">            p += <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!S[p+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">            ans += <span class=\"number\">1</span>;</span><br><span class=\"line\">            p = F[p];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">KMP_build</span><span class=\"params\">(<span class=\"keyword\">char</span> *S,<span class=\"keyword\">int</span> *F)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = F[<span class=\"number\">0</span>] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;S[i];i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p!=<span class=\"number\">-1</span> &amp;&amp; S[p+<span class=\"number\">1</span>]!=S[i])</span><br><span class=\"line\">            p = F[p];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S[p+<span class=\"number\">1</span>] == S[i])</span><br><span class=\"line\">            p += <span class=\"number\">1</span>;</span><br><span class=\"line\">        F[i] = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(F,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(F));</span><br><span class=\"line\">        cin&gt;&gt;S;</span><br><span class=\"line\">        <span class=\"built_in\">KMP_build</span>(S,F);</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"built_in\">KMP_match</span>(S,T,F)&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        cin&gt;&gt;T&gt;&gt;n;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"TIOJ-1321-好多回文-ndromePali\"><a href=\"#TIOJ-1321-好多回文-ndromePali\" class=\"headerlink\" title=\"TIOJ 1321 好多回文 ndromePali\"></a>TIOJ 1321 好多回文 ndromePali</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1321\">題目連結</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/263962\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>給一個長度 ≤ $10^6$ 的字串 A，問有幾種把該字串的某前綴搬到最後面的方法，使得最後的字串為回文。<br>(提示:可以用類似 Z 函數的概念計算出以某字元為中心的最長回文長度。)</p>\n</blockquote>\n<p>這一題搞得我快掛了QQQ。為什麼呢？看看以下照片就知道了：</p>\n<p><img src=\"https://i.imgur.com/i8Gx5Yo.png\" alt=\"\"></p>\n<p>根據上面的「提示」，要用類似Z函數的概念把以某點為中心的最長回文算出來。一個Naive裸的作法，把用 $O(n)$ 枚舉每一個點為分割點，把分割點前面的子字串接到後面，用 $O(n)$ 的時間看是否為一回文字串。如此一來時間複雜度為 $O(n^2)$ ，對這一題來說顯然是不可行的，因為字串長度達到 $10^6$！</p>\n<p>當我們用Manacher’s Algorithm $O(n)$ 的時間每一個字元的最大回文之後，就可以枚舉每一個可以作為分割點的地方，檢查回文的狀況。討論分割點在前半部分的情況下，也就是把短的（長度小於一半）前綴搬到後面的狀況。當分割的索引值為 $i$ ，必須保證 $s[0:i]$ 跟 $s[i:2i]$ 對稱，移到字串尾巴才能成為回文。除此之外，也必須滿足 $Z[mid+i] = mid-i$ 的情況，以就是剩下不是分割點兩側的字串必須是回文，把前綴接到後面之後才能對稱！</p>\n<p>實作上很多細節，我DEBUG超久最後才想到不能枚舉所有字元，會出事（就像上面的三色WA），只要枚舉以 $’.’$ 為分割點的情況（分割在字元上就不行），還有很多細節，WA很多次才會知道XD</p>\n<h4 id=\"程式碼-6\"><a href=\"#程式碼-6\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 1000005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,Z[<span class=\"number\">2</span>*N];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> ans[<span class=\"number\">2</span>*N];</span><br><span class=\"line\"><span class=\"keyword\">char</span> S[<span class=\"number\">2</span>*N],T[N];</span><br><span class=\"line\"><span class=\"comment\">//T原字串、S插入點字串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Longest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">strlen</span>(T);m = <span class=\"number\">2</span>*n+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(S,<span class=\"string\">&#x27;.&#x27;</span>,m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)S[<span class=\"number\">2</span>*i+<span class=\"number\">1</span>] = T[i];</span><br><span class=\"line\">    Z[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>,r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        Z[i] = <span class=\"built_in\">max</span>(<span class=\"built_in\">min</span>(Z[<span class=\"number\">2</span>*l-i],r-i),<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i-Z[i]&gt;=<span class=\"number\">0</span> &amp;&amp; i+Z[i] &lt; m &amp;&amp; S[i+Z[i]]==S[i-Z[i]])&#123;</span><br><span class=\"line\">            l = i;r = i+Z[i];</span><br><span class=\"line\">            Z[i]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;T;</span><br><span class=\"line\">    <span class=\"built_in\">Longest</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)Z[i]--;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(ans,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(ans));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (m<span class=\"number\">-1</span>)/<span class=\"number\">2</span>,i;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Z[mid] == mid)ans[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">2</span>;i&lt;mid;i+=<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Z[i] == i &amp;&amp; Z[mid+i] == mid-i)&#123;</span><br><span class=\"line\">            ans[(i/<span class=\"number\">2</span>)] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;i&lt;m;i+=<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Z[i] == m-i<span class=\"number\">-1</span> &amp;&amp; Z[i-mid] == i-mid)&#123;</span><br><span class=\"line\">            ans[(i/<span class=\"number\">2</span>)] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)<span class=\"keyword\">if</span>(ans[i])sum++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sum == <span class=\"number\">0</span>)cout&lt;&lt;<span class=\"string\">&quot;none&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        cout&lt;&lt;sum&lt;&lt;<span class=\"string\">&quot;:&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)<span class=\"keyword\">if</span>(ans[i])cout&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;i;</span><br><span class=\"line\">        cout&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ZJ-d978-最长回文字串\"><a href=\"#ZJ-d978-最长回文字串\" class=\"headerlink\" title=\"ZJ d978: 最长回文字串\"></a>ZJ d978: 最长回文字串</h3><p><a href=\"https://zerojudge.tw/ShowProblem?problemid=d978\">題目連結</a></p>\n<blockquote>\n<p>題目敘述<br>題目即題意，給你一個字串，求出最長的回文字串長度為何？</p>\n</blockquote>\n<p>一題LPS的裸題，用Manacher’s Algorithm可以將時間複雜度做到 $O(n)$！</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 500005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,Z[<span class=\"number\">2</span>*N],t;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> ans[<span class=\"number\">2</span>*N];</span><br><span class=\"line\"><span class=\"keyword\">char</span> S[<span class=\"number\">2</span>*N],T[N];</span><br><span class=\"line\"><span class=\"comment\">//T原字串、S插入點字串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Longest</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    n = <span class=\"built_in\">strlen</span>(T);m = <span class=\"number\">2</span>*n+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(S,<span class=\"string\">&#x27;.&#x27;</span>,m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)S[<span class=\"number\">2</span>*i+<span class=\"number\">1</span>] = T[i];</span><br><span class=\"line\">    Z[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>,r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        Z[i] = <span class=\"built_in\">max</span>(<span class=\"built_in\">min</span>(Z[<span class=\"number\">2</span>*l-i],r-i),<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i-Z[i]&gt;=<span class=\"number\">0</span> &amp;&amp; i+Z[i] &lt; m &amp;&amp; S[i+Z[i]]==S[i-Z[i]])&#123;</span><br><span class=\"line\">            l = i;r = i+Z[i];</span><br><span class=\"line\">            Z[i]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        cin&gt;&gt;T;</span><br><span class=\"line\">        <span class=\"built_in\">Longest</span>();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> z = (Z[i]<span class=\"number\">-1</span>);</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans,z);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"TIOJ-1725-Massacre-at-Camp-Happy\"><a href=\"#TIOJ-1725-Massacre-at-Camp-Happy\" class=\"headerlink\" title=\"TIOJ 1725 Massacre at Camp Happy\"></a>TIOJ 1725 Massacre at Camp Happy</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1725\">題目連結</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/264017\">Submission</a></p>\n<blockquote>\n<p>題目敘述：<br>定義字串 A 和 B「k-幾乎相同」代表把字串 A 的前 k 字元搬到最後面時，與 B 恰有一個字元相異。給你兩個長度 ≤ $10^6$ 的字串 A 和 B，求所有使 A 和 B「k-幾乎相同」成立的 k 值。</p>\n</blockquote>\n<p>這一題好特別，一樣要用 $O(n)$ 的時間求出答案，對於每一個操作將前k個字元搬到後面，只能用 $O(1)$ 算出來到底符不符合一字元相異的條件。<br>以兩個相等長度的字串 $A,B$ 為例，長度為 $l$，假設 $A=aabba,B = aacba$，兩者相差一個字元的情況下，必定會滿足$l = LCP(A,B)+LCP(rev(A),rev(B))+1$，其中rev函數表示reverse。</p>\n<p>我們要做的就是在 $O(1)$ 的時間內求出LCP，因為題目的字串 $A$ 要求不同的起始位置，因此我們假設一個非常特別的字串 $B@AA$ ，其中@為任意沒出現過的字元。只要計算這一個字串的Z函數，就表示了 $A$ 和 $B$ 的最長共同前綴，需要兩個A的原因是因為模擬不同的k-位移下情形。</p>\n<p><img src=\"https://i.imgur.com/5Ir8Hjt.png\" alt=\"\"></p>\n<div class=\"note success\">\n            <p><strong>實作小細節</strong><br>程式碼的第42行可以試著推推看逆序之後的尾巴的索引值為何。我是利用列出幾個數字之後推出來的，不過應該可以寫成比較嚴謹的數學證明！<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Z1[n+<span class=\"number\">1</span>+i]+Z2[<span class=\"number\">2</span>*n-i+<span class=\"number\">1</span>]+<span class=\"number\">1</span> == n</span><br></pre></td></tr></table></figure></p>\n          </div>\n<h4 id=\"時間複雜度\"><a href=\"#時間複雜度\" class=\"headerlink\" title=\"時間複雜度\"></a>時間複雜度</h4><p>$O(n)$ 建立z函數，$O(n)$ 枚舉每一個起始點，總時間為 $O(n)$。</p>\n<h4 id=\"程式碼-7\"><a href=\"#程式碼-7\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 1000005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,Z1[<span class=\"number\">3</span>*N],Z2[<span class=\"number\">3</span>*N];</span><br><span class=\"line\"><span class=\"keyword\">char</span> A[<span class=\"number\">3</span>*N],B[<span class=\"number\">3</span>*N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Z_algo</span><span class=\"params\">(<span class=\"keyword\">int</span> *z,<span class=\"keyword\">char</span> *S)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>,r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    z[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        z[i] = <span class=\"built_in\">max</span>(<span class=\"built_in\">min</span>(z[i-l],r-i),<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(S[i+z[i]] &amp;&amp; S[z[i]] == S[i+z[i]])&#123;</span><br><span class=\"line\">            l = i;r = i+z[i];</span><br><span class=\"line\">            z[i]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;A&gt;&gt;B;</span><br><span class=\"line\">    m = <span class=\"number\">3</span>*n+<span class=\"number\">1</span>;</span><br><span class=\"line\">    B[n] = <span class=\"string\">&#x27;@&#x27;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//正常序列求Z value</span></span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,n+<span class=\"number\">1</span>,<span class=\"number\">2</span>*n)B[i] = A[i-n<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">2</span>*n+<span class=\"number\">1</span>,<span class=\"number\">3</span>*n)B[i] = A[i<span class=\"number\">-2</span>*n<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"built_in\">Z_algo</span>(Z1,B);</span><br><span class=\"line\">    <span class=\"comment\">//逆序求Z value</span></span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(B,B+n);<span class=\"built_in\">reverse</span>(B+n+<span class=\"number\">1</span>,B+m);</span><br><span class=\"line\">    <span class=\"built_in\">Z_algo</span>(Z2,B);</span><br><span class=\"line\">    </span><br><span class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt; vec;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Z1[n+<span class=\"number\">1</span>+i]+Z2[<span class=\"number\">2</span>*n-i+<span class=\"number\">1</span>]+<span class=\"number\">1</span> == n)vec.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vec.<span class=\"built_in\">size</span>())&#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;TAK&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i:vec)cout&lt;&lt;i&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        cout&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> cout&lt;&lt;<span class=\"string\">&quot;NIE&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//[0,n-1][n,n][n+1,2n][2n+1,3n]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"TIOJ-1497-喝醉的宿主-The-drunk-host\"><a href=\"#TIOJ-1497-喝醉的宿主-The-drunk-host\" class=\"headerlink\" title=\"TIOJ 1497 喝醉的宿主 The drunk host\"></a>TIOJ 1497 喝醉的宿主 The drunk host</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1497\">題目連結</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/264189\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>裸後綴數組。</p>\n</blockquote>\n<p>後綴數組我看了好久（大概有4天吧），一直對著它發呆，不知道它的精髓到底在哪裡。。剛好又遇到開學，不能整天快樂寫題XD</p>\n<h4 id=\"倍增優化\"><a href=\"#倍增優化\" class=\"headerlink\" title=\"倍增優化\"></a>倍增優化</h4><p>對著螢幕發呆的日子終於結束了，直到我看了<a href=\"https://oi-wiki.org/string/sa/\">這一篇</a>（雖然說我前幾天也有看但看不懂，可能是消化的天數不夠多吧），尤其是裡面的一張圖，深刻說明了倍增的精髓。</p>\n<p>後綴數組求法就不多解釋（上面有），放幾個實作上的小細節。</p>\n<div class=\"note primary\">\n            <p><strong>實作小細節</strong><br>我們要求進行 $O(\\log n)$ 層的倍增，可以使用C++內建的log10()再用ceil去處理，但顯然有點慢，如果套用以下函數，它會回傳數字二進位之後最大的1前面總共有多少個0（前綴0的數量），與32相減（32是long long的關係）就是我們要的log的次數。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> lg = __builtin_clz(n)</span><br></pre></td></tr></table></figure><p>另外一個小小細節，就是在字串的後半部分，如果跟前面一樣倍增一個比較大的數字，有可能會超出範圍，這時候初始值就很重要了！初始設定rk[n] = -1，導致任何只要超出範圍的都會取到這個-1，表示只要後面沒有字串、如果前面都相同但長度比較長的字串比起來，較短的會排在比較前面的位置！</p>\n          </div>\n<p>這個算法是 $O(n\\log^2 n)$，TIOJ這一題可以過，不過到<a href=\"https://www.spoj.com/problems/SARRAY/\">SPOJ</a>就會被卡TLE</p>\n<blockquote>\n<p>$O(n^2 log(n))$ is expected to score about 20-30. (Naive sorting all suffixes)<br>$O(n log^2(n))$ is expected to score about 40. (OK for most programming contest problems)<br>$O(n log n)$ is expected to score about 60-70. (Use counting sort for small alphabet size)<br>$O(n)$ without tweaks is expected to score about 80-90.<br>$O(n)$ with tweaks is expected to score 100. (This is meant for fun only :)</p>\n</blockquote>\n<p>越後面就越毒瘤XD</p>\n<blockquote>\n<p>test 1 - AC (score=0.000000, sig=0, time=0.009123, mem=5372)<br>test 2 - AC (score=0.000000, sig=0, time=0.006427, mem=5508)<br>test 3 - AC (score=0.000000, sig=0, time=0.014975, mem=5468)<br>test 4 - AC (score=0.000000, sig=0, time=0.031332, mem=5536)<br>test 5 - AC (score=0.000000, sig=0, time=0.026948, mem=5456)<br>test 6 - AC (score=0.000000, sig=0, time=0.023113, mem=5396)<br>test 7 - TLE (score=0.000000, sig=0, time=0.210000, mem=7340)<br>test 8 - TLE (score=0.000000, sig=0, time=0.210000, mem=7152)<br>test 9 - AC (score=0.000000, sig=0, time=0.170094, mem=7284)<br>test 10 - AC (score=0.000000, sig=0, time=0.140098, mem=7340)</p>\n</blockquote>\n<h4 id=\"程式碼-8\"><a href=\"#程式碼-8\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,sa[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y,id;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==b.x &amp;&amp; y==b.y)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//第一位、第二位比較以及後綴編號</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pt a,pt b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.x != b.x)<span class=\"keyword\">return</span> a.x &lt; b.x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.y &lt; b.y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">suffix_array</span><span class=\"params\">(string S)</span></span>&#123;</span><br><span class=\"line\">    n = S.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lg = <span class=\"number\">32</span>-__builtin_clz(n);</span><br><span class=\"line\">    <span class=\"comment\">//回傳第一個1之前0的個數（二進位）</span></span><br><span class=\"line\">    <span class=\"function\">vector&lt;pt&gt; <span class=\"title\">cur</span><span class=\"params\">(n,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">rk</span><span class=\"params\">(n+<span class=\"number\">1</span>,<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cur[i] = &#123;S[i],<span class=\"number\">0</span>,i&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(p,<span class=\"number\">0</span>,lg)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = <span class=\"number\">1</span> &lt;&lt; p;         <span class=\"comment\">//現在倍增的大小</span></span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(cur),cmp);</span><br><span class=\"line\">        rk[cur[<span class=\"number\">0</span>].id] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            rk[cur[i].id] = (cur[i<span class=\"number\">-1</span>]==cur[i] ? rk[cur[i<span class=\"number\">-1</span>].id]:i);</span><br><span class=\"line\">            <span class=\"comment\">//設定rk，與前一個相同則設定跟前一個一樣</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            cur[i] = &#123;rk[i],rk[<span class=\"built_in\">min</span>(n,i+k)],i&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(cur),cmp);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)sa[i] = cur[i].id;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    string S;<span class=\"built_in\">getline</span>(cin,S);</span><br><span class=\"line\">    <span class=\"built_in\">suffix_array</span>(S);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cout&lt;&lt;sa[i]&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Radix-Sort-優化\"><a href=\"#Radix-Sort-優化\" class=\"headerlink\" title=\"Radix Sort 優化\"></a>Radix Sort 優化</h4><p><a href=\"https://tioj.ck.tp.edu.tw/submissions/264407\">Submission</a></p>\n<p>比較一下 $O(n\\log^2 n)$ 以及 $O(n\\log n)$ 的時間，兩者花了近兩倍的時間差距。看了一下這一題的TopCoder，竟然可以做到十位數毫秒！如果要繼續優化成線性 $O(n)$ 的複雜度，就會使用到 DC3 的演算法，雖然好像很複雜不實用QQ</p>\n<p><img src=\"https://i.imgur.com/tQph2uA.png\" alt=\"\"></p>\n<p><img src=\"https://i.imgur.com/1wcKazZ.png\" alt=\"\"></p>\n<p><img src=\"https://i.imgur.com/i4WSvw8.png\" alt=\"\"></p>\n<p>使用 $O(n\\log^2n)$ 的算法會TLE第八、九筆測資，不過使用基數排序就可以AC了！</p>\n<blockquote>\n<p>test 1 - AC (score=0.000000, sig=0, time=0.006565, mem=6048)<br>test 2 - AC (score=0.000000, sig=0, time=0.006594, mem=6300)<br>test 3 - AC (score=0.000000, sig=0, time=0.012431, mem=7860)<br>test 4 - AC (score=0.000000, sig=0, time=0.012267, mem=7208)<br>test 5 - AC (score=0.000000, sig=0, time=0.011158, mem=6804)<br>test 6 - AC (score=0.000000, sig=0, time=0.012057, mem=7892)<br>test 7 - AC (score=0.000000, sig=0, time=0.140876, mem=17720)<br>test 8 - AC (score=0.000000, sig=0, time=0.077631, mem=21952)<br>test 9 - AC (score=0.000000, sig=0, time=0.074905, mem=21340)<br>test 10 - AC (score=0.000000, sig=0, time=0.076732, mem=30160)</p>\n</blockquote>\n<h4 id=\"程式碼-9\"><a href=\"#程式碼-9\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,sa[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y,id;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==b.x &amp;&amp; y==b.y)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//第一位、第二位比較以及後綴編號</span></span><br><span class=\"line\">vector&lt;pt&gt; temp,box[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    temp.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)box[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pt a,pt b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.x == b.x)<span class=\"keyword\">return</span> a.y &lt; b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x &lt; b.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">raddix_sort</span><span class=\"params\">(vector&lt;pt&gt; &amp;cur)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">init</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur[i].y == <span class=\"number\">-1</span>)temp.<span class=\"built_in\">push_back</span>(cur[i]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> box[cur[i].y].<span class=\"built_in\">push_back</span>(cur[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> j : box[i])temp.<span class=\"built_in\">push_back</span>(j);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)box[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)</span><br><span class=\"line\">        box[temp[i].x].<span class=\"built_in\">push_back</span>(temp[i]);</span><br><span class=\"line\">    cur.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> j : box[i])cur.<span class=\"built_in\">push_back</span>(j);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">suffix_array</span><span class=\"params\">(string S)</span></span>&#123;</span><br><span class=\"line\">    n = S.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lg = <span class=\"number\">32</span>-__builtin_clz(n);<span class=\"comment\">//回傳第一個1之前0的個數（二進位）</span></span><br><span class=\"line\">    <span class=\"function\">vector&lt;pt&gt; <span class=\"title\">cur</span><span class=\"params\">(n,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">rk</span><span class=\"params\">(n+<span class=\"number\">1</span>,<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>) cur[i] = &#123;S[i],<span class=\"number\">0</span>,i&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(cur),cmp);</span><br><span class=\"line\">    rk[cur[<span class=\"number\">0</span>].id] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,n<span class=\"number\">-1</span>)</span><br><span class=\"line\">        rk[cur[i].id] = (cur[i]==cur[i<span class=\"number\">-1</span>])?rk[cur[i<span class=\"number\">-1</span>].id]:i;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cur[i] = &#123;rk[i],<span class=\"number\">0</span>,i&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(p,<span class=\"number\">0</span>,lg)&#123;                <span class=\"comment\">//進行O(lgn)次</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = <span class=\"number\">1</span> &lt;&lt; p;         <span class=\"comment\">//現在倍增的大小</span></span><br><span class=\"line\">        <span class=\"built_in\">raddix_sort</span>(cur);</span><br><span class=\"line\">        rk[cur[<span class=\"number\">0</span>].id] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,n<span class=\"number\">-1</span>)            <span class=\"comment\">//設定rk，與前一個相同則設定跟前一個一樣</span></span><br><span class=\"line\">            rk[cur[i].id] = (cur[i<span class=\"number\">-1</span>]==cur[i] ? rk[cur[i<span class=\"number\">-1</span>].id]:i);</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)            <span class=\"comment\">//倍增pair的second</span></span><br><span class=\"line\">            cur[i] = &#123;rk[i],rk[<span class=\"built_in\">min</span>(n,i+k)],i&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">raddix_sort</span>(cur);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)sa[i] = cur[i].id;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    string S;<span class=\"built_in\">getline</span>(cin,S);</span><br><span class=\"line\">    <span class=\"built_in\">suffix_array</span>(S);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cout&lt;&lt;sa[i]&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"TIOJ-1515-Problem-E-似曾相識\"><a href=\"#TIOJ-1515-Problem-E-似曾相識\" class=\"headerlink\" title=\"TIOJ 1515 Problem E. 似曾相識\"></a>TIOJ 1515 Problem E. 似曾相識</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1515\">題目連結</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/264483\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>裸後綴數組 LCP。</p>\n</blockquote>\n<p>這題我想好久，一直想不通轉移的條件以及k-1的原因，不過最後還是想通了！這一題只要把 $lcp$ 求出來之後，找最大值就是題目要求的答案。</p>\n<h4 id=\"程式碼-10\"><a href=\"#程式碼-10\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 200005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,sa[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y,id;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==b.x &amp;&amp; y==b.y)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//第一位、第二位比較以及後綴編號</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pt a,pt b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.x != b.x)<span class=\"keyword\">return</span> a.x &lt; b.x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.y &lt; b.y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">suffix_array</span><span class=\"params\">(string S)</span></span>&#123;</span><br><span class=\"line\">    n = S.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lg = <span class=\"number\">32</span>-__builtin_clz(n);</span><br><span class=\"line\">    <span class=\"comment\">//回傳第一個1之前0的個數（二進位）</span></span><br><span class=\"line\">    <span class=\"function\">vector&lt;pt&gt; <span class=\"title\">cur</span><span class=\"params\">(n,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">rk</span><span class=\"params\">(n+<span class=\"number\">1</span>,<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cur[i] = &#123;S[i],<span class=\"number\">0</span>,i&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(p,<span class=\"number\">0</span>,lg)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = <span class=\"number\">1</span> &lt;&lt; p;         <span class=\"comment\">//現在倍增的大小</span></span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(cur),cmp);</span><br><span class=\"line\">        rk[cur[<span class=\"number\">0</span>].id] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,n<span class=\"number\">-1</span>)</span><br><span class=\"line\">            rk[cur[i].id] = (cur[i<span class=\"number\">-1</span>]==cur[i] ? rk[cur[i<span class=\"number\">-1</span>].id]:i);</span><br><span class=\"line\">            <span class=\"comment\">//設定rk，與前一個相同則設定跟前一個一樣</span></span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            cur[i] = &#123;rk[i],rk[<span class=\"built_in\">min</span>(n,i+k)],i&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(cur),cmp);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)sa[i] = cur[i].id;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">LCP</span><span class=\"params\">(string s)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">rk</span><span class=\"params\">(n,<span class=\"number\">0</span>)</span>,<span class=\"title\">lcp</span><span class=\"params\">(n,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)rk[sa[i]] = i;      <span class=\"comment\">//利用sa反函數得到rk</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k)k--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rk[i] == n<span class=\"number\">-1</span>)<span class=\"keyword\">continue</span>;   <span class=\"comment\">//rk[n-1]未定義</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = sa[rk[i]+<span class=\"number\">1</span>];        <span class=\"comment\">//下一名後綴從何開始</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i+k&lt;n &amp;&amp; j+k&lt;n &amp;&amp; s[i+k] == s[j+k])k++;</span><br><span class=\"line\">        lcp[rk[i]] = k;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lcp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n;cin.<span class=\"built_in\">ignore</span>();</span><br><span class=\"line\">    string S;<span class=\"built_in\">getline</span>(cin,S);</span><br><span class=\"line\">    <span class=\"built_in\">suffix_array</span>(S);</span><br><span class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt; lcp = <span class=\"built_in\">LCP</span>(S);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)ans = <span class=\"built_in\">max</span>(lcp[i],ans);</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><p>字串演算法跟最短路徑、計算幾何比起來，數學推導成分就多了很多，有許多的遞迴概念，例如失敗函數以及z函數的概念，也有很多是要理解在不同條件下做什麼事，以及其他優化處理。最初的是字典樹Trie，就是一些資料結構的運用；接下來的KMP、Z Algorithm以及LPS就很吃觀念，追蹤整個程式的過程。最後是後綴數組，在這邊卡了超久，遲遲無法理解倍增的概念、以及LCP的作法。可能這就是頓悟吧，每天看了同篇解說很久之後，總有一天會突然頓悟，想到演算法的精髓！</p>"},{"title":"2020資訊之芽—最短路徑例題","date":"2021-08-15T16:00:00.000Z","mathjax":true,"_content":"\n## 題目目錄\n- 可魚果運輸問題\n- 百慕達三角洲\n- 江神與他的小火車\n- 貨物運送計劃\n- E.漢米頓的麻煩\n- 旅遊規劃問題\n- Codeforces 543B: Destroying Roads\n<!-- more -->\n\n### 可魚果運輸問題\n[題目連結](https://neoj.sprout.tw/problem/391/)\n[Dijkstra's Algorithm](https://neoj.sprout.tw/challenge/178079/)\n[SPFA](https://neoj.sprout.tw/challenge/178078/)\n這一題的來源是NPSC2013的題目，題目大意如下：\n\n> 有n個城市m個運輸方案，每個方案 $P_i$ 會從一個固定的起始城市 $A_i$ 運送東西到另一個固定的終點城市 $B_i$，每運輸一件物品，就必須付 $C_i$ 價錢。若用方案 $P_i$ 運輸了超過 $D_i$ 件物品，多出來的部份每件物品收 $C_i'$ 元。共要運輸 $f$ 物品。\n> 求起點 $s$ 到終點 $e$ 的最短路徑。\n\n當運輸總量超過 $D_i$ 件物品，表示可以使用更小的邊權重去計算接下來的費用。這時候我們可以了解到一個性質，如果我把全部的物品全部集中在一條路徑運送，因為送的越多，相對的在費用上就可能產生優惠，比分散多條路徑的運送花費來的小。因為總共要運送 $f$ 件物品，因此會將邊的權重設定為當 $f$ 件物品都經過這一條邊時，所要花費的價格。\n\n有了邊以及價格之後，便可開始進行最短路徑的演算法。因為題目範圍 $N≤100$ ，因此用Dijkstra's 或是 SPFA 都可以做（Bellman-Ford就先不要XD）。\n\n#### Dijkstra's Algorithm\n\n這篇有[一篇論文](http://www-m3.ma.tum.de/foswiki/pub/MN0506/WebHome/dijkstra.pdf)是Dijkstra在針對最短路徑寫的論文（也就是以他名字命名的演算法論文），這篇只有三頁耶！\n以下是「演算法導論」這本書中演算法的虛擬碼：\n```\nDIJKSTRA(G, w, s)\n  1  INITIALIZE-SINGLE-SOURCE(G, s)\n  2    S <- Ø\n  3    Q <- V[G]\n  4    while Q ≠ Ø\n  5        do u <- EXTRACT-MIN(Q)\n  6            S <- S ∪ {u}\n  7            for each vertex v ∈ Adj[u]\n  8                do RELAX(u,v,w)\n```\n其中集合 $S$ 在程式碼中代表的是visit，而集合 $Q$ 因為要操作取出最小元素的動作，因此會用priority_queue實現，以heap來進行 $O(\\log n)$ 的插入以及取出。\n\n這裡面使用$visit$判斷是否在集合 $S$ 中，但我們可以發現，如果在priority_queue中有兩個點的存在，第一個點處理完被加入集合 $S$ 中之後，第二次再次被拿出來進行處理時就不會有任何相鄰的點再一次被處理，這是因為第一次與第二次更新所使用的 $dis[cur]$ 是一樣的。因此，當一個點已經在visit中（也就是在集合 $s$ 中），我們可以直接換下一個點去執行（不過如果忘了visit也是沒差啦）。\n\n{% note default %}\n**複雜度分析**\n\n以下分析一下演算法時間複雜度，總共有兩個時間複雜度，取決於使用何種資料結構來實作。\n\n**1. 時間複雜度 $O(V^2+E)$**\n首先是每一個點執行 $V$ 次對每一個相鄰的點進行更新，每一輪執行 $O(V)$ 尋找目前距離 $dis$ 最小的點。總共有 $E$ 條邊需要更新，因此最後要把 $E$ 再加上去。這樣總複雜度就會 $V\\times O(V)+O(E) = O(V^2+E)$。此實作方式一般在稠密的圖中會有比較好的表現。\n<br>\n\n**2. 時間複雜度 $O((V+E)\\log V)$**\n這一題在 $O(n)$ 爆搜尋找改用heap去優化，因此複雜度就會是一樣執行V 輪利用 $O(logV)$ 找到距離 $dis$ 最小的點，同時將更新後的點放進heap中，我們知道放入heap的複雜度也是 $O(\\log n)$，因此複雜度就會變成 $O(V\\log V)+O(E\\log V) = O((V+E)\\log V)$。此實作方式一般在稀疏的圖中會有比較好的表現，從 $V$ 與 $E$ 的大小估計可以大致發現。\n{% endnote %}\n以下是程式法的實作，最需要注意的地方是pair的first跟second儲存的東西。在存圖時會使用（點,權重）搭配vector；而在priority_queue中，因為要對權重進行比較，因此會用（權重,點），需要特別注意別搞混了!\n\n{% note success %}\n**Priority_Queue實作細節**\n\n預設的priority_queue會pop出目前heap中最大的元素（預設是less<>函數），如果要實作一個min heap 的話要使用greater<>函數，同時第二個傳進函數的參數要用一個vector！\n\n```cpp=\npriority_queue <Type, vector<Type>, ComparisonType > min_heap;\npriority_queue <pii,vector<pii>,greater<pii>> pq;   \n```\n{% endnote %}\n\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define int long long\n#define ios ios::sync_with_stdio(0),cin.tie(0)\n#define N 105\n#define FOR(i,n) for(int i=0;i<n;i++)\n#define pii pair<int,int>\nusing namespace std;\n\nvoid solve(){\n    vector<pii> edge[N];                //存圖\n    int n,m,s,e,f;cin>>n>>m>>s>>e>>f;\n    int dis[N];fill(dis,dis+N,1e16);\n    bool visit[N];                     //城市數n、方案數m、s起、e終、f箱數\n    memset(visit,0,sizeof(visit));\n    \n    for(int i=0;i<m;i++){\n        int a,b,c,d,e;cin>>a>>b>>c>>d>>e;\n        //一條由a連到b的邊，權重c，流量超過d，則改權重c\n        int val = (f>d?c*d+e*(f-d):c*f);\n        edge[a].push_back({b,val});\n    }\n    //Dijkstra\n    priority_queue<pii,vector<pii>,greater<pii>> pq;    //(距離,點)\n    pq.push({0,s});\n    dis[s] = 0;\n    \n    while(!pq.empty()){\n        int cur = pq.top().second;\n        pq.pop();\n        if(visit[cur])continue;\n        \n        for(auto i:edge[cur]){\n            int next = i.first,weight = i.second;\n            \n            if(dis[cur]+weight<dis[next]){\n                dis[next] = dis[cur]+weight;\n                pq.push({dis[next],next});\n            }\n        }\n        visit[cur] = 1;\n    }\n    cout<<dis[e]<<endl;\n}\n\nsigned main(){\n    ios;\n    \n    int t;cin>>t;\n    while(t--){\n        solve();\n    }\n}\n```\n\n#### Shortest Path Faster Algorithm(SPFA)\n這是一個使用queue最佳化的Bellman-Ford演算法，基本的使用方式跟BFS幾乎相同，在Bellman-Ford對邊進行更有效率的鬆弛(relaxation)。\n以下一樣是「演算法導論」中Bellman-Ford的虛擬碼：\n```\nBELLMAN-FORD(G,w,s)\n  1    INITIALIZE-SINGLE-SOURCE(G,s)\n  2    for i <- 1 to |V[G]|-1\n  3        do for each edge (u,v)∈ E[G]\n  4            do RELAX(u,v,w)\n  5    for each edge (u,v)∈ E[G]\n  6        do if d[v] > d[u]+w(u,v)\n  7            then return FALSE\n  8    return TRUE\n```\n以下是SPFA的虛擬碼，如果節點有被實際鬆弛過，且節點不在queue中（同樣元素在queue中出現兩次沒有意義，因為只要確保有在queue中等會會被更新到就好，到它的最短距離不會被改變），便將此節點推入queue中。裡面存的是帶進行鬆弛的節點們，也就是被剛剛更新過的節點。我們可以利用$visit[ ]$來 $O(1)$ 判斷節點是否有在queue中！\n\n有進行判斷是否在queue中的（比較省空間一點）：\n![](https://i.imgur.com/vdtJWR2.png)\n沒有進行判斷的，有被更新過就塞進去：\n![](https://i.imgur.com/fsorAoE.png)\n\n```\nShortest-Path-Faster-Algorithm(G, s)\n  1    for each vertex v ≠ s in V(G)\n  2        d(v) := ∞\n  3    d(s) := 0\n  4    offer s into Q\n  5    while Q is not empty\n  6        u := poll Q\n  7        for each edge (u, v) in E(G)\n  8            if d(u) + w(u, v) < d(v) then\n  9                d(v) := d(u) + w(u, v)\n 10                if v is not in Q then\n 11                    offer v into Q\n```\n\nSPFA有一個問題，他可以被出題目的人設計測資去卡這種算法，使時間複雜度變成糟糕的$O(V^2)$，因此一般來說會實作Dijkstra而非SPFA！\n\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define int long long\n#define ios ios::sync_with_stdio(0),cin.tie(0)\n#define N 105\n#define FOR(i,n) for(int i=0;i<n;i++)\n#define pii pair<int,int>\nusing namespace std;\n\nvoid solve(){\n    vector<pii> edge[N];                //存圖\n    int n,m,s,e,f;cin>>n>>m>>s>>e>>f;\n    int dis[N];fill(dis,dis+N,1e16);\n    bool visit[N];                     //城市數n、方案數m、s起、e終、f箱數\n    memset(visit,0,sizeof(visit));\n    \n    for(int i=0;i<m;i++){\n        int a,b,c,d,e;cin>>a>>b>>c>>d>>e;\n        //一條由a連到b的邊，權重c，流量超過d，則改權重c\n        int val = (f>d?c*d+e*(f-d):c*f);\n        edge[a].push_back({b,val});\n    }\n    //SPFA\n    \n    queue<int> que;\n    que.push(s);\n    dis[s] = 0;\n    visit[s] = 1;\n    \n    while(!que.empty()){\n        int cur = que.front();\n        que.pop();\n        visit[cur] = 0;                //pop出來將狀態改成不在queue中\n        for(auto i:edge[cur]){\n            int next = i.first,weight = i.second;\n            if(dis[next] > dis[cur]+weight){\n                dis[next] = dis[cur]+weight;\n                if(!visit[next])que.push(next);\n            }\n        }\n    }\n    cout<<dis[e]<<endl;\n}\n\nsigned main(){\n    ios;\n    \n    int t;cin>>t;\n    while(t--){\n        solve();\n    }\n}\n```\n\n### 百慕達三角洲\n[題目連結](https://neoj.sprout.tw/problem/393/)\n> 題目大意：\n> 給定一張長n寬m的矩形圖，由\"#\"和\".\"組成，給定起點$(x_1,y_1)$以及終點$(x_2,y_2)$，必須最小化經過\".\"的次數，求最少需幾過幾次。\n\n當下看到這一個題目的想法，就是跟處理一般的圖論題目一樣，將邊用vector儲存起來，將經過\".\"的權重設為很大的一個數字，這樣用Dijkstra做一次最短路徑就可以找出經過\".\"最小化的次數了！\n\n以下是MLE的[Submission](https://neoj.sprout.tw/challenge/178136/)\n![](https://i.imgur.com/9ZaisdZ.png)\n吃了開心的MLE，如果當成一般的圖在處理，不管是在 $dis$ 開long long的處裡，或是開了一個vector陣列儲存邊，都非常的消耗空間。因此，我詢問了一下電神這一題的想法，他說我的想法用Dijkstra是正確的，不過在設定邊權的部分可以直接用0跟1代替，而且可以用queue去輔助實作BFS（要說它也可以是Dijkstra的另一種比較簡單的版本）。\n\n![](https://i.imgur.com/9JldAha.png)\n\n這題也就是所謂[0-1 BFS (Shortest Path in a Binary Weight Graph)](https://www.geeksforgeeks.org/0-1-bfs-shortest-path-binary-graph/)，或是[這裡0-1 BFS](https://codeforces.com/blog/entry/22276)，想法可以說是Dijkstra跟BFS的綜合（其實它跟SPFA也很相似）。以下是實作步驟：\n\n1. 建立雙向的佇列(deque)，等等要存放被relax過的點，初始放入起點\n2. 每一次從deque前方pop出一點，對那一點相鄰的所有點進行鬆弛\n3. 如果被鬆弛時的邊權重為0，將點push dequeue的前方\n4. 否則當鬆弛時的邊權重為1，將點push dequeue的後方\n5. 重複執行2-4步驟直到deque為空\n\n當我們一直利用deque最前端的元素進行鬆弛，因為我們將邊權為0的元素放入最前端，用距離最小的那些點進行鬆弛，每一個點最多會被鬆弛一次，因此總時間複雜度為$O(V+E)$，比起用Dijktra直接做$O((V+E)\\log V)$快了許多（此演算法之所以正確是因為其中一邊的權重是0，不管0接到誰他的權重也都是0，有點像「從最小層逐漸擴展」的概念）！\n\n{% note success %}\n小問題（出處[這裡](https://codeforces.com/blog/entry/22276)）\n1. Can we apply the same trick if our edge weights can only be 0 and x (x >= 0) ?\n2. Can we apply the same trick if our edge weights are x and x+1 (x >= 0) ?\n3. Can we apply the same trick if our edge weights are x and y (x,y >= 0) ?\n\n解答YES,NO,NO\n{% endnote %}\n\n這題之所以可行是因為有一邊的權重是0，當點皆以權重為0串再一起時，他會是最短的，使用最短去更新接下來的點，因此第一題是正確的！但第二題與第三題是錯誤的，考慮以下點與邊的情況：\n\n![](https://i.imgur.com/BYojGwm.jpg)\n\n當我依照01BFS的方法不斷去用x更新其他的點，更新完之後會發現點1到點3的最短路徑應該是x+1，到時候又要再重新Relax一次，複雜度會爆炸喔（比SPFA可能還慘，因為當點三利用兩個x更新完之後，用它來做跟3所有相鄰的點，做完卻發現$(1,3)$有更短的距離，又必須重新全部更新一次！）總結來說，他只是用於只有兩種邊的情況，且其中一邊必須為0。\n\n\n\n![](https://i.imgur.com/wnXKbI8.png)\n\n{% note info %}\n**比較一下記憶體用量**\n最主要還是時間複雜度的比較，不過既然空間已經爆了，時間也沒法比了QQ\n\n**MLE**\n\n```cpp=\n#define N 2005\n#define N2 4000005\nint n,m,q,predecessor[N2],dis[N2];\nbool visit[N2],maze[N2];\nvector<pii>edge[N2];\n```\n**AC**\n```cpp=\n#define N 2003\nint n,m,dis[N][N];\nbool visit[N][N],maze[N][N];\n```\n{% endnote %}\n以下是使用deque實作01BFS的AC code：\n\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define int long long\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define N 2003\n#define FOR(i,n) for(int i=0;i<n;i++)\n#define pii pair<int,int>\nusing namespace std;\nint n,m,dis[N][N];\nint dx[4] = {0,-1,0,1},dy[4] = {1,0,-1,0};\nbool visit[N][N],maze[N][N];\n\nvoid solve(){\n    cin>>n>>m;\n    memset(visit,0,sizeof(visit));\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=m;j++){\n            char temp;cin>>temp;\n            if(temp=='.')maze[i][j] = 1;\n            else maze[i][j] = 0;\n        }\n    }\n    deque<pii>deq;\n    int s1,s2,e1,e2;cin>>s1>>s2>>e1>>e2;\n    memset(dis,0x3f3f3f3f,sizeof(dis));\n    dis[s1][s2] = 0;\n    deq.push_back({s1,s2});\n    while(!deq.empty()){\n        int x = deq.front().first,y = deq.front().second;\n        deq.pop_front();\n        for(int i=0;i<4;i++){\n            int nx = x+dx[i],ny = y+dy[i];\n            if(nx<1||nx>n||ny<1||ny>m)continue;\n            \n            if(dis[nx][ny] > dis[x][y]+maze[nx][ny]){\n                dis[nx][ny] = dis[x][y]+maze[nx][ny];\n                if(maze[nx][ny]==0)deq.push_front({nx,ny});\n                else deq.push_back({nx,ny});\n            }\n        }\n    }\n    cout<<dis[e1][e2]<<endl;\n}\n\nsigned main(){\n    Orz;\n    int t;t = 1;\n    while(t--){\n        solve();\n    }\n}\n```\n\n### 江神與他的小火車\n[題目連結](https://neoj.sprout.tw/problem/431/)\n\n> 題目大意\n> 已知有N個點以及M條邊，總共有Q筆詢問，每筆詢問有$\\delta(a,b)$，表示新增一條由 $a$ 指向 $b$ 的邊（其權重為1），對每一筆詢問輸出從點 $1$ 到點 $N$ 的最短距離。\n\n![](https://i.imgur.com/f96GUmd.jpg)\n\n我們知道如果有用新加進來的邊 $\\delta(a,b)$，則路徑可以被拆解成 $\\delta(1,a)+\\delta(a,b)+\\delta(b,n)$。其中，我們可以用Dijkstra 一次尋找1到任何點的最短距離，那要如何處理路徑 $\\delta(b,n)$ 呢？這就是**單一目的最短距離問題**，我們可以將所有的邊逆序，將終點做一次Dijkstra尋找最短路，這時候我們就可以用 $O(1)$ 的時間回答每一筆詢問，總時間複雜度：預處理$O((V+E)\\log V)$，詢問 $O(Q)$。\n\n{% note info %}\n**測資小問題**\n有一筆測資如下，藍線是給定的路徑與權重，紅色是新加入的邊，如果按照上面 $\\delta(1,a)+\\delta(a,b)+\\delta(b,n)$ 我們可以計算出從起點到終點的最短距離為：$2+1+4 = 7$，很明顯兩點之間的最短距離是 $5$ ，但因為原本作法會經過一條$\\delta (B,C)$ 的重邊，造成算出來的距離是比較大的！這時候我們只要對最短路徑長度取min即可，也就是說在這種情況加入這一條邊並不會影響最短路徑的長度！\n\n> 測資（1,2,3分別對應A,B,C）：\n> 6 5 1\n> 1 2 1\n> 2 3 1\n> 3 4 1\n> 4 5 1\n> 5 6 1\n> 3 2\n\n![](https://i.imgur.com/Uocw0hc.png)\n{% endnote %}\n接下來是程式碼，之後如果遇到最短路徑的題目，一般來說會避免使用SPFA（除非有負邊），為了要避免最糟的時間複雜度，因此會使用Dijkstra來處理最短路徑問題！\n\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define int long long\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define N 200005\n#define FOR(i,n) for(int i=0;i<n;i++)\n#define pii pair<int,int>\nusing namespace std;\nint n,m,q;\nbool visit[N];\nvector<pii> edge[2][N];\n//edge[0]->normal,edge[1]->opposite\n\nvector<int> Dijkstra(int start,int end,bool is_nor){\n    memset(visit,0,sizeof(visit));\n    vector<int> dis(n+2,1e16);\n    \n    priority_queue<pii,vector<pii>,greater<pii>> pq;\n    \n    dis[start] = 0;\n    pq.push({0,start});\n    \n    while(!pq.empty()){\n        int cur = pq.top().second;\n        pq.pop();\n        if(visit[cur])continue;\n        \n        visit[cur] = 1;\n        for(auto i : edge[is_nor][cur]){\n            int next = i.first,weight = i.second;\n            if(dis[next] > dis[cur] + weight){\n                dis[next] = dis[cur] + weight;\n                pq.push({dis[next],next});\n            }\n        }\n    }\n    return dis;\n}\n\nvoid solve(){\n    \n    cin>>n>>m>>q;\n    for(int i=0;i<m;i++){\n        int a,b,w;cin>>a>>b>>w;\n        edge[0][a].push_back({b,w});\n        edge[1][b].push_back({a,w});\n    }\n    \n    vector<int> normal,opposite;\n    normal = Dijkstra(1,n,0);\n    opposite = Dijkstra(n,1,1);\n    \n    while(q--){\n        int a,b;cin>>a>>b;\n        cout<<min(normal[a]+opposite[b]+1,normal[n])<<endl;\n    }\n}\n\nsigned main(){\n    Orz;\n    int t;t = 1;\n    while(t--){\n        solve();\n    }\n}\n```\n### 貨物運送計劃\n[題目連結](https://tioj.ck.tp.edu.tw/problems/1641)\n\n> 題目敘述\n> 給定N個點M條邊，第i條邊有方邊率$C_i$，假設目前運送貨物重量p經過此邊，代表經過邊i會需要多增加 $p\\times C_i$ 的重量。給定起點、終點，求到達終點時最少的貨物重量為多少。\n\n換種說法，題目要求的是每經過一條邊，就要乘上某一個數，要求到終點最小的重量。下圖是題目範例測資：\n![](https://i.imgur.com/BSNWgh8.png)\n\n$\\delta(1,2)\\to\\delta(2,3)$，所付出的代價是$(1\\times (1+1))\\times (2+1)=6$。如果是$\\delta(1,3)$ 的話直接$1\\times (4+1)=5$，可以觀察到，遇到邊就需要將原本的數字乘上$C_i+1$。\n\n我們可以透過將邊權取 $\\log$ 之後，就可以利用Dijkstra進行最短路徑的計算，因為取 $\\log$ 後的加減運算等同於原本的乘法運算，只要最後把算出來的答案次方即可！\n\n這一題的輸出要求科學記號（為了要避免浮點數誤差），以下程式碼來達成（要求小數點後兩位，同時次方部分要求整數3位）：\n```cpp=\nprintf(\"%.2fe+%03lld\\n\",pow(10,ans),x);\n```\n程式碼的部分，透過$edge$存完所有的取完 $\\log$ 之後的邊，進行Dijkstra，輸出最短路徑（以科學記號表示）即可！\n\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define int long long\n#define N 10005\n#define FOR(i,n) for(int i=0;i<n;i++)\n#define pii pair<int,int>\n#define pid pair<int,double>\n#define pdi pair<double,int>\nusing namespace std;\nint n,m,s,t;\ndouble dis[N];\nbool visit[N];\nvector<pid> edge[N];\n\nvoid solve(){\n    memset(visit,0,sizeof(visit));\n    \n    scanf(\"%lld %lld %lld %lld\",&n,&m,&s,&t);\n    for(int i=0;i<m;i++){\n        int a,b;double c;scanf(\"%lld %lld %lf\",&a,&b,&c);\n        edge[a].push_back({b,(double)log10(c+1)});\n    }\n    fill(dis,dis+n+2,1e16);\n    \n    priority_queue<pdi,vector<pdi>,greater<pdi>> pq;\n    dis[s] = 0.0;\n    pq.push({0,s});\n    \n    while(!pq.empty()){\n        int cur = pq.top().second;\n        pq.pop();\n        if(visit[cur])continue;\n        visit[cur] = 1;\n        \n        for(auto i:edge[cur]){\n            int next = i.first;\n            double w = i.second;\n            if(dis[next] > dis[cur]+w){\n                dis[next] = dis[cur]+w;\n                pq.push({dis[next],next});\n            }\n        }\n    }\n    double ans = dis[t];\n    int x = floor(ans);\n    ans-=x;\n    \n    printf(\"%.2fe+%03lld\\n\",pow(10,ans),x);\n}\n\nsigned main(){\n    int t;t = 1;\n    while(t--){\n        solve();\n    }\n}\n```\n\n### E.漢米頓的麻煩\n[題目連結](https://tioj.ck.tp.edu.tw/problems/1096)\n\n他題目時不時提到漢米頓，是多愛漢米頓XDD（這一題跟漢米頓根本沒關係）\n\n> 題目大意\n> 在一張n(n≤100)個點的圖中，尋找路徑長度最短的環\n\n那就用**Floyd-Warshall**找最小的環就好！\n\n{% note info %}\n**Floyd-Warshall**\n這就是dp的作法，用 $O(N^3)$ 的時間進行轉移，就能得到全點對的最短路徑。這邊有一個重要的轉移順序，也就是中點-起點-終點進行轉移，如果把dp展開就會發現中點必須在最外層進行轉移：\n\n> 定義 $dp[k][i][j]$ 為點 $i$ 走到點 $j$ ，只能經過前k個點的最短路徑，則轉移式變成：\n> $$d[k+1][i][j] = min(d[k][i][j], d[k][i][k+1]+d[k][k+1][j])$$\n\n每一個k+1都是由k轉移而來，仰賴k的點的配對，因此必須最先轉移中點k的部分！（不過順序顛倒也不會怎樣啦，上面「課程內容」的地方有寫到）\n{% endnote %}\n同樣這一份code也可以判斷有沒有負環，只要ans小於0的話代表有負環（有的話距離是不能用的喔，因為Floyd-Warshall不能處理負環，但負邊是可以處理的）\n\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define int long long\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define N 101\n#define FOR(i,n) for(int i=0;i<n;i++)\n#define pii pair<int,int>\n#define pid pair<int,double>\n#define pdi pair<double,int>\nusing namespace std;\nint n,dp[N][N];\n\nvoid solve(){\n    memset(dp,0x3f3f3f3f,sizeof(dp));\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            int temp;cin>>temp;\n            if(temp!=0)dp[i][j] = temp;\n        }\n    }\n    for(int k=0;k<n;k++){\n        for(int i=0;i<n;i++){\n            for(int j=0;j<n;j++){\n                dp[i][j] = min(dp[i][j],dp[i][k]+dp[k][j]);\n            }\n        }\n    }\n    int ans = INT_MAX;\n    for(int i=0;i<n;i++){\n        ans = min(ans,dp[i][i]);\n    }\n    if(ans == INT_MAX)cout<<-1<<endl;\n    else cout<<ans<<endl;\n}\n\nsigned main(){\n    while(cin>>n && n!=0){\n        solve();\n    }\n}\n```\n\n### 旅遊規劃問題\n[題目連結](https://tioj.ck.tp.edu.tw/problems/1028)\n[Submission](https://tioj.ck.tp.edu.tw/submissions/262198)\n這一題 $n≤13$ 大概就是位元dp來完成（狀態壓縮），定義 $dp[i][j]$ 為現在在點i上，拜訪過點集j的最短距離（j中不包含點i）。這裡使用到了同層轉移的技巧，也就是利用j中的點，對相同狀態下不在i中的點進行更新。\n\n點集j中在狀態i下為起點，用Dijkstra對不在i中的其他點進行更新，最後的答案即為$dp[s][S-(1<<s)]$。\n\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define int long long\n#define double long double\n#define N 14\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define pii pair<int,int>\nusing namespace std;\nint n,m;\nvector<pii> edge[N];\nint dis[N],dp[N][1<<N],pre[N][1<<N];\nbool visit[N];\n//定義dp[i][j]為現在在點i，拜訪過點集合j（i不在點集j中）\n\nsigned main(){\n    cin>>n>>m;\n    rep(i,1,m){                                 //讀入m條邊\n        int a,b,w;cin>>a>>b>>w;\n        edge[a].push_back({b,w});\n        edge[b].push_back({a,w});\n    }\n    int S = 0,start = -1;cin>>m;                //S為待拜訪的所有點集合\n    rep(i,1,m){\n        int temp;cin>>temp;\n        S = S|(1<<temp);\n        if(start == -1)start = temp;\n    }\n    \n    rep(i,0,n)rep(j,0,(1<<n))dp[i][j] = INF;\n    rep(i,0,n)dp[i][0] = 0;\n    \n    for(int i=1;i<(1<<n);i++){\n        if(i == (S & i)){                       //在集合i中的點在S一定要有\n            priority_queue<pii,vector<pii>,greater<pii>> pq;\n            fill(dis,dis+n,INF);                //將dis初始為無限大，做Dijkstra\n            memset(visit,0,sizeof(visit));\n            for(int j=0;j<n;j++){\n                if(i&(1<<j)){                   //從有在i中的點向不在的點做Dijkstra\n                    dis[j] = dp[j][i^(1<<j)];   //目前在j，經過拜訪了點集i（不包含點j）\n                    pq.push({dis[j],j});        //利用在i中的點對其他點進行更新\n                }\n            }\n            while(!pq.empty()){\n                int cur = pq.top().second;\n                pq.pop();\n                visit[cur] = 1;\n                for(auto k : edge[cur]){\n                    int v = k.first,w = k.second;\n                    if(i&(1<<v))continue;\n                    if(dis[v] > dis[cur]+w){\n                        dis[v] = dis[cur] + w;\n                        pre[v][i] = cur;        //紀錄點v在狀態i下由cur轉移\n                        pq.push({dis[v],v});\n                    }\n                    else if(dis[v] == dis[cur]+w && pre[v][i] > cur){\n                        pre[v][i] = cur;\n                    }\n                }\n            }\n            for(int j=0;j<n;j++){               //對於不在點集i中的點進行更新\n                if(i & (1 << j))continue;\n                dp[j][i] = dis[j];              //同層狀態轉移，更新dp[j][i]\n            }\n        }\n    }\n    cout<<\"Minimum travel distance: \"<<dp[start][S^(start)]<<endl;\n    cout<<\"Travel route:\";\n    int cur = start;S = S^(1<<start);\n    while(true){\n        cout<<\" \"<<cur;\n        if(!S)break;\n        cur = pre[cur][S];\n        if(S&(1<<cur))S = (S^(1<<cur));         //經過的點不一定是指定的觀光點\n    }\n    cout<<endl;\n}\n```\n\n### Codeforces 543B: Destroying Roads\n[題目連結](https://codeforces.com/problemset/problem/543/B)\n[Submission](https://codeforces.com/problemset/submission/543/125743532)\n\n> 題目大意\n> 給定N個點M條無向邊，每一邊權重都是1，以及兩筆資料，由三個數$(x,y,w)$ 構成，代表起點為x、終點為x、要在w距離內從起點走到終點。試問最多可以拔掉幾條邊同時滿足以上兩個資料所描述的特性？\n\n這一題蠻有趣的，首先他的邊權重都是1，因此我們可以直接用BFS尋找最短路徑，並且點第一次拜訪到時的就是該點的最短距離（BFS一層一層擴展）。\n\n{% note primary %}\n**第一個想法：錯誤想法**\n我先將兩個起點與終點的最短路徑都找出來，把將過的邊都標上不能移除，將其他的邊全部拔掉。\n\n**問題點：**\n固然找到的是最短路徑，但不代表可以最大化拔除邊的數量。因為題目要求兩點只要符合最短距離 $w$ 即可，因此每一個配對其實不用符合是最短路徑的情況（如下圖）！目標是在題目要求的限度內最大化重複的邊，使能夠被拔除的邊最大化！\n\n![](https://i.imgur.com/QfbfF82.png)\n\n上圖紅色線段是$\\delta(1,7)$的最短路徑、褐色是線段$\\delta(3,6)$的最短路徑、黑色線段是皆以最短路徑之下可以被拔除的邊。但是如果將路徑$\\delta(3,6)$換成是$(3,2)\\to(2,4)\\to(4,5)\\to(5,6)$，被拔除的邊可以增過為三條。\n{% endnote %}\n\n這一題最重要的關鍵就是以$O(V^2)$枚舉所有點對（距離長度可以直接換算成邊的數量），可以先用$O(V(V+E)$的時間對每一個點用進行BFS，如此一來總複雜度即為$O(V^2+VE)$，所幸題目給定總共的邊數不會超過3000條，因此是可以在時間限制內完成枚舉。\n\n{% note primary %}\n枚舉路徑 $\\delta(i,j)$ 為共同邊的時候，必須考慮起點與終點的方向，同時考慮從 $i\\to j$ 以及從 $j\\to i$ 兩個方向。以下圖為例，當枚舉都使用相同的起點以及終點，會讓下圖的 $(3,4)$ 被重複計算！\n\n![](https://i.imgur.com/tjq8oe7.png)\n{% endnote %}\n\n以下是AC程式碼：\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define N 3005\n#define FOR(i,n) for(int i=0;i<n;i++)\n#define pii pair<int,int>\n#define pid pair<int,double>\n#define pdi pair<double,int>\nusing namespace std;\nint n,m,s1,e1,w1,s2,e2,w2,dis[N][N];\nbool visit[N];\nvector<int> edge[N];\n\nint main(){\n    cin>>n>>m;\n    for(int i=0;i<m;i++){\n        int a,b;cin>>a>>b;\n        edge[a].push_back(b);\n        edge[b].push_back(a);\n    }\n    cin>>s1>>e1>>w1>>s2>>e2>>w2;\n    memset(dis,0x3f3f3f3f,sizeof(dis));\n    \n    for(int i=1;i<=n;i++){\n        memset(visit,0,sizeof(visit));\n        queue<int>que;\n        que.push(i);\n        visit[i] = 1;\n        dis[i][i] = 0;\n        while(!que.empty()){\n            int cur = que.front();\n            que.pop();\n            for(auto j:edge[cur]){\n                if(visit[j])continue;\n                dis[i][j] = dis[i][cur]+1;\n                visit[j] = 1;\n                que.push(j);\n            }\n        }\n    }\n    if(dis[s1][e1]>w1||dis[s2][e2]>w2){\n        cout<<-1<<endl;\n        return 0;\n    }\n    int ans = dis[s1][e1]+dis[s2][e2];\n\n    //O(n^2)枚舉所有共同邊\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=n;j++){\n            if(dis[s1][i]+dis[i][j]+dis[j][e1]<=w1&&dis[s2][i]+dis[i][j]+dis[j][e2]<=w2)\n                ans = min(ans,dis[s1][i]+dis[i][j]+dis[j][e1]+dis[s2][i]+dis[j][e2]);\n            if(dis[s1][i]+dis[i][j]+dis[j][e1]<=w1&&dis[e2][i]+dis[i][j]+dis[j][s2]<=w2)\n                ans=min(ans,dis[s1][i]+dis[i][j]+dis[j][e1]+dis[e2][i]+dis[j][s2]);\n            \n        }\n    }\n    cout<<m-ans<<endl;\n}\n```\n\n###  TIOJ 2180 勇者冒險 (Adventure)\n[題目連結](https://tioj.ck.tp.edu.tw/problems/2180)\n[Submission](https://tioj.ck.tp.edu.tw/submissions/262669)\n\n> 題目敘述\n> 給定一個地圖共 $R\\times C$ 行，接著會有 $M$ 行每一行都有一個座標和等級，代表經過這個座標需要多少等級才能通過。問從特定起點到終點所需要的最低的等級為多少。\n\n這題蠻特別的，他用到了Dijkstra中每一次都找最小的去更新，同時因為要求的是路徑上最大的等級為何，因此也用到了類似BFS的手法去擴展每一個座標。\n\n因為題目保證至少會有一條路徑通往起點與終點，同時我們每一次從queue拿出來的都是目前等級最低的點，因此如果碰到終點就可以確定這一條路線一定是需要等級最小的一條路徑！\n\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define int long long\n#define double long double\n#define N 1005\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define rrep(i,l,r) for(int i=l;i<r;i++)\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,row,col,mp[N][N],dis[N][N];\nint s1,s2,e1,e2;\nint dx[4] = {0,-1,0,1},dy[4] = {1,0,-1,0};\nbool visit[N][N];\ntypedef pair<int ,pair<int,int>> pp;\n\nvoid Dijkstra(){\n    //Dijkstra\n    priority_queue<pp,vector<pp>,greater<pp>> pq;\n    dis[s1][s2] = 0;\n    pq.push({0,{s1,s2}});\n    \n    while(!pq.empty()){\n        int rr = pq.top().y.x,cc = pq.top().y.y;\n//        cout<<rr<<\" \"<<cc<<\"  \"<<dis[rr][cc]<<endl;\n        pq.pop();\n        for(int i=0;i<4;i++){\n            int nx = rr+dx[i],ny = cc+dy[i];\n            if(nx<0||ny<0||nx>=row||ny>=col)continue;\n            if(nx == e1 && ny == e2){\n                cout<<dis[rr][cc]<<endl;\n                return;\n            }\n            if(mp[nx][ny] == -1)continue;\n            if(visit[nx][ny])continue;\n            dis[nx][ny] = max(dis[rr][cc],mp[nx][ny]);\n            pq.push({dis[nx][ny],{nx,ny}});\n            visit[nx][ny] = 1;\n        }\n    }\n}\n\nsigned main(){\n    Orz;\n    cin>>row>>col;\n    memset(dis,0,sizeof(dis));\n    memset(visit,0,sizeof(visit));\n    memset(mp,-1,sizeof(mp));\n    cin>>s1>>s2>>e1>>e2;\n    cin>>n;\n    while(n--){\n        int a,b,c;cin>>a>>b>>c;\n        mp[a][b] = c;\n    }\n    Dijkstra();\n}\n```\n\n### 最小花費的航空之旅\n> 題目敘述：\n> 給定很多種連接城市間的聯票，要求從起始站搭乘，可以在中途任意站下車，但下車以後就不能再次上車。輸入的第一行為一個正整數 n (1 ≤ n ≤ 20)，即聯票的種類數。以下 n 行每航為一個聯票的資訊，其中第一個整數為聯票的價格，然後是聯票上城市的數目。\n> \n> 接下來為一個行程單的資訊，其中第一個正整數為行程單上的城市數目k（包括起始城市，2 ≤ k ≤ 10），以及這些城市的編號（按順序列出）。\n> \n> 輸出最小花費和對應的方案的其中一組解。\n\n這一題是APCS Class的其中一題，難度頗高，因為他要找最短的路徑，同時增加了可以在任意站下車的條件。首先我們要維護每一個聯票的資訊，它的價值、起點、編號以及經過的城市。接著，我們考慮所有從起點出發的聯票，將每一種聯票上的每一個經過的城市都加入queue中。\n\n跟上一題一樣，當我們每一次都從cost最小的點下手，在轉移的過程中如果將所有的點都走訪一遍，則他的路徑必定是最短的，因為每一次的更新都是從花費最小的路徑去轉移。\n\n{% note primary %}\n**使用自定義比較函數放入Priority_queue中**\n\nPriority_queue中的比較函數需要使用到struct或class包覆的比較函數，若要回傳cost的最小值，則必須以大於來寫（有點像預設是pop出最大值，使用的卻是less<int>的比較函數）\n\n```cpp=\nstruct cmp{\n    bool operator()(node a,node b){\n        return a.cost > b.cost;\n    }\n};\n```\n{% endnote %}\n\n以下是AC Code：\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define int long long\n#define double long double\n#define N 105\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define rrep(i,l,r) for(int i=l;i<r;i++)\n#define pii pair<int,int>\n#define pif pair<int,float>\n#define x first\n#define y second\nusing namespace std;\nint n,k,visit[20];\n\nstruct Ticket{\n    int id,cost;\n    vector<int> next_city;\n    //陣列ticket[i]存以i為起點\n};\nvector<Ticket> ticket[30];          //ticket[i] 起點為i的聯票\n\nstruct node{\n    int cost,cur_pos,visit_pos;\n    vector<int> used_ticket;\n    //cur_pos現在所在位置、visit_pos在行程單上位置\n};\n\nstruct cmp{\n    bool operator()(node a,node b){\n        return a.cost > b.cost;\n    }\n    //讓priority_queue可以pop出最小的cost的路徑\n};\npriority_queue<node,vector<node>,cmp> pq;\n\nsigned main(){\n    Orz;\n    cin>>n;\n    rep(i,1,n){\n        int cost,num,s;cin>>cost>>num>>s;\n        vector<int> temp;\n        rep(j,1,num-1){\n            int k;cin>>k;\n            temp.push_back(k);\n        }\n        ticket[s].push_back({i,cost,temp});\n    }\n    cin>>k;\n    rep(i,1,k)cin>>visit[i];\n    \n    for(auto i : ticket[visit[1]]){         //行程第一個起點的聯票起點\n        int p = 1;\n        for(auto j : i.next_city){\n            if(p < k && j == visit[p+1])p++;\n            pq.push({i.cost,j,p,{i.id}});\n//            cout<<\"一開始聯票：\"<<i.id<<\" \"<<j<<endl;\n        }\n    }\n    while(!pq.empty()){\n        node cur = pq.top();\n        pq.pop();\n        if(cur.visit_pos == k){\n            cout<<\"Cost = \"<<cur.cost<<\", Tickets used: \"\n                <<cur.used_ticket[0];\n            for(int i=1;i<cur.used_ticket.size();i++)\n                cout<<\", \"<<cur.used_ticket[i];\n            cout<<endl;\n            break;\n        }\n        for(auto i : ticket[cur.cur_pos]){\n            vector<int> vec(cur.used_ticket);\n            vec.push_back(i.id);                //將現在使用的第i聯票推入\n            int p = cur.visit_pos;\n            for(auto j : i.next_city){\n                if(p < k && j == visit[p+1])p++;\n                pq.push({cur.cost+i.cost,j,p,vec});\n            }\n        }\n    }\n}\n```","source":"_posts/Shortest_Path_problem.md","raw":"---\ntitle: 2020資訊之芽—最短路徑例題\ndate: 2021-8-16\ntags: \n    - 2020資訊之芽\n    - 2021暑期筆記\ncategories:\n    - C++進階主題\n    - 最短路徑\nmathjax: true\n---\n\n## 題目目錄\n- 可魚果運輸問題\n- 百慕達三角洲\n- 江神與他的小火車\n- 貨物運送計劃\n- E.漢米頓的麻煩\n- 旅遊規劃問題\n- Codeforces 543B: Destroying Roads\n<!-- more -->\n\n### 可魚果運輸問題\n[題目連結](https://neoj.sprout.tw/problem/391/)\n[Dijkstra's Algorithm](https://neoj.sprout.tw/challenge/178079/)\n[SPFA](https://neoj.sprout.tw/challenge/178078/)\n這一題的來源是NPSC2013的題目，題目大意如下：\n\n> 有n個城市m個運輸方案，每個方案 $P_i$ 會從一個固定的起始城市 $A_i$ 運送東西到另一個固定的終點城市 $B_i$，每運輸一件物品，就必須付 $C_i$ 價錢。若用方案 $P_i$ 運輸了超過 $D_i$ 件物品，多出來的部份每件物品收 $C_i'$ 元。共要運輸 $f$ 物品。\n> 求起點 $s$ 到終點 $e$ 的最短路徑。\n\n當運輸總量超過 $D_i$ 件物品，表示可以使用更小的邊權重去計算接下來的費用。這時候我們可以了解到一個性質，如果我把全部的物品全部集中在一條路徑運送，因為送的越多，相對的在費用上就可能產生優惠，比分散多條路徑的運送花費來的小。因為總共要運送 $f$ 件物品，因此會將邊的權重設定為當 $f$ 件物品都經過這一條邊時，所要花費的價格。\n\n有了邊以及價格之後，便可開始進行最短路徑的演算法。因為題目範圍 $N≤100$ ，因此用Dijkstra's 或是 SPFA 都可以做（Bellman-Ford就先不要XD）。\n\n#### Dijkstra's Algorithm\n\n這篇有[一篇論文](http://www-m3.ma.tum.de/foswiki/pub/MN0506/WebHome/dijkstra.pdf)是Dijkstra在針對最短路徑寫的論文（也就是以他名字命名的演算法論文），這篇只有三頁耶！\n以下是「演算法導論」這本書中演算法的虛擬碼：\n```\nDIJKSTRA(G, w, s)\n  1  INITIALIZE-SINGLE-SOURCE(G, s)\n  2    S <- Ø\n  3    Q <- V[G]\n  4    while Q ≠ Ø\n  5        do u <- EXTRACT-MIN(Q)\n  6            S <- S ∪ {u}\n  7            for each vertex v ∈ Adj[u]\n  8                do RELAX(u,v,w)\n```\n其中集合 $S$ 在程式碼中代表的是visit，而集合 $Q$ 因為要操作取出最小元素的動作，因此會用priority_queue實現，以heap來進行 $O(\\log n)$ 的插入以及取出。\n\n這裡面使用$visit$判斷是否在集合 $S$ 中，但我們可以發現，如果在priority_queue中有兩個點的存在，第一個點處理完被加入集合 $S$ 中之後，第二次再次被拿出來進行處理時就不會有任何相鄰的點再一次被處理，這是因為第一次與第二次更新所使用的 $dis[cur]$ 是一樣的。因此，當一個點已經在visit中（也就是在集合 $s$ 中），我們可以直接換下一個點去執行（不過如果忘了visit也是沒差啦）。\n\n{% note default %}\n**複雜度分析**\n\n以下分析一下演算法時間複雜度，總共有兩個時間複雜度，取決於使用何種資料結構來實作。\n\n**1. 時間複雜度 $O(V^2+E)$**\n首先是每一個點執行 $V$ 次對每一個相鄰的點進行更新，每一輪執行 $O(V)$ 尋找目前距離 $dis$ 最小的點。總共有 $E$ 條邊需要更新，因此最後要把 $E$ 再加上去。這樣總複雜度就會 $V\\times O(V)+O(E) = O(V^2+E)$。此實作方式一般在稠密的圖中會有比較好的表現。\n<br>\n\n**2. 時間複雜度 $O((V+E)\\log V)$**\n這一題在 $O(n)$ 爆搜尋找改用heap去優化，因此複雜度就會是一樣執行V 輪利用 $O(logV)$ 找到距離 $dis$ 最小的點，同時將更新後的點放進heap中，我們知道放入heap的複雜度也是 $O(\\log n)$，因此複雜度就會變成 $O(V\\log V)+O(E\\log V) = O((V+E)\\log V)$。此實作方式一般在稀疏的圖中會有比較好的表現，從 $V$ 與 $E$ 的大小估計可以大致發現。\n{% endnote %}\n以下是程式法的實作，最需要注意的地方是pair的first跟second儲存的東西。在存圖時會使用（點,權重）搭配vector；而在priority_queue中，因為要對權重進行比較，因此會用（權重,點），需要特別注意別搞混了!\n\n{% note success %}\n**Priority_Queue實作細節**\n\n預設的priority_queue會pop出目前heap中最大的元素（預設是less<>函數），如果要實作一個min heap 的話要使用greater<>函數，同時第二個傳進函數的參數要用一個vector！\n\n```cpp=\npriority_queue <Type, vector<Type>, ComparisonType > min_heap;\npriority_queue <pii,vector<pii>,greater<pii>> pq;   \n```\n{% endnote %}\n\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define int long long\n#define ios ios::sync_with_stdio(0),cin.tie(0)\n#define N 105\n#define FOR(i,n) for(int i=0;i<n;i++)\n#define pii pair<int,int>\nusing namespace std;\n\nvoid solve(){\n    vector<pii> edge[N];                //存圖\n    int n,m,s,e,f;cin>>n>>m>>s>>e>>f;\n    int dis[N];fill(dis,dis+N,1e16);\n    bool visit[N];                     //城市數n、方案數m、s起、e終、f箱數\n    memset(visit,0,sizeof(visit));\n    \n    for(int i=0;i<m;i++){\n        int a,b,c,d,e;cin>>a>>b>>c>>d>>e;\n        //一條由a連到b的邊，權重c，流量超過d，則改權重c\n        int val = (f>d?c*d+e*(f-d):c*f);\n        edge[a].push_back({b,val});\n    }\n    //Dijkstra\n    priority_queue<pii,vector<pii>,greater<pii>> pq;    //(距離,點)\n    pq.push({0,s});\n    dis[s] = 0;\n    \n    while(!pq.empty()){\n        int cur = pq.top().second;\n        pq.pop();\n        if(visit[cur])continue;\n        \n        for(auto i:edge[cur]){\n            int next = i.first,weight = i.second;\n            \n            if(dis[cur]+weight<dis[next]){\n                dis[next] = dis[cur]+weight;\n                pq.push({dis[next],next});\n            }\n        }\n        visit[cur] = 1;\n    }\n    cout<<dis[e]<<endl;\n}\n\nsigned main(){\n    ios;\n    \n    int t;cin>>t;\n    while(t--){\n        solve();\n    }\n}\n```\n\n#### Shortest Path Faster Algorithm(SPFA)\n這是一個使用queue最佳化的Bellman-Ford演算法，基本的使用方式跟BFS幾乎相同，在Bellman-Ford對邊進行更有效率的鬆弛(relaxation)。\n以下一樣是「演算法導論」中Bellman-Ford的虛擬碼：\n```\nBELLMAN-FORD(G,w,s)\n  1    INITIALIZE-SINGLE-SOURCE(G,s)\n  2    for i <- 1 to |V[G]|-1\n  3        do for each edge (u,v)∈ E[G]\n  4            do RELAX(u,v,w)\n  5    for each edge (u,v)∈ E[G]\n  6        do if d[v] > d[u]+w(u,v)\n  7            then return FALSE\n  8    return TRUE\n```\n以下是SPFA的虛擬碼，如果節點有被實際鬆弛過，且節點不在queue中（同樣元素在queue中出現兩次沒有意義，因為只要確保有在queue中等會會被更新到就好，到它的最短距離不會被改變），便將此節點推入queue中。裡面存的是帶進行鬆弛的節點們，也就是被剛剛更新過的節點。我們可以利用$visit[ ]$來 $O(1)$ 判斷節點是否有在queue中！\n\n有進行判斷是否在queue中的（比較省空間一點）：\n![](https://i.imgur.com/vdtJWR2.png)\n沒有進行判斷的，有被更新過就塞進去：\n![](https://i.imgur.com/fsorAoE.png)\n\n```\nShortest-Path-Faster-Algorithm(G, s)\n  1    for each vertex v ≠ s in V(G)\n  2        d(v) := ∞\n  3    d(s) := 0\n  4    offer s into Q\n  5    while Q is not empty\n  6        u := poll Q\n  7        for each edge (u, v) in E(G)\n  8            if d(u) + w(u, v) < d(v) then\n  9                d(v) := d(u) + w(u, v)\n 10                if v is not in Q then\n 11                    offer v into Q\n```\n\nSPFA有一個問題，他可以被出題目的人設計測資去卡這種算法，使時間複雜度變成糟糕的$O(V^2)$，因此一般來說會實作Dijkstra而非SPFA！\n\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define int long long\n#define ios ios::sync_with_stdio(0),cin.tie(0)\n#define N 105\n#define FOR(i,n) for(int i=0;i<n;i++)\n#define pii pair<int,int>\nusing namespace std;\n\nvoid solve(){\n    vector<pii> edge[N];                //存圖\n    int n,m,s,e,f;cin>>n>>m>>s>>e>>f;\n    int dis[N];fill(dis,dis+N,1e16);\n    bool visit[N];                     //城市數n、方案數m、s起、e終、f箱數\n    memset(visit,0,sizeof(visit));\n    \n    for(int i=0;i<m;i++){\n        int a,b,c,d,e;cin>>a>>b>>c>>d>>e;\n        //一條由a連到b的邊，權重c，流量超過d，則改權重c\n        int val = (f>d?c*d+e*(f-d):c*f);\n        edge[a].push_back({b,val});\n    }\n    //SPFA\n    \n    queue<int> que;\n    que.push(s);\n    dis[s] = 0;\n    visit[s] = 1;\n    \n    while(!que.empty()){\n        int cur = que.front();\n        que.pop();\n        visit[cur] = 0;                //pop出來將狀態改成不在queue中\n        for(auto i:edge[cur]){\n            int next = i.first,weight = i.second;\n            if(dis[next] > dis[cur]+weight){\n                dis[next] = dis[cur]+weight;\n                if(!visit[next])que.push(next);\n            }\n        }\n    }\n    cout<<dis[e]<<endl;\n}\n\nsigned main(){\n    ios;\n    \n    int t;cin>>t;\n    while(t--){\n        solve();\n    }\n}\n```\n\n### 百慕達三角洲\n[題目連結](https://neoj.sprout.tw/problem/393/)\n> 題目大意：\n> 給定一張長n寬m的矩形圖，由\"#\"和\".\"組成，給定起點$(x_1,y_1)$以及終點$(x_2,y_2)$，必須最小化經過\".\"的次數，求最少需幾過幾次。\n\n當下看到這一個題目的想法，就是跟處理一般的圖論題目一樣，將邊用vector儲存起來，將經過\".\"的權重設為很大的一個數字，這樣用Dijkstra做一次最短路徑就可以找出經過\".\"最小化的次數了！\n\n以下是MLE的[Submission](https://neoj.sprout.tw/challenge/178136/)\n![](https://i.imgur.com/9ZaisdZ.png)\n吃了開心的MLE，如果當成一般的圖在處理，不管是在 $dis$ 開long long的處裡，或是開了一個vector陣列儲存邊，都非常的消耗空間。因此，我詢問了一下電神這一題的想法，他說我的想法用Dijkstra是正確的，不過在設定邊權的部分可以直接用0跟1代替，而且可以用queue去輔助實作BFS（要說它也可以是Dijkstra的另一種比較簡單的版本）。\n\n![](https://i.imgur.com/9JldAha.png)\n\n這題也就是所謂[0-1 BFS (Shortest Path in a Binary Weight Graph)](https://www.geeksforgeeks.org/0-1-bfs-shortest-path-binary-graph/)，或是[這裡0-1 BFS](https://codeforces.com/blog/entry/22276)，想法可以說是Dijkstra跟BFS的綜合（其實它跟SPFA也很相似）。以下是實作步驟：\n\n1. 建立雙向的佇列(deque)，等等要存放被relax過的點，初始放入起點\n2. 每一次從deque前方pop出一點，對那一點相鄰的所有點進行鬆弛\n3. 如果被鬆弛時的邊權重為0，將點push dequeue的前方\n4. 否則當鬆弛時的邊權重為1，將點push dequeue的後方\n5. 重複執行2-4步驟直到deque為空\n\n當我們一直利用deque最前端的元素進行鬆弛，因為我們將邊權為0的元素放入最前端，用距離最小的那些點進行鬆弛，每一個點最多會被鬆弛一次，因此總時間複雜度為$O(V+E)$，比起用Dijktra直接做$O((V+E)\\log V)$快了許多（此演算法之所以正確是因為其中一邊的權重是0，不管0接到誰他的權重也都是0，有點像「從最小層逐漸擴展」的概念）！\n\n{% note success %}\n小問題（出處[這裡](https://codeforces.com/blog/entry/22276)）\n1. Can we apply the same trick if our edge weights can only be 0 and x (x >= 0) ?\n2. Can we apply the same trick if our edge weights are x and x+1 (x >= 0) ?\n3. Can we apply the same trick if our edge weights are x and y (x,y >= 0) ?\n\n解答YES,NO,NO\n{% endnote %}\n\n這題之所以可行是因為有一邊的權重是0，當點皆以權重為0串再一起時，他會是最短的，使用最短去更新接下來的點，因此第一題是正確的！但第二題與第三題是錯誤的，考慮以下點與邊的情況：\n\n![](https://i.imgur.com/BYojGwm.jpg)\n\n當我依照01BFS的方法不斷去用x更新其他的點，更新完之後會發現點1到點3的最短路徑應該是x+1，到時候又要再重新Relax一次，複雜度會爆炸喔（比SPFA可能還慘，因為當點三利用兩個x更新完之後，用它來做跟3所有相鄰的點，做完卻發現$(1,3)$有更短的距離，又必須重新全部更新一次！）總結來說，他只是用於只有兩種邊的情況，且其中一邊必須為0。\n\n\n\n![](https://i.imgur.com/wnXKbI8.png)\n\n{% note info %}\n**比較一下記憶體用量**\n最主要還是時間複雜度的比較，不過既然空間已經爆了，時間也沒法比了QQ\n\n**MLE**\n\n```cpp=\n#define N 2005\n#define N2 4000005\nint n,m,q,predecessor[N2],dis[N2];\nbool visit[N2],maze[N2];\nvector<pii>edge[N2];\n```\n**AC**\n```cpp=\n#define N 2003\nint n,m,dis[N][N];\nbool visit[N][N],maze[N][N];\n```\n{% endnote %}\n以下是使用deque實作01BFS的AC code：\n\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define int long long\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define N 2003\n#define FOR(i,n) for(int i=0;i<n;i++)\n#define pii pair<int,int>\nusing namespace std;\nint n,m,dis[N][N];\nint dx[4] = {0,-1,0,1},dy[4] = {1,0,-1,0};\nbool visit[N][N],maze[N][N];\n\nvoid solve(){\n    cin>>n>>m;\n    memset(visit,0,sizeof(visit));\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=m;j++){\n            char temp;cin>>temp;\n            if(temp=='.')maze[i][j] = 1;\n            else maze[i][j] = 0;\n        }\n    }\n    deque<pii>deq;\n    int s1,s2,e1,e2;cin>>s1>>s2>>e1>>e2;\n    memset(dis,0x3f3f3f3f,sizeof(dis));\n    dis[s1][s2] = 0;\n    deq.push_back({s1,s2});\n    while(!deq.empty()){\n        int x = deq.front().first,y = deq.front().second;\n        deq.pop_front();\n        for(int i=0;i<4;i++){\n            int nx = x+dx[i],ny = y+dy[i];\n            if(nx<1||nx>n||ny<1||ny>m)continue;\n            \n            if(dis[nx][ny] > dis[x][y]+maze[nx][ny]){\n                dis[nx][ny] = dis[x][y]+maze[nx][ny];\n                if(maze[nx][ny]==0)deq.push_front({nx,ny});\n                else deq.push_back({nx,ny});\n            }\n        }\n    }\n    cout<<dis[e1][e2]<<endl;\n}\n\nsigned main(){\n    Orz;\n    int t;t = 1;\n    while(t--){\n        solve();\n    }\n}\n```\n\n### 江神與他的小火車\n[題目連結](https://neoj.sprout.tw/problem/431/)\n\n> 題目大意\n> 已知有N個點以及M條邊，總共有Q筆詢問，每筆詢問有$\\delta(a,b)$，表示新增一條由 $a$ 指向 $b$ 的邊（其權重為1），對每一筆詢問輸出從點 $1$ 到點 $N$ 的最短距離。\n\n![](https://i.imgur.com/f96GUmd.jpg)\n\n我們知道如果有用新加進來的邊 $\\delta(a,b)$，則路徑可以被拆解成 $\\delta(1,a)+\\delta(a,b)+\\delta(b,n)$。其中，我們可以用Dijkstra 一次尋找1到任何點的最短距離，那要如何處理路徑 $\\delta(b,n)$ 呢？這就是**單一目的最短距離問題**，我們可以將所有的邊逆序，將終點做一次Dijkstra尋找最短路，這時候我們就可以用 $O(1)$ 的時間回答每一筆詢問，總時間複雜度：預處理$O((V+E)\\log V)$，詢問 $O(Q)$。\n\n{% note info %}\n**測資小問題**\n有一筆測資如下，藍線是給定的路徑與權重，紅色是新加入的邊，如果按照上面 $\\delta(1,a)+\\delta(a,b)+\\delta(b,n)$ 我們可以計算出從起點到終點的最短距離為：$2+1+4 = 7$，很明顯兩點之間的最短距離是 $5$ ，但因為原本作法會經過一條$\\delta (B,C)$ 的重邊，造成算出來的距離是比較大的！這時候我們只要對最短路徑長度取min即可，也就是說在這種情況加入這一條邊並不會影響最短路徑的長度！\n\n> 測資（1,2,3分別對應A,B,C）：\n> 6 5 1\n> 1 2 1\n> 2 3 1\n> 3 4 1\n> 4 5 1\n> 5 6 1\n> 3 2\n\n![](https://i.imgur.com/Uocw0hc.png)\n{% endnote %}\n接下來是程式碼，之後如果遇到最短路徑的題目，一般來說會避免使用SPFA（除非有負邊），為了要避免最糟的時間複雜度，因此會使用Dijkstra來處理最短路徑問題！\n\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define int long long\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define N 200005\n#define FOR(i,n) for(int i=0;i<n;i++)\n#define pii pair<int,int>\nusing namespace std;\nint n,m,q;\nbool visit[N];\nvector<pii> edge[2][N];\n//edge[0]->normal,edge[1]->opposite\n\nvector<int> Dijkstra(int start,int end,bool is_nor){\n    memset(visit,0,sizeof(visit));\n    vector<int> dis(n+2,1e16);\n    \n    priority_queue<pii,vector<pii>,greater<pii>> pq;\n    \n    dis[start] = 0;\n    pq.push({0,start});\n    \n    while(!pq.empty()){\n        int cur = pq.top().second;\n        pq.pop();\n        if(visit[cur])continue;\n        \n        visit[cur] = 1;\n        for(auto i : edge[is_nor][cur]){\n            int next = i.first,weight = i.second;\n            if(dis[next] > dis[cur] + weight){\n                dis[next] = dis[cur] + weight;\n                pq.push({dis[next],next});\n            }\n        }\n    }\n    return dis;\n}\n\nvoid solve(){\n    \n    cin>>n>>m>>q;\n    for(int i=0;i<m;i++){\n        int a,b,w;cin>>a>>b>>w;\n        edge[0][a].push_back({b,w});\n        edge[1][b].push_back({a,w});\n    }\n    \n    vector<int> normal,opposite;\n    normal = Dijkstra(1,n,0);\n    opposite = Dijkstra(n,1,1);\n    \n    while(q--){\n        int a,b;cin>>a>>b;\n        cout<<min(normal[a]+opposite[b]+1,normal[n])<<endl;\n    }\n}\n\nsigned main(){\n    Orz;\n    int t;t = 1;\n    while(t--){\n        solve();\n    }\n}\n```\n### 貨物運送計劃\n[題目連結](https://tioj.ck.tp.edu.tw/problems/1641)\n\n> 題目敘述\n> 給定N個點M條邊，第i條邊有方邊率$C_i$，假設目前運送貨物重量p經過此邊，代表經過邊i會需要多增加 $p\\times C_i$ 的重量。給定起點、終點，求到達終點時最少的貨物重量為多少。\n\n換種說法，題目要求的是每經過一條邊，就要乘上某一個數，要求到終點最小的重量。下圖是題目範例測資：\n![](https://i.imgur.com/BSNWgh8.png)\n\n$\\delta(1,2)\\to\\delta(2,3)$，所付出的代價是$(1\\times (1+1))\\times (2+1)=6$。如果是$\\delta(1,3)$ 的話直接$1\\times (4+1)=5$，可以觀察到，遇到邊就需要將原本的數字乘上$C_i+1$。\n\n我們可以透過將邊權取 $\\log$ 之後，就可以利用Dijkstra進行最短路徑的計算，因為取 $\\log$ 後的加減運算等同於原本的乘法運算，只要最後把算出來的答案次方即可！\n\n這一題的輸出要求科學記號（為了要避免浮點數誤差），以下程式碼來達成（要求小數點後兩位，同時次方部分要求整數3位）：\n```cpp=\nprintf(\"%.2fe+%03lld\\n\",pow(10,ans),x);\n```\n程式碼的部分，透過$edge$存完所有的取完 $\\log$ 之後的邊，進行Dijkstra，輸出最短路徑（以科學記號表示）即可！\n\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define int long long\n#define N 10005\n#define FOR(i,n) for(int i=0;i<n;i++)\n#define pii pair<int,int>\n#define pid pair<int,double>\n#define pdi pair<double,int>\nusing namespace std;\nint n,m,s,t;\ndouble dis[N];\nbool visit[N];\nvector<pid> edge[N];\n\nvoid solve(){\n    memset(visit,0,sizeof(visit));\n    \n    scanf(\"%lld %lld %lld %lld\",&n,&m,&s,&t);\n    for(int i=0;i<m;i++){\n        int a,b;double c;scanf(\"%lld %lld %lf\",&a,&b,&c);\n        edge[a].push_back({b,(double)log10(c+1)});\n    }\n    fill(dis,dis+n+2,1e16);\n    \n    priority_queue<pdi,vector<pdi>,greater<pdi>> pq;\n    dis[s] = 0.0;\n    pq.push({0,s});\n    \n    while(!pq.empty()){\n        int cur = pq.top().second;\n        pq.pop();\n        if(visit[cur])continue;\n        visit[cur] = 1;\n        \n        for(auto i:edge[cur]){\n            int next = i.first;\n            double w = i.second;\n            if(dis[next] > dis[cur]+w){\n                dis[next] = dis[cur]+w;\n                pq.push({dis[next],next});\n            }\n        }\n    }\n    double ans = dis[t];\n    int x = floor(ans);\n    ans-=x;\n    \n    printf(\"%.2fe+%03lld\\n\",pow(10,ans),x);\n}\n\nsigned main(){\n    int t;t = 1;\n    while(t--){\n        solve();\n    }\n}\n```\n\n### E.漢米頓的麻煩\n[題目連結](https://tioj.ck.tp.edu.tw/problems/1096)\n\n他題目時不時提到漢米頓，是多愛漢米頓XDD（這一題跟漢米頓根本沒關係）\n\n> 題目大意\n> 在一張n(n≤100)個點的圖中，尋找路徑長度最短的環\n\n那就用**Floyd-Warshall**找最小的環就好！\n\n{% note info %}\n**Floyd-Warshall**\n這就是dp的作法，用 $O(N^3)$ 的時間進行轉移，就能得到全點對的最短路徑。這邊有一個重要的轉移順序，也就是中點-起點-終點進行轉移，如果把dp展開就會發現中點必須在最外層進行轉移：\n\n> 定義 $dp[k][i][j]$ 為點 $i$ 走到點 $j$ ，只能經過前k個點的最短路徑，則轉移式變成：\n> $$d[k+1][i][j] = min(d[k][i][j], d[k][i][k+1]+d[k][k+1][j])$$\n\n每一個k+1都是由k轉移而來，仰賴k的點的配對，因此必須最先轉移中點k的部分！（不過順序顛倒也不會怎樣啦，上面「課程內容」的地方有寫到）\n{% endnote %}\n同樣這一份code也可以判斷有沒有負環，只要ans小於0的話代表有負環（有的話距離是不能用的喔，因為Floyd-Warshall不能處理負環，但負邊是可以處理的）\n\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define int long long\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define N 101\n#define FOR(i,n) for(int i=0;i<n;i++)\n#define pii pair<int,int>\n#define pid pair<int,double>\n#define pdi pair<double,int>\nusing namespace std;\nint n,dp[N][N];\n\nvoid solve(){\n    memset(dp,0x3f3f3f3f,sizeof(dp));\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            int temp;cin>>temp;\n            if(temp!=0)dp[i][j] = temp;\n        }\n    }\n    for(int k=0;k<n;k++){\n        for(int i=0;i<n;i++){\n            for(int j=0;j<n;j++){\n                dp[i][j] = min(dp[i][j],dp[i][k]+dp[k][j]);\n            }\n        }\n    }\n    int ans = INT_MAX;\n    for(int i=0;i<n;i++){\n        ans = min(ans,dp[i][i]);\n    }\n    if(ans == INT_MAX)cout<<-1<<endl;\n    else cout<<ans<<endl;\n}\n\nsigned main(){\n    while(cin>>n && n!=0){\n        solve();\n    }\n}\n```\n\n### 旅遊規劃問題\n[題目連結](https://tioj.ck.tp.edu.tw/problems/1028)\n[Submission](https://tioj.ck.tp.edu.tw/submissions/262198)\n這一題 $n≤13$ 大概就是位元dp來完成（狀態壓縮），定義 $dp[i][j]$ 為現在在點i上，拜訪過點集j的最短距離（j中不包含點i）。這裡使用到了同層轉移的技巧，也就是利用j中的點，對相同狀態下不在i中的點進行更新。\n\n點集j中在狀態i下為起點，用Dijkstra對不在i中的其他點進行更新，最後的答案即為$dp[s][S-(1<<s)]$。\n\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define int long long\n#define double long double\n#define N 14\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define pii pair<int,int>\nusing namespace std;\nint n,m;\nvector<pii> edge[N];\nint dis[N],dp[N][1<<N],pre[N][1<<N];\nbool visit[N];\n//定義dp[i][j]為現在在點i，拜訪過點集合j（i不在點集j中）\n\nsigned main(){\n    cin>>n>>m;\n    rep(i,1,m){                                 //讀入m條邊\n        int a,b,w;cin>>a>>b>>w;\n        edge[a].push_back({b,w});\n        edge[b].push_back({a,w});\n    }\n    int S = 0,start = -1;cin>>m;                //S為待拜訪的所有點集合\n    rep(i,1,m){\n        int temp;cin>>temp;\n        S = S|(1<<temp);\n        if(start == -1)start = temp;\n    }\n    \n    rep(i,0,n)rep(j,0,(1<<n))dp[i][j] = INF;\n    rep(i,0,n)dp[i][0] = 0;\n    \n    for(int i=1;i<(1<<n);i++){\n        if(i == (S & i)){                       //在集合i中的點在S一定要有\n            priority_queue<pii,vector<pii>,greater<pii>> pq;\n            fill(dis,dis+n,INF);                //將dis初始為無限大，做Dijkstra\n            memset(visit,0,sizeof(visit));\n            for(int j=0;j<n;j++){\n                if(i&(1<<j)){                   //從有在i中的點向不在的點做Dijkstra\n                    dis[j] = dp[j][i^(1<<j)];   //目前在j，經過拜訪了點集i（不包含點j）\n                    pq.push({dis[j],j});        //利用在i中的點對其他點進行更新\n                }\n            }\n            while(!pq.empty()){\n                int cur = pq.top().second;\n                pq.pop();\n                visit[cur] = 1;\n                for(auto k : edge[cur]){\n                    int v = k.first,w = k.second;\n                    if(i&(1<<v))continue;\n                    if(dis[v] > dis[cur]+w){\n                        dis[v] = dis[cur] + w;\n                        pre[v][i] = cur;        //紀錄點v在狀態i下由cur轉移\n                        pq.push({dis[v],v});\n                    }\n                    else if(dis[v] == dis[cur]+w && pre[v][i] > cur){\n                        pre[v][i] = cur;\n                    }\n                }\n            }\n            for(int j=0;j<n;j++){               //對於不在點集i中的點進行更新\n                if(i & (1 << j))continue;\n                dp[j][i] = dis[j];              //同層狀態轉移，更新dp[j][i]\n            }\n        }\n    }\n    cout<<\"Minimum travel distance: \"<<dp[start][S^(start)]<<endl;\n    cout<<\"Travel route:\";\n    int cur = start;S = S^(1<<start);\n    while(true){\n        cout<<\" \"<<cur;\n        if(!S)break;\n        cur = pre[cur][S];\n        if(S&(1<<cur))S = (S^(1<<cur));         //經過的點不一定是指定的觀光點\n    }\n    cout<<endl;\n}\n```\n\n### Codeforces 543B: Destroying Roads\n[題目連結](https://codeforces.com/problemset/problem/543/B)\n[Submission](https://codeforces.com/problemset/submission/543/125743532)\n\n> 題目大意\n> 給定N個點M條無向邊，每一邊權重都是1，以及兩筆資料，由三個數$(x,y,w)$ 構成，代表起點為x、終點為x、要在w距離內從起點走到終點。試問最多可以拔掉幾條邊同時滿足以上兩個資料所描述的特性？\n\n這一題蠻有趣的，首先他的邊權重都是1，因此我們可以直接用BFS尋找最短路徑，並且點第一次拜訪到時的就是該點的最短距離（BFS一層一層擴展）。\n\n{% note primary %}\n**第一個想法：錯誤想法**\n我先將兩個起點與終點的最短路徑都找出來，把將過的邊都標上不能移除，將其他的邊全部拔掉。\n\n**問題點：**\n固然找到的是最短路徑，但不代表可以最大化拔除邊的數量。因為題目要求兩點只要符合最短距離 $w$ 即可，因此每一個配對其實不用符合是最短路徑的情況（如下圖）！目標是在題目要求的限度內最大化重複的邊，使能夠被拔除的邊最大化！\n\n![](https://i.imgur.com/QfbfF82.png)\n\n上圖紅色線段是$\\delta(1,7)$的最短路徑、褐色是線段$\\delta(3,6)$的最短路徑、黑色線段是皆以最短路徑之下可以被拔除的邊。但是如果將路徑$\\delta(3,6)$換成是$(3,2)\\to(2,4)\\to(4,5)\\to(5,6)$，被拔除的邊可以增過為三條。\n{% endnote %}\n\n這一題最重要的關鍵就是以$O(V^2)$枚舉所有點對（距離長度可以直接換算成邊的數量），可以先用$O(V(V+E)$的時間對每一個點用進行BFS，如此一來總複雜度即為$O(V^2+VE)$，所幸題目給定總共的邊數不會超過3000條，因此是可以在時間限制內完成枚舉。\n\n{% note primary %}\n枚舉路徑 $\\delta(i,j)$ 為共同邊的時候，必須考慮起點與終點的方向，同時考慮從 $i\\to j$ 以及從 $j\\to i$ 兩個方向。以下圖為例，當枚舉都使用相同的起點以及終點，會讓下圖的 $(3,4)$ 被重複計算！\n\n![](https://i.imgur.com/tjq8oe7.png)\n{% endnote %}\n\n以下是AC程式碼：\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define N 3005\n#define FOR(i,n) for(int i=0;i<n;i++)\n#define pii pair<int,int>\n#define pid pair<int,double>\n#define pdi pair<double,int>\nusing namespace std;\nint n,m,s1,e1,w1,s2,e2,w2,dis[N][N];\nbool visit[N];\nvector<int> edge[N];\n\nint main(){\n    cin>>n>>m;\n    for(int i=0;i<m;i++){\n        int a,b;cin>>a>>b;\n        edge[a].push_back(b);\n        edge[b].push_back(a);\n    }\n    cin>>s1>>e1>>w1>>s2>>e2>>w2;\n    memset(dis,0x3f3f3f3f,sizeof(dis));\n    \n    for(int i=1;i<=n;i++){\n        memset(visit,0,sizeof(visit));\n        queue<int>que;\n        que.push(i);\n        visit[i] = 1;\n        dis[i][i] = 0;\n        while(!que.empty()){\n            int cur = que.front();\n            que.pop();\n            for(auto j:edge[cur]){\n                if(visit[j])continue;\n                dis[i][j] = dis[i][cur]+1;\n                visit[j] = 1;\n                que.push(j);\n            }\n        }\n    }\n    if(dis[s1][e1]>w1||dis[s2][e2]>w2){\n        cout<<-1<<endl;\n        return 0;\n    }\n    int ans = dis[s1][e1]+dis[s2][e2];\n\n    //O(n^2)枚舉所有共同邊\n    for(int i=1;i<=n;i++){\n        for(int j=1;j<=n;j++){\n            if(dis[s1][i]+dis[i][j]+dis[j][e1]<=w1&&dis[s2][i]+dis[i][j]+dis[j][e2]<=w2)\n                ans = min(ans,dis[s1][i]+dis[i][j]+dis[j][e1]+dis[s2][i]+dis[j][e2]);\n            if(dis[s1][i]+dis[i][j]+dis[j][e1]<=w1&&dis[e2][i]+dis[i][j]+dis[j][s2]<=w2)\n                ans=min(ans,dis[s1][i]+dis[i][j]+dis[j][e1]+dis[e2][i]+dis[j][s2]);\n            \n        }\n    }\n    cout<<m-ans<<endl;\n}\n```\n\n###  TIOJ 2180 勇者冒險 (Adventure)\n[題目連結](https://tioj.ck.tp.edu.tw/problems/2180)\n[Submission](https://tioj.ck.tp.edu.tw/submissions/262669)\n\n> 題目敘述\n> 給定一個地圖共 $R\\times C$ 行，接著會有 $M$ 行每一行都有一個座標和等級，代表經過這個座標需要多少等級才能通過。問從特定起點到終點所需要的最低的等級為多少。\n\n這題蠻特別的，他用到了Dijkstra中每一次都找最小的去更新，同時因為要求的是路徑上最大的等級為何，因此也用到了類似BFS的手法去擴展每一個座標。\n\n因為題目保證至少會有一條路徑通往起點與終點，同時我們每一次從queue拿出來的都是目前等級最低的點，因此如果碰到終點就可以確定這一條路線一定是需要等級最小的一條路徑！\n\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define int long long\n#define double long double\n#define N 1005\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define rrep(i,l,r) for(int i=l;i<r;i++)\n#define pii pair<int,int>\n#define x first\n#define y second\nusing namespace std;\nint n,row,col,mp[N][N],dis[N][N];\nint s1,s2,e1,e2;\nint dx[4] = {0,-1,0,1},dy[4] = {1,0,-1,0};\nbool visit[N][N];\ntypedef pair<int ,pair<int,int>> pp;\n\nvoid Dijkstra(){\n    //Dijkstra\n    priority_queue<pp,vector<pp>,greater<pp>> pq;\n    dis[s1][s2] = 0;\n    pq.push({0,{s1,s2}});\n    \n    while(!pq.empty()){\n        int rr = pq.top().y.x,cc = pq.top().y.y;\n//        cout<<rr<<\" \"<<cc<<\"  \"<<dis[rr][cc]<<endl;\n        pq.pop();\n        for(int i=0;i<4;i++){\n            int nx = rr+dx[i],ny = cc+dy[i];\n            if(nx<0||ny<0||nx>=row||ny>=col)continue;\n            if(nx == e1 && ny == e2){\n                cout<<dis[rr][cc]<<endl;\n                return;\n            }\n            if(mp[nx][ny] == -1)continue;\n            if(visit[nx][ny])continue;\n            dis[nx][ny] = max(dis[rr][cc],mp[nx][ny]);\n            pq.push({dis[nx][ny],{nx,ny}});\n            visit[nx][ny] = 1;\n        }\n    }\n}\n\nsigned main(){\n    Orz;\n    cin>>row>>col;\n    memset(dis,0,sizeof(dis));\n    memset(visit,0,sizeof(visit));\n    memset(mp,-1,sizeof(mp));\n    cin>>s1>>s2>>e1>>e2;\n    cin>>n;\n    while(n--){\n        int a,b,c;cin>>a>>b>>c;\n        mp[a][b] = c;\n    }\n    Dijkstra();\n}\n```\n\n### 最小花費的航空之旅\n> 題目敘述：\n> 給定很多種連接城市間的聯票，要求從起始站搭乘，可以在中途任意站下車，但下車以後就不能再次上車。輸入的第一行為一個正整數 n (1 ≤ n ≤ 20)，即聯票的種類數。以下 n 行每航為一個聯票的資訊，其中第一個整數為聯票的價格，然後是聯票上城市的數目。\n> \n> 接下來為一個行程單的資訊，其中第一個正整數為行程單上的城市數目k（包括起始城市，2 ≤ k ≤ 10），以及這些城市的編號（按順序列出）。\n> \n> 輸出最小花費和對應的方案的其中一組解。\n\n這一題是APCS Class的其中一題，難度頗高，因為他要找最短的路徑，同時增加了可以在任意站下車的條件。首先我們要維護每一個聯票的資訊，它的價值、起點、編號以及經過的城市。接著，我們考慮所有從起點出發的聯票，將每一種聯票上的每一個經過的城市都加入queue中。\n\n跟上一題一樣，當我們每一次都從cost最小的點下手，在轉移的過程中如果將所有的點都走訪一遍，則他的路徑必定是最短的，因為每一次的更新都是從花費最小的路徑去轉移。\n\n{% note primary %}\n**使用自定義比較函數放入Priority_queue中**\n\nPriority_queue中的比較函數需要使用到struct或class包覆的比較函數，若要回傳cost的最小值，則必須以大於來寫（有點像預設是pop出最大值，使用的卻是less<int>的比較函數）\n\n```cpp=\nstruct cmp{\n    bool operator()(node a,node b){\n        return a.cost > b.cost;\n    }\n};\n```\n{% endnote %}\n\n以下是AC Code：\n```cpp=\n#include <bits/stdc++.h>\n#define ll long long\n#define int long long\n#define double long double\n#define N 105\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define INF 2e18\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define rrep(i,l,r) for(int i=l;i<r;i++)\n#define pii pair<int,int>\n#define pif pair<int,float>\n#define x first\n#define y second\nusing namespace std;\nint n,k,visit[20];\n\nstruct Ticket{\n    int id,cost;\n    vector<int> next_city;\n    //陣列ticket[i]存以i為起點\n};\nvector<Ticket> ticket[30];          //ticket[i] 起點為i的聯票\n\nstruct node{\n    int cost,cur_pos,visit_pos;\n    vector<int> used_ticket;\n    //cur_pos現在所在位置、visit_pos在行程單上位置\n};\n\nstruct cmp{\n    bool operator()(node a,node b){\n        return a.cost > b.cost;\n    }\n    //讓priority_queue可以pop出最小的cost的路徑\n};\npriority_queue<node,vector<node>,cmp> pq;\n\nsigned main(){\n    Orz;\n    cin>>n;\n    rep(i,1,n){\n        int cost,num,s;cin>>cost>>num>>s;\n        vector<int> temp;\n        rep(j,1,num-1){\n            int k;cin>>k;\n            temp.push_back(k);\n        }\n        ticket[s].push_back({i,cost,temp});\n    }\n    cin>>k;\n    rep(i,1,k)cin>>visit[i];\n    \n    for(auto i : ticket[visit[1]]){         //行程第一個起點的聯票起點\n        int p = 1;\n        for(auto j : i.next_city){\n            if(p < k && j == visit[p+1])p++;\n            pq.push({i.cost,j,p,{i.id}});\n//            cout<<\"一開始聯票：\"<<i.id<<\" \"<<j<<endl;\n        }\n    }\n    while(!pq.empty()){\n        node cur = pq.top();\n        pq.pop();\n        if(cur.visit_pos == k){\n            cout<<\"Cost = \"<<cur.cost<<\", Tickets used: \"\n                <<cur.used_ticket[0];\n            for(int i=1;i<cur.used_ticket.size();i++)\n                cout<<\", \"<<cur.used_ticket[i];\n            cout<<endl;\n            break;\n        }\n        for(auto i : ticket[cur.cur_pos]){\n            vector<int> vec(cur.used_ticket);\n            vec.push_back(i.id);                //將現在使用的第i聯票推入\n            int p = cur.visit_pos;\n            for(auto j : i.next_city){\n                if(p < k && j == visit[p+1])p++;\n                pq.push({cur.cost+i.cost,j,p,vec});\n            }\n        }\n    }\n}\n```","slug":"Shortest_Path_problem","published":1,"updated":"2021-09-19T11:26:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvyspml70032muyx4noy369r","content":"<h2 id=\"題目目錄\"><a href=\"#題目目錄\" class=\"headerlink\" title=\"題目目錄\"></a>題目目錄</h2><ul>\n<li>可魚果運輸問題</li>\n<li>百慕達三角洲</li>\n<li>江神與他的小火車</li>\n<li>貨物運送計劃</li>\n<li>E.漢米頓的麻煩</li>\n<li>旅遊規劃問題</li>\n<li>Codeforces 543B: Destroying Roads<span id=\"more\"></span>\n</li>\n</ul>\n<h3 id=\"可魚果運輸問題\"><a href=\"#可魚果運輸問題\" class=\"headerlink\" title=\"可魚果運輸問題\"></a>可魚果運輸問題</h3><p><a href=\"https://neoj.sprout.tw/problem/391/\">題目連結</a><br><a href=\"https://neoj.sprout.tw/challenge/178079/\">Dijkstra’s Algorithm</a><br><a href=\"https://neoj.sprout.tw/challenge/178078/\">SPFA</a><br>這一題的來源是NPSC2013的題目，題目大意如下：</p>\n<blockquote>\n<p>有n個城市m個運輸方案，每個方案 $P_i$ 會從一個固定的起始城市 $A_i$ 運送東西到另一個固定的終點城市 $B_i$，每運輸一件物品，就必須付 $C_i$ 價錢。若用方案 $P_i$ 運輸了超過 $D_i$ 件物品，多出來的部份每件物品收 $C_i’$ 元。共要運輸 $f$ 物品。<br>求起點 $s$ 到終點 $e$ 的最短路徑。</p>\n</blockquote>\n<p>當運輸總量超過 $D_i$ 件物品，表示可以使用更小的邊權重去計算接下來的費用。這時候我們可以了解到一個性質，如果我把全部的物品全部集中在一條路徑運送，因為送的越多，相對的在費用上就可能產生優惠，比分散多條路徑的運送花費來的小。因為總共要運送 $f$ 件物品，因此會將邊的權重設定為當 $f$ 件物品都經過這一條邊時，所要花費的價格。</p>\n<p>有了邊以及價格之後，便可開始進行最短路徑的演算法。因為題目範圍 $N≤100$ ，因此用Dijkstra’s 或是 SPFA 都可以做（Bellman-Ford就先不要XD）。</p>\n<h4 id=\"Dijkstra’s-Algorithm\"><a href=\"#Dijkstra’s-Algorithm\" class=\"headerlink\" title=\"Dijkstra’s Algorithm\"></a>Dijkstra’s Algorithm</h4><p>這篇有<a href=\"http://www-m3.ma.tum.de/foswiki/pub/MN0506/WebHome/dijkstra.pdf\">一篇論文</a>是Dijkstra在針對最短路徑寫的論文（也就是以他名字命名的演算法論文），這篇只有三頁耶！<br>以下是「演算法導論」這本書中演算法的虛擬碼：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DIJKSTRA(G, w, s)</span><br><span class=\"line\">  1  INITIALIZE-SINGLE-SOURCE(G, s)</span><br><span class=\"line\">  2    S &lt;- Ø</span><br><span class=\"line\">  3    Q &lt;- V[G]</span><br><span class=\"line\">  4    while Q ≠ Ø</span><br><span class=\"line\">  5        do u &lt;- EXTRACT-MIN(Q)</span><br><span class=\"line\">  6            S &lt;- S ∪ &#123;u&#125;</span><br><span class=\"line\">  7            for each vertex v ∈ Adj[u]</span><br><span class=\"line\">  8                do RELAX(u,v,w)</span><br></pre></td></tr></table></figure><br>其中集合 $S$ 在程式碼中代表的是visit，而集合 $Q$ 因為要操作取出最小元素的動作，因此會用priority_queue實現，以heap來進行 $O(\\log n)$ 的插入以及取出。</p>\n<p>這裡面使用$visit$判斷是否在集合 $S$ 中，但我們可以發現，如果在priority_queue中有兩個點的存在，第一個點處理完被加入集合 $S$ 中之後，第二次再次被拿出來進行處理時就不會有任何相鄰的點再一次被處理，這是因為第一次與第二次更新所使用的 $dis[cur]$ 是一樣的。因此，當一個點已經在visit中（也就是在集合 $s$ 中），我們可以直接換下一個點去執行（不過如果忘了visit也是沒差啦）。</p>\n<div class=\"note default\">\n            <p><strong>複雜度分析</strong></p><p>以下分析一下演算法時間複雜度，總共有兩個時間複雜度，取決於使用何種資料結構來實作。</p><p><strong>1. 時間複雜度 $O(V^2+E)$</strong><br>首先是每一個點執行 $V$ 次對每一個相鄰的點進行更新，每一輪執行 $O(V)$ 尋找目前距離 $dis$ 最小的點。總共有 $E$ 條邊需要更新，因此最後要把 $E$ 再加上去。這樣總複雜度就會 $V\\times O(V)+O(E) = O(V^2+E)$。此實作方式一般在稠密的圖中會有比較好的表現。<br><br></p><p><strong>2. 時間複雜度 $O((V+E)\\log V)$</strong><br>這一題在 $O(n)$ 爆搜尋找改用heap去優化，因此複雜度就會是一樣執行V 輪利用 $O(logV)$ 找到距離 $dis$ 最小的點，同時將更新後的點放進heap中，我們知道放入heap的複雜度也是 $O(\\log n)$，因此複雜度就會變成 $O(V\\log V)+O(E\\log V) = O((V+E)\\log V)$。此實作方式一般在稀疏的圖中會有比較好的表現，從 $V$ 與 $E$ 的大小估計可以大致發現。</p>\n          </div>\n<p>以下是程式法的實作，最需要注意的地方是pair的first跟second儲存的東西。在存圖時會使用（點,權重）搭配vector；而在priority_queue中，因為要對權重進行比較，因此會用（權重,點），需要特別注意別搞混了!</p>\n<div class=\"note success\">\n            <p><strong>Priority_Queue實作細節</strong></p><p>預設的priority_queue會pop出目前heap中最大的元素（預設是less&lt;&gt;函數），如果要實作一個min heap 的話要使用greater&lt;&gt;函數，同時第二個傳進函數的參數要用一個vector！</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">priority_queue &lt;Type, vector&lt;Type&gt;, ComparisonType &gt; min_heap;</span><br><span class=\"line\">priority_queue &lt;pii,vector&lt;pii&gt;,greater&lt;pii&gt;&gt; pq;   </span><br></pre></td></tr></table></figure>\n          </div>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 105</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FOR(i,n) for(int i=0;i&lt;n;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    vector&lt;pii&gt; edge[N];                <span class=\"comment\">//存圖</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m,s,e,f;cin&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;e&gt;&gt;f;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dis[N];<span class=\"built_in\">fill</span>(dis,dis+N,<span class=\"number\">1e16</span>);</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> visit[N];                     <span class=\"comment\">//城市數n、方案數m、s起、e終、f箱數</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(visit,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(visit));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a,b,c,d,e;cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d&gt;&gt;e;</span><br><span class=\"line\">        <span class=\"comment\">//一條由a連到b的邊，權重c，流量超過d，則改權重c</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> val = (f&gt;d?c*d+e*(f-d):c*f);</span><br><span class=\"line\">        edge[a].<span class=\"built_in\">push_back</span>(&#123;b,val&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//Dijkstra</span></span><br><span class=\"line\">    priority_queue&lt;pii,vector&lt;pii&gt;,greater&lt;pii&gt;&gt; pq;    <span class=\"comment\">//(距離,點)</span></span><br><span class=\"line\">    pq.<span class=\"built_in\">push</span>(&#123;<span class=\"number\">0</span>,s&#125;);</span><br><span class=\"line\">    dis[s] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!pq.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cur = pq.<span class=\"built_in\">top</span>().second;</span><br><span class=\"line\">        pq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(visit[cur])<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i:edge[cur])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> next = i.first,weight = i.second;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dis[cur]+weight&lt;dis[next])&#123;</span><br><span class=\"line\">                dis[next] = dis[cur]+weight;</span><br><span class=\"line\">                pq.<span class=\"built_in\">push</span>(&#123;dis[next],next&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        visit[cur] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;dis[e]&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> t;cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Shortest-Path-Faster-Algorithm-SPFA\"><a href=\"#Shortest-Path-Faster-Algorithm-SPFA\" class=\"headerlink\" title=\"Shortest Path Faster Algorithm(SPFA)\"></a>Shortest Path Faster Algorithm(SPFA)</h4><p>這是一個使用queue最佳化的Bellman-Ford演算法，基本的使用方式跟BFS幾乎相同，在Bellman-Ford對邊進行更有效率的鬆弛(relaxation)。<br>以下一樣是「演算法導論」中Bellman-Ford的虛擬碼：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BELLMAN-FORD(G,w,s)</span><br><span class=\"line\">  1    INITIALIZE-SINGLE-SOURCE(G,s)</span><br><span class=\"line\">  2    for i &lt;- 1 to |V[G]|-1</span><br><span class=\"line\">  3        do for each edge (u,v)∈ E[G]</span><br><span class=\"line\">  4            do RELAX(u,v,w)</span><br><span class=\"line\">  5    for each edge (u,v)∈ E[G]</span><br><span class=\"line\">  6        do if d[v] &gt; d[u]+w(u,v)</span><br><span class=\"line\">  7            then return FALSE</span><br><span class=\"line\">  8    return TRUE</span><br></pre></td></tr></table></figure><br>以下是SPFA的虛擬碼，如果節點有被實際鬆弛過，且節點不在queue中（同樣元素在queue中出現兩次沒有意義，因為只要確保有在queue中等會會被更新到就好，到它的最短距離不會被改變），便將此節點推入queue中。裡面存的是帶進行鬆弛的節點們，也就是被剛剛更新過的節點。我們可以利用$visit[ ]$來 $O(1)$ 判斷節點是否有在queue中！</p>\n<p>有進行判斷是否在queue中的（比較省空間一點）：<br><img src=\"https://i.imgur.com/vdtJWR2.png\" alt=\"\"><br>沒有進行判斷的，有被更新過就塞進去：<br><img src=\"https://i.imgur.com/fsorAoE.png\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shortest-Path-Faster-Algorithm(G, s)</span><br><span class=\"line\">  1    for each vertex v ≠ s in V(G)</span><br><span class=\"line\">  2        d(v) := ∞</span><br><span class=\"line\">  3    d(s) := 0</span><br><span class=\"line\">  4    offer s into Q</span><br><span class=\"line\">  5    while Q is not empty</span><br><span class=\"line\">  6        u := poll Q</span><br><span class=\"line\">  7        for each edge (u, v) in E(G)</span><br><span class=\"line\">  8            if d(u) + w(u, v) &lt; d(v) then</span><br><span class=\"line\">  9                d(v) := d(u) + w(u, v)</span><br><span class=\"line\"> 10                if v is not in Q then</span><br><span class=\"line\"> 11                    offer v into Q</span><br></pre></td></tr></table></figure>\n<p>SPFA有一個問題，他可以被出題目的人設計測資去卡這種算法，使時間複雜度變成糟糕的$O(V^2)$，因此一般來說會實作Dijkstra而非SPFA！</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 105</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FOR(i,n) for(int i=0;i&lt;n;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    vector&lt;pii&gt; edge[N];                <span class=\"comment\">//存圖</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m,s,e,f;cin&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;e&gt;&gt;f;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dis[N];<span class=\"built_in\">fill</span>(dis,dis+N,<span class=\"number\">1e16</span>);</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> visit[N];                     <span class=\"comment\">//城市數n、方案數m、s起、e終、f箱數</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(visit,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(visit));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a,b,c,d,e;cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d&gt;&gt;e;</span><br><span class=\"line\">        <span class=\"comment\">//一條由a連到b的邊，權重c，流量超過d，則改權重c</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> val = (f&gt;d?c*d+e*(f-d):c*f);</span><br><span class=\"line\">        edge[a].<span class=\"built_in\">push_back</span>(&#123;b,val&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//SPFA</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    queue&lt;<span class=\"keyword\">int</span>&gt; que;</span><br><span class=\"line\">    que.<span class=\"built_in\">push</span>(s);</span><br><span class=\"line\">    dis[s] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    visit[s] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cur = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        visit[cur] = <span class=\"number\">0</span>;                <span class=\"comment\">//pop出來將狀態改成不在queue中</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i:edge[cur])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> next = i.first,weight = i.second;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dis[next] &gt; dis[cur]+weight)&#123;</span><br><span class=\"line\">                dis[next] = dis[cur]+weight;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!visit[next])que.<span class=\"built_in\">push</span>(next);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;dis[e]&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> t;cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"百慕達三角洲\"><a href=\"#百慕達三角洲\" class=\"headerlink\" title=\"百慕達三角洲\"></a>百慕達三角洲</h3><p><a href=\"https://neoj.sprout.tw/problem/393/\">題目連結</a></p>\n<blockquote>\n<p>題目大意：<br>給定一張長n寬m的矩形圖，由”#”和”.”組成，給定起點$(x_1,y_1)$以及終點$(x_2,y_2)$，必須最小化經過”.”的次數，求最少需幾過幾次。</p>\n</blockquote>\n<p>當下看到這一個題目的想法，就是跟處理一般的圖論題目一樣，將邊用vector儲存起來，將經過”.”的權重設為很大的一個數字，這樣用Dijkstra做一次最短路徑就可以找出經過”.”最小化的次數了！</p>\n<p>以下是MLE的<a href=\"https://neoj.sprout.tw/challenge/178136/\">Submission</a><br><img src=\"https://i.imgur.com/9ZaisdZ.png\" alt=\"\"><br>吃了開心的MLE，如果當成一般的圖在處理，不管是在 $dis$ 開long long的處裡，或是開了一個vector陣列儲存邊，都非常的消耗空間。因此，我詢問了一下電神這一題的想法，他說我的想法用Dijkstra是正確的，不過在設定邊權的部分可以直接用0跟1代替，而且可以用queue去輔助實作BFS（要說它也可以是Dijkstra的另一種比較簡單的版本）。</p>\n<p><img src=\"https://i.imgur.com/9JldAha.png\" alt=\"\"></p>\n<p>這題也就是所謂<a href=\"https://www.geeksforgeeks.org/0-1-bfs-shortest-path-binary-graph/\">0-1 BFS (Shortest Path in a Binary Weight Graph)</a>，或是<a href=\"https://codeforces.com/blog/entry/22276\">這裡0-1 BFS</a>，想法可以說是Dijkstra跟BFS的綜合（其實它跟SPFA也很相似）。以下是實作步驟：</p>\n<ol>\n<li>建立雙向的佇列(deque)，等等要存放被relax過的點，初始放入起點</li>\n<li>每一次從deque前方pop出一點，對那一點相鄰的所有點進行鬆弛</li>\n<li>如果被鬆弛時的邊權重為0，將點push dequeue的前方</li>\n<li>否則當鬆弛時的邊權重為1，將點push dequeue的後方</li>\n<li>重複執行2-4步驟直到deque為空</li>\n</ol>\n<p>當我們一直利用deque最前端的元素進行鬆弛，因為我們將邊權為0的元素放入最前端，用距離最小的那些點進行鬆弛，每一個點最多會被鬆弛一次，因此總時間複雜度為$O(V+E)$，比起用Dijktra直接做$O((V+E)\\log V)$快了許多（此演算法之所以正確是因為其中一邊的權重是0，不管0接到誰他的權重也都是0，有點像「從最小層逐漸擴展」的概念）！</p>\n<div class=\"note success\">\n            <p>小問題（出處<a href=\"https://codeforces.com/blog/entry/22276\">這裡</a>）</p><ol><li>Can we apply the same trick if our edge weights can only be 0 and x (x &gt;= 0) ?</li><li>Can we apply the same trick if our edge weights are x and x+1 (x &gt;= 0) ?</li><li>Can we apply the same trick if our edge weights are x and y (x,y &gt;= 0) ?</li></ol><p>解答YES,NO,NO</p>\n          </div>\n<p>這題之所以可行是因為有一邊的權重是0，當點皆以權重為0串再一起時，他會是最短的，使用最短去更新接下來的點，因此第一題是正確的！但第二題與第三題是錯誤的，考慮以下點與邊的情況：</p>\n<p><img src=\"https://i.imgur.com/BYojGwm.jpg\" alt=\"\"></p>\n<p>當我依照01BFS的方法不斷去用x更新其他的點，更新完之後會發現點1到點3的最短路徑應該是x+1，到時候又要再重新Relax一次，複雜度會爆炸喔（比SPFA可能還慘，因為當點三利用兩個x更新完之後，用它來做跟3所有相鄰的點，做完卻發現$(1,3)$有更短的距離，又必須重新全部更新一次！）總結來說，他只是用於只有兩種邊的情況，且其中一邊必須為0。</p>\n<p><img src=\"https://i.imgur.com/wnXKbI8.png\" alt=\"\"></p>\n<div class=\"note info\">\n            <p><strong>比較一下記憶體用量</strong><br>最主要還是時間複雜度的比較，不過既然空間已經爆了，時間也沒法比了QQ</p><p><strong>MLE</strong></p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 2005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N2 4000005</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,q,predecessor[N2],dis[N2];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> visit[N2],maze[N2];</span><br><span class=\"line\">vector&lt;pii&gt;edge[N2];</span><br></pre></td></tr></table></figure><p><strong>AC</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 2003</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,dis[N][N];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> visit[N][N],maze[N][N];</span><br></pre></td></tr></table></figure></p>\n          </div>\n<p>以下是使用deque實作01BFS的AC code：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 2003</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FOR(i,n) for(int i=0;i&lt;n;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,dis[N][N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,dy[<span class=\"number\">4</span>] = &#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> visit[N][N],maze[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(visit,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(visit));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> temp;cin&gt;&gt;temp;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp==<span class=\"string\">&#x27;.&#x27;</span>)maze[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> maze[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    deque&lt;pii&gt;deq;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s1,s2,e1,e2;cin&gt;&gt;s1&gt;&gt;s2&gt;&gt;e1&gt;&gt;e2;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dis,<span class=\"number\">0x3f3f3f3f</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(dis));</span><br><span class=\"line\">    dis[s1][s2] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    deq.<span class=\"built_in\">push_back</span>(&#123;s1,s2&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!deq.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = deq.<span class=\"built_in\">front</span>().first,y = deq.<span class=\"built_in\">front</span>().second;</span><br><span class=\"line\">        deq.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = x+dx[i],ny = y+dy[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx&lt;<span class=\"number\">1</span>||nx&gt;n||ny&lt;<span class=\"number\">1</span>||ny&gt;m)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dis[nx][ny] &gt; dis[x][y]+maze[nx][ny])&#123;</span><br><span class=\"line\">                dis[nx][ny] = dis[x][y]+maze[nx][ny];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(maze[nx][ny]==<span class=\"number\">0</span>)deq.<span class=\"built_in\">push_front</span>(&#123;nx,ny&#125;);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> deq.<span class=\"built_in\">push_back</span>(&#123;nx,ny&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;dis[e1][e2]&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t;t = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"江神與他的小火車\"><a href=\"#江神與他的小火車\" class=\"headerlink\" title=\"江神與他的小火車\"></a>江神與他的小火車</h3><p><a href=\"https://neoj.sprout.tw/problem/431/\">題目連結</a></p>\n<blockquote>\n<p>題目大意<br>已知有N個點以及M條邊，總共有Q筆詢問，每筆詢問有$\\delta(a,b)$，表示新增一條由 $a$ 指向 $b$ 的邊（其權重為1），對每一筆詢問輸出從點 $1$ 到點 $N$ 的最短距離。</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/f96GUmd.jpg\" alt=\"\"></p>\n<p>我們知道如果有用新加進來的邊 $\\delta(a,b)$，則路徑可以被拆解成 $\\delta(1,a)+\\delta(a,b)+\\delta(b,n)$。其中，我們可以用Dijkstra 一次尋找1到任何點的最短距離，那要如何處理路徑 $\\delta(b,n)$ 呢？這就是<strong>單一目的最短距離問題</strong>，我們可以將所有的邊逆序，將終點做一次Dijkstra尋找最短路，這時候我們就可以用 $O(1)$ 的時間回答每一筆詢問，總時間複雜度：預處理$O((V+E)\\log V)$，詢問 $O(Q)$。</p>\n<div class=\"note info\">\n            <p><strong>測資小問題</strong><br>有一筆測資如下，藍線是給定的路徑與權重，紅色是新加入的邊，如果按照上面 $\\delta(1,a)+\\delta(a,b)+\\delta(b,n)$ 我們可以計算出從起點到終點的最短距離為：$2+1+4 = 7$，很明顯兩點之間的最短距離是 $5$ ，但因為原本作法會經過一條$\\delta (B,C)$ 的重邊，造成算出來的距離是比較大的！這時候我們只要對最短路徑長度取min即可，也就是說在這種情況加入這一條邊並不會影響最短路徑的長度！</p><blockquote><p>測資（1,2,3分別對應A,B,C）：<br>6 5 1<br>1 2 1<br>2 3 1<br>3 4 1<br>4 5 1<br>5 6 1<br>3 2</p></blockquote><p><img src=\"https://i.imgur.com/Uocw0hc.png\" alt=\"\"></p>\n          </div>\n<p>接下來是程式碼，之後如果遇到最短路徑的題目，一般來說會避免使用SPFA（除非有負邊），為了要避免最糟的時間複雜度，因此會使用Dijkstra來處理最短路徑問題！</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 200005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FOR(i,n) for(int i=0;i&lt;n;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,q;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> visit[N];</span><br><span class=\"line\">vector&lt;pii&gt; edge[<span class=\"number\">2</span>][N];</span><br><span class=\"line\"><span class=\"comment\">//edge[0]-&gt;normal,edge[1]-&gt;opposite</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">Dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> start,<span class=\"keyword\">int</span> end,<span class=\"keyword\">bool</span> is_nor)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(visit,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(visit));</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">dis</span><span class=\"params\">(n+<span class=\"number\">2</span>,<span class=\"number\">1e16</span>)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    priority_queue&lt;pii,vector&lt;pii&gt;,greater&lt;pii&gt;&gt; pq;</span><br><span class=\"line\">    </span><br><span class=\"line\">    dis[start] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    pq.<span class=\"built_in\">push</span>(&#123;<span class=\"number\">0</span>,start&#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!pq.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cur = pq.<span class=\"built_in\">top</span>().second;</span><br><span class=\"line\">        pq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(visit[cur])<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        visit[cur] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : edge[is_nor][cur])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> next = i.first,weight = i.second;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dis[next] &gt; dis[cur] + weight)&#123;</span><br><span class=\"line\">                dis[next] = dis[cur] + weight;</span><br><span class=\"line\">                pq.<span class=\"built_in\">push</span>(&#123;dis[next],next&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dis;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a,b,w;cin&gt;&gt;a&gt;&gt;b&gt;&gt;w;</span><br><span class=\"line\">        edge[<span class=\"number\">0</span>][a].<span class=\"built_in\">push_back</span>(&#123;b,w&#125;);</span><br><span class=\"line\">        edge[<span class=\"number\">1</span>][b].<span class=\"built_in\">push_back</span>(&#123;a,w&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt; normal,opposite;</span><br><span class=\"line\">    normal = <span class=\"built_in\">Dijkstra</span>(<span class=\"number\">1</span>,n,<span class=\"number\">0</span>);</span><br><span class=\"line\">    opposite = <span class=\"built_in\">Dijkstra</span>(n,<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a,b;cin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"built_in\">min</span>(normal[a]+opposite[b]+<span class=\"number\">1</span>,normal[n])&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t;t = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"貨物運送計劃\"><a href=\"#貨物運送計劃\" class=\"headerlink\" title=\"貨物運送計劃\"></a>貨物運送計劃</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1641\">題目連結</a></p>\n<blockquote>\n<p>題目敘述<br>給定N個點M條邊，第i條邊有方邊率$C_i$，假設目前運送貨物重量p經過此邊，代表經過邊i會需要多增加 $p\\times C_i$ 的重量。給定起點、終點，求到達終點時最少的貨物重量為多少。</p>\n</blockquote>\n<p>換種說法，題目要求的是每經過一條邊，就要乘上某一個數，要求到終點最小的重量。下圖是題目範例測資：<br><img src=\"https://i.imgur.com/BSNWgh8.png\" alt=\"\"></p>\n<p>$\\delta(1,2)\\to\\delta(2,3)$，所付出的代價是$(1\\times (1+1))\\times (2+1)=6$。如果是$\\delta(1,3)$ 的話直接$1\\times (4+1)=5$，可以觀察到，遇到邊就需要將原本的數字乘上$C_i+1$。</p>\n<p>我們可以透過將邊權取 $\\log$ 之後，就可以利用Dijkstra進行最短路徑的計算，因為取 $\\log$ 後的加減運算等同於原本的乘法運算，只要最後把算出來的答案次方即可！</p>\n<p>這一題的輸出要求科學記號（為了要避免浮點數誤差），以下程式碼來達成（要求小數點後兩位，同時次方部分要求整數3位）：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.2fe+%03lld\\n&quot;</span>,<span class=\"built_in\">pow</span>(<span class=\"number\">10</span>,ans),x);</span><br></pre></td></tr></table></figure><br>程式碼的部分，透過$edge$存完所有的取完 $\\log$ 之後的邊，進行Dijkstra，輸出最短路徑（以科學記號表示）即可！</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 10005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FOR(i,n) for(int i=0;i&lt;n;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pid pair<span class=\"meta-string\">&lt;int,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdi pair<span class=\"meta-string\">&lt;double,int&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,s,t;</span><br><span class=\"line\"><span class=\"keyword\">double</span> dis[N];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> visit[N];</span><br><span class=\"line\">vector&lt;pid&gt; edge[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(visit,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(visit));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld %lld %lld %lld&quot;</span>,&amp;n,&amp;m,&amp;s,&amp;t);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a,b;<span class=\"keyword\">double</span> c;<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld %lld %lf&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class=\"line\">        edge[a].<span class=\"built_in\">push_back</span>(&#123;b,(<span class=\"keyword\">double</span>)<span class=\"built_in\">log10</span>(c+<span class=\"number\">1</span>)&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(dis,dis+n+<span class=\"number\">2</span>,<span class=\"number\">1e16</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    priority_queue&lt;pdi,vector&lt;pdi&gt;,greater&lt;pdi&gt;&gt; pq;</span><br><span class=\"line\">    dis[s] = <span class=\"number\">0.0</span>;</span><br><span class=\"line\">    pq.<span class=\"built_in\">push</span>(&#123;<span class=\"number\">0</span>,s&#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!pq.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cur = pq.<span class=\"built_in\">top</span>().second;</span><br><span class=\"line\">        pq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(visit[cur])<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        visit[cur] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i:edge[cur])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> next = i.first;</span><br><span class=\"line\">            <span class=\"keyword\">double</span> w = i.second;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dis[next] &gt; dis[cur]+w)&#123;</span><br><span class=\"line\">                dis[next] = dis[cur]+w;</span><br><span class=\"line\">                pq.<span class=\"built_in\">push</span>(&#123;dis[next],next&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> ans = dis[t];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"built_in\">floor</span>(ans);</span><br><span class=\"line\">    ans-=x;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.2fe+%03lld\\n&quot;</span>,<span class=\"built_in\">pow</span>(<span class=\"number\">10</span>,ans),x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t;t = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"E-漢米頓的麻煩\"><a href=\"#E-漢米頓的麻煩\" class=\"headerlink\" title=\"E.漢米頓的麻煩\"></a>E.漢米頓的麻煩</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1096\">題目連結</a></p>\n<p>他題目時不時提到漢米頓，是多愛漢米頓XDD（這一題跟漢米頓根本沒關係）</p>\n<blockquote>\n<p>題目大意<br>在一張n(n≤100)個點的圖中，尋找路徑長度最短的環</p>\n</blockquote>\n<p>那就用<strong>Floyd-Warshall</strong>找最小的環就好！</p>\n<div class=\"note info\">\n            <p><strong>Floyd-Warshall</strong><br>這就是dp的作法，用 $O(N^3)$ 的時間進行轉移，就能得到全點對的最短路徑。這邊有一個重要的轉移順序，也就是中點-起點-終點進行轉移，如果把dp展開就會發現中點必須在最外層進行轉移：</p><blockquote><p>定義 $dp[k][i][j]$ 為點 $i$ 走到點 $j$ ，只能經過前k個點的最短路徑，則轉移式變成：</p><script type=\"math/tex; mode=display\">d[k+1][i][j] = min(d[k][i][j], d[k][i][k+1]+d[k][k+1][j])</script></blockquote><p>每一個k+1都是由k轉移而來，仰賴k的點的配對，因此必須最先轉移中點k的部分！（不過順序顛倒也不會怎樣啦，上面「課程內容」的地方有寫到）</p>\n          </div>\n<p>同樣這一份code也可以判斷有沒有負環，只要ans小於0的話代表有負環（有的話距離是不能用的喔，因為Floyd-Warshall不能處理負環，但負邊是可以處理的）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 101</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FOR(i,n) for(int i=0;i&lt;n;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pid pair<span class=\"meta-string\">&lt;int,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdi pair<span class=\"meta-string\">&lt;double,int&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,dp[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dp,<span class=\"number\">0x3f3f3f3f</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(dp));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp;cin&gt;&gt;temp;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp!=<span class=\"number\">0</span>)dp[i][j] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;n;k++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">                dp[i][j] = <span class=\"built_in\">min</span>(dp[i][j],dp[i][k]+dp[k][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = INT_MAX;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        ans = <span class=\"built_in\">min</span>(ans,dp[i][i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ans == INT_MAX)cout&lt;&lt;<span class=\"number\">-1</span>&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin&gt;&gt;n &amp;&amp; n!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"旅遊規劃問題\"><a href=\"#旅遊規劃問題\" class=\"headerlink\" title=\"旅遊規劃問題\"></a>旅遊規劃問題</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1028\">題目連結</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/262198\">Submission</a><br>這一題 $n≤13$ 大概就是位元dp來完成（狀態壓縮），定義 $dp[i][j]$ 為現在在點i上，拜訪過點集j的最短距離（j中不包含點i）。這裡使用到了同層轉移的技巧，也就是利用j中的點，對相同狀態下不在i中的點進行更新。</p>\n<p>點集j中在狀態i下為起點，用Dijkstra對不在i中的其他點進行更新，最後的答案即為$dp[s][S-(1&lt;&lt;s)]$。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> double long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 14</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">vector&lt;pii&gt; edge[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[N],dp[N][<span class=\"number\">1</span>&lt;&lt;N],pre[N][<span class=\"number\">1</span>&lt;&lt;N];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> visit[N];</span><br><span class=\"line\"><span class=\"comment\">//定義dp[i][j]為現在在點i，拜訪過點集合j（i不在點集j中）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,m)&#123;                                 <span class=\"comment\">//讀入m條邊</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> a,b,w;cin&gt;&gt;a&gt;&gt;b&gt;&gt;w;</span><br><span class=\"line\">        edge[a].<span class=\"built_in\">push_back</span>(&#123;b,w&#125;);</span><br><span class=\"line\">        edge[b].<span class=\"built_in\">push_back</span>(&#123;a,w&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> S = <span class=\"number\">0</span>,start = <span class=\"number\">-1</span>;cin&gt;&gt;m;                <span class=\"comment\">//S為待拜訪的所有點集合</span></span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,m)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp;cin&gt;&gt;temp;</span><br><span class=\"line\">        S = S|(<span class=\"number\">1</span>&lt;&lt;temp);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(start == <span class=\"number\">-1</span>)start = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n)<span class=\"built_in\">rep</span>(j,<span class=\"number\">0</span>,(<span class=\"number\">1</span>&lt;&lt;n))dp[i][j] = INF;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n)dp[i][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;(<span class=\"number\">1</span>&lt;&lt;n);i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == (S &amp; i))&#123;                       <span class=\"comment\">//在集合i中的點在S一定要有</span></span><br><span class=\"line\">            priority_queue&lt;pii,vector&lt;pii&gt;,greater&lt;pii&gt;&gt; pq;</span><br><span class=\"line\">            <span class=\"built_in\">fill</span>(dis,dis+n,INF);                <span class=\"comment\">//將dis初始為無限大，做Dijkstra</span></span><br><span class=\"line\">            <span class=\"built_in\">memset</span>(visit,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(visit));</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i&amp;(<span class=\"number\">1</span>&lt;&lt;j))&#123;                   <span class=\"comment\">//從有在i中的點向不在的點做Dijkstra</span></span><br><span class=\"line\">                    dis[j] = dp[j][i^(<span class=\"number\">1</span>&lt;&lt;j)];   <span class=\"comment\">//目前在j，經過拜訪了點集i（不包含點j）</span></span><br><span class=\"line\">                    pq.<span class=\"built_in\">push</span>(&#123;dis[j],j&#125;);        <span class=\"comment\">//利用在i中的點對其他點進行更新</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!pq.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> cur = pq.<span class=\"built_in\">top</span>().second;</span><br><span class=\"line\">                pq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                visit[cur] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> k : edge[cur])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> v = k.first,w = k.second;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(i&amp;(<span class=\"number\">1</span>&lt;&lt;v))<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(dis[v] &gt; dis[cur]+w)&#123;</span><br><span class=\"line\">                        dis[v] = dis[cur] + w;</span><br><span class=\"line\">                        pre[v][i] = cur;        <span class=\"comment\">//紀錄點v在狀態i下由cur轉移</span></span><br><span class=\"line\">                        pq.<span class=\"built_in\">push</span>(&#123;dis[v],v&#125;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dis[v] == dis[cur]+w &amp;&amp; pre[v][i] &gt; cur)&#123;</span><br><span class=\"line\">                        pre[v][i] = cur;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;               <span class=\"comment\">//對於不在點集i中的點進行更新</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i &amp; (<span class=\"number\">1</span> &lt;&lt; j))<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                dp[j][i] = dis[j];              <span class=\"comment\">//同層狀態轉移，更新dp[j][i]</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;Minimum travel distance: &quot;</span>&lt;&lt;dp[start][S^(start)]&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;Travel route:&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cur = start;S = S^(<span class=\"number\">1</span>&lt;&lt;start);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;cur;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!S)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        cur = pre[cur][S];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S&amp;(<span class=\"number\">1</span>&lt;&lt;cur))S = (S^(<span class=\"number\">1</span>&lt;&lt;cur));         <span class=\"comment\">//經過的點不一定是指定的觀光點</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Codeforces-543B-Destroying-Roads\"><a href=\"#Codeforces-543B-Destroying-Roads\" class=\"headerlink\" title=\"Codeforces 543B: Destroying Roads\"></a>Codeforces 543B: Destroying Roads</h3><p><a href=\"https://codeforces.com/problemset/problem/543/B\">題目連結</a><br><a href=\"https://codeforces.com/problemset/submission/543/125743532\">Submission</a></p>\n<blockquote>\n<p>題目大意<br>給定N個點M條無向邊，每一邊權重都是1，以及兩筆資料，由三個數$(x,y,w)$ 構成，代表起點為x、終點為x、要在w距離內從起點走到終點。試問最多可以拔掉幾條邊同時滿足以上兩個資料所描述的特性？</p>\n</blockquote>\n<p>這一題蠻有趣的，首先他的邊權重都是1，因此我們可以直接用BFS尋找最短路徑，並且點第一次拜訪到時的就是該點的最短距離（BFS一層一層擴展）。</p>\n<div class=\"note primary\">\n            <p><strong>第一個想法：錯誤想法</strong><br>我先將兩個起點與終點的最短路徑都找出來，把將過的邊都標上不能移除，將其他的邊全部拔掉。</p><p><strong>問題點：</strong><br>固然找到的是最短路徑，但不代表可以最大化拔除邊的數量。因為題目要求兩點只要符合最短距離 $w$ 即可，因此每一個配對其實不用符合是最短路徑的情況（如下圖）！目標是在題目要求的限度內最大化重複的邊，使能夠被拔除的邊最大化！</p><p><img src=\"https://i.imgur.com/QfbfF82.png\" alt=\"\"></p><p>上圖紅色線段是$\\delta(1,7)$的最短路徑、褐色是線段$\\delta(3,6)$的最短路徑、黑色線段是皆以最短路徑之下可以被拔除的邊。但是如果將路徑$\\delta(3,6)$換成是$(3,2)\\to(2,4)\\to(4,5)\\to(5,6)$，被拔除的邊可以增過為三條。</p>\n          </div>\n<p>這一題最重要的關鍵就是以$O(V^2)$枚舉所有點對（距離長度可以直接換算成邊的數量），可以先用$O(V(V+E)$的時間對每一個點用進行BFS，如此一來總複雜度即為$O(V^2+VE)$，所幸題目給定總共的邊數不會超過3000條，因此是可以在時間限制內完成枚舉。</p>\n<div class=\"note primary\">\n            <p>枚舉路徑 $\\delta(i,j)$ 為共同邊的時候，必須考慮起點與終點的方向，同時考慮從 $i\\to j$ 以及從 $j\\to i$ 兩個方向。以下圖為例，當枚舉都使用相同的起點以及終點，會讓下圖的 $(3,4)$ 被重複計算！</p><p><img src=\"https://i.imgur.com/tjq8oe7.png\" alt=\"\"></p>\n          </div>\n<p>以下是AC程式碼：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 3005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FOR(i,n) for(int i=0;i&lt;n;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pid pair<span class=\"meta-string\">&lt;int,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdi pair<span class=\"meta-string\">&lt;double,int&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,s1,e1,w1,s2,e2,w2,dis[N][N];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> visit[N];</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; edge[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a,b;cin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">        edge[a].<span class=\"built_in\">push_back</span>(b);</span><br><span class=\"line\">        edge[b].<span class=\"built_in\">push_back</span>(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cin&gt;&gt;s1&gt;&gt;e1&gt;&gt;w1&gt;&gt;s2&gt;&gt;e2&gt;&gt;w2;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dis,<span class=\"number\">0x3f3f3f3f</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(dis));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(visit,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(visit));</span><br><span class=\"line\">        queue&lt;<span class=\"keyword\">int</span>&gt;que;</span><br><span class=\"line\">        que.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">        visit[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        dis[i][i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> cur = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> j:edge[cur])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(visit[j])<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                dis[i][j] = dis[i][cur]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                visit[j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dis[s1][e1]&gt;w1||dis[s2][e2]&gt;w2)&#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"number\">-1</span>&lt;&lt;endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = dis[s1][e1]+dis[s2][e2];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//O(n^2)枚舉所有共同邊</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dis[s1][i]+dis[i][j]+dis[j][e1]&lt;=w1&amp;&amp;dis[s2][i]+dis[i][j]+dis[j][e2]&lt;=w2)</span><br><span class=\"line\">                ans = <span class=\"built_in\">min</span>(ans,dis[s1][i]+dis[i][j]+dis[j][e1]+dis[s2][i]+dis[j][e2]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dis[s1][i]+dis[i][j]+dis[j][e1]&lt;=w1&amp;&amp;dis[e2][i]+dis[i][j]+dis[j][s2]&lt;=w2)</span><br><span class=\"line\">                ans=<span class=\"built_in\">min</span>(ans,dis[s1][i]+dis[i][j]+dis[j][e1]+dis[e2][i]+dis[j][s2]);</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;m-ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"TIOJ-2180-勇者冒險-Adventure\"><a href=\"#TIOJ-2180-勇者冒險-Adventure\" class=\"headerlink\" title=\"TIOJ 2180 勇者冒險 (Adventure)\"></a>TIOJ 2180 勇者冒險 (Adventure)</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/2180\">題目連結</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/262669\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>給定一個地圖共 $R\\times C$ 行，接著會有 $M$ 行每一行都有一個座標和等級，代表經過這個座標需要多少等級才能通過。問從特定起點到終點所需要的最低的等級為多少。</p>\n</blockquote>\n<p>這題蠻特別的，他用到了Dijkstra中每一次都找最小的去更新，同時因為要求的是路徑上最大的等級為何，因此也用到了類似BFS的手法去擴展每一個座標。</p>\n<p>因為題目保證至少會有一條路徑通往起點與終點，同時我們每一次從queue拿出來的都是目前等級最低的點，因此如果碰到終點就可以確定這一條路線一定是需要等級最小的一條路徑！</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> double long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 1005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rrep(i,l,r) for(int i=l;i&lt;r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,row,col,mp[N][N],dis[N][N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> s1,s2,e1,e2;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,dy[<span class=\"number\">4</span>] = &#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> visit[N][N];</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span> ,pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt;&gt; pp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dijkstra</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Dijkstra</span></span><br><span class=\"line\">    priority_queue&lt;pp,vector&lt;pp&gt;,greater&lt;pp&gt;&gt; pq;</span><br><span class=\"line\">    dis[s1][s2] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    pq.<span class=\"built_in\">push</span>(&#123;<span class=\"number\">0</span>,&#123;s1,s2&#125;&#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!pq.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rr = pq.<span class=\"built_in\">top</span>().y.x,cc = pq.<span class=\"built_in\">top</span>().y.y;</span><br><span class=\"line\"><span class=\"comment\">//        cout&lt;&lt;rr&lt;&lt;&quot; &quot;&lt;&lt;cc&lt;&lt;&quot;  &quot;&lt;&lt;dis[rr][cc]&lt;&lt;endl;</span></span><br><span class=\"line\">        pq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = rr+dx[i],ny = cc+dy[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx&lt;<span class=\"number\">0</span>||ny&lt;<span class=\"number\">0</span>||nx&gt;=row||ny&gt;=col)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx == e1 &amp;&amp; ny == e2)&#123;</span><br><span class=\"line\">                cout&lt;&lt;dis[rr][cc]&lt;&lt;endl;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mp[nx][ny] == <span class=\"number\">-1</span>)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(visit[nx][ny])<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            dis[nx][ny] = <span class=\"built_in\">max</span>(dis[rr][cc],mp[nx][ny]);</span><br><span class=\"line\">            pq.<span class=\"built_in\">push</span>(&#123;dis[nx][ny],&#123;nx,ny&#125;&#125;);</span><br><span class=\"line\">            visit[nx][ny] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;row&gt;&gt;col;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dis,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(dis));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(visit,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(visit));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(mp,<span class=\"number\">-1</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(mp));</span><br><span class=\"line\">    cin&gt;&gt;s1&gt;&gt;s2&gt;&gt;e1&gt;&gt;e2;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a,b,c;cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class=\"line\">        mp[a][b] = c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">Dijkstra</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"最小花費的航空之旅\"><a href=\"#最小花費的航空之旅\" class=\"headerlink\" title=\"最小花費的航空之旅\"></a>最小花費的航空之旅</h3><blockquote>\n<p>題目敘述：<br>給定很多種連接城市間的聯票，要求從起始站搭乘，可以在中途任意站下車，但下車以後就不能再次上車。輸入的第一行為一個正整數 n (1 ≤ n ≤ 20)，即聯票的種類數。以下 n 行每航為一個聯票的資訊，其中第一個整數為聯票的價格，然後是聯票上城市的數目。</p>\n<p>接下來為一個行程單的資訊，其中第一個正整數為行程單上的城市數目k（包括起始城市，2 ≤ k ≤ 10），以及這些城市的編號（按順序列出）。</p>\n<p>輸出最小花費和對應的方案的其中一組解。</p>\n</blockquote>\n<p>這一題是APCS Class的其中一題，難度頗高，因為他要找最短的路徑，同時增加了可以在任意站下車的條件。首先我們要維護每一個聯票的資訊，它的價值、起點、編號以及經過的城市。接著，我們考慮所有從起點出發的聯票，將每一種聯票上的每一個經過的城市都加入queue中。</p>\n<p>跟上一題一樣，當我們每一次都從cost最小的點下手，在轉移的過程中如果將所有的點都走訪一遍，則他的路徑必定是最短的，因為每一次的更新都是從花費最小的路徑去轉移。</p>\n<div class=\"note primary\">\n            <p><strong>使用自定義比較函數放入Priority_queue中</strong></p><p>Priority_queue中的比較函數需要使用到struct或class包覆的比較函數，若要回傳cost的最小值，則必須以大於來寫（有點像預設是pop出最大值，使用的卻是less<int>的比較函數）</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cmp</span>&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(node a,node b)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.cost &gt; b.cost;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n          </div>\n<p>以下是AC Code：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> double long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 105</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rrep(i,l,r) for(int i=l;i&lt;r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pif pair<span class=\"meta-string\">&lt;int,float&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,k,visit[<span class=\"number\">20</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Ticket</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id,cost;</span><br><span class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt; next_city;</span><br><span class=\"line\">    <span class=\"comment\">//陣列ticket[i]存以i為起點</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector&lt;Ticket&gt; ticket[<span class=\"number\">30</span>];          <span class=\"comment\">//ticket[i] 起點為i的聯票</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cost,cur_pos,visit_pos;</span><br><span class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt; used_ticket;</span><br><span class=\"line\">    <span class=\"comment\">//cur_pos現在所在位置、visit_pos在行程單上位置</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cmp</span>&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(node a,node b)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.cost &gt; b.cost;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//讓priority_queue可以pop出最小的cost的路徑</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">priority_queue&lt;node,vector&lt;node&gt;,cmp&gt; pq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cost,num,s;cin&gt;&gt;cost&gt;&gt;num&gt;&gt;s;</span><br><span class=\"line\">        vector&lt;<span class=\"keyword\">int</span>&gt; temp;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j,<span class=\"number\">1</span>,num<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> k;cin&gt;&gt;k;</span><br><span class=\"line\">            temp.<span class=\"built_in\">push_back</span>(k);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ticket[s].<span class=\"built_in\">push_back</span>(&#123;i,cost,temp&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cin&gt;&gt;k;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,k)cin&gt;&gt;visit[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : ticket[visit[<span class=\"number\">1</span>]])&#123;         <span class=\"comment\">//行程第一個起點的聯票起點</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> p = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> j : i.next_city)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p &lt; k &amp;&amp; j == visit[p+<span class=\"number\">1</span>])p++;</span><br><span class=\"line\">            pq.<span class=\"built_in\">push</span>(&#123;i.cost,j,p,&#123;i.id&#125;&#125;);</span><br><span class=\"line\"><span class=\"comment\">//            cout&lt;&lt;&quot;一開始聯票：&quot;&lt;&lt;i.id&lt;&lt;&quot; &quot;&lt;&lt;j&lt;&lt;endl;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!pq.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">        node cur = pq.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">        pq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.visit_pos == k)&#123;</span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;Cost = &quot;</span>&lt;&lt;cur.cost&lt;&lt;<span class=\"string\">&quot;, Tickets used: &quot;</span></span><br><span class=\"line\">                &lt;&lt;cur.used_ticket[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;cur.used_ticket.<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">                cout&lt;&lt;<span class=\"string\">&quot;, &quot;</span>&lt;&lt;cur.used_ticket[i];</span><br><span class=\"line\">            cout&lt;&lt;endl;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : ticket[cur.cur_pos])&#123;</span><br><span class=\"line\">            <span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">vec</span><span class=\"params\">(cur.used_ticket)</span></span>;</span><br><span class=\"line\">            vec.<span class=\"built_in\">push_back</span>(i.id);                <span class=\"comment\">//將現在使用的第i聯票推入</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> p = cur.visit_pos;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> j : i.next_city)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p &lt; k &amp;&amp; j == visit[p+<span class=\"number\">1</span>])p++;</span><br><span class=\"line\">                pq.<span class=\"built_in\">push</span>(&#123;cur.cost+i.cost,j,p,vec&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"length":22045,"excerpt":"<h2 id=\"題目目錄\"><a href=\"#題目目錄\" class=\"headerlink\" title=\"題目目錄\"></a>題目目錄</h2><ul>\n<li>可魚果運輸問題</li>\n<li>百慕達三角洲</li>\n<li>江神與他的小火車</li>\n<li>貨物運送計劃</li>\n<li>E.漢米頓的麻煩</li>\n<li>旅遊規劃問題</li>\n<li>Codeforces 543B: Destroying Roads","more":"</li>\n</ul>\n<h3 id=\"可魚果運輸問題\"><a href=\"#可魚果運輸問題\" class=\"headerlink\" title=\"可魚果運輸問題\"></a>可魚果運輸問題</h3><p><a href=\"https://neoj.sprout.tw/problem/391/\">題目連結</a><br><a href=\"https://neoj.sprout.tw/challenge/178079/\">Dijkstra’s Algorithm</a><br><a href=\"https://neoj.sprout.tw/challenge/178078/\">SPFA</a><br>這一題的來源是NPSC2013的題目，題目大意如下：</p>\n<blockquote>\n<p>有n個城市m個運輸方案，每個方案 $P_i$ 會從一個固定的起始城市 $A_i$ 運送東西到另一個固定的終點城市 $B_i$，每運輸一件物品，就必須付 $C_i$ 價錢。若用方案 $P_i$ 運輸了超過 $D_i$ 件物品，多出來的部份每件物品收 $C_i’$ 元。共要運輸 $f$ 物品。<br>求起點 $s$ 到終點 $e$ 的最短路徑。</p>\n</blockquote>\n<p>當運輸總量超過 $D_i$ 件物品，表示可以使用更小的邊權重去計算接下來的費用。這時候我們可以了解到一個性質，如果我把全部的物品全部集中在一條路徑運送，因為送的越多，相對的在費用上就可能產生優惠，比分散多條路徑的運送花費來的小。因為總共要運送 $f$ 件物品，因此會將邊的權重設定為當 $f$ 件物品都經過這一條邊時，所要花費的價格。</p>\n<p>有了邊以及價格之後，便可開始進行最短路徑的演算法。因為題目範圍 $N≤100$ ，因此用Dijkstra’s 或是 SPFA 都可以做（Bellman-Ford就先不要XD）。</p>\n<h4 id=\"Dijkstra’s-Algorithm\"><a href=\"#Dijkstra’s-Algorithm\" class=\"headerlink\" title=\"Dijkstra’s Algorithm\"></a>Dijkstra’s Algorithm</h4><p>這篇有<a href=\"http://www-m3.ma.tum.de/foswiki/pub/MN0506/WebHome/dijkstra.pdf\">一篇論文</a>是Dijkstra在針對最短路徑寫的論文（也就是以他名字命名的演算法論文），這篇只有三頁耶！<br>以下是「演算法導論」這本書中演算法的虛擬碼：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DIJKSTRA(G, w, s)</span><br><span class=\"line\">  1  INITIALIZE-SINGLE-SOURCE(G, s)</span><br><span class=\"line\">  2    S &lt;- Ø</span><br><span class=\"line\">  3    Q &lt;- V[G]</span><br><span class=\"line\">  4    while Q ≠ Ø</span><br><span class=\"line\">  5        do u &lt;- EXTRACT-MIN(Q)</span><br><span class=\"line\">  6            S &lt;- S ∪ &#123;u&#125;</span><br><span class=\"line\">  7            for each vertex v ∈ Adj[u]</span><br><span class=\"line\">  8                do RELAX(u,v,w)</span><br></pre></td></tr></table></figure><br>其中集合 $S$ 在程式碼中代表的是visit，而集合 $Q$ 因為要操作取出最小元素的動作，因此會用priority_queue實現，以heap來進行 $O(\\log n)$ 的插入以及取出。</p>\n<p>這裡面使用$visit$判斷是否在集合 $S$ 中，但我們可以發現，如果在priority_queue中有兩個點的存在，第一個點處理完被加入集合 $S$ 中之後，第二次再次被拿出來進行處理時就不會有任何相鄰的點再一次被處理，這是因為第一次與第二次更新所使用的 $dis[cur]$ 是一樣的。因此，當一個點已經在visit中（也就是在集合 $s$ 中），我們可以直接換下一個點去執行（不過如果忘了visit也是沒差啦）。</p>\n<div class=\"note default\">\n            <p><strong>複雜度分析</strong></p><p>以下分析一下演算法時間複雜度，總共有兩個時間複雜度，取決於使用何種資料結構來實作。</p><p><strong>1. 時間複雜度 $O(V^2+E)$</strong><br>首先是每一個點執行 $V$ 次對每一個相鄰的點進行更新，每一輪執行 $O(V)$ 尋找目前距離 $dis$ 最小的點。總共有 $E$ 條邊需要更新，因此最後要把 $E$ 再加上去。這樣總複雜度就會 $V\\times O(V)+O(E) = O(V^2+E)$。此實作方式一般在稠密的圖中會有比較好的表現。<br><br></p><p><strong>2. 時間複雜度 $O((V+E)\\log V)$</strong><br>這一題在 $O(n)$ 爆搜尋找改用heap去優化，因此複雜度就會是一樣執行V 輪利用 $O(logV)$ 找到距離 $dis$ 最小的點，同時將更新後的點放進heap中，我們知道放入heap的複雜度也是 $O(\\log n)$，因此複雜度就會變成 $O(V\\log V)+O(E\\log V) = O((V+E)\\log V)$。此實作方式一般在稀疏的圖中會有比較好的表現，從 $V$ 與 $E$ 的大小估計可以大致發現。</p>\n          </div>\n<p>以下是程式法的實作，最需要注意的地方是pair的first跟second儲存的東西。在存圖時會使用（點,權重）搭配vector；而在priority_queue中，因為要對權重進行比較，因此會用（權重,點），需要特別注意別搞混了!</p>\n<div class=\"note success\">\n            <p><strong>Priority_Queue實作細節</strong></p><p>預設的priority_queue會pop出目前heap中最大的元素（預設是less&lt;&gt;函數），如果要實作一個min heap 的話要使用greater&lt;&gt;函數，同時第二個傳進函數的參數要用一個vector！</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">priority_queue &lt;Type, vector&lt;Type&gt;, ComparisonType &gt; min_heap;</span><br><span class=\"line\">priority_queue &lt;pii,vector&lt;pii&gt;,greater&lt;pii&gt;&gt; pq;   </span><br></pre></td></tr></table></figure>\n          </div>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 105</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FOR(i,n) for(int i=0;i&lt;n;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    vector&lt;pii&gt; edge[N];                <span class=\"comment\">//存圖</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m,s,e,f;cin&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;e&gt;&gt;f;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dis[N];<span class=\"built_in\">fill</span>(dis,dis+N,<span class=\"number\">1e16</span>);</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> visit[N];                     <span class=\"comment\">//城市數n、方案數m、s起、e終、f箱數</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(visit,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(visit));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a,b,c,d,e;cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d&gt;&gt;e;</span><br><span class=\"line\">        <span class=\"comment\">//一條由a連到b的邊，權重c，流量超過d，則改權重c</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> val = (f&gt;d?c*d+e*(f-d):c*f);</span><br><span class=\"line\">        edge[a].<span class=\"built_in\">push_back</span>(&#123;b,val&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//Dijkstra</span></span><br><span class=\"line\">    priority_queue&lt;pii,vector&lt;pii&gt;,greater&lt;pii&gt;&gt; pq;    <span class=\"comment\">//(距離,點)</span></span><br><span class=\"line\">    pq.<span class=\"built_in\">push</span>(&#123;<span class=\"number\">0</span>,s&#125;);</span><br><span class=\"line\">    dis[s] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!pq.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cur = pq.<span class=\"built_in\">top</span>().second;</span><br><span class=\"line\">        pq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(visit[cur])<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i:edge[cur])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> next = i.first,weight = i.second;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dis[cur]+weight&lt;dis[next])&#123;</span><br><span class=\"line\">                dis[next] = dis[cur]+weight;</span><br><span class=\"line\">                pq.<span class=\"built_in\">push</span>(&#123;dis[next],next&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        visit[cur] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;dis[e]&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> t;cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Shortest-Path-Faster-Algorithm-SPFA\"><a href=\"#Shortest-Path-Faster-Algorithm-SPFA\" class=\"headerlink\" title=\"Shortest Path Faster Algorithm(SPFA)\"></a>Shortest Path Faster Algorithm(SPFA)</h4><p>這是一個使用queue最佳化的Bellman-Ford演算法，基本的使用方式跟BFS幾乎相同，在Bellman-Ford對邊進行更有效率的鬆弛(relaxation)。<br>以下一樣是「演算法導論」中Bellman-Ford的虛擬碼：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BELLMAN-FORD(G,w,s)</span><br><span class=\"line\">  1    INITIALIZE-SINGLE-SOURCE(G,s)</span><br><span class=\"line\">  2    for i &lt;- 1 to |V[G]|-1</span><br><span class=\"line\">  3        do for each edge (u,v)∈ E[G]</span><br><span class=\"line\">  4            do RELAX(u,v,w)</span><br><span class=\"line\">  5    for each edge (u,v)∈ E[G]</span><br><span class=\"line\">  6        do if d[v] &gt; d[u]+w(u,v)</span><br><span class=\"line\">  7            then return FALSE</span><br><span class=\"line\">  8    return TRUE</span><br></pre></td></tr></table></figure><br>以下是SPFA的虛擬碼，如果節點有被實際鬆弛過，且節點不在queue中（同樣元素在queue中出現兩次沒有意義，因為只要確保有在queue中等會會被更新到就好，到它的最短距離不會被改變），便將此節點推入queue中。裡面存的是帶進行鬆弛的節點們，也就是被剛剛更新過的節點。我們可以利用$visit[ ]$來 $O(1)$ 判斷節點是否有在queue中！</p>\n<p>有進行判斷是否在queue中的（比較省空間一點）：<br><img src=\"https://i.imgur.com/vdtJWR2.png\" alt=\"\"><br>沒有進行判斷的，有被更新過就塞進去：<br><img src=\"https://i.imgur.com/fsorAoE.png\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shortest-Path-Faster-Algorithm(G, s)</span><br><span class=\"line\">  1    for each vertex v ≠ s in V(G)</span><br><span class=\"line\">  2        d(v) := ∞</span><br><span class=\"line\">  3    d(s) := 0</span><br><span class=\"line\">  4    offer s into Q</span><br><span class=\"line\">  5    while Q is not empty</span><br><span class=\"line\">  6        u := poll Q</span><br><span class=\"line\">  7        for each edge (u, v) in E(G)</span><br><span class=\"line\">  8            if d(u) + w(u, v) &lt; d(v) then</span><br><span class=\"line\">  9                d(v) := d(u) + w(u, v)</span><br><span class=\"line\"> 10                if v is not in Q then</span><br><span class=\"line\"> 11                    offer v into Q</span><br></pre></td></tr></table></figure>\n<p>SPFA有一個問題，他可以被出題目的人設計測資去卡這種算法，使時間複雜度變成糟糕的$O(V^2)$，因此一般來說會實作Dijkstra而非SPFA！</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ios ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 105</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FOR(i,n) for(int i=0;i&lt;n;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    vector&lt;pii&gt; edge[N];                <span class=\"comment\">//存圖</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m,s,e,f;cin&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;e&gt;&gt;f;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dis[N];<span class=\"built_in\">fill</span>(dis,dis+N,<span class=\"number\">1e16</span>);</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> visit[N];                     <span class=\"comment\">//城市數n、方案數m、s起、e終、f箱數</span></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(visit,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(visit));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a,b,c,d,e;cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d&gt;&gt;e;</span><br><span class=\"line\">        <span class=\"comment\">//一條由a連到b的邊，權重c，流量超過d，則改權重c</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> val = (f&gt;d?c*d+e*(f-d):c*f);</span><br><span class=\"line\">        edge[a].<span class=\"built_in\">push_back</span>(&#123;b,val&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//SPFA</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    queue&lt;<span class=\"keyword\">int</span>&gt; que;</span><br><span class=\"line\">    que.<span class=\"built_in\">push</span>(s);</span><br><span class=\"line\">    dis[s] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    visit[s] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cur = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        visit[cur] = <span class=\"number\">0</span>;                <span class=\"comment\">//pop出來將狀態改成不在queue中</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i:edge[cur])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> next = i.first,weight = i.second;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dis[next] &gt; dis[cur]+weight)&#123;</span><br><span class=\"line\">                dis[next] = dis[cur]+weight;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!visit[next])que.<span class=\"built_in\">push</span>(next);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;dis[e]&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> t;cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"百慕達三角洲\"><a href=\"#百慕達三角洲\" class=\"headerlink\" title=\"百慕達三角洲\"></a>百慕達三角洲</h3><p><a href=\"https://neoj.sprout.tw/problem/393/\">題目連結</a></p>\n<blockquote>\n<p>題目大意：<br>給定一張長n寬m的矩形圖，由”#”和”.”組成，給定起點$(x_1,y_1)$以及終點$(x_2,y_2)$，必須最小化經過”.”的次數，求最少需幾過幾次。</p>\n</blockquote>\n<p>當下看到這一個題目的想法，就是跟處理一般的圖論題目一樣，將邊用vector儲存起來，將經過”.”的權重設為很大的一個數字，這樣用Dijkstra做一次最短路徑就可以找出經過”.”最小化的次數了！</p>\n<p>以下是MLE的<a href=\"https://neoj.sprout.tw/challenge/178136/\">Submission</a><br><img src=\"https://i.imgur.com/9ZaisdZ.png\" alt=\"\"><br>吃了開心的MLE，如果當成一般的圖在處理，不管是在 $dis$ 開long long的處裡，或是開了一個vector陣列儲存邊，都非常的消耗空間。因此，我詢問了一下電神這一題的想法，他說我的想法用Dijkstra是正確的，不過在設定邊權的部分可以直接用0跟1代替，而且可以用queue去輔助實作BFS（要說它也可以是Dijkstra的另一種比較簡單的版本）。</p>\n<p><img src=\"https://i.imgur.com/9JldAha.png\" alt=\"\"></p>\n<p>這題也就是所謂<a href=\"https://www.geeksforgeeks.org/0-1-bfs-shortest-path-binary-graph/\">0-1 BFS (Shortest Path in a Binary Weight Graph)</a>，或是<a href=\"https://codeforces.com/blog/entry/22276\">這裡0-1 BFS</a>，想法可以說是Dijkstra跟BFS的綜合（其實它跟SPFA也很相似）。以下是實作步驟：</p>\n<ol>\n<li>建立雙向的佇列(deque)，等等要存放被relax過的點，初始放入起點</li>\n<li>每一次從deque前方pop出一點，對那一點相鄰的所有點進行鬆弛</li>\n<li>如果被鬆弛時的邊權重為0，將點push dequeue的前方</li>\n<li>否則當鬆弛時的邊權重為1，將點push dequeue的後方</li>\n<li>重複執行2-4步驟直到deque為空</li>\n</ol>\n<p>當我們一直利用deque最前端的元素進行鬆弛，因為我們將邊權為0的元素放入最前端，用距離最小的那些點進行鬆弛，每一個點最多會被鬆弛一次，因此總時間複雜度為$O(V+E)$，比起用Dijktra直接做$O((V+E)\\log V)$快了許多（此演算法之所以正確是因為其中一邊的權重是0，不管0接到誰他的權重也都是0，有點像「從最小層逐漸擴展」的概念）！</p>\n<div class=\"note success\">\n            <p>小問題（出處<a href=\"https://codeforces.com/blog/entry/22276\">這裡</a>）</p><ol><li>Can we apply the same trick if our edge weights can only be 0 and x (x &gt;= 0) ?</li><li>Can we apply the same trick if our edge weights are x and x+1 (x &gt;= 0) ?</li><li>Can we apply the same trick if our edge weights are x and y (x,y &gt;= 0) ?</li></ol><p>解答YES,NO,NO</p>\n          </div>\n<p>這題之所以可行是因為有一邊的權重是0，當點皆以權重為0串再一起時，他會是最短的，使用最短去更新接下來的點，因此第一題是正確的！但第二題與第三題是錯誤的，考慮以下點與邊的情況：</p>\n<p><img src=\"https://i.imgur.com/BYojGwm.jpg\" alt=\"\"></p>\n<p>當我依照01BFS的方法不斷去用x更新其他的點，更新完之後會發現點1到點3的最短路徑應該是x+1，到時候又要再重新Relax一次，複雜度會爆炸喔（比SPFA可能還慘，因為當點三利用兩個x更新完之後，用它來做跟3所有相鄰的點，做完卻發現$(1,3)$有更短的距離，又必須重新全部更新一次！）總結來說，他只是用於只有兩種邊的情況，且其中一邊必須為0。</p>\n<p><img src=\"https://i.imgur.com/wnXKbI8.png\" alt=\"\"></p>\n<div class=\"note info\">\n            <p><strong>比較一下記憶體用量</strong><br>最主要還是時間複雜度的比較，不過既然空間已經爆了，時間也沒法比了QQ</p><p><strong>MLE</strong></p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 2005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N2 4000005</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,q,predecessor[N2],dis[N2];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> visit[N2],maze[N2];</span><br><span class=\"line\">vector&lt;pii&gt;edge[N2];</span><br></pre></td></tr></table></figure><p><strong>AC</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 2003</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,dis[N][N];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> visit[N][N],maze[N][N];</span><br></pre></td></tr></table></figure></p>\n          </div>\n<p>以下是使用deque實作01BFS的AC code：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 2003</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FOR(i,n) for(int i=0;i&lt;n;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,dis[N][N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,dy[<span class=\"number\">4</span>] = &#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> visit[N][N],maze[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(visit,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(visit));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> temp;cin&gt;&gt;temp;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp==<span class=\"string\">&#x27;.&#x27;</span>)maze[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> maze[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    deque&lt;pii&gt;deq;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s1,s2,e1,e2;cin&gt;&gt;s1&gt;&gt;s2&gt;&gt;e1&gt;&gt;e2;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dis,<span class=\"number\">0x3f3f3f3f</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(dis));</span><br><span class=\"line\">    dis[s1][s2] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    deq.<span class=\"built_in\">push_back</span>(&#123;s1,s2&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!deq.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = deq.<span class=\"built_in\">front</span>().first,y = deq.<span class=\"built_in\">front</span>().second;</span><br><span class=\"line\">        deq.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = x+dx[i],ny = y+dy[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx&lt;<span class=\"number\">1</span>||nx&gt;n||ny&lt;<span class=\"number\">1</span>||ny&gt;m)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dis[nx][ny] &gt; dis[x][y]+maze[nx][ny])&#123;</span><br><span class=\"line\">                dis[nx][ny] = dis[x][y]+maze[nx][ny];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(maze[nx][ny]==<span class=\"number\">0</span>)deq.<span class=\"built_in\">push_front</span>(&#123;nx,ny&#125;);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> deq.<span class=\"built_in\">push_back</span>(&#123;nx,ny&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;dis[e1][e2]&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t;t = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"江神與他的小火車\"><a href=\"#江神與他的小火車\" class=\"headerlink\" title=\"江神與他的小火車\"></a>江神與他的小火車</h3><p><a href=\"https://neoj.sprout.tw/problem/431/\">題目連結</a></p>\n<blockquote>\n<p>題目大意<br>已知有N個點以及M條邊，總共有Q筆詢問，每筆詢問有$\\delta(a,b)$，表示新增一條由 $a$ 指向 $b$ 的邊（其權重為1），對每一筆詢問輸出從點 $1$ 到點 $N$ 的最短距離。</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/f96GUmd.jpg\" alt=\"\"></p>\n<p>我們知道如果有用新加進來的邊 $\\delta(a,b)$，則路徑可以被拆解成 $\\delta(1,a)+\\delta(a,b)+\\delta(b,n)$。其中，我們可以用Dijkstra 一次尋找1到任何點的最短距離，那要如何處理路徑 $\\delta(b,n)$ 呢？這就是<strong>單一目的最短距離問題</strong>，我們可以將所有的邊逆序，將終點做一次Dijkstra尋找最短路，這時候我們就可以用 $O(1)$ 的時間回答每一筆詢問，總時間複雜度：預處理$O((V+E)\\log V)$，詢問 $O(Q)$。</p>\n<div class=\"note info\">\n            <p><strong>測資小問題</strong><br>有一筆測資如下，藍線是給定的路徑與權重，紅色是新加入的邊，如果按照上面 $\\delta(1,a)+\\delta(a,b)+\\delta(b,n)$ 我們可以計算出從起點到終點的最短距離為：$2+1+4 = 7$，很明顯兩點之間的最短距離是 $5$ ，但因為原本作法會經過一條$\\delta (B,C)$ 的重邊，造成算出來的距離是比較大的！這時候我們只要對最短路徑長度取min即可，也就是說在這種情況加入這一條邊並不會影響最短路徑的長度！</p><blockquote><p>測資（1,2,3分別對應A,B,C）：<br>6 5 1<br>1 2 1<br>2 3 1<br>3 4 1<br>4 5 1<br>5 6 1<br>3 2</p></blockquote><p><img src=\"https://i.imgur.com/Uocw0hc.png\" alt=\"\"></p>\n          </div>\n<p>接下來是程式碼，之後如果遇到最短路徑的題目，一般來說會避免使用SPFA（除非有負邊），為了要避免最糟的時間複雜度，因此會使用Dijkstra來處理最短路徑問題！</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 200005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FOR(i,n) for(int i=0;i&lt;n;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,q;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> visit[N];</span><br><span class=\"line\">vector&lt;pii&gt; edge[<span class=\"number\">2</span>][N];</span><br><span class=\"line\"><span class=\"comment\">//edge[0]-&gt;normal,edge[1]-&gt;opposite</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">Dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> start,<span class=\"keyword\">int</span> end,<span class=\"keyword\">bool</span> is_nor)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(visit,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(visit));</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">dis</span><span class=\"params\">(n+<span class=\"number\">2</span>,<span class=\"number\">1e16</span>)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    priority_queue&lt;pii,vector&lt;pii&gt;,greater&lt;pii&gt;&gt; pq;</span><br><span class=\"line\">    </span><br><span class=\"line\">    dis[start] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    pq.<span class=\"built_in\">push</span>(&#123;<span class=\"number\">0</span>,start&#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!pq.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cur = pq.<span class=\"built_in\">top</span>().second;</span><br><span class=\"line\">        pq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(visit[cur])<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        visit[cur] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : edge[is_nor][cur])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> next = i.first,weight = i.second;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dis[next] &gt; dis[cur] + weight)&#123;</span><br><span class=\"line\">                dis[next] = dis[cur] + weight;</span><br><span class=\"line\">                pq.<span class=\"built_in\">push</span>(&#123;dis[next],next&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dis;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a,b,w;cin&gt;&gt;a&gt;&gt;b&gt;&gt;w;</span><br><span class=\"line\">        edge[<span class=\"number\">0</span>][a].<span class=\"built_in\">push_back</span>(&#123;b,w&#125;);</span><br><span class=\"line\">        edge[<span class=\"number\">1</span>][b].<span class=\"built_in\">push_back</span>(&#123;a,w&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt; normal,opposite;</span><br><span class=\"line\">    normal = <span class=\"built_in\">Dijkstra</span>(<span class=\"number\">1</span>,n,<span class=\"number\">0</span>);</span><br><span class=\"line\">    opposite = <span class=\"built_in\">Dijkstra</span>(n,<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a,b;cin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"built_in\">min</span>(normal[a]+opposite[b]+<span class=\"number\">1</span>,normal[n])&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t;t = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"貨物運送計劃\"><a href=\"#貨物運送計劃\" class=\"headerlink\" title=\"貨物運送計劃\"></a>貨物運送計劃</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1641\">題目連結</a></p>\n<blockquote>\n<p>題目敘述<br>給定N個點M條邊，第i條邊有方邊率$C_i$，假設目前運送貨物重量p經過此邊，代表經過邊i會需要多增加 $p\\times C_i$ 的重量。給定起點、終點，求到達終點時最少的貨物重量為多少。</p>\n</blockquote>\n<p>換種說法，題目要求的是每經過一條邊，就要乘上某一個數，要求到終點最小的重量。下圖是題目範例測資：<br><img src=\"https://i.imgur.com/BSNWgh8.png\" alt=\"\"></p>\n<p>$\\delta(1,2)\\to\\delta(2,3)$，所付出的代價是$(1\\times (1+1))\\times (2+1)=6$。如果是$\\delta(1,3)$ 的話直接$1\\times (4+1)=5$，可以觀察到，遇到邊就需要將原本的數字乘上$C_i+1$。</p>\n<p>我們可以透過將邊權取 $\\log$ 之後，就可以利用Dijkstra進行最短路徑的計算，因為取 $\\log$ 後的加減運算等同於原本的乘法運算，只要最後把算出來的答案次方即可！</p>\n<p>這一題的輸出要求科學記號（為了要避免浮點數誤差），以下程式碼來達成（要求小數點後兩位，同時次方部分要求整數3位）：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.2fe+%03lld\\n&quot;</span>,<span class=\"built_in\">pow</span>(<span class=\"number\">10</span>,ans),x);</span><br></pre></td></tr></table></figure><br>程式碼的部分，透過$edge$存完所有的取完 $\\log$ 之後的邊，進行Dijkstra，輸出最短路徑（以科學記號表示）即可！</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 10005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FOR(i,n) for(int i=0;i&lt;n;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pid pair<span class=\"meta-string\">&lt;int,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdi pair<span class=\"meta-string\">&lt;double,int&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,s,t;</span><br><span class=\"line\"><span class=\"keyword\">double</span> dis[N];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> visit[N];</span><br><span class=\"line\">vector&lt;pid&gt; edge[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(visit,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(visit));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld %lld %lld %lld&quot;</span>,&amp;n,&amp;m,&amp;s,&amp;t);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a,b;<span class=\"keyword\">double</span> c;<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld %lld %lf&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class=\"line\">        edge[a].<span class=\"built_in\">push_back</span>(&#123;b,(<span class=\"keyword\">double</span>)<span class=\"built_in\">log10</span>(c+<span class=\"number\">1</span>)&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(dis,dis+n+<span class=\"number\">2</span>,<span class=\"number\">1e16</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    priority_queue&lt;pdi,vector&lt;pdi&gt;,greater&lt;pdi&gt;&gt; pq;</span><br><span class=\"line\">    dis[s] = <span class=\"number\">0.0</span>;</span><br><span class=\"line\">    pq.<span class=\"built_in\">push</span>(&#123;<span class=\"number\">0</span>,s&#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!pq.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cur = pq.<span class=\"built_in\">top</span>().second;</span><br><span class=\"line\">        pq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(visit[cur])<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        visit[cur] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i:edge[cur])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> next = i.first;</span><br><span class=\"line\">            <span class=\"keyword\">double</span> w = i.second;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dis[next] &gt; dis[cur]+w)&#123;</span><br><span class=\"line\">                dis[next] = dis[cur]+w;</span><br><span class=\"line\">                pq.<span class=\"built_in\">push</span>(&#123;dis[next],next&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> ans = dis[t];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"built_in\">floor</span>(ans);</span><br><span class=\"line\">    ans-=x;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.2fe+%03lld\\n&quot;</span>,<span class=\"built_in\">pow</span>(<span class=\"number\">10</span>,ans),x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t;t = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"E-漢米頓的麻煩\"><a href=\"#E-漢米頓的麻煩\" class=\"headerlink\" title=\"E.漢米頓的麻煩\"></a>E.漢米頓的麻煩</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1096\">題目連結</a></p>\n<p>他題目時不時提到漢米頓，是多愛漢米頓XDD（這一題跟漢米頓根本沒關係）</p>\n<blockquote>\n<p>題目大意<br>在一張n(n≤100)個點的圖中，尋找路徑長度最短的環</p>\n</blockquote>\n<p>那就用<strong>Floyd-Warshall</strong>找最小的環就好！</p>\n<div class=\"note info\">\n            <p><strong>Floyd-Warshall</strong><br>這就是dp的作法，用 $O(N^3)$ 的時間進行轉移，就能得到全點對的最短路徑。這邊有一個重要的轉移順序，也就是中點-起點-終點進行轉移，如果把dp展開就會發現中點必須在最外層進行轉移：</p><blockquote><p>定義 $dp[k][i][j]$ 為點 $i$ 走到點 $j$ ，只能經過前k個點的最短路徑，則轉移式變成：</p><script type=\"math/tex; mode=display\">d[k+1][i][j] = min(d[k][i][j], d[k][i][k+1]+d[k][k+1][j])</script></blockquote><p>每一個k+1都是由k轉移而來，仰賴k的點的配對，因此必須最先轉移中點k的部分！（不過順序顛倒也不會怎樣啦，上面「課程內容」的地方有寫到）</p>\n          </div>\n<p>同樣這一份code也可以判斷有沒有負環，只要ans小於0的話代表有負環（有的話距離是不能用的喔，因為Floyd-Warshall不能處理負環，但負邊是可以處理的）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 101</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FOR(i,n) for(int i=0;i&lt;n;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pid pair<span class=\"meta-string\">&lt;int,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdi pair<span class=\"meta-string\">&lt;double,int&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,dp[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dp,<span class=\"number\">0x3f3f3f3f</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(dp));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp;cin&gt;&gt;temp;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp!=<span class=\"number\">0</span>)dp[i][j] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;n;k++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">                dp[i][j] = <span class=\"built_in\">min</span>(dp[i][j],dp[i][k]+dp[k][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = INT_MAX;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        ans = <span class=\"built_in\">min</span>(ans,dp[i][i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ans == INT_MAX)cout&lt;&lt;<span class=\"number\">-1</span>&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin&gt;&gt;n &amp;&amp; n!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"旅遊規劃問題\"><a href=\"#旅遊規劃問題\" class=\"headerlink\" title=\"旅遊規劃問題\"></a>旅遊規劃問題</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1028\">題目連結</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/262198\">Submission</a><br>這一題 $n≤13$ 大概就是位元dp來完成（狀態壓縮），定義 $dp[i][j]$ 為現在在點i上，拜訪過點集j的最短距離（j中不包含點i）。這裡使用到了同層轉移的技巧，也就是利用j中的點，對相同狀態下不在i中的點進行更新。</p>\n<p>點集j中在狀態i下為起點，用Dijkstra對不在i中的其他點進行更新，最後的答案即為$dp[s][S-(1&lt;&lt;s)]$。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> double long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 14</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">vector&lt;pii&gt; edge[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[N],dp[N][<span class=\"number\">1</span>&lt;&lt;N],pre[N][<span class=\"number\">1</span>&lt;&lt;N];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> visit[N];</span><br><span class=\"line\"><span class=\"comment\">//定義dp[i][j]為現在在點i，拜訪過點集合j（i不在點集j中）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,m)&#123;                                 <span class=\"comment\">//讀入m條邊</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> a,b,w;cin&gt;&gt;a&gt;&gt;b&gt;&gt;w;</span><br><span class=\"line\">        edge[a].<span class=\"built_in\">push_back</span>(&#123;b,w&#125;);</span><br><span class=\"line\">        edge[b].<span class=\"built_in\">push_back</span>(&#123;a,w&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> S = <span class=\"number\">0</span>,start = <span class=\"number\">-1</span>;cin&gt;&gt;m;                <span class=\"comment\">//S為待拜訪的所有點集合</span></span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,m)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp;cin&gt;&gt;temp;</span><br><span class=\"line\">        S = S|(<span class=\"number\">1</span>&lt;&lt;temp);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(start == <span class=\"number\">-1</span>)start = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n)<span class=\"built_in\">rep</span>(j,<span class=\"number\">0</span>,(<span class=\"number\">1</span>&lt;&lt;n))dp[i][j] = INF;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n)dp[i][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;(<span class=\"number\">1</span>&lt;&lt;n);i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == (S &amp; i))&#123;                       <span class=\"comment\">//在集合i中的點在S一定要有</span></span><br><span class=\"line\">            priority_queue&lt;pii,vector&lt;pii&gt;,greater&lt;pii&gt;&gt; pq;</span><br><span class=\"line\">            <span class=\"built_in\">fill</span>(dis,dis+n,INF);                <span class=\"comment\">//將dis初始為無限大，做Dijkstra</span></span><br><span class=\"line\">            <span class=\"built_in\">memset</span>(visit,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(visit));</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i&amp;(<span class=\"number\">1</span>&lt;&lt;j))&#123;                   <span class=\"comment\">//從有在i中的點向不在的點做Dijkstra</span></span><br><span class=\"line\">                    dis[j] = dp[j][i^(<span class=\"number\">1</span>&lt;&lt;j)];   <span class=\"comment\">//目前在j，經過拜訪了點集i（不包含點j）</span></span><br><span class=\"line\">                    pq.<span class=\"built_in\">push</span>(&#123;dis[j],j&#125;);        <span class=\"comment\">//利用在i中的點對其他點進行更新</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!pq.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> cur = pq.<span class=\"built_in\">top</span>().second;</span><br><span class=\"line\">                pq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                visit[cur] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> k : edge[cur])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> v = k.first,w = k.second;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(i&amp;(<span class=\"number\">1</span>&lt;&lt;v))<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(dis[v] &gt; dis[cur]+w)&#123;</span><br><span class=\"line\">                        dis[v] = dis[cur] + w;</span><br><span class=\"line\">                        pre[v][i] = cur;        <span class=\"comment\">//紀錄點v在狀態i下由cur轉移</span></span><br><span class=\"line\">                        pq.<span class=\"built_in\">push</span>(&#123;dis[v],v&#125;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dis[v] == dis[cur]+w &amp;&amp; pre[v][i] &gt; cur)&#123;</span><br><span class=\"line\">                        pre[v][i] = cur;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;               <span class=\"comment\">//對於不在點集i中的點進行更新</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i &amp; (<span class=\"number\">1</span> &lt;&lt; j))<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                dp[j][i] = dis[j];              <span class=\"comment\">//同層狀態轉移，更新dp[j][i]</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;Minimum travel distance: &quot;</span>&lt;&lt;dp[start][S^(start)]&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;Travel route:&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cur = start;S = S^(<span class=\"number\">1</span>&lt;&lt;start);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;cur;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!S)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        cur = pre[cur][S];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S&amp;(<span class=\"number\">1</span>&lt;&lt;cur))S = (S^(<span class=\"number\">1</span>&lt;&lt;cur));         <span class=\"comment\">//經過的點不一定是指定的觀光點</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Codeforces-543B-Destroying-Roads\"><a href=\"#Codeforces-543B-Destroying-Roads\" class=\"headerlink\" title=\"Codeforces 543B: Destroying Roads\"></a>Codeforces 543B: Destroying Roads</h3><p><a href=\"https://codeforces.com/problemset/problem/543/B\">題目連結</a><br><a href=\"https://codeforces.com/problemset/submission/543/125743532\">Submission</a></p>\n<blockquote>\n<p>題目大意<br>給定N個點M條無向邊，每一邊權重都是1，以及兩筆資料，由三個數$(x,y,w)$ 構成，代表起點為x、終點為x、要在w距離內從起點走到終點。試問最多可以拔掉幾條邊同時滿足以上兩個資料所描述的特性？</p>\n</blockquote>\n<p>這一題蠻有趣的，首先他的邊權重都是1，因此我們可以直接用BFS尋找最短路徑，並且點第一次拜訪到時的就是該點的最短距離（BFS一層一層擴展）。</p>\n<div class=\"note primary\">\n            <p><strong>第一個想法：錯誤想法</strong><br>我先將兩個起點與終點的最短路徑都找出來，把將過的邊都標上不能移除，將其他的邊全部拔掉。</p><p><strong>問題點：</strong><br>固然找到的是最短路徑，但不代表可以最大化拔除邊的數量。因為題目要求兩點只要符合最短距離 $w$ 即可，因此每一個配對其實不用符合是最短路徑的情況（如下圖）！目標是在題目要求的限度內最大化重複的邊，使能夠被拔除的邊最大化！</p><p><img src=\"https://i.imgur.com/QfbfF82.png\" alt=\"\"></p><p>上圖紅色線段是$\\delta(1,7)$的最短路徑、褐色是線段$\\delta(3,6)$的最短路徑、黑色線段是皆以最短路徑之下可以被拔除的邊。但是如果將路徑$\\delta(3,6)$換成是$(3,2)\\to(2,4)\\to(4,5)\\to(5,6)$，被拔除的邊可以增過為三條。</p>\n          </div>\n<p>這一題最重要的關鍵就是以$O(V^2)$枚舉所有點對（距離長度可以直接換算成邊的數量），可以先用$O(V(V+E)$的時間對每一個點用進行BFS，如此一來總複雜度即為$O(V^2+VE)$，所幸題目給定總共的邊數不會超過3000條，因此是可以在時間限制內完成枚舉。</p>\n<div class=\"note primary\">\n            <p>枚舉路徑 $\\delta(i,j)$ 為共同邊的時候，必須考慮起點與終點的方向，同時考慮從 $i\\to j$ 以及從 $j\\to i$ 兩個方向。以下圖為例，當枚舉都使用相同的起點以及終點，會讓下圖的 $(3,4)$ 被重複計算！</p><p><img src=\"https://i.imgur.com/tjq8oe7.png\" alt=\"\"></p>\n          </div>\n<p>以下是AC程式碼：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 3005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FOR(i,n) for(int i=0;i&lt;n;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pid pair<span class=\"meta-string\">&lt;int,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdi pair<span class=\"meta-string\">&lt;double,int&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,s1,e1,w1,s2,e2,w2,dis[N][N];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> visit[N];</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; edge[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a,b;cin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">        edge[a].<span class=\"built_in\">push_back</span>(b);</span><br><span class=\"line\">        edge[b].<span class=\"built_in\">push_back</span>(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cin&gt;&gt;s1&gt;&gt;e1&gt;&gt;w1&gt;&gt;s2&gt;&gt;e2&gt;&gt;w2;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dis,<span class=\"number\">0x3f3f3f3f</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(dis));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(visit,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(visit));</span><br><span class=\"line\">        queue&lt;<span class=\"keyword\">int</span>&gt;que;</span><br><span class=\"line\">        que.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">        visit[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        dis[i][i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!que.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> cur = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> j:edge[cur])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(visit[j])<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                dis[i][j] = dis[i][cur]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                visit[j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dis[s1][e1]&gt;w1||dis[s2][e2]&gt;w2)&#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"number\">-1</span>&lt;&lt;endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = dis[s1][e1]+dis[s2][e2];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//O(n^2)枚舉所有共同邊</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dis[s1][i]+dis[i][j]+dis[j][e1]&lt;=w1&amp;&amp;dis[s2][i]+dis[i][j]+dis[j][e2]&lt;=w2)</span><br><span class=\"line\">                ans = <span class=\"built_in\">min</span>(ans,dis[s1][i]+dis[i][j]+dis[j][e1]+dis[s2][i]+dis[j][e2]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dis[s1][i]+dis[i][j]+dis[j][e1]&lt;=w1&amp;&amp;dis[e2][i]+dis[i][j]+dis[j][s2]&lt;=w2)</span><br><span class=\"line\">                ans=<span class=\"built_in\">min</span>(ans,dis[s1][i]+dis[i][j]+dis[j][e1]+dis[e2][i]+dis[j][s2]);</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;m-ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"TIOJ-2180-勇者冒險-Adventure\"><a href=\"#TIOJ-2180-勇者冒險-Adventure\" class=\"headerlink\" title=\"TIOJ 2180 勇者冒險 (Adventure)\"></a>TIOJ 2180 勇者冒險 (Adventure)</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/2180\">題目連結</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/262669\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>給定一個地圖共 $R\\times C$ 行，接著會有 $M$ 行每一行都有一個座標和等級，代表經過這個座標需要多少等級才能通過。問從特定起點到終點所需要的最低的等級為多少。</p>\n</blockquote>\n<p>這題蠻特別的，他用到了Dijkstra中每一次都找最小的去更新，同時因為要求的是路徑上最大的等級為何，因此也用到了類似BFS的手法去擴展每一個座標。</p>\n<p>因為題目保證至少會有一條路徑通往起點與終點，同時我們每一次從queue拿出來的都是目前等級最低的點，因此如果碰到終點就可以確定這一條路線一定是需要等級最小的一條路徑！</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> double long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 1005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rrep(i,l,r) for(int i=l;i&lt;r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,row,col,mp[N][N],dis[N][N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> s1,s2,e1,e2;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,dy[<span class=\"number\">4</span>] = &#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> visit[N][N];</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span> ,pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt;&gt; pp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dijkstra</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Dijkstra</span></span><br><span class=\"line\">    priority_queue&lt;pp,vector&lt;pp&gt;,greater&lt;pp&gt;&gt; pq;</span><br><span class=\"line\">    dis[s1][s2] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    pq.<span class=\"built_in\">push</span>(&#123;<span class=\"number\">0</span>,&#123;s1,s2&#125;&#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!pq.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rr = pq.<span class=\"built_in\">top</span>().y.x,cc = pq.<span class=\"built_in\">top</span>().y.y;</span><br><span class=\"line\"><span class=\"comment\">//        cout&lt;&lt;rr&lt;&lt;&quot; &quot;&lt;&lt;cc&lt;&lt;&quot;  &quot;&lt;&lt;dis[rr][cc]&lt;&lt;endl;</span></span><br><span class=\"line\">        pq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = rr+dx[i],ny = cc+dy[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx&lt;<span class=\"number\">0</span>||ny&lt;<span class=\"number\">0</span>||nx&gt;=row||ny&gt;=col)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx == e1 &amp;&amp; ny == e2)&#123;</span><br><span class=\"line\">                cout&lt;&lt;dis[rr][cc]&lt;&lt;endl;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mp[nx][ny] == <span class=\"number\">-1</span>)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(visit[nx][ny])<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            dis[nx][ny] = <span class=\"built_in\">max</span>(dis[rr][cc],mp[nx][ny]);</span><br><span class=\"line\">            pq.<span class=\"built_in\">push</span>(&#123;dis[nx][ny],&#123;nx,ny&#125;&#125;);</span><br><span class=\"line\">            visit[nx][ny] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;row&gt;&gt;col;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dis,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(dis));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(visit,<span class=\"number\">0</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(visit));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(mp,<span class=\"number\">-1</span>,<span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(mp));</span><br><span class=\"line\">    cin&gt;&gt;s1&gt;&gt;s2&gt;&gt;e1&gt;&gt;e2;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a,b,c;cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class=\"line\">        mp[a][b] = c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">Dijkstra</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"最小花費的航空之旅\"><a href=\"#最小花費的航空之旅\" class=\"headerlink\" title=\"最小花費的航空之旅\"></a>最小花費的航空之旅</h3><blockquote>\n<p>題目敘述：<br>給定很多種連接城市間的聯票，要求從起始站搭乘，可以在中途任意站下車，但下車以後就不能再次上車。輸入的第一行為一個正整數 n (1 ≤ n ≤ 20)，即聯票的種類數。以下 n 行每航為一個聯票的資訊，其中第一個整數為聯票的價格，然後是聯票上城市的數目。</p>\n<p>接下來為一個行程單的資訊，其中第一個正整數為行程單上的城市數目k（包括起始城市，2 ≤ k ≤ 10），以及這些城市的編號（按順序列出）。</p>\n<p>輸出最小花費和對應的方案的其中一組解。</p>\n</blockquote>\n<p>這一題是APCS Class的其中一題，難度頗高，因為他要找最短的路徑，同時增加了可以在任意站下車的條件。首先我們要維護每一個聯票的資訊，它的價值、起點、編號以及經過的城市。接著，我們考慮所有從起點出發的聯票，將每一種聯票上的每一個經過的城市都加入queue中。</p>\n<p>跟上一題一樣，當我們每一次都從cost最小的點下手，在轉移的過程中如果將所有的點都走訪一遍，則他的路徑必定是最短的，因為每一次的更新都是從花費最小的路徑去轉移。</p>\n<div class=\"note primary\">\n            <p><strong>使用自定義比較函數放入Priority_queue中</strong></p><p>Priority_queue中的比較函數需要使用到struct或class包覆的比較函數，若要回傳cost的最小值，則必須以大於來寫（有點像預設是pop出最大值，使用的卻是less<int>的比較函數）</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cmp</span>&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(node a,node b)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.cost &gt; b.cost;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n          </div>\n<p>以下是AC Code：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> double long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 105</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 2e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rrep(i,l,r) for(int i=l;i&lt;r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pif pair<span class=\"meta-string\">&lt;int,float&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,k,visit[<span class=\"number\">20</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Ticket</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id,cost;</span><br><span class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt; next_city;</span><br><span class=\"line\">    <span class=\"comment\">//陣列ticket[i]存以i為起點</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector&lt;Ticket&gt; ticket[<span class=\"number\">30</span>];          <span class=\"comment\">//ticket[i] 起點為i的聯票</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cost,cur_pos,visit_pos;</span><br><span class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt; used_ticket;</span><br><span class=\"line\">    <span class=\"comment\">//cur_pos現在所在位置、visit_pos在行程單上位置</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cmp</span>&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(node a,node b)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.cost &gt; b.cost;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//讓priority_queue可以pop出最小的cost的路徑</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">priority_queue&lt;node,vector&lt;node&gt;,cmp&gt; pq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cost,num,s;cin&gt;&gt;cost&gt;&gt;num&gt;&gt;s;</span><br><span class=\"line\">        vector&lt;<span class=\"keyword\">int</span>&gt; temp;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j,<span class=\"number\">1</span>,num<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> k;cin&gt;&gt;k;</span><br><span class=\"line\">            temp.<span class=\"built_in\">push_back</span>(k);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ticket[s].<span class=\"built_in\">push_back</span>(&#123;i,cost,temp&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cin&gt;&gt;k;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,k)cin&gt;&gt;visit[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : ticket[visit[<span class=\"number\">1</span>]])&#123;         <span class=\"comment\">//行程第一個起點的聯票起點</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> p = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> j : i.next_city)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p &lt; k &amp;&amp; j == visit[p+<span class=\"number\">1</span>])p++;</span><br><span class=\"line\">            pq.<span class=\"built_in\">push</span>(&#123;i.cost,j,p,&#123;i.id&#125;&#125;);</span><br><span class=\"line\"><span class=\"comment\">//            cout&lt;&lt;&quot;一開始聯票：&quot;&lt;&lt;i.id&lt;&lt;&quot; &quot;&lt;&lt;j&lt;&lt;endl;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!pq.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">        node cur = pq.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">        pq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.visit_pos == k)&#123;</span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;Cost = &quot;</span>&lt;&lt;cur.cost&lt;&lt;<span class=\"string\">&quot;, Tickets used: &quot;</span></span><br><span class=\"line\">                &lt;&lt;cur.used_ticket[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;cur.used_ticket.<span class=\"built_in\">size</span>();i++)</span><br><span class=\"line\">                cout&lt;&lt;<span class=\"string\">&quot;, &quot;</span>&lt;&lt;cur.used_ticket[i];</span><br><span class=\"line\">            cout&lt;&lt;endl;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : ticket[cur.cur_pos])&#123;</span><br><span class=\"line\">            <span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">vec</span><span class=\"params\">(cur.used_ticket)</span></span>;</span><br><span class=\"line\">            vec.<span class=\"built_in\">push_back</span>(i.id);                <span class=\"comment\">//將現在使用的第i聯票推入</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> p = cur.visit_pos;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> j : i.next_city)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p &lt; k &amp;&amp; j == visit[p+<span class=\"number\">1</span>])p++;</span><br><span class=\"line\">                pq.<span class=\"built_in\">push</span>(&#123;cur.cost+i.cost,j,p,vec&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"計算幾何例題","date":"2021-08-21T16:00:00.000Z","mathjax":true,"_content":"\n## 題目目錄\n- 向量加法\n- 等長線段對\n- 向左轉向右轉\n- 線段相交\n- 最小凸多邊形\n- TIOJ 1178 Convex Hull\n- 來吧，遊戲開始了\n- 遊戲：最終回\n- TIOJ 1205 直角三角形\n<!--more-->\n- TIOJ 1105 H.PS3\n- ZJ b288: 夏季大三角\n- TIOJ 1500 Clean up on aisle 3\n- ZJ a871: Museum Area\n- TIOJ 1280 領土 (Territory)\n- TIOJ 1678 剪多邊形（molding）\n- ZJ d269: 11579 - Triangle Trouble\n\n### 向量加法\n[題目連結](https://neoj.sprout.tw/problem/398/)\n[Submission](https://neoj.sprout.tw/challenge/178462/)\n\n> 題目敘述：\n> 給你n個數字（0≤i<1，小數點精度到末九位），想知道到底有多少組 $(i,j,k)$ 滿足 $v_i+v_j=v_k$，其中 $i,j,k$ 可以重複。\n\n這題其實跟計算幾何沒什麼關係，直接用unordered_map去做（有點像two sum，不過下面的code好像也不用開到multi），簡單！不過我在浮點數的地方吃了一些WA，最後算了直接改用字串處理這個惱人的東西XD\n\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define int long long\n#define double long double\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define rep2(i,l,r) for(int i=l;i<r;i++)\n#define pii pair<int,int>\n#define x first\n#define y second\n#define eps (1e-9)\n#define INF 1e10\n#define N 2001\n#define ll long long\n#define ld long double\n#define int long long\nusing namespace std;\nint n;\n\nsigned main(){\n    cin>>n;\n    vector<int> vec(n);\n    rep2(i,0,n){\n        string s;cin>>s;\n        int num = 0,times = 1000000000;\n        for(int i=2;i<=10;i++){\n            num += (s[i]-'0')*times;\n            times/=10;\n        }\n        vec[i] = num;\n    }\n    unordered_multimap<int,int> mp;\n    for(int i=0;i<n;i++){\n        mp.insert({vec[i],i});\n    }\n    int ans = 0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            ans += mp.count(vec[i] + vec[j]);\n        }\n    }\n    cout<<ans<<endl;\n}\n```\n\n### 等長線段對\n[題目連結](https://neoj.sprout.tw/problem/399/)\n[Submission](https://neoj.sprout.tw/challenge/178471/)\n> 題目敘述：\n> 給定平面上很多個點，求出有幾對線段等長（輸入有重複的點）。\n\n既然n≤500，那就直接枚舉吧，沒啥特別難度。\n\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a,i<=b;i++)\n#define rep2(i,a,b) for(int i=a;i<b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 1003\n#define eps 1e-9\n#define x first\n#define y second\nusing namespace std;\nint n;\npii p[N];\n\nint dist(pii a,pii b){\n    int x = a.x-b.x,y = a.y-b.y;\n    return x*x+y*y;\n}\n\nsigned main(){\n    Orz;\n    cin>>n;\n    rep2(i,0,n)cin>>p[i].x>>p[i].y;\n    map<int,int>mp;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            int dis = dist(p[i],p[j]);\n            mp[dis]+=1;\n        }\n    }\n    int ans = 0;\n    for(auto i:mp){\n        int cnt = i.second;\n        ans+=((cnt*(cnt-1))/2);\n    }\n    cout<<ans<<endl;\n}\n```\n\n### 向左轉向右轉\n[題目連結](https://neoj.sprout.tw/problem/400/)\n[Submission](https://neoj.sprout.tw/challenge/178524/)\n\n> 題目敘述\n> 給你平面上n個點，依序走訪每一個點，試問走訪過程中共執行幾次的左轉、右轉以及迴轉。\n\n很特別，計算幾何讓電腦可以處理平常我們所看到的平面圖形，可以利用向量內積、外積等方式判斷方向。這一題最重要的就是**方向函數**。傳入3個點$(A,B,O)$，方向函數會會回傳$\\stackrel\\longrightarrow{OA}\\times \\stackrel\\longrightarrow{OB}$ 的正負數值。\n\n下圖為外積$\\stackrel\\longrightarrow{OA}\\times \\stackrel\\longrightarrow{OB}$ 的結果，當 $\\sin\\theta$的結果為負，也就是下圖的情況，從B走到A就需要往左邊走；反之亦然。\n![](https://i.imgur.com/eDNRLhm.png)\n\n至於如何判斷當兩個向量的方向呈現一直線時，也就是外積回傳的值為0時（$\\sin\\theta = 0$），應該是同向還是異向呢？這時候就需要搭配向量內積（這我想了很久），因為內積公式是$A\\cdot B = |A||B|\\cos\\theta$，將兩個向量內積之後就可以很明確的判斷到底是朝原本的方向走，還是反方向的行走！\n\n{% note info %}\n**內積、外積公式**\n有一點數學，不過蠻有趣的。可以利用$\\sin$與$\\cos$達到計算角度的目的，利用兩者不同的值域，互相搭配，就可以更輕鬆的進行判斷！注意到外積的正負就代表著A到B是順時針或是逆時鐘。\n$$A\\cdot B = |A||B|\\cos\\theta = A_xB_x+A_yB_y\\\\A\\times B = |A||B|\\sin\\theta = A_xB_y-A_yB_x$$\n\n<br>\n\n**方向函數**\n\n當我們要判斷方向的時候，會利用正弦函數，逆時針正、順時針為負進行判斷！\n```cpp=\nint dir(pt a, pt b, pt o) {\n    int cross = (a - o) ^ (b - o);\n    if(fabs(cross) <= eps) return 0;\n    else if(cross > 0) return 1;\n    else return -1;\n}\n```\n注意到此時在判斷是否為平行的時候（cross==0），使用到$fabs()$這個函數，目的是為了避免誤差而導致判斷錯誤，因此需要進行誤差的處理（其實不用也沒差啦，只是這樣嚴謹一點）\n{% endnote %}\n\n以下是AC Code：\n\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 1003\n#define eps 1e-9\n#define x first\n#define y second\n\nusing namespace std;\n\nstruct pt{\n    int x,y;\n    bool operator < (pt b){\n        if(x == b.x)return y < b.y;\n        return x < b.x;\n    }\n    bool operator > (pt b){\n        if(x == b.x)return y > b.y;\n        return x > b.x;\n    }\n    bool operator == (pt b){\n        if(x-b.x<=eps && y-b.y<=eps)return true;\n        return false;\n    }\n    pt operator+(pt b) {return {x + b.x, y + b.y};} //向量相加\n    pt operator-(pt b) {return {x - b.x, y - b.y};} //向量相減\n    int operator^(pt b) {return x * b.y - y * b.x;} //向量外積cross\n    int operator*(pt b) {return x * b.x + y * b.y;} //向量內積dot\n};\nvector<pt> a;\nint dir(pt a, pt b, pt o) {\n    int cross = (a - o) ^ (b - o);\n    if(fabs(cross) <= eps) return 0;\n    else if(cross > 0) return 1;\n    else return -1;\n}\n\nint n,t;\n\nsigned main(){\n    Orz;\n    cin>>n;\n    a.resize(n+2);\n    rep(i,1,n)cin>>a[i].x>>a[i].y;\n    int right = 0,left = 0,turn = 0;\n    pt pre = a[1],from = a[2];\n    for(int i=3;i<=n;i++){\n        int ori = dir(a[i],from,pre);\n        if(ori == 1)right+=1;\n        else if(ori == -1)left+=1;\n        else if(ori == 0 && ((a[i]-from)*(from-pre))<0)turn+=1;\n        pre = from;from = a[i];\n    }\n    cout<<left<<\" \"<<right<<\" \"<<turn<<endl;\n}\n```\n\n### 線段相交\n[題目連結](https://neoj.sprout.tw/problem/401/)\n[Submission](https://neoj.sprout.tw/challenge/178537/)\n線段相交 = ~~線段香蕉~~，自動選字永遠都是香蕉，有點煩XDD\n\n如何判斷兩線段是否相交？首先需要一個函數可以判斷點是否在一個線段上，如此一來就可以判斷端點在另一條線段上的特殊情況。以下程式碼為判斷點$P_o$ 是否在 $\\overline{P_aP_b}$ 上。利用向量外積可以判斷兩線段是否平行，而使用內積公式可以判斷$P_o$是否在線段中，而非線段的兩側！\n```cpp=\nbool onseg(pt a, pt b, pt o){       //o是否在ab線段上\n    int cross = (a - o) ^ (b - o);  //是否平行\n    int dot = (a - o) * (b - o);    //是否在線段中\n    return (cross == 0)&&(dot <= 0);\n}\n```\n說明：由點$P_o$指向a和b的向量必須呈現180度角（也就是異向），才可確保在ab線段中（跟a,b重合也算是跟ab線段相交）。\n\n接下來是主要的部分，首先先確認4個端點是否恰好在另外一條線段上，判斷完之後就是處理一般相交的情況。若線段 $\\overline{P_1P_2}$ 與 $\\overline{P_3P_4}$ 相交，則點 $P_1$ 與點 $P_2$ 會在線段$\\overline{P_3P_4}$ 的異側。用方向函數表示：$dir(a,b,c)\\times dir(a,b,d)<0$。確認完兩個線段之後即完成線段相交的判斷！\n```cpp=\nbool Intersection(pt a, pt b, pt c, pt d){      //線段ab是否與cd相交\n    if(onseg(a,b,c)||onseg(a,b,d))return true;  //點c、d是否洽在線段ab上\n    if(onseg(c,d,a)||onseg(c,d,b))return true;  //點a、b是否洽在線段cd上\n    if(dir(a,b,c)*dir(a,b,d)==-1 && dir(c,d,a)*dir(c,d,b)==-1)\n        return true;                            //對於線段兩端點看另外兩端點必須方向相反\n    return false;\n}\n```\n由下圖可以得到上面的結論，當兩線段相交時，方向函數得到的值（用外積，也就是下圖 $\\theta_1$ 以及 $\\theta_2$）的方向），會呈現一正一負，從兩個相反的方向看同一條線段得出來的結論！\n![](https://i.imgur.com/b5pW6IS.png)\n\nAC Code:\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 1003\n#define eps 1e-9\n#define x first\n#define y second\n\nusing namespace std;\n\nstruct pt{\n    int x,y;\n    bool operator < (pt b){\n        if(x == b.x)return y < b.y;\n        return x < b.x;\n    }\n    bool operator > (pt b){\n        if(x == b.x)return y > b.y;\n        return x > b.x;\n    }\n    bool operator == (pt b){\n        if(x-b.x<=eps && y-b.y<=eps)return true;\n        return false;\n    }\n    pt operator+(pt b) {return {x + b.x, y + b.y};} //向量相加\n    pt operator-(pt b) {return {x - b.x, y - b.y};} //向量相減\n    int operator^(pt b) {return x * b.y - y * b.x;} //向量外積cross\n    int operator*(pt b) {return x * b.x + y * b.y;} //向量內積dot\n};\nvector<pt> point;\nint dir(pt a, pt b, pt o) {                         //方向函數\n    int cross = (a - o) ^ (b - o);\n    if(fabs(cross) <= eps) return 0;\n    else if(cross > 0) return 1;\n    else return -1;\n}\nbool onseg(pt a, pt b, pt o){                       //o是否在ab線段上\n    int cross = (a - o) ^ (b - o);                  //是否平行\n    int dot = (a - o) * (b - o);                    //是否在線段中\n    return (cross == 0)&&(dot <= 0);\n}\n\nbool Intersection(pt a, pt b, pt c, pt d){          //線段ab是否與cd相交\n    if(onseg(a,b,c)||onseg(a,b,d))return true;      //點c、d是否洽在線段ab上\n    if(onseg(c,d,a)||onseg(c,d,b))return true;      //點a、b是否洽在線段cd上\n    if(dir(a,b,c)*dir(a,b,d)==-1 && dir(c,d,a)*dir(c,d,b)==-1)\n        return true;                                //對於線段兩端點看另外兩端點必須方向相反\n    return false;\n}\nint n,t;\n\nvoid solve(){\n    point.assign(4,{0,0});\n    rep(i,0,3)cin>>point[i].x>>point[i].y;\n    if(Intersection(point[0],point[1],point[2],point[3])){\n        cout<<\"Yes\"<<endl;\n    }\n    else cout<<\"No\"<<endl;\n}\n\nsigned main(){\n    Orz;\n    int t;cin>>t;\n    while(t--){\n        solve();\n    }\n}\n```\n### TIOJ 1178 Convex Hull\n[題目連結](https://tioj.ck.tp.edu.tw/problems/1178)\n[Submission](https://tioj.ck.tp.edu.tw/submissions/262532)\n\n> 題目敘述\n給定n個二維平面的點，找出位在凸包上的所有點的個數\n\n最小凸多邊形 = 凸包，要找出能包住所有點的最小凸多邊形，簡稱凸包。聽說最好寫的凸包演算法是：Andrew's Monotone Chain，翻成中文叫做Andrew's 單調鍊？有一點單調+鍊的味道。下圖是我用照片合成起來的GIF，大致模擬出使用Andrew's Monotone Chain 找凸包的方法。\n\n![](https://i.imgur.com/YUOC9xZ.gif)\n\n{% note default %}\n**Andrew's Monotone Chain**\n這個演算法的時間複雜度是 $O(n\\log n)$，空間複雜度 $O(n)$，資料說它可以解決了凸包有重疊的點、共線的點、退化成線段和點的情況。它的名字叫做「單調鍊」，要維護一個有點像單調隊列的東西，對於在容器中第 $i$ 個位置的點都滿足 $\\stackrel\\longrightarrow{P_i P_{i+1}}\\times \\stackrel\\longrightarrow{P_{i+1} P_{i+2}} > 0$ ，如果有點做外積後的結果小於等於0，則它會被pop掉（這是依照上圖逆時針完成凸包的描述，如果方向相反則會變號）。\n<br>\n\n以下是此演算法的執行步驟：\n\n1. 先把所有的點按照 $(x,y)$ 排序\n2. 將下凸包圍出來，有點像維護單調隊列，對所有新加入的點i計算點i-2、i-1與i之間的外積，如果不符合情況代表圍不到新加入的點，需要將舊的點pop出來\n3. 將原本已經排序好的點逆序\n3. 再把上凸包由x座標大到小圍出來，將上下合併就是凸包了（必須注意起終點被push的次數問題）！\n{% endnote %}\n\n一般會用一個vector儲存在凸包上面的點（不包含在邊上的點，只有位於轉折點的點），在頭尾的部分（x座標最大與最小）需要特別處理，讓每一個點最多近到vector一次。\n\n{% note success %}\n**實作細節**\n以下是確認是否需要將vector中元素pop出來的關鍵，對向量$\\stackrel\\longrightarrow{OA}\\times \\stackrel\\longrightarrow{OB}$ 做外積的結果，必須排除外積結果為0的情況，如果將0也納入，會造成一個點被push進去很多次，在數量和計算上出現問題。\n```cpp=\nbool check(pt a,pt b,pt o){\n    int cross = (a - o)^(b - o);\n    return cross >= 0;         //這裡很關鍵，別吃WA\n}\n```\n除此之外，上凸包在範圍限制上是需要注意的。假設x座標最大的點i，當在圍上凸包的過程中i是不可以被pop出去的，因此vector的大小必須大於下凸包的大小。\n\n凸包使用第i-1跟第i個點的向量去看第i到第i+1個點的向量，決定一個點要不要被推入vector中。當我們逆序從x座標最大的點往前看時，要確保每一輪結束之後在i點後都必須要有至少一個點，設定hull.size() > down_hull的原因是防止在下凸包的點被圍上凸包的過程更新到。\n\n```cpp=+\nint down_hull = hull.size();    //圍上凸包的程式碼片段\nfor(auto i: p){\n    while(hull.size() > down_hull \n        && check(i,hull[hull.size()-1],hull[hull.size()-2])){\n        hull.pop_back();\n    }\n    hull.push_back(i);\n}\n```\n{% endnote %}\n以下是AC Code:\n\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 100001\n#define eps 1e-9\n#define x first\n#define y second\n\nusing namespace std;\n\nstruct pt{\n    int x,y;\n    bool operator < (pt b){\n        if(x == b.x)return y < b.y;\n        return x < b.x;\n    }\n    bool operator > (pt b){\n        if(x == b.x)return y > b.y;\n        return x > b.x;\n    }\n    bool operator == (pt b){\n        if(x-b.x<=eps && y-b.y<=eps)return true;\n        return false;\n    }\n    pt operator+(pt b) {return {x + b.x, y + b.y};} //向量相加\n    pt operator-(pt b) {return {x - b.x, y - b.y};} //向量相減\n    int operator^(pt b) {return x * b.y - y * b.x;} //向量外積cross\n    int operator*(pt b) {return x * b.x + y * b.y;} //向量內積dot\n};\nbool cmp(pt a, pt b){\n    if(a.x == b.x)return a.y < b.y;\n    return a.x < b.x;\n}\nvector<pt> p;\n\nbool check(pt a,pt b,pt o){\n    int cross = (a - o)^(b - o);\n    return cross >= 0;                              //這裡很關鍵，別吃WA\n}\n\nint n,t;\n\nvector<pt> convex_hull(){\n    vector<pt> hull;\n    sort(p.begin(),p.end(),cmp);       //首先對x進行排序\n    for(auto i : p){                   //依序走訪，如果遇到外積<0則不在凸包上\n        while(hull.size()>=2 && check(i,hull[hull.size()-1],hull[hull.size()-2])){\n            hull.pop_back();\n        }\n        hull.push_back(i);             //在凸包hull的每一點都符合外積小於0\n    }\n    int down_hull = hull.size();\n    hull.pop_back();                   //x最大的點會在凸包上，不用做兩次先pop一次\n    reverse(p.begin(),p.end());        //將所有點逆序之後做一次上面的凸包\n    for(auto i: p){\n        while(hull.size() > down_hull && check(i,hull[hull.size()-1],hull[hull.size()-2])){\n            hull.pop_back();\n        }\n        hull.push_back(i);\n    }\n    return hull;                       //起點會經過兩次，剛好來算有向面積\n}\n\nsigned main(){\n    Orz;\n    cin>>n;\n    p.assign(n,{0,0});\n    rep(i,0,n-1)cin>>p[i].x>>p[i].y;\n    vector<pt> hull = convex_hull();\n    cout<<hull.size()-1<<endl;\n}\n```\n### 最小凸多邊形\n[題目連結](https://neoj.sprout.tw/problem/402/)\n[Submission](https://neoj.sprout.tw/challenge/178589/)\n\n> 題目敘述\n找出二維平面上n個點的凸包所圍出來的面積為何？\n\n跟上一題類似，在找到全部在凸包上面的點後，就可以利用**有向面積**把凸包面積算出來，有一個公式可以計算多邊形面積，利用外積得到正負值，轉一圈後得到面積！對於多邊形的頂點 $P_0,P_1,...,P_{n-1},P_n=P_0$ 的面積如下：\n$$Area = \\frac{1}{2}\\sum_{i=0}^{n-1}\\stackrel\\longrightarrow{P_i}\\times \\stackrel\\longrightarrow{P_{i+1}}$$\n\n其中最後一個點會回到起點，形成一個封閉的迴路。\n\n以下是AC Code：\n\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 100001\n#define eps 1e-9\n#define x first\n#define y second\n\nusing namespace std;\n\nstruct pt{\n    int x,y;\n    bool operator < (pt b){\n        if(x == b.x)return y < b.y;\n        return x < b.x;\n    }\n    bool operator > (pt b){\n        if(x == b.x)return y > b.y;\n        return x > b.x;\n    }\n    bool operator == (pt b){\n        if(x-b.x<=eps && y-b.y<=eps)return true;\n        return false;\n    }\n    pt operator+(pt b) {return {x + b.x, y + b.y};} //向量相加\n    pt operator-(pt b) {return {x - b.x, y - b.y};} //向量相減\n    int operator^(pt b) {return x * b.y - y * b.x;} //向量外積cross\n    int operator*(pt b) {return x * b.x + y * b.y;} //向量內積dot\n};\nbool cmp(pt a, pt b){\n    if(a.x == b.x)return a.y < b.y;\n    return a.x < b.x;\n}\n\nvector<pt> p;\n\nbool check(pt a,pt b,pt o){\n    int cross = (a - o)^(b - o);\n    return cross >= 0;\n}\n\nint n,t;\n\nvector<pt> convex_hull(){\n    vector<pt> hull;\n    sort(p.begin(),p.end(),cmp);       //首先對x進行排序\n    for(auto i : p){                   //依序走訪，如果遇到外積<0則不在凸包上\n        while(hull.size() > 1 && check(i,hull[hull.size()-1],hull[hull.size()-2])){\n            hull.pop_back();\n        }\n        hull.push_back(i);             //在凸包hull的每一點都符合外積小於0\n    }\n    int down_hull = hull.size();\n    hull.pop_back();                   //x最大的點會在凸包上，不用做兩次先pop一次\n    reverse(p.begin(),p.end());        //將所有點逆序之後做一次上面的凸包\n    for(auto i: p){\n        while(hull.size() > down_hull && check(i,hull[hull.size()-1],hull[hull.size()-2])){\n            hull.pop_back();\n        }\n        hull.push_back(i);\n    }\n    return hull;                       //起點會經過兩次，剛好來算有向面積\n}\n\nsigned main(){\n    Orz;\n    cin>>t;\n    while(t--){\n        cin>>n;\n        p.assign(n,{0,0});\n        rep(i,0,n-1)cin>>p[i].x>>p[i].y;\n        vector<pt> hull = convex_hull();\n        int area = 0,len = hull.size();\n        for(int i=0;i<len-1;i++)area += (hull[i]^hull[i+1]);\n        cout<<fixed<<setprecision(1)<<((ld)area/2)<<endl;\n    }\n}\n```\n\n### 來吧，遊戲開始了。\n[題目連結](https://neoj.sprout.tw/problem/790/)\n[Submission](https://neoj.sprout.tw/challenge/178691/)\n[GGB模擬](https://www.geogebra.org/graphing/h4fxdquw)\n\n> 題目敘述\n給你二維平面上n個點(n≤2400)，每一個點座標皆不相同，求出總共可以圍出多少個三角形？\n\n這是NEOJ上的加分題，好像是一個題組吧，反正總共有三題，這是第一題。如果 $O(n^3)$ 的枚舉，複雜度會爆炸（量級約$10^{10}$），根據電神的說法，這一題要用極角排序以及雙指標找到共線，接著就可以利用排列組合把因為共線而不能形成三角形的組合扣掉，就是答案了。\n\n![](https://i.imgur.com/t5TF96I.png)\n\n這一題的核心概念是找共線，具體來說的作法是枚舉每一個點的同時，以它為原點對其他的點進行排序，如果遇到有相同的極角座標表示這些點共線，同時利用陣列cnt[x]統計共線點數為x的線段總共有幾條。\n\n以下的GIF就是大致上程式執行的樣子。因為一條長度為x的線段會因為枚舉x次的關係，在最後扣掉的情況會重複x次因此需要除掉。\n\n![](https://i.imgur.com/MVfEx4i.gif)\n\n{% note primary %}\n**共線與三角形**\n\n一般情況下（任三點不共線），總共可以形成 $C^n_3$ 個三角形，如果有一條m個點共線的情況下（其他點不共線），則可以形成的三角形數量就必須扣除共線限制的情況，變成 $C^n_3-C^m_3$ 個三角形。\n{% endnote %}\n\n時間複雜度為：枚舉每一個點 $O(n)$，極角排序 $O(n\\log n)$，總時間複雜度 $O(n^2\\log n)$\n\n{% note default %}\n**實作小細節**\n\n**1. 維護共線連續區間**\n\n我們要想辦法讓有共線的點們所在位置是一個連續的位置。三個點共線可能為在對角線的象限中，也就是點差了180度，如此一來就沒辦法讓共線的點為在連續的區間。為了達到這個目的，我們將所有位於下半平面的點都移到上半平面（在上半平面找到有相同 $\\tan\\theta$ 值的位置），接著就能利用雙指針找極角座標排序後有相同極角的區間之最大值！\n\n**2. 特例判斷**\n\n如果有一點y座標為0但x座標為負，要將其移到x軸正向的地方，不能把這種情況涵蓋為一般情況，否則原本在x軸正向的點會被移到x軸負向，沒有達到預期的效果。\n{% endnote %}\n\n以下是AC Code：\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 100001\n#define all(x) x.begin(),x.end()\n#define eps 1e-9\n#define x first\n#define y second\n\nusing namespace std;\n\nstruct pt{\n    int x,y;\n    bool operator < (pt b){\n        if(x == b.x)return y < b.y;\n        return x < b.x;\n    }\n    bool operator > (pt b){\n        if(x == b.x)return y > b.y;\n        return x > b.x;\n    }\n    bool operator == (pt b){\n        if(x-b.x == 0 && y-b.y == 0)return true;\n        return false;\n    }\n    pt operator+(pt b) {return {x + b.x, y + b.y};} //向量相加\n    pt operator-(pt b) {return {x - b.x, y - b.y};} //向量相減\n    int operator^(pt b) {return x * b.y - y * b.x;} //向量外積cross\n    int operator*(pt b) {return x * b.x + y * b.y;} //向量內積dot\n};\n\nvector<pt> p;\nvector<int> cnt;\nint n,ans = 0;\n\nbool cmp(pt a, pt b){\n    bool f1 = a < pt{0,0};\n    bool f2 = b < pt{0,0};\n    if(f1 != f2)return f1 < f2;\n    return (a ^ b) > 0;\n    //逆時針將點進行極角排序，從270度開始逆時針\n}\n\n//用cnt[i]統計區間長度為i的線段數量\nvoid solve(pt id){\n    vector<pt> pp;\n    for(auto i : p){                         //以id為原點\n        pt cur = i-id;\n        if(cur == pt{0,0})continue;\n        if(cur.y < 0){cur.x = -cur.x;cur.y = -cur.y;}\n        if(cur.x < 0 && cur.y==0){cur.x = -cur.x;}\n        pp.push_back(cur);\n    }\n    sort(all(pp),cmp);                      //將id當作原點進行排序\n    int p1 = 0,p2 = 0,len = pp.size();      //雙指針找共線區間\n    while(p1 < n-1){                        //最大化區間\n        while(p2+1 < len && (pp[p1]^pp[p2+1]) == 0)p2++;\n        cnt[p2-p1+2]+=1;\n        p1 = p2+1;\n    }\n}\n\nsigned main(){\n    Orz;\n    cin>>n;\n    p.assign(n,{0,0});\n    cnt.resize(n+1,0);\n    rep(i,0,n-1)cin>>p[i].x>>p[i].y;\n    rep(i,0,n-1)solve(p[i]);\n    int ans = (n*(n-1)*(n-2))/6;\n    rep(i,3,n)ans-=(cnt[i]*(i-1)*(i-2))/6;\n    cout<<ans<<endl;\n}\n```\n\n### 遊戲：最終回\n[題目連結](https://neoj.sprout.tw/problem/792/)\n[Submission](https://neoj.sprout.tw/challenge/178786/)\n> 題目敘述\n共有n個二維平面上的格子點，這些點會形成簡單多邊形。試求或在簡單多邊形內部的格線總長（包括垂直與水平格線）。\n\n這邊有一個不嚴謹的推導方式，不過他是正確的。令多邊形內部格線長度為S，多邊形的邊落在的格線長度為T，多邊形面積T，則有以下關係式：\n\n$$S = 2A-\\frac{T}{2}$$\n\n\n詳細的公式推導可以可以參閱下圖，平行四邊形（斜線部分）內部**垂直**的格線長度為： 大矩形 $(x_1+x_2)(y_1+y_2)$ 扣掉左右上下共四個三角形兩兩拼成一個矩形 $x_1y_1$ 以及 $x_2y_2$，還有左上右下兩個正方形 $2x_2y_1$，整理之後會發現其實跟面積是一樣的。對於垂直部分也是類似的情況。\n\n![](https://i.imgur.com/wemDPMp.jpg)\n\n好像隱約發現到面積與格線長度有十分密切的關係，算出面積，把在格線上的邊進行特判扣掉，就可以得到格線長度。\n\n這一題我想了很久，一直看不出來關係式到底長怎樣，直到大神提點才發現原來有這樣的關係，我反應好遲鈍:cry:\n\n![](https://i.imgur.com/Fy1wSky.png)\n\n以下是AC Code：\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 100001\n#define all(x) x.begin(),x.end()\n#define eps 1e-9\n#define x first\n#define y second\n\nusing namespace std;\n\nstruct pt{\n    int x,y;\n    bool operator < (pt b){\n        if(x == b.x)return y < b.y;\n        return x < b.x;\n    }\n    bool operator > (pt b){\n        if(x == b.x)return y > b.y;\n        return x > b.x;\n    }\n    bool operator == (pt b){\n        if(x-b.x == 0 && y-b.y == 0)return true;\n        return false;\n    }\n    pt operator+(pt b) {return {x + b.x, y + b.y};} //向量相加\n    pt operator-(pt b) {return {x - b.x, y - b.y};} //向量相減\n    int operator^(pt b) {return x * b.y - y * b.x;} //向量外積cross\n    int operator*(pt b) {return x * b.x + y * b.y;} //向量內積dot\n};\n\nvector<pt> p;\nvector<int>  cnt;\nint n,edge,ans;\n\nint solve(){\n    int area = 0;\n    rep(i,0,n-1){\n        area += (p[i]^p[i+1]);\n        if(p[i].y == p[i+1].y)edge += abs(p[i].x-p[i+1].x);\n        if(p[i].x == p[i+1].x)edge += abs(p[i].y-p[i+1].y);\n    }\n    area = abs(area);\n    return area;\n}\n\nsigned main(){\n    Orz;\n    cout<<fixed<<setprecision(1);\n    while(cin>>n){\n        p.assign(n+1,{0,0});\n        edge = 0;\n        rep(i,0,n-1)cin>>p[i].x>>p[i].y;\n        p[n] = p[0];\n        ans = solve();\n        cout<<ans-((ld)edge/2)<<endl;\n    }\n}\n```\n\n\n### TIOJ 1205 直角三角形\n[題目連結](https://tioj.ck.tp.edu.tw/problems/1205)\n[Submission](https://tioj.ck.tp.edu.tw/submissions/262842)\n\n> 題目敘述\n給你N（N≤1500）個座標平面上的點，請問總共可形成多少個直角三角形呢？\n\n從極角排序後的第一個點開始逆時針進行雙指針的枚舉。這邊使用到一個很特別的手法，對於共線的情況我們先透過預處理的方式將共線的點合併起來，並用cnt[x]陣列紀錄第x個點是由幾個點所合併起來的，如此一來，在進行計算的時候就不會有共線要分別處理的問題（不需擔心是不是可以跟之前的點形成直角三角形，因為相同斜率的點已經被合併剩下一個），直接將數量相乘就可以知道直角三角形的數量！\n\n時間複雜度：枚舉所有點 $O(n)\\times$ 進行極角排序$O(n\\log n)$ 以及雙指標$O(n)$，總時間複雜度為 $O(n^2\\log n)$。\n\n{% note info %}\n**實作小細節**\n\n雙指針進行枚舉的過程中，很有可能會指標指向的索引值會超出範圍。解決的方法有兩種：\n1. 超出了即代表繞了一圈，只需要對索引值取餘數即可。\n2. 除了取餘數的方法之外，其實也可以直接在點集後面將所有點再推入一次，讓角度從360延伸成720度，就不會有超出範圍的問題！\n{% endnote %}\n\n以下是AC Code：\n\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 100001\n#define all(x) x.begin(),x.end()\n#define eps 1e-9\n#define x first\n#define y second\n\nusing namespace std;\n\nstruct pt{\n    int x,y;\n    bool operator < (pt b){\n        if(x == b.x)return y < b.y;\n        return x < b.x;\n    }\n    bool operator > (pt b){\n        if(x == b.x)return y > b.y;\n        return x > b.x;\n    }\n    bool operator == (pt b){\n        if(x-b.x == 0 && y-b.y == 0)return true;\n        return false;\n    }\n    pt operator+(pt b) {return {x + b.x, y + b.y};} //向量相加\n    pt operator-(pt b) {return {x - b.x, y - b.y};} //向量相減\n    int operator^(pt b) {return x * b.y - y * b.x;} //向量外積cross\n    int operator*(pt b) {return x * b.x + y * b.y;} //向量內積dot\n};\n\nvector<pt> p,temp,pp;\nvector<int>  cnt;\nint n,ans = 0;\n\nbool cmp(pt a, pt b){\n    bool f1 = a < pt{0,0};\n    bool f2 = b < pt{0,0};\n    if(f1 != f2)return f1 < f2;\n    return (a ^ b) > 0;\n    //逆時針將點進行極角排序，從270度開始逆時針\n}\n\n//O(n)枚舉每個點當直角情況\nint solve(pt id){\n    pp.clear();cnt.clear();temp.clear();\n    for(pt i : p){\n        pt cur = i - id;\n        if(cur == pt{0,0})continue;\n        temp.push_back(cur);\n    }\n    sort(all(temp),cmp);            //以id為原點進行極角排序\n    pp.push_back(temp[0]);          //pp每一角度只存至多一個點\n    cnt.push_back(1);               //考慮每個點共線情況\n    int len = temp.size();\n    rep(i,1,len-1){\n        int cross = temp[i]^temp[i-1],dot = temp[i]*temp[i-1];\n        if(cross == 0 && dot >= 0)cnt[cnt.size()-1] += 1;   //共線數量+=1\n        else {pp.push_back(temp[i]);cnt.push_back(1);}      //非共線設定數量為1\n    }\n    len = pp.size();            //考慮橫跨一周的情況\n    rep(i,0,len-1){             //雙指針i,p1可能會超過一圈\n        pp.push_back(pp[i]);    //將點再繞一圈\n        cnt.push_back(cnt[i]);\n    }\n    int ans = 0,p1 = 0;\n    rep(i, 0, len-1){\n        while(p1 < i+len && (pp[i]^pp[p1]) >= 0 && (pp[i]*pp[p1]) > 0)p1 += 1;\n        //夾銳角的情況要p1+=1\n        if((pp[i]^pp[p1]) > 0 && (pp[i]*pp[p1]) == 0)ans += cnt[i]*cnt[p1];\n        //正向的直角三角形，若共線則兩者數量相乘\n    }\n    return ans;\n}\n\nsigned main(){\n    Orz;\n    while(cin>>n){\n        if(n == 0)break;\n        p.assign(n,{0,0});\n        rep(i,0,n-1)cin>>p[i].x>>p[i].y;\n        \n        int ans = 0;\n        rep(i,0,n-1){\n            ans += solve(p[i]);\n        }\n        cout<<ans<<endl;\n    }\n}\n```\n\n\n### TIOJ 1105 H.PS3\n[題目連結](https://tioj.ck.tp.edu.tw/problems/1105)\n[Submission $O(n^2)$](https://tioj.ck.tp.edu.tw/submissions/262930)\n[Submission $O(n\\log n)$](https://tioj.ck.tp.edu.tw/submissions/262947)\n\n> 題目敘述\n給你平面上N個點（N≤3000），請求出最遠點對的索引值（小的在前、大的在後）\n\n我做了一份[最近點對：不同複雜度之解決方式](/hVplrqxCRdGiMkn2lwXGAA)的筆記，共有四種方法可以解決那個問題，這一題要求的是最遠點對，作法與最近點對其實差蠻遠的。由上幾題知道凸包的求法，因為凸包是可以圍住所有點的多邊形，因此最遠點對也應該在凸包上，而且所在的位置會為在凸包的兩側上（如果不落在凸包上，一定可以把點向兩側延伸到凸包上，且移動過後的點對距離一定比原始的點對距離大）。\n\n找完凸包之後，可以用旋轉卡尺的方式尋找最遠點對。想像兩條平行線中間夾著凸包，逆時鐘旋轉繞行凸包一圈，過程不斷更新最遠點對的距離。在實作上兩條平行線可以被想像成由 $P_i$ 指向 $P_{i+1}$ 的向量，透過外積三角形面積公式決定卡尺該如何移動。\n\n$$AREA = |\\overrightarrow{AB}\\times \\overrightarrow{AC}|$$\n\n以下圖為例，我們要找 $\\overline{HM}$ 為底可以形成的最大三角形面積的頂點，因為在同底的情況下面積就代表點與邊的垂直距離，最大的垂直距離意味著這條底邊可以垂直延伸的最遠距離。因為凸包必定是凸多邊形，因此三角形的面積會呈現單峰函數，因此只需要從下一個三角形面積的大小，決定雙指針中比較快的指標的移動情況。\n\n![](https://i.imgur.com/SXv0gfN.png)\n\n如果仔細來看，以下圖為例，當前較快的指標指向的位置是 $D$ 點，考慮一條與與 $\\overline{HM}$ 平行的直線，若下一個點 $J$ 在平行線段的另外一側，則將指標移往 $J$ 點。可能會有一個疑問，如果比較下圖的線段長度，會發現到 $\\overline{DH}$ 的長度比經過 $J$ 點的兩條線段都還要長，那為何還要更新至 $J$ 點？舉這個例子不太好，不過可以想像當旋轉卡尺轉到以 $\\overline{FH}$ 為底的時候，會將最遠點對的距離更新成 $\\overline{HD}$ 的長度。如果今天 $H$ 的左側又多加了一個新點 $P$，則最遠點對會變成 $\\overline{PD}$ 的距離。\n\n簡單來說，最遠點對一定會發生對角的凸包點上面，即使現在以 $\\overline{HM}$ 為底最遠點並非 $J$ 而是 $D$ ，但在旋轉卡尺旋轉到 $\\overline{FH}$ 時就能將距離更新成 $\\overline{HD}$ 的距離。\n\n![](https://i.imgur.com/6Jeg2U8.png)\n\n\n{% note success %}\n**實作小細節**\n\n這一題有點麻煩，因為他要輸出的是最遠點對的索引值，而不是最遠點對之間的距離。在尋找凸包的過程中，會對所有點進行排序，因此原有的索引值順序會被打亂，需要在一開始輸入的時後就好好維護每一個座標的索引值。\n{% endnote %}\n\n以下是AC Code：\n\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 100001\n#define all(x) x.begin(),x.end()\n#define eps 1e-9\n#define x first\n#define y second\n\nusing namespace std;\n\nstruct pt{\n    int x,y,ind;\n    bool operator < (pt b){\n        if(x == b.x)return y < b.y;\n        return x < b.x;\n    }\n    bool operator > (pt b){\n        if(x == b.x)return y > b.y;\n        return x > b.x;\n    }\n    bool operator == (pt b){\n        if(x-b.x == 0 && y-b.y == 0)return true;\n        return false;\n    }\n    pt operator+(pt b) {return {x + b.x, y + b.y};} //向量相加\n    pt operator-(pt b) {return {x - b.x, y - b.y};} //向量相減\n    int operator^(pt b) {return x * b.y - y * b.x;} //向量外積cross\n    int operator*(pt b) {return x * b.x + y * b.y;} //向量內積dot\n    int dis() {return x*x + y*y;}\n};\n\nvector<pt> p,hull;\npt pt_ans;\nint n,h;\n\nbool check(pt a, pt b, pt o){\n    pt aa = a - o;\n    pt bb = b - o;\n    return (aa ^ bb) >= 0;\n}\n\nbool check2(pt a,pt b,pt c,pt d){\n    int aa = abs((a - c)^(b - c));\n    int bb = abs((a - d)^(b - d));\n    return aa < bb;\n}\n\nbool cmp(pt a, pt b){\n    if(a == b)return a.ind < b.ind;\n    if(a.x == b.x)return a.y < b.y;\n    return a.x < b.x;\n}\n\nvoid convex_hull(){\n    stable_sort(all(p),cmp);\n    rep(i,0,n-2)if(p[i] == p[i+1])p[i+1].ind = p[i].ind;\n    hull.clear();\n    for(auto i : p){\n        while(hull.size() > 1 && check(i,hull[hull.size()-1],hull[hull.size()-2]))\n            hull.pop_back();\n        hull.push_back(i);\n    }\n    int sz = hull.size();\n    h = hull.size()-1;\n    hull.pop_back();\n    reverse(all(p));\n    for(auto i : p){\n        while(hull.size() > sz && check(i,hull[hull.size()-1],hull[hull.size()-2]))\n            hull.pop_back();\n        hull.push_back(i);\n    }\n    hull.pop_back();\n}\n\nvoid solve(){\n    int ans = 0,d = h,sz = hull.size();\n    rep(i,0,sz-1){\n        while(check2(hull[i],hull[(i+1)%sz],hull[d],hull[(d+1)%sz]))\n            d = (d+1)%sz;\n        if(ans < (hull[i]-hull[d]).dis()){\n            ans = (hull[i]-hull[d]).dis();\n            int a = hull[i].ind,b = hull[d].ind;if(a > b)swap(a,b);\n            pt_ans = {a,b};\n        }\n        else if(ans == (hull[i]-hull[d]).dis()){\n            int a = hull[i].ind,b = hull[d].ind;if(a > b)swap(a,b);\n            if(pt_ans > (pt){a,b})pt_ans = {a,b};\n        }\n        if(ans < (hull[(i+1)%sz]-hull[d]).dis()){\n            ans = (hull[(i+1)%sz]-hull[d]).dis();\n            int a = hull[(i+1)%sz].ind,b = hull[d].ind;if(a > b)swap(a,b);\n            pt_ans = {a,b};\n        }\n        else if(ans == (hull[(i+1)%sz]-hull[d]).dis()){\n            int a = hull[(i+1)%sz].ind,b = hull[d].ind;if(a > b)swap(a,b);\n            if(pt_ans > (pt){a,b})pt_ans = {a,b};\n        }\n    }\n}\n\nsigned main(){\n    Orz;\n    while(cin>>n){\n        if(n == 0)break;\n        pt_ans = (pt){0,0};\n        p.resize(n,{0,0});\n        rep(i,0,n-1){\n            cin>>p[i].x>>p[i].y;\n            p[i].ind = i;\n        }\n        convex_hull();\n        solve();\n        cout<<pt_ans.x<<\" \"<<pt_ans.y<<endl;\n    }\n}\n\n/*\n5\n9 1\n1 5\n1 2\n9 9\n5 1\n */\n```\n\n### ZJ b288: 夏季大三角\n[題目連結](https://zerojudge.tw/ShowProblem?problemid=b288)\n[解題報告](https://zerojudge.tw/ShowThread?postid=26741&reply=0)\n\n\n> 題目敘述\n請輸出在N個二維平面的座標，挑選3顆出來成組成三角形的最大面積\n\n比較一下兩個複雜度的作法，第一個是使用 $O(n^3)$ 枚舉所有的點並計算面積，所需要的時間是0.4sec，而且需要特別注意不能使用到海龍公式計算面積，否則有很大的機會會超時。\n\n![](https://i.imgur.com/oN26CR4.png)\n\n以下作法是先進行 $O(n\\log n)$ 找尋凸包，因為面積最大的三角形必定三個點都在凸包上，因此用 $n^2$ 的時間進行枚舉，旋轉卡尺（類似最遠點對的作法）找面積最大的第三個點，就能在總時間複雜度 $O(n^2)$ 完成！（會再更少，因為只要枚舉凸包上的點）\n\n![](https://i.imgur.com/SUwVRWv.png)\n\n\n以下是AC Code：\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 100001\n#define eps 1e-9\n#define x first\n#define y second\n\nusing namespace std;\n\nstruct pt{\n    ld x,y;\n    bool operator < (pt b){\n        if(x == b.x)return y < b.y;\n        return x < b.x;\n    }\n    bool operator > (pt b){\n        if(x == b.x)return y > b.y;\n        return x > b.x;\n    }\n    bool operator == (pt b){\n        if(abs(x-b.x)<=eps && abs(y-b.y)<=eps)return true;\n        return false;\n    }\n    pt operator+(pt b) {return {x + b.x, y + b.y};} //向量相加\n    pt operator-(pt b) {return {x - b.x, y - b.y};} //向量相減\n    ld operator^(pt b) {return x * b.y - y * b.x;} //向量外積cross\n    ld operator*(pt b) {return x * b.x + y * b.y;} //向量內積dot\n};\nbool cmp(pt a, pt b){\n    if(a.x == b.x)return a.y < b.y;\n    return a.x < b.x;\n}\nvector<pt> p,hull;\nint n,t,h;\nld ans;\n\nbool check(pt a,pt b,pt o){\n    int cross = (a - o)^(b - o);\n    return cross >= 0;                              //這裡很關鍵，別吃WA\n}\n\nbool check2(pt a,pt b,pt c,pt d){\n    ld aa = (a - c)^(b - c);\n    ld bb = (a - d)^(b - d);\n    return aa < bb;\n}\n\nld area(pt a,pt b){\n    return abs(a^b)/2;\n}\n\nvoid convex_hull(){\n    hull.clear();\n    sort(p.begin(),p.end(),cmp);       //首先對x進行排序\n    for(auto i : p){                   //依序走訪，如果遇到外積<0則不在凸包上\n        while(hull.size()>=2 && check(i,hull[hull.size()-1],hull[hull.size()-2])){\n            hull.pop_back();\n        }\n        hull.push_back(i);             //在凸包hull的每一點都符合外積小於0\n    }\n    int down_hull = hull.size();\n    h = down_hull-1;\n    hull.pop_back();                   //x最大的點會在凸包上，不用做兩次先pop一次\n    reverse(p.begin(),p.end());        //將所有點逆序之後做一次上面的凸包\n    for(auto i: p){\n        while(hull.size() > down_hull && check(i,hull[hull.size()-1],hull[hull.size()-2])){\n            hull.pop_back();\n        }\n        hull.push_back(i);\n    }\n    hull.pop_back();\n}\n\nvoid solve(){\n    int d,sz = hull.size();\n    rep(i,0,sz-1){\n        rep(j,i+1,sz-1){\n            d = (j+1)%sz;\n            while(check2(hull[i],hull[(j)%sz],hull[d],hull[(d+1)%sz]))\n                d = (d+1)%sz;\n            ans = max(ans,area((hull[d]-hull[i]),(hull[d]-hull[j])));\n        }\n    }\n}\n\nsigned main(){\n    Orz;\n    cin>>n;\n    p.assign(n,{0,0});\n    rep(i,0,n-1)cin>>p[i].x>>p[i].y;\n    convex_hull();\n    ans = 0;\n    solve();\n    cout<<fixed<<setprecision(6);\n    cout<<ans<<endl;\n}\n```\n\n### TIOJ 1500 Clean up on aisle 3\n[題目連結](https://tioj.ck.tp.edu.tw/problems/1500)\n[Submission](https://tioj.ck.tp.edu.tw/submissions/262966)\n> 題目敘述\n平面上n個點找最近點對的距離\n\n最近點對真的有超多種作法的，枚舉、掃描線、分治、隨機都可以做！這邊有[一篇筆記](/hVplrqxCRdGiMkn2lwXGAA)比較各種時間複雜度的最近點對作法，這邊不多做贅述！\n\n以下程式碼是掃描線演算法，最差情況下的時間複雜度是 $O(n^2)$，因為需要排序，所以下限為 $\\Omega(n\\log n)$！\n\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 50005\n#define all(x) x.begin(),x.end()\n#define INF 5e18\n#define eps 1e-9\n#define x first\n#define y second\nusing namespace std;\nint n;\npii p[N];\n\nld dis(pii a, pii b){\n    ld x = a.x-b.x, y = a.y-b.y;\n    return sqrt(x*x + y*y);\n}\n\nsigned main(){\n    Orz;\n    cout<<fixed<<setprecision(6);\n    \n    while(cin>>n){\n        rep(i,0,n-1)cin>>p[i].x>>p[i].y;\n        sort(p,p+n);\n        ld d = INF;\n        rep(i,0,n-1){\n            rep(j,i+1,n-1){\n                if(p[j].x > p[i].x + d)break;\n                d = min(d, dis(p[i],p[j]));\n            }\n        }\n        cout<<d<<endl;\n    }\n}\n```\n\n### TIOJ 1280 領土 (Territory)\n[題目連結](https://tioj.ck.tp.edu.tw/problems/1280)\n[Submission](https://tioj.ck.tp.edu.tw/submissions/262848)\n\n> 題目敘述\n一個國家有 n 個安全哨，每一個都有座標 $(x,y)$ ，代表在座標軸上的位置。輸出該國安全哨所能圍出的最大領土。\n\nn個點所能圍成的最大面積，其實等價於凸包的面積。與前幾題的**最小凸多邊形**是一模一樣的題目！\n\n\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 100001\n#define all(x) x.begin(),x.end()\n#define eps 1e-9\n#define x first\n#define y second\n\nusing namespace std;\n\nstruct pt{\n    int x,y;\n    bool operator < (pt b){\n        if(x == b.x)return y < b.y;\n        return x < b.x;\n    }\n    bool operator > (pt b){\n        if(x == b.x)return y > b.y;\n        return x > b.x;\n    }\n    bool operator == (pt b){\n        if(x-b.x == 0 && y-b.y == 0)return true;\n        return false;\n    }\n    pt operator+(pt b) {return {x + b.x, y + b.y};} //向量相加\n    pt operator-(pt b) {return {x - b.x, y - b.y};} //向量相減\n    int operator^(pt b) {return x * b.y - y * b.x;} //向量外積cross\n    int operator*(pt b) {return x * b.x + y * b.y;} //向量內積dot\n};\n\nvector<pt> p,temp,pp;\nvector<int>  cnt;\nint n,ans = 0;\n\nbool cmp(pt a, pt b){\n    if(a.x == b.x)return a.y < b.y;\n    return a.x < b.x;\n}\n\nbool check(pt a,pt b,pt o){\n    pt aa = a - o;\n    pt bb = b - o;\n    return (aa^bb) >= 0;\n}\n\nvector<pt> solve(){\n    sort(all(p),cmp);\n    vector<pt> h;\n    for(pt i : p){\n        while(h.size()>=2 && check(i,h[h.size()-1],h[h.size()-2]))\n            h.pop_back();\n        h.push_back(i);\n    }\n    int sz = h.size();\n    h.pop_back();\n    reverse(all(p));\n    for(auto i : p){\n        while(h.size()>sz && check(i,h[h.size()-1],h[h.size()-2]))\n            h.pop_back();\n        h.push_back(i);\n    }\n    return h;\n}\n\nsigned main(){\n    Orz;\n    cin>>n;\n    p.resize(n,{0,0});\n    rep(i,0,n-1)cin>>p[i].x>>p[i].y;\n    vector<pt> hull = solve();\n    int area = 0,sz = hull.size();\n    rep(i,0,sz-2){\n        area += (hull[i]^hull[i+1]);\n    }\n    cout<<((area%2)?(area/2)+1:(area/2))<<endl;\n}\n```\n\n### ZJ a871: Museum Area\n[題目連結](https://zerojudge.tw/ShowProblem?problemid=a871)\n\n> 題目敘述\nn個點圍成的多邊形，求面積\n\n水題，直接套行列式公式即可算出答案！\n\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pdd pair<double,double>\n#define int long long\n#define ld long double\n#define N 15\n#define x first\n#define y second\nusing namespace std;\n\nint n;\npdd p[N];\n\nld check(pdd a, pdd b){\n    return a.x*b.y - a.y*b.x;\n}\n\nsigned main(){\n    Orz;\n    while(cin>>n){\n        rep(i,0,n-1)cin>>p[i].x>>p[i].y;\n        p[n] = p[0];\n        ld area = 0.0;\n        rep(i,0,n-1)area += check(p[i],p[i+1]);\n        ld ans = (ld)area/2;\n        if(ans<0)ans = -ans;\n        cout<<fixed<<setprecision(2);\n        cout<<ans<<endl;\n    }\n}\n```\n\n### TIOJ 1678 剪多邊形（molding）\n[題目連結TIOJ](https://tioj.ck.tp.edu.tw/problems/1678)\n[TIOJ Submission](https://tioj.ck.tp.edu.tw/submissions/262849)\n[題目連結ZJ](https://zerojudge.tw/ShowProblem?problemid=d546)\n\n> 題目敘述\n間單來說是求出多邊形面積以及凸包面積的差，詳細可以點上面題目連結。\n\n題目說多邊形需要才剪下的面積，我們就算凸包面積以及多邊形面積，兩者的差去除上題目給的色塊面積即是答案！\n\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 100001\n#define all(x) x.begin(),x.end()\n#define eps 1e-9\n#define x first\n#define y second\n\nusing namespace std;\n\nstruct pt{\n    int x,y;\n    bool operator < (pt b){\n        if(x == b.x)return y < b.y;\n        return x < b.x;\n    }\n    bool operator > (pt b){\n        if(x == b.x)return y > b.y;\n        return x > b.x;\n    }\n    bool operator == (pt b){\n        if(x-b.x == 0 && y-b.y == 0)return true;\n        return false;\n    }\n    pt operator+(pt b) {return {x + b.x, y + b.y};} //向量相加\n    pt operator-(pt b) {return {x - b.x, y - b.y};} //向量相減\n    int operator^(pt b) {return x * b.y - y * b.x;} //向量外積cross\n    int operator*(pt b) {return x * b.x + y * b.y;} //向量內積dot\n};\n\nvector<pt> p,temp,pp;\nvector<int>  cnt;\nint n,a,ans = 0;\n\nbool cmp(pt a, pt b){\n    if(a.x == b.x)return a.y < b.y;\n    return a.x < b.x;\n}\n\nbool check(pt a,pt b,pt o){\n    pt aa = a - o;\n    pt bb = b - o;\n    return (aa^bb) >= 0;\n}\n\nvector<pt> solve(){\n    sort(all(p),cmp);\n    vector<pt> h;\n    for(pt i : p){\n        while(h.size()>=2 && check(i,h[h.size()-1],h[h.size()-2]))\n            h.pop_back();\n        h.push_back(i);\n    }\n    int sz = h.size();\n    h.pop_back();\n    reverse(all(p));\n    for(auto i : p){\n        while(h.size()>sz && check(i,h[h.size()-1],h[h.size()-2]))\n            h.pop_back();\n        h.push_back(i);\n    }\n    return h;\n}\n\nint Polygon(){\n    vector<pt> temp(p);\n    temp.push_back(temp[0]);\n    int area = 0;\n    rep(i,0,n-1)area += (temp[i]^temp[i+1]);\n    return abs(area);\n}\n\nsigned main(){\n    Orz;\n    cin>>n>>a;\n    p.resize(n,{0,0});\n    rep(i,0,n-1)cin>>p[i].x>>p[i].y;\n    ld small = (ld)Polygon()/2;\n    vector<pt> hull = solve();\n    int area = 0,sz = hull.size();\n    rep(i,0,sz-2)area += (hull[i]^hull[i+1]);\n    ld big = (ld)area/2;\n    int ans = ceil((big-small)/a);\n    cout<<ans<<endl;\n}\n```\n\n### ZJ d269: 11579 - Triangle Trouble\n[題目連結](https://zerojudge.tw/ShowProblem?problemid=d269)\n\n> 題目敘述\n有一個三角形工廠有一個很大的問題。給你一些邊的邊長，想辦法找出用這些邊長圍出最大的三角形。\n\n根據海龍公式，三角形面積：\n$$\\triangle ABC = \\sqrt{s\\cdot(s-a)\\cdot(s-b)\\cdot(s-c)}$$\n\n可以利用貪婪法，將所有邊長由大到小進行排序，每一次拿最大的三個邊長進行枚舉，即可算出最大的三角形面積。不難理解，當換上一個比較大的邊，算出來的s也會比較大，跟邊相減的值也會比較大，總面積自然較大（好啦，這是非常不嚴謹的證明XD）\n\n在想題過程中，我有思考到，如果周長一樣的情況下，到底何種面積的三角形面積會比較大？答案是正三角形！\n\n{% note default %}\n**三角形周長固定下面積的比較**\n根據海龍公式：\n$$s = \\frac{1}{2}(a+b+c)$$\n\n想要比較在周長固定下三角形的面積，可以用算幾不等式比較，因為 $s$ 是定值，所以可以列出以下式子：\n$$\\frac{(s-a)+(s-b)+(s-c)}{3} ≥ \\sqrt[3]{(s-a)(s-b)(s-c)}$$\n等好成立時，$a=b=c$。因為$s = \\frac{a+b+c}{2}$，因此：\n$$(\\frac{a}{2})^2 ≥ (s-a)(s-b)(s-c)$$\n\n得到海龍公式\n$$\\triangle ABC = \\sqrt{s\\cdot(s-a)\\cdot(s-b)\\cdot(s-c)} ≤ \\sqrt{\\frac{3a}{2}\\cdot\\frac{a^3}{8}}=\\frac{\\sqrt{3}}{4}a^2$$\n{% endnote %}\n\n以下是使用貪婪法的AC Code：\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define ll long long\n#define ld double\n#define N 100001\n#define all(x) x.begin(),x.end()\n#define eps 1e-9\n#define x first\n#define y second\nusing namespace std;\nint t,n;\nvector<ld> p;\n\nld area(ld a ,ld b, ld c){\n    if(a > b + c)return -1;\n    ld p = (a+b+c)/2;\n    return p*(p-a)*(p-b)*(p-c);\n}\n\nsigned main(){\n    Orz;\n    cin>>t;\n    while(t--){\n        cin>>n;\n        p.assign(n,0);\n        rep(i,0,n-1)cin>>p[i];\n        sort(all(p),greater<>());\n        ld ans = 0;\n        rep(i,0,n-3)\n            ans = max(ans,area(p[i],p[i+1],p[i+2]));\n        cout<<fixed<<setprecision(2);\n        cout<<sqrt(ans)<<endl;\n    }\n}\n```\n\n## 心得\n\n計算幾何，顧名思義就是在電腦完成幾何的運算，要怎麼把平面的東西轉化成電腦看得懂的東西就是計算幾何在做的事情。常常我們覺得很容易判斷的事情，例如判斷線段是否相交，我們可以利用肉眼直輕易判斷出來，因為我們有強大的空間感幫助我們進行判斷，但換作是電腦就必須用一些數學的技巧，對於不同的情況做各自的判斷，才能讓電腦正確回答兩條線段的相交情形。\n\n除此之外，在寫題過程中，使用到ggb進行輔助，讓我可以對程式的執行過程有更是覺化的概念，也幫助我在解題時能更理解解題的策略！上面一題三角形個數的判斷，就使用了ggb判定將點搬移的所有情況。利用它我抓到了當點的y座標為零時並沒進行好特殊情況的判斷，這也是一個視覺化之後的好處！\n\n有一題沒有做的是模擬退火的題目實作，要求圓與三角形的交集面積，感覺超級複雜，以後有時間來慢慢實作！\n","source":"_posts/Geomertry_problem.md","raw":"---\ntitle: 計算幾何例題\ndate: 2021-8-22\ntags: \n    - 計算幾何\n    - 暑期筆記\ncategories:\n    - C++進階主題\n    - 計算幾何\nmathjax: true\n---\n\n## 題目目錄\n- 向量加法\n- 等長線段對\n- 向左轉向右轉\n- 線段相交\n- 最小凸多邊形\n- TIOJ 1178 Convex Hull\n- 來吧，遊戲開始了\n- 遊戲：最終回\n- TIOJ 1205 直角三角形\n<!--more-->\n- TIOJ 1105 H.PS3\n- ZJ b288: 夏季大三角\n- TIOJ 1500 Clean up on aisle 3\n- ZJ a871: Museum Area\n- TIOJ 1280 領土 (Territory)\n- TIOJ 1678 剪多邊形（molding）\n- ZJ d269: 11579 - Triangle Trouble\n\n### 向量加法\n[題目連結](https://neoj.sprout.tw/problem/398/)\n[Submission](https://neoj.sprout.tw/challenge/178462/)\n\n> 題目敘述：\n> 給你n個數字（0≤i<1，小數點精度到末九位），想知道到底有多少組 $(i,j,k)$ 滿足 $v_i+v_j=v_k$，其中 $i,j,k$ 可以重複。\n\n這題其實跟計算幾何沒什麼關係，直接用unordered_map去做（有點像two sum，不過下面的code好像也不用開到multi），簡單！不過我在浮點數的地方吃了一些WA，最後算了直接改用字串處理這個惱人的東西XD\n\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define int long long\n#define double long double\n#define rep(i,l,r) for(int i=l;i<=r;i++)\n#define rep2(i,l,r) for(int i=l;i<r;i++)\n#define pii pair<int,int>\n#define x first\n#define y second\n#define eps (1e-9)\n#define INF 1e10\n#define N 2001\n#define ll long long\n#define ld long double\n#define int long long\nusing namespace std;\nint n;\n\nsigned main(){\n    cin>>n;\n    vector<int> vec(n);\n    rep2(i,0,n){\n        string s;cin>>s;\n        int num = 0,times = 1000000000;\n        for(int i=2;i<=10;i++){\n            num += (s[i]-'0')*times;\n            times/=10;\n        }\n        vec[i] = num;\n    }\n    unordered_multimap<int,int> mp;\n    for(int i=0;i<n;i++){\n        mp.insert({vec[i],i});\n    }\n    int ans = 0;\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            ans += mp.count(vec[i] + vec[j]);\n        }\n    }\n    cout<<ans<<endl;\n}\n```\n\n### 等長線段對\n[題目連結](https://neoj.sprout.tw/problem/399/)\n[Submission](https://neoj.sprout.tw/challenge/178471/)\n> 題目敘述：\n> 給定平面上很多個點，求出有幾對線段等長（輸入有重複的點）。\n\n既然n≤500，那就直接枚舉吧，沒啥特別難度。\n\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a,i<=b;i++)\n#define rep2(i,a,b) for(int i=a;i<b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 1003\n#define eps 1e-9\n#define x first\n#define y second\nusing namespace std;\nint n;\npii p[N];\n\nint dist(pii a,pii b){\n    int x = a.x-b.x,y = a.y-b.y;\n    return x*x+y*y;\n}\n\nsigned main(){\n    Orz;\n    cin>>n;\n    rep2(i,0,n)cin>>p[i].x>>p[i].y;\n    map<int,int>mp;\n    for(int i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            int dis = dist(p[i],p[j]);\n            mp[dis]+=1;\n        }\n    }\n    int ans = 0;\n    for(auto i:mp){\n        int cnt = i.second;\n        ans+=((cnt*(cnt-1))/2);\n    }\n    cout<<ans<<endl;\n}\n```\n\n### 向左轉向右轉\n[題目連結](https://neoj.sprout.tw/problem/400/)\n[Submission](https://neoj.sprout.tw/challenge/178524/)\n\n> 題目敘述\n> 給你平面上n個點，依序走訪每一個點，試問走訪過程中共執行幾次的左轉、右轉以及迴轉。\n\n很特別，計算幾何讓電腦可以處理平常我們所看到的平面圖形，可以利用向量內積、外積等方式判斷方向。這一題最重要的就是**方向函數**。傳入3個點$(A,B,O)$，方向函數會會回傳$\\stackrel\\longrightarrow{OA}\\times \\stackrel\\longrightarrow{OB}$ 的正負數值。\n\n下圖為外積$\\stackrel\\longrightarrow{OA}\\times \\stackrel\\longrightarrow{OB}$ 的結果，當 $\\sin\\theta$的結果為負，也就是下圖的情況，從B走到A就需要往左邊走；反之亦然。\n![](https://i.imgur.com/eDNRLhm.png)\n\n至於如何判斷當兩個向量的方向呈現一直線時，也就是外積回傳的值為0時（$\\sin\\theta = 0$），應該是同向還是異向呢？這時候就需要搭配向量內積（這我想了很久），因為內積公式是$A\\cdot B = |A||B|\\cos\\theta$，將兩個向量內積之後就可以很明確的判斷到底是朝原本的方向走，還是反方向的行走！\n\n{% note info %}\n**內積、外積公式**\n有一點數學，不過蠻有趣的。可以利用$\\sin$與$\\cos$達到計算角度的目的，利用兩者不同的值域，互相搭配，就可以更輕鬆的進行判斷！注意到外積的正負就代表著A到B是順時針或是逆時鐘。\n$$A\\cdot B = |A||B|\\cos\\theta = A_xB_x+A_yB_y\\\\A\\times B = |A||B|\\sin\\theta = A_xB_y-A_yB_x$$\n\n<br>\n\n**方向函數**\n\n當我們要判斷方向的時候，會利用正弦函數，逆時針正、順時針為負進行判斷！\n```cpp=\nint dir(pt a, pt b, pt o) {\n    int cross = (a - o) ^ (b - o);\n    if(fabs(cross) <= eps) return 0;\n    else if(cross > 0) return 1;\n    else return -1;\n}\n```\n注意到此時在判斷是否為平行的時候（cross==0），使用到$fabs()$這個函數，目的是為了避免誤差而導致判斷錯誤，因此需要進行誤差的處理（其實不用也沒差啦，只是這樣嚴謹一點）\n{% endnote %}\n\n以下是AC Code：\n\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 1003\n#define eps 1e-9\n#define x first\n#define y second\n\nusing namespace std;\n\nstruct pt{\n    int x,y;\n    bool operator < (pt b){\n        if(x == b.x)return y < b.y;\n        return x < b.x;\n    }\n    bool operator > (pt b){\n        if(x == b.x)return y > b.y;\n        return x > b.x;\n    }\n    bool operator == (pt b){\n        if(x-b.x<=eps && y-b.y<=eps)return true;\n        return false;\n    }\n    pt operator+(pt b) {return {x + b.x, y + b.y};} //向量相加\n    pt operator-(pt b) {return {x - b.x, y - b.y};} //向量相減\n    int operator^(pt b) {return x * b.y - y * b.x;} //向量外積cross\n    int operator*(pt b) {return x * b.x + y * b.y;} //向量內積dot\n};\nvector<pt> a;\nint dir(pt a, pt b, pt o) {\n    int cross = (a - o) ^ (b - o);\n    if(fabs(cross) <= eps) return 0;\n    else if(cross > 0) return 1;\n    else return -1;\n}\n\nint n,t;\n\nsigned main(){\n    Orz;\n    cin>>n;\n    a.resize(n+2);\n    rep(i,1,n)cin>>a[i].x>>a[i].y;\n    int right = 0,left = 0,turn = 0;\n    pt pre = a[1],from = a[2];\n    for(int i=3;i<=n;i++){\n        int ori = dir(a[i],from,pre);\n        if(ori == 1)right+=1;\n        else if(ori == -1)left+=1;\n        else if(ori == 0 && ((a[i]-from)*(from-pre))<0)turn+=1;\n        pre = from;from = a[i];\n    }\n    cout<<left<<\" \"<<right<<\" \"<<turn<<endl;\n}\n```\n\n### 線段相交\n[題目連結](https://neoj.sprout.tw/problem/401/)\n[Submission](https://neoj.sprout.tw/challenge/178537/)\n線段相交 = ~~線段香蕉~~，自動選字永遠都是香蕉，有點煩XDD\n\n如何判斷兩線段是否相交？首先需要一個函數可以判斷點是否在一個線段上，如此一來就可以判斷端點在另一條線段上的特殊情況。以下程式碼為判斷點$P_o$ 是否在 $\\overline{P_aP_b}$ 上。利用向量外積可以判斷兩線段是否平行，而使用內積公式可以判斷$P_o$是否在線段中，而非線段的兩側！\n```cpp=\nbool onseg(pt a, pt b, pt o){       //o是否在ab線段上\n    int cross = (a - o) ^ (b - o);  //是否平行\n    int dot = (a - o) * (b - o);    //是否在線段中\n    return (cross == 0)&&(dot <= 0);\n}\n```\n說明：由點$P_o$指向a和b的向量必須呈現180度角（也就是異向），才可確保在ab線段中（跟a,b重合也算是跟ab線段相交）。\n\n接下來是主要的部分，首先先確認4個端點是否恰好在另外一條線段上，判斷完之後就是處理一般相交的情況。若線段 $\\overline{P_1P_2}$ 與 $\\overline{P_3P_4}$ 相交，則點 $P_1$ 與點 $P_2$ 會在線段$\\overline{P_3P_4}$ 的異側。用方向函數表示：$dir(a,b,c)\\times dir(a,b,d)<0$。確認完兩個線段之後即完成線段相交的判斷！\n```cpp=\nbool Intersection(pt a, pt b, pt c, pt d){      //線段ab是否與cd相交\n    if(onseg(a,b,c)||onseg(a,b,d))return true;  //點c、d是否洽在線段ab上\n    if(onseg(c,d,a)||onseg(c,d,b))return true;  //點a、b是否洽在線段cd上\n    if(dir(a,b,c)*dir(a,b,d)==-1 && dir(c,d,a)*dir(c,d,b)==-1)\n        return true;                            //對於線段兩端點看另外兩端點必須方向相反\n    return false;\n}\n```\n由下圖可以得到上面的結論，當兩線段相交時，方向函數得到的值（用外積，也就是下圖 $\\theta_1$ 以及 $\\theta_2$）的方向），會呈現一正一負，從兩個相反的方向看同一條線段得出來的結論！\n![](https://i.imgur.com/b5pW6IS.png)\n\nAC Code:\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 1003\n#define eps 1e-9\n#define x first\n#define y second\n\nusing namespace std;\n\nstruct pt{\n    int x,y;\n    bool operator < (pt b){\n        if(x == b.x)return y < b.y;\n        return x < b.x;\n    }\n    bool operator > (pt b){\n        if(x == b.x)return y > b.y;\n        return x > b.x;\n    }\n    bool operator == (pt b){\n        if(x-b.x<=eps && y-b.y<=eps)return true;\n        return false;\n    }\n    pt operator+(pt b) {return {x + b.x, y + b.y};} //向量相加\n    pt operator-(pt b) {return {x - b.x, y - b.y};} //向量相減\n    int operator^(pt b) {return x * b.y - y * b.x;} //向量外積cross\n    int operator*(pt b) {return x * b.x + y * b.y;} //向量內積dot\n};\nvector<pt> point;\nint dir(pt a, pt b, pt o) {                         //方向函數\n    int cross = (a - o) ^ (b - o);\n    if(fabs(cross) <= eps) return 0;\n    else if(cross > 0) return 1;\n    else return -1;\n}\nbool onseg(pt a, pt b, pt o){                       //o是否在ab線段上\n    int cross = (a - o) ^ (b - o);                  //是否平行\n    int dot = (a - o) * (b - o);                    //是否在線段中\n    return (cross == 0)&&(dot <= 0);\n}\n\nbool Intersection(pt a, pt b, pt c, pt d){          //線段ab是否與cd相交\n    if(onseg(a,b,c)||onseg(a,b,d))return true;      //點c、d是否洽在線段ab上\n    if(onseg(c,d,a)||onseg(c,d,b))return true;      //點a、b是否洽在線段cd上\n    if(dir(a,b,c)*dir(a,b,d)==-1 && dir(c,d,a)*dir(c,d,b)==-1)\n        return true;                                //對於線段兩端點看另外兩端點必須方向相反\n    return false;\n}\nint n,t;\n\nvoid solve(){\n    point.assign(4,{0,0});\n    rep(i,0,3)cin>>point[i].x>>point[i].y;\n    if(Intersection(point[0],point[1],point[2],point[3])){\n        cout<<\"Yes\"<<endl;\n    }\n    else cout<<\"No\"<<endl;\n}\n\nsigned main(){\n    Orz;\n    int t;cin>>t;\n    while(t--){\n        solve();\n    }\n}\n```\n### TIOJ 1178 Convex Hull\n[題目連結](https://tioj.ck.tp.edu.tw/problems/1178)\n[Submission](https://tioj.ck.tp.edu.tw/submissions/262532)\n\n> 題目敘述\n給定n個二維平面的點，找出位在凸包上的所有點的個數\n\n最小凸多邊形 = 凸包，要找出能包住所有點的最小凸多邊形，簡稱凸包。聽說最好寫的凸包演算法是：Andrew's Monotone Chain，翻成中文叫做Andrew's 單調鍊？有一點單調+鍊的味道。下圖是我用照片合成起來的GIF，大致模擬出使用Andrew's Monotone Chain 找凸包的方法。\n\n![](https://i.imgur.com/YUOC9xZ.gif)\n\n{% note default %}\n**Andrew's Monotone Chain**\n這個演算法的時間複雜度是 $O(n\\log n)$，空間複雜度 $O(n)$，資料說它可以解決了凸包有重疊的點、共線的點、退化成線段和點的情況。它的名字叫做「單調鍊」，要維護一個有點像單調隊列的東西，對於在容器中第 $i$ 個位置的點都滿足 $\\stackrel\\longrightarrow{P_i P_{i+1}}\\times \\stackrel\\longrightarrow{P_{i+1} P_{i+2}} > 0$ ，如果有點做外積後的結果小於等於0，則它會被pop掉（這是依照上圖逆時針完成凸包的描述，如果方向相反則會變號）。\n<br>\n\n以下是此演算法的執行步驟：\n\n1. 先把所有的點按照 $(x,y)$ 排序\n2. 將下凸包圍出來，有點像維護單調隊列，對所有新加入的點i計算點i-2、i-1與i之間的外積，如果不符合情況代表圍不到新加入的點，需要將舊的點pop出來\n3. 將原本已經排序好的點逆序\n3. 再把上凸包由x座標大到小圍出來，將上下合併就是凸包了（必須注意起終點被push的次數問題）！\n{% endnote %}\n\n一般會用一個vector儲存在凸包上面的點（不包含在邊上的點，只有位於轉折點的點），在頭尾的部分（x座標最大與最小）需要特別處理，讓每一個點最多近到vector一次。\n\n{% note success %}\n**實作細節**\n以下是確認是否需要將vector中元素pop出來的關鍵，對向量$\\stackrel\\longrightarrow{OA}\\times \\stackrel\\longrightarrow{OB}$ 做外積的結果，必須排除外積結果為0的情況，如果將0也納入，會造成一個點被push進去很多次，在數量和計算上出現問題。\n```cpp=\nbool check(pt a,pt b,pt o){\n    int cross = (a - o)^(b - o);\n    return cross >= 0;         //這裡很關鍵，別吃WA\n}\n```\n除此之外，上凸包在範圍限制上是需要注意的。假設x座標最大的點i，當在圍上凸包的過程中i是不可以被pop出去的，因此vector的大小必須大於下凸包的大小。\n\n凸包使用第i-1跟第i個點的向量去看第i到第i+1個點的向量，決定一個點要不要被推入vector中。當我們逆序從x座標最大的點往前看時，要確保每一輪結束之後在i點後都必須要有至少一個點，設定hull.size() > down_hull的原因是防止在下凸包的點被圍上凸包的過程更新到。\n\n```cpp=+\nint down_hull = hull.size();    //圍上凸包的程式碼片段\nfor(auto i: p){\n    while(hull.size() > down_hull \n        && check(i,hull[hull.size()-1],hull[hull.size()-2])){\n        hull.pop_back();\n    }\n    hull.push_back(i);\n}\n```\n{% endnote %}\n以下是AC Code:\n\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 100001\n#define eps 1e-9\n#define x first\n#define y second\n\nusing namespace std;\n\nstruct pt{\n    int x,y;\n    bool operator < (pt b){\n        if(x == b.x)return y < b.y;\n        return x < b.x;\n    }\n    bool operator > (pt b){\n        if(x == b.x)return y > b.y;\n        return x > b.x;\n    }\n    bool operator == (pt b){\n        if(x-b.x<=eps && y-b.y<=eps)return true;\n        return false;\n    }\n    pt operator+(pt b) {return {x + b.x, y + b.y};} //向量相加\n    pt operator-(pt b) {return {x - b.x, y - b.y};} //向量相減\n    int operator^(pt b) {return x * b.y - y * b.x;} //向量外積cross\n    int operator*(pt b) {return x * b.x + y * b.y;} //向量內積dot\n};\nbool cmp(pt a, pt b){\n    if(a.x == b.x)return a.y < b.y;\n    return a.x < b.x;\n}\nvector<pt> p;\n\nbool check(pt a,pt b,pt o){\n    int cross = (a - o)^(b - o);\n    return cross >= 0;                              //這裡很關鍵，別吃WA\n}\n\nint n,t;\n\nvector<pt> convex_hull(){\n    vector<pt> hull;\n    sort(p.begin(),p.end(),cmp);       //首先對x進行排序\n    for(auto i : p){                   //依序走訪，如果遇到外積<0則不在凸包上\n        while(hull.size()>=2 && check(i,hull[hull.size()-1],hull[hull.size()-2])){\n            hull.pop_back();\n        }\n        hull.push_back(i);             //在凸包hull的每一點都符合外積小於0\n    }\n    int down_hull = hull.size();\n    hull.pop_back();                   //x最大的點會在凸包上，不用做兩次先pop一次\n    reverse(p.begin(),p.end());        //將所有點逆序之後做一次上面的凸包\n    for(auto i: p){\n        while(hull.size() > down_hull && check(i,hull[hull.size()-1],hull[hull.size()-2])){\n            hull.pop_back();\n        }\n        hull.push_back(i);\n    }\n    return hull;                       //起點會經過兩次，剛好來算有向面積\n}\n\nsigned main(){\n    Orz;\n    cin>>n;\n    p.assign(n,{0,0});\n    rep(i,0,n-1)cin>>p[i].x>>p[i].y;\n    vector<pt> hull = convex_hull();\n    cout<<hull.size()-1<<endl;\n}\n```\n### 最小凸多邊形\n[題目連結](https://neoj.sprout.tw/problem/402/)\n[Submission](https://neoj.sprout.tw/challenge/178589/)\n\n> 題目敘述\n找出二維平面上n個點的凸包所圍出來的面積為何？\n\n跟上一題類似，在找到全部在凸包上面的點後，就可以利用**有向面積**把凸包面積算出來，有一個公式可以計算多邊形面積，利用外積得到正負值，轉一圈後得到面積！對於多邊形的頂點 $P_0,P_1,...,P_{n-1},P_n=P_0$ 的面積如下：\n$$Area = \\frac{1}{2}\\sum_{i=0}^{n-1}\\stackrel\\longrightarrow{P_i}\\times \\stackrel\\longrightarrow{P_{i+1}}$$\n\n其中最後一個點會回到起點，形成一個封閉的迴路。\n\n以下是AC Code：\n\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 100001\n#define eps 1e-9\n#define x first\n#define y second\n\nusing namespace std;\n\nstruct pt{\n    int x,y;\n    bool operator < (pt b){\n        if(x == b.x)return y < b.y;\n        return x < b.x;\n    }\n    bool operator > (pt b){\n        if(x == b.x)return y > b.y;\n        return x > b.x;\n    }\n    bool operator == (pt b){\n        if(x-b.x<=eps && y-b.y<=eps)return true;\n        return false;\n    }\n    pt operator+(pt b) {return {x + b.x, y + b.y};} //向量相加\n    pt operator-(pt b) {return {x - b.x, y - b.y};} //向量相減\n    int operator^(pt b) {return x * b.y - y * b.x;} //向量外積cross\n    int operator*(pt b) {return x * b.x + y * b.y;} //向量內積dot\n};\nbool cmp(pt a, pt b){\n    if(a.x == b.x)return a.y < b.y;\n    return a.x < b.x;\n}\n\nvector<pt> p;\n\nbool check(pt a,pt b,pt o){\n    int cross = (a - o)^(b - o);\n    return cross >= 0;\n}\n\nint n,t;\n\nvector<pt> convex_hull(){\n    vector<pt> hull;\n    sort(p.begin(),p.end(),cmp);       //首先對x進行排序\n    for(auto i : p){                   //依序走訪，如果遇到外積<0則不在凸包上\n        while(hull.size() > 1 && check(i,hull[hull.size()-1],hull[hull.size()-2])){\n            hull.pop_back();\n        }\n        hull.push_back(i);             //在凸包hull的每一點都符合外積小於0\n    }\n    int down_hull = hull.size();\n    hull.pop_back();                   //x最大的點會在凸包上，不用做兩次先pop一次\n    reverse(p.begin(),p.end());        //將所有點逆序之後做一次上面的凸包\n    for(auto i: p){\n        while(hull.size() > down_hull && check(i,hull[hull.size()-1],hull[hull.size()-2])){\n            hull.pop_back();\n        }\n        hull.push_back(i);\n    }\n    return hull;                       //起點會經過兩次，剛好來算有向面積\n}\n\nsigned main(){\n    Orz;\n    cin>>t;\n    while(t--){\n        cin>>n;\n        p.assign(n,{0,0});\n        rep(i,0,n-1)cin>>p[i].x>>p[i].y;\n        vector<pt> hull = convex_hull();\n        int area = 0,len = hull.size();\n        for(int i=0;i<len-1;i++)area += (hull[i]^hull[i+1]);\n        cout<<fixed<<setprecision(1)<<((ld)area/2)<<endl;\n    }\n}\n```\n\n### 來吧，遊戲開始了。\n[題目連結](https://neoj.sprout.tw/problem/790/)\n[Submission](https://neoj.sprout.tw/challenge/178691/)\n[GGB模擬](https://www.geogebra.org/graphing/h4fxdquw)\n\n> 題目敘述\n給你二維平面上n個點(n≤2400)，每一個點座標皆不相同，求出總共可以圍出多少個三角形？\n\n這是NEOJ上的加分題，好像是一個題組吧，反正總共有三題，這是第一題。如果 $O(n^3)$ 的枚舉，複雜度會爆炸（量級約$10^{10}$），根據電神的說法，這一題要用極角排序以及雙指標找到共線，接著就可以利用排列組合把因為共線而不能形成三角形的組合扣掉，就是答案了。\n\n![](https://i.imgur.com/t5TF96I.png)\n\n這一題的核心概念是找共線，具體來說的作法是枚舉每一個點的同時，以它為原點對其他的點進行排序，如果遇到有相同的極角座標表示這些點共線，同時利用陣列cnt[x]統計共線點數為x的線段總共有幾條。\n\n以下的GIF就是大致上程式執行的樣子。因為一條長度為x的線段會因為枚舉x次的關係，在最後扣掉的情況會重複x次因此需要除掉。\n\n![](https://i.imgur.com/MVfEx4i.gif)\n\n{% note primary %}\n**共線與三角形**\n\n一般情況下（任三點不共線），總共可以形成 $C^n_3$ 個三角形，如果有一條m個點共線的情況下（其他點不共線），則可以形成的三角形數量就必須扣除共線限制的情況，變成 $C^n_3-C^m_3$ 個三角形。\n{% endnote %}\n\n時間複雜度為：枚舉每一個點 $O(n)$，極角排序 $O(n\\log n)$，總時間複雜度 $O(n^2\\log n)$\n\n{% note default %}\n**實作小細節**\n\n**1. 維護共線連續區間**\n\n我們要想辦法讓有共線的點們所在位置是一個連續的位置。三個點共線可能為在對角線的象限中，也就是點差了180度，如此一來就沒辦法讓共線的點為在連續的區間。為了達到這個目的，我們將所有位於下半平面的點都移到上半平面（在上半平面找到有相同 $\\tan\\theta$ 值的位置），接著就能利用雙指針找極角座標排序後有相同極角的區間之最大值！\n\n**2. 特例判斷**\n\n如果有一點y座標為0但x座標為負，要將其移到x軸正向的地方，不能把這種情況涵蓋為一般情況，否則原本在x軸正向的點會被移到x軸負向，沒有達到預期的效果。\n{% endnote %}\n\n以下是AC Code：\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 100001\n#define all(x) x.begin(),x.end()\n#define eps 1e-9\n#define x first\n#define y second\n\nusing namespace std;\n\nstruct pt{\n    int x,y;\n    bool operator < (pt b){\n        if(x == b.x)return y < b.y;\n        return x < b.x;\n    }\n    bool operator > (pt b){\n        if(x == b.x)return y > b.y;\n        return x > b.x;\n    }\n    bool operator == (pt b){\n        if(x-b.x == 0 && y-b.y == 0)return true;\n        return false;\n    }\n    pt operator+(pt b) {return {x + b.x, y + b.y};} //向量相加\n    pt operator-(pt b) {return {x - b.x, y - b.y};} //向量相減\n    int operator^(pt b) {return x * b.y - y * b.x;} //向量外積cross\n    int operator*(pt b) {return x * b.x + y * b.y;} //向量內積dot\n};\n\nvector<pt> p;\nvector<int> cnt;\nint n,ans = 0;\n\nbool cmp(pt a, pt b){\n    bool f1 = a < pt{0,0};\n    bool f2 = b < pt{0,0};\n    if(f1 != f2)return f1 < f2;\n    return (a ^ b) > 0;\n    //逆時針將點進行極角排序，從270度開始逆時針\n}\n\n//用cnt[i]統計區間長度為i的線段數量\nvoid solve(pt id){\n    vector<pt> pp;\n    for(auto i : p){                         //以id為原點\n        pt cur = i-id;\n        if(cur == pt{0,0})continue;\n        if(cur.y < 0){cur.x = -cur.x;cur.y = -cur.y;}\n        if(cur.x < 0 && cur.y==0){cur.x = -cur.x;}\n        pp.push_back(cur);\n    }\n    sort(all(pp),cmp);                      //將id當作原點進行排序\n    int p1 = 0,p2 = 0,len = pp.size();      //雙指針找共線區間\n    while(p1 < n-1){                        //最大化區間\n        while(p2+1 < len && (pp[p1]^pp[p2+1]) == 0)p2++;\n        cnt[p2-p1+2]+=1;\n        p1 = p2+1;\n    }\n}\n\nsigned main(){\n    Orz;\n    cin>>n;\n    p.assign(n,{0,0});\n    cnt.resize(n+1,0);\n    rep(i,0,n-1)cin>>p[i].x>>p[i].y;\n    rep(i,0,n-1)solve(p[i]);\n    int ans = (n*(n-1)*(n-2))/6;\n    rep(i,3,n)ans-=(cnt[i]*(i-1)*(i-2))/6;\n    cout<<ans<<endl;\n}\n```\n\n### 遊戲：最終回\n[題目連結](https://neoj.sprout.tw/problem/792/)\n[Submission](https://neoj.sprout.tw/challenge/178786/)\n> 題目敘述\n共有n個二維平面上的格子點，這些點會形成簡單多邊形。試求或在簡單多邊形內部的格線總長（包括垂直與水平格線）。\n\n這邊有一個不嚴謹的推導方式，不過他是正確的。令多邊形內部格線長度為S，多邊形的邊落在的格線長度為T，多邊形面積T，則有以下關係式：\n\n$$S = 2A-\\frac{T}{2}$$\n\n\n詳細的公式推導可以可以參閱下圖，平行四邊形（斜線部分）內部**垂直**的格線長度為： 大矩形 $(x_1+x_2)(y_1+y_2)$ 扣掉左右上下共四個三角形兩兩拼成一個矩形 $x_1y_1$ 以及 $x_2y_2$，還有左上右下兩個正方形 $2x_2y_1$，整理之後會發現其實跟面積是一樣的。對於垂直部分也是類似的情況。\n\n![](https://i.imgur.com/wemDPMp.jpg)\n\n好像隱約發現到面積與格線長度有十分密切的關係，算出面積，把在格線上的邊進行特判扣掉，就可以得到格線長度。\n\n這一題我想了很久，一直看不出來關係式到底長怎樣，直到大神提點才發現原來有這樣的關係，我反應好遲鈍:cry:\n\n![](https://i.imgur.com/Fy1wSky.png)\n\n以下是AC Code：\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 100001\n#define all(x) x.begin(),x.end()\n#define eps 1e-9\n#define x first\n#define y second\n\nusing namespace std;\n\nstruct pt{\n    int x,y;\n    bool operator < (pt b){\n        if(x == b.x)return y < b.y;\n        return x < b.x;\n    }\n    bool operator > (pt b){\n        if(x == b.x)return y > b.y;\n        return x > b.x;\n    }\n    bool operator == (pt b){\n        if(x-b.x == 0 && y-b.y == 0)return true;\n        return false;\n    }\n    pt operator+(pt b) {return {x + b.x, y + b.y};} //向量相加\n    pt operator-(pt b) {return {x - b.x, y - b.y};} //向量相減\n    int operator^(pt b) {return x * b.y - y * b.x;} //向量外積cross\n    int operator*(pt b) {return x * b.x + y * b.y;} //向量內積dot\n};\n\nvector<pt> p;\nvector<int>  cnt;\nint n,edge,ans;\n\nint solve(){\n    int area = 0;\n    rep(i,0,n-1){\n        area += (p[i]^p[i+1]);\n        if(p[i].y == p[i+1].y)edge += abs(p[i].x-p[i+1].x);\n        if(p[i].x == p[i+1].x)edge += abs(p[i].y-p[i+1].y);\n    }\n    area = abs(area);\n    return area;\n}\n\nsigned main(){\n    Orz;\n    cout<<fixed<<setprecision(1);\n    while(cin>>n){\n        p.assign(n+1,{0,0});\n        edge = 0;\n        rep(i,0,n-1)cin>>p[i].x>>p[i].y;\n        p[n] = p[0];\n        ans = solve();\n        cout<<ans-((ld)edge/2)<<endl;\n    }\n}\n```\n\n\n### TIOJ 1205 直角三角形\n[題目連結](https://tioj.ck.tp.edu.tw/problems/1205)\n[Submission](https://tioj.ck.tp.edu.tw/submissions/262842)\n\n> 題目敘述\n給你N（N≤1500）個座標平面上的點，請問總共可形成多少個直角三角形呢？\n\n從極角排序後的第一個點開始逆時針進行雙指針的枚舉。這邊使用到一個很特別的手法，對於共線的情況我們先透過預處理的方式將共線的點合併起來，並用cnt[x]陣列紀錄第x個點是由幾個點所合併起來的，如此一來，在進行計算的時候就不會有共線要分別處理的問題（不需擔心是不是可以跟之前的點形成直角三角形，因為相同斜率的點已經被合併剩下一個），直接將數量相乘就可以知道直角三角形的數量！\n\n時間複雜度：枚舉所有點 $O(n)\\times$ 進行極角排序$O(n\\log n)$ 以及雙指標$O(n)$，總時間複雜度為 $O(n^2\\log n)$。\n\n{% note info %}\n**實作小細節**\n\n雙指針進行枚舉的過程中，很有可能會指標指向的索引值會超出範圍。解決的方法有兩種：\n1. 超出了即代表繞了一圈，只需要對索引值取餘數即可。\n2. 除了取餘數的方法之外，其實也可以直接在點集後面將所有點再推入一次，讓角度從360延伸成720度，就不會有超出範圍的問題！\n{% endnote %}\n\n以下是AC Code：\n\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 100001\n#define all(x) x.begin(),x.end()\n#define eps 1e-9\n#define x first\n#define y second\n\nusing namespace std;\n\nstruct pt{\n    int x,y;\n    bool operator < (pt b){\n        if(x == b.x)return y < b.y;\n        return x < b.x;\n    }\n    bool operator > (pt b){\n        if(x == b.x)return y > b.y;\n        return x > b.x;\n    }\n    bool operator == (pt b){\n        if(x-b.x == 0 && y-b.y == 0)return true;\n        return false;\n    }\n    pt operator+(pt b) {return {x + b.x, y + b.y};} //向量相加\n    pt operator-(pt b) {return {x - b.x, y - b.y};} //向量相減\n    int operator^(pt b) {return x * b.y - y * b.x;} //向量外積cross\n    int operator*(pt b) {return x * b.x + y * b.y;} //向量內積dot\n};\n\nvector<pt> p,temp,pp;\nvector<int>  cnt;\nint n,ans = 0;\n\nbool cmp(pt a, pt b){\n    bool f1 = a < pt{0,0};\n    bool f2 = b < pt{0,0};\n    if(f1 != f2)return f1 < f2;\n    return (a ^ b) > 0;\n    //逆時針將點進行極角排序，從270度開始逆時針\n}\n\n//O(n)枚舉每個點當直角情況\nint solve(pt id){\n    pp.clear();cnt.clear();temp.clear();\n    for(pt i : p){\n        pt cur = i - id;\n        if(cur == pt{0,0})continue;\n        temp.push_back(cur);\n    }\n    sort(all(temp),cmp);            //以id為原點進行極角排序\n    pp.push_back(temp[0]);          //pp每一角度只存至多一個點\n    cnt.push_back(1);               //考慮每個點共線情況\n    int len = temp.size();\n    rep(i,1,len-1){\n        int cross = temp[i]^temp[i-1],dot = temp[i]*temp[i-1];\n        if(cross == 0 && dot >= 0)cnt[cnt.size()-1] += 1;   //共線數量+=1\n        else {pp.push_back(temp[i]);cnt.push_back(1);}      //非共線設定數量為1\n    }\n    len = pp.size();            //考慮橫跨一周的情況\n    rep(i,0,len-1){             //雙指針i,p1可能會超過一圈\n        pp.push_back(pp[i]);    //將點再繞一圈\n        cnt.push_back(cnt[i]);\n    }\n    int ans = 0,p1 = 0;\n    rep(i, 0, len-1){\n        while(p1 < i+len && (pp[i]^pp[p1]) >= 0 && (pp[i]*pp[p1]) > 0)p1 += 1;\n        //夾銳角的情況要p1+=1\n        if((pp[i]^pp[p1]) > 0 && (pp[i]*pp[p1]) == 0)ans += cnt[i]*cnt[p1];\n        //正向的直角三角形，若共線則兩者數量相乘\n    }\n    return ans;\n}\n\nsigned main(){\n    Orz;\n    while(cin>>n){\n        if(n == 0)break;\n        p.assign(n,{0,0});\n        rep(i,0,n-1)cin>>p[i].x>>p[i].y;\n        \n        int ans = 0;\n        rep(i,0,n-1){\n            ans += solve(p[i]);\n        }\n        cout<<ans<<endl;\n    }\n}\n```\n\n\n### TIOJ 1105 H.PS3\n[題目連結](https://tioj.ck.tp.edu.tw/problems/1105)\n[Submission $O(n^2)$](https://tioj.ck.tp.edu.tw/submissions/262930)\n[Submission $O(n\\log n)$](https://tioj.ck.tp.edu.tw/submissions/262947)\n\n> 題目敘述\n給你平面上N個點（N≤3000），請求出最遠點對的索引值（小的在前、大的在後）\n\n我做了一份[最近點對：不同複雜度之解決方式](/hVplrqxCRdGiMkn2lwXGAA)的筆記，共有四種方法可以解決那個問題，這一題要求的是最遠點對，作法與最近點對其實差蠻遠的。由上幾題知道凸包的求法，因為凸包是可以圍住所有點的多邊形，因此最遠點對也應該在凸包上，而且所在的位置會為在凸包的兩側上（如果不落在凸包上，一定可以把點向兩側延伸到凸包上，且移動過後的點對距離一定比原始的點對距離大）。\n\n找完凸包之後，可以用旋轉卡尺的方式尋找最遠點對。想像兩條平行線中間夾著凸包，逆時鐘旋轉繞行凸包一圈，過程不斷更新最遠點對的距離。在實作上兩條平行線可以被想像成由 $P_i$ 指向 $P_{i+1}$ 的向量，透過外積三角形面積公式決定卡尺該如何移動。\n\n$$AREA = |\\overrightarrow{AB}\\times \\overrightarrow{AC}|$$\n\n以下圖為例，我們要找 $\\overline{HM}$ 為底可以形成的最大三角形面積的頂點，因為在同底的情況下面積就代表點與邊的垂直距離，最大的垂直距離意味著這條底邊可以垂直延伸的最遠距離。因為凸包必定是凸多邊形，因此三角形的面積會呈現單峰函數，因此只需要從下一個三角形面積的大小，決定雙指針中比較快的指標的移動情況。\n\n![](https://i.imgur.com/SXv0gfN.png)\n\n如果仔細來看，以下圖為例，當前較快的指標指向的位置是 $D$ 點，考慮一條與與 $\\overline{HM}$ 平行的直線，若下一個點 $J$ 在平行線段的另外一側，則將指標移往 $J$ 點。可能會有一個疑問，如果比較下圖的線段長度，會發現到 $\\overline{DH}$ 的長度比經過 $J$ 點的兩條線段都還要長，那為何還要更新至 $J$ 點？舉這個例子不太好，不過可以想像當旋轉卡尺轉到以 $\\overline{FH}$ 為底的時候，會將最遠點對的距離更新成 $\\overline{HD}$ 的長度。如果今天 $H$ 的左側又多加了一個新點 $P$，則最遠點對會變成 $\\overline{PD}$ 的距離。\n\n簡單來說，最遠點對一定會發生對角的凸包點上面，即使現在以 $\\overline{HM}$ 為底最遠點並非 $J$ 而是 $D$ ，但在旋轉卡尺旋轉到 $\\overline{FH}$ 時就能將距離更新成 $\\overline{HD}$ 的距離。\n\n![](https://i.imgur.com/6Jeg2U8.png)\n\n\n{% note success %}\n**實作小細節**\n\n這一題有點麻煩，因為他要輸出的是最遠點對的索引值，而不是最遠點對之間的距離。在尋找凸包的過程中，會對所有點進行排序，因此原有的索引值順序會被打亂，需要在一開始輸入的時後就好好維護每一個座標的索引值。\n{% endnote %}\n\n以下是AC Code：\n\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 100001\n#define all(x) x.begin(),x.end()\n#define eps 1e-9\n#define x first\n#define y second\n\nusing namespace std;\n\nstruct pt{\n    int x,y,ind;\n    bool operator < (pt b){\n        if(x == b.x)return y < b.y;\n        return x < b.x;\n    }\n    bool operator > (pt b){\n        if(x == b.x)return y > b.y;\n        return x > b.x;\n    }\n    bool operator == (pt b){\n        if(x-b.x == 0 && y-b.y == 0)return true;\n        return false;\n    }\n    pt operator+(pt b) {return {x + b.x, y + b.y};} //向量相加\n    pt operator-(pt b) {return {x - b.x, y - b.y};} //向量相減\n    int operator^(pt b) {return x * b.y - y * b.x;} //向量外積cross\n    int operator*(pt b) {return x * b.x + y * b.y;} //向量內積dot\n    int dis() {return x*x + y*y;}\n};\n\nvector<pt> p,hull;\npt pt_ans;\nint n,h;\n\nbool check(pt a, pt b, pt o){\n    pt aa = a - o;\n    pt bb = b - o;\n    return (aa ^ bb) >= 0;\n}\n\nbool check2(pt a,pt b,pt c,pt d){\n    int aa = abs((a - c)^(b - c));\n    int bb = abs((a - d)^(b - d));\n    return aa < bb;\n}\n\nbool cmp(pt a, pt b){\n    if(a == b)return a.ind < b.ind;\n    if(a.x == b.x)return a.y < b.y;\n    return a.x < b.x;\n}\n\nvoid convex_hull(){\n    stable_sort(all(p),cmp);\n    rep(i,0,n-2)if(p[i] == p[i+1])p[i+1].ind = p[i].ind;\n    hull.clear();\n    for(auto i : p){\n        while(hull.size() > 1 && check(i,hull[hull.size()-1],hull[hull.size()-2]))\n            hull.pop_back();\n        hull.push_back(i);\n    }\n    int sz = hull.size();\n    h = hull.size()-1;\n    hull.pop_back();\n    reverse(all(p));\n    for(auto i : p){\n        while(hull.size() > sz && check(i,hull[hull.size()-1],hull[hull.size()-2]))\n            hull.pop_back();\n        hull.push_back(i);\n    }\n    hull.pop_back();\n}\n\nvoid solve(){\n    int ans = 0,d = h,sz = hull.size();\n    rep(i,0,sz-1){\n        while(check2(hull[i],hull[(i+1)%sz],hull[d],hull[(d+1)%sz]))\n            d = (d+1)%sz;\n        if(ans < (hull[i]-hull[d]).dis()){\n            ans = (hull[i]-hull[d]).dis();\n            int a = hull[i].ind,b = hull[d].ind;if(a > b)swap(a,b);\n            pt_ans = {a,b};\n        }\n        else if(ans == (hull[i]-hull[d]).dis()){\n            int a = hull[i].ind,b = hull[d].ind;if(a > b)swap(a,b);\n            if(pt_ans > (pt){a,b})pt_ans = {a,b};\n        }\n        if(ans < (hull[(i+1)%sz]-hull[d]).dis()){\n            ans = (hull[(i+1)%sz]-hull[d]).dis();\n            int a = hull[(i+1)%sz].ind,b = hull[d].ind;if(a > b)swap(a,b);\n            pt_ans = {a,b};\n        }\n        else if(ans == (hull[(i+1)%sz]-hull[d]).dis()){\n            int a = hull[(i+1)%sz].ind,b = hull[d].ind;if(a > b)swap(a,b);\n            if(pt_ans > (pt){a,b})pt_ans = {a,b};\n        }\n    }\n}\n\nsigned main(){\n    Orz;\n    while(cin>>n){\n        if(n == 0)break;\n        pt_ans = (pt){0,0};\n        p.resize(n,{0,0});\n        rep(i,0,n-1){\n            cin>>p[i].x>>p[i].y;\n            p[i].ind = i;\n        }\n        convex_hull();\n        solve();\n        cout<<pt_ans.x<<\" \"<<pt_ans.y<<endl;\n    }\n}\n\n/*\n5\n9 1\n1 5\n1 2\n9 9\n5 1\n */\n```\n\n### ZJ b288: 夏季大三角\n[題目連結](https://zerojudge.tw/ShowProblem?problemid=b288)\n[解題報告](https://zerojudge.tw/ShowThread?postid=26741&reply=0)\n\n\n> 題目敘述\n請輸出在N個二維平面的座標，挑選3顆出來成組成三角形的最大面積\n\n比較一下兩個複雜度的作法，第一個是使用 $O(n^3)$ 枚舉所有的點並計算面積，所需要的時間是0.4sec，而且需要特別注意不能使用到海龍公式計算面積，否則有很大的機會會超時。\n\n![](https://i.imgur.com/oN26CR4.png)\n\n以下作法是先進行 $O(n\\log n)$ 找尋凸包，因為面積最大的三角形必定三個點都在凸包上，因此用 $n^2$ 的時間進行枚舉，旋轉卡尺（類似最遠點對的作法）找面積最大的第三個點，就能在總時間複雜度 $O(n^2)$ 完成！（會再更少，因為只要枚舉凸包上的點）\n\n![](https://i.imgur.com/SUwVRWv.png)\n\n\n以下是AC Code：\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 100001\n#define eps 1e-9\n#define x first\n#define y second\n\nusing namespace std;\n\nstruct pt{\n    ld x,y;\n    bool operator < (pt b){\n        if(x == b.x)return y < b.y;\n        return x < b.x;\n    }\n    bool operator > (pt b){\n        if(x == b.x)return y > b.y;\n        return x > b.x;\n    }\n    bool operator == (pt b){\n        if(abs(x-b.x)<=eps && abs(y-b.y)<=eps)return true;\n        return false;\n    }\n    pt operator+(pt b) {return {x + b.x, y + b.y};} //向量相加\n    pt operator-(pt b) {return {x - b.x, y - b.y};} //向量相減\n    ld operator^(pt b) {return x * b.y - y * b.x;} //向量外積cross\n    ld operator*(pt b) {return x * b.x + y * b.y;} //向量內積dot\n};\nbool cmp(pt a, pt b){\n    if(a.x == b.x)return a.y < b.y;\n    return a.x < b.x;\n}\nvector<pt> p,hull;\nint n,t,h;\nld ans;\n\nbool check(pt a,pt b,pt o){\n    int cross = (a - o)^(b - o);\n    return cross >= 0;                              //這裡很關鍵，別吃WA\n}\n\nbool check2(pt a,pt b,pt c,pt d){\n    ld aa = (a - c)^(b - c);\n    ld bb = (a - d)^(b - d);\n    return aa < bb;\n}\n\nld area(pt a,pt b){\n    return abs(a^b)/2;\n}\n\nvoid convex_hull(){\n    hull.clear();\n    sort(p.begin(),p.end(),cmp);       //首先對x進行排序\n    for(auto i : p){                   //依序走訪，如果遇到外積<0則不在凸包上\n        while(hull.size()>=2 && check(i,hull[hull.size()-1],hull[hull.size()-2])){\n            hull.pop_back();\n        }\n        hull.push_back(i);             //在凸包hull的每一點都符合外積小於0\n    }\n    int down_hull = hull.size();\n    h = down_hull-1;\n    hull.pop_back();                   //x最大的點會在凸包上，不用做兩次先pop一次\n    reverse(p.begin(),p.end());        //將所有點逆序之後做一次上面的凸包\n    for(auto i: p){\n        while(hull.size() > down_hull && check(i,hull[hull.size()-1],hull[hull.size()-2])){\n            hull.pop_back();\n        }\n        hull.push_back(i);\n    }\n    hull.pop_back();\n}\n\nvoid solve(){\n    int d,sz = hull.size();\n    rep(i,0,sz-1){\n        rep(j,i+1,sz-1){\n            d = (j+1)%sz;\n            while(check2(hull[i],hull[(j)%sz],hull[d],hull[(d+1)%sz]))\n                d = (d+1)%sz;\n            ans = max(ans,area((hull[d]-hull[i]),(hull[d]-hull[j])));\n        }\n    }\n}\n\nsigned main(){\n    Orz;\n    cin>>n;\n    p.assign(n,{0,0});\n    rep(i,0,n-1)cin>>p[i].x>>p[i].y;\n    convex_hull();\n    ans = 0;\n    solve();\n    cout<<fixed<<setprecision(6);\n    cout<<ans<<endl;\n}\n```\n\n### TIOJ 1500 Clean up on aisle 3\n[題目連結](https://tioj.ck.tp.edu.tw/problems/1500)\n[Submission](https://tioj.ck.tp.edu.tw/submissions/262966)\n> 題目敘述\n平面上n個點找最近點對的距離\n\n最近點對真的有超多種作法的，枚舉、掃描線、分治、隨機都可以做！這邊有[一篇筆記](/hVplrqxCRdGiMkn2lwXGAA)比較各種時間複雜度的最近點對作法，這邊不多做贅述！\n\n以下程式碼是掃描線演算法，最差情況下的時間複雜度是 $O(n^2)$，因為需要排序，所以下限為 $\\Omega(n\\log n)$！\n\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 50005\n#define all(x) x.begin(),x.end()\n#define INF 5e18\n#define eps 1e-9\n#define x first\n#define y second\nusing namespace std;\nint n;\npii p[N];\n\nld dis(pii a, pii b){\n    ld x = a.x-b.x, y = a.y-b.y;\n    return sqrt(x*x + y*y);\n}\n\nsigned main(){\n    Orz;\n    cout<<fixed<<setprecision(6);\n    \n    while(cin>>n){\n        rep(i,0,n-1)cin>>p[i].x>>p[i].y;\n        sort(p,p+n);\n        ld d = INF;\n        rep(i,0,n-1){\n            rep(j,i+1,n-1){\n                if(p[j].x > p[i].x + d)break;\n                d = min(d, dis(p[i],p[j]));\n            }\n        }\n        cout<<d<<endl;\n    }\n}\n```\n\n### TIOJ 1280 領土 (Territory)\n[題目連結](https://tioj.ck.tp.edu.tw/problems/1280)\n[Submission](https://tioj.ck.tp.edu.tw/submissions/262848)\n\n> 題目敘述\n一個國家有 n 個安全哨，每一個都有座標 $(x,y)$ ，代表在座標軸上的位置。輸出該國安全哨所能圍出的最大領土。\n\nn個點所能圍成的最大面積，其實等價於凸包的面積。與前幾題的**最小凸多邊形**是一模一樣的題目！\n\n\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 100001\n#define all(x) x.begin(),x.end()\n#define eps 1e-9\n#define x first\n#define y second\n\nusing namespace std;\n\nstruct pt{\n    int x,y;\n    bool operator < (pt b){\n        if(x == b.x)return y < b.y;\n        return x < b.x;\n    }\n    bool operator > (pt b){\n        if(x == b.x)return y > b.y;\n        return x > b.x;\n    }\n    bool operator == (pt b){\n        if(x-b.x == 0 && y-b.y == 0)return true;\n        return false;\n    }\n    pt operator+(pt b) {return {x + b.x, y + b.y};} //向量相加\n    pt operator-(pt b) {return {x - b.x, y - b.y};} //向量相減\n    int operator^(pt b) {return x * b.y - y * b.x;} //向量外積cross\n    int operator*(pt b) {return x * b.x + y * b.y;} //向量內積dot\n};\n\nvector<pt> p,temp,pp;\nvector<int>  cnt;\nint n,ans = 0;\n\nbool cmp(pt a, pt b){\n    if(a.x == b.x)return a.y < b.y;\n    return a.x < b.x;\n}\n\nbool check(pt a,pt b,pt o){\n    pt aa = a - o;\n    pt bb = b - o;\n    return (aa^bb) >= 0;\n}\n\nvector<pt> solve(){\n    sort(all(p),cmp);\n    vector<pt> h;\n    for(pt i : p){\n        while(h.size()>=2 && check(i,h[h.size()-1],h[h.size()-2]))\n            h.pop_back();\n        h.push_back(i);\n    }\n    int sz = h.size();\n    h.pop_back();\n    reverse(all(p));\n    for(auto i : p){\n        while(h.size()>sz && check(i,h[h.size()-1],h[h.size()-2]))\n            h.pop_back();\n        h.push_back(i);\n    }\n    return h;\n}\n\nsigned main(){\n    Orz;\n    cin>>n;\n    p.resize(n,{0,0});\n    rep(i,0,n-1)cin>>p[i].x>>p[i].y;\n    vector<pt> hull = solve();\n    int area = 0,sz = hull.size();\n    rep(i,0,sz-2){\n        area += (hull[i]^hull[i+1]);\n    }\n    cout<<((area%2)?(area/2)+1:(area/2))<<endl;\n}\n```\n\n### ZJ a871: Museum Area\n[題目連結](https://zerojudge.tw/ShowProblem?problemid=a871)\n\n> 題目敘述\nn個點圍成的多邊形，求面積\n\n水題，直接套行列式公式即可算出答案！\n\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pdd pair<double,double>\n#define int long long\n#define ld long double\n#define N 15\n#define x first\n#define y second\nusing namespace std;\n\nint n;\npdd p[N];\n\nld check(pdd a, pdd b){\n    return a.x*b.y - a.y*b.x;\n}\n\nsigned main(){\n    Orz;\n    while(cin>>n){\n        rep(i,0,n-1)cin>>p[i].x>>p[i].y;\n        p[n] = p[0];\n        ld area = 0.0;\n        rep(i,0,n-1)area += check(p[i],p[i+1]);\n        ld ans = (ld)area/2;\n        if(ans<0)ans = -ans;\n        cout<<fixed<<setprecision(2);\n        cout<<ans<<endl;\n    }\n}\n```\n\n### TIOJ 1678 剪多邊形（molding）\n[題目連結TIOJ](https://tioj.ck.tp.edu.tw/problems/1678)\n[TIOJ Submission](https://tioj.ck.tp.edu.tw/submissions/262849)\n[題目連結ZJ](https://zerojudge.tw/ShowProblem?problemid=d546)\n\n> 題目敘述\n間單來說是求出多邊形面積以及凸包面積的差，詳細可以點上面題目連結。\n\n題目說多邊形需要才剪下的面積，我們就算凸包面積以及多邊形面積，兩者的差去除上題目給的色塊面積即是答案！\n\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define int long long\n#define ll long long\n#define ld long double\n#define N 100001\n#define all(x) x.begin(),x.end()\n#define eps 1e-9\n#define x first\n#define y second\n\nusing namespace std;\n\nstruct pt{\n    int x,y;\n    bool operator < (pt b){\n        if(x == b.x)return y < b.y;\n        return x < b.x;\n    }\n    bool operator > (pt b){\n        if(x == b.x)return y > b.y;\n        return x > b.x;\n    }\n    bool operator == (pt b){\n        if(x-b.x == 0 && y-b.y == 0)return true;\n        return false;\n    }\n    pt operator+(pt b) {return {x + b.x, y + b.y};} //向量相加\n    pt operator-(pt b) {return {x - b.x, y - b.y};} //向量相減\n    int operator^(pt b) {return x * b.y - y * b.x;} //向量外積cross\n    int operator*(pt b) {return x * b.x + y * b.y;} //向量內積dot\n};\n\nvector<pt> p,temp,pp;\nvector<int>  cnt;\nint n,a,ans = 0;\n\nbool cmp(pt a, pt b){\n    if(a.x == b.x)return a.y < b.y;\n    return a.x < b.x;\n}\n\nbool check(pt a,pt b,pt o){\n    pt aa = a - o;\n    pt bb = b - o;\n    return (aa^bb) >= 0;\n}\n\nvector<pt> solve(){\n    sort(all(p),cmp);\n    vector<pt> h;\n    for(pt i : p){\n        while(h.size()>=2 && check(i,h[h.size()-1],h[h.size()-2]))\n            h.pop_back();\n        h.push_back(i);\n    }\n    int sz = h.size();\n    h.pop_back();\n    reverse(all(p));\n    for(auto i : p){\n        while(h.size()>sz && check(i,h[h.size()-1],h[h.size()-2]))\n            h.pop_back();\n        h.push_back(i);\n    }\n    return h;\n}\n\nint Polygon(){\n    vector<pt> temp(p);\n    temp.push_back(temp[0]);\n    int area = 0;\n    rep(i,0,n-1)area += (temp[i]^temp[i+1]);\n    return abs(area);\n}\n\nsigned main(){\n    Orz;\n    cin>>n>>a;\n    p.resize(n,{0,0});\n    rep(i,0,n-1)cin>>p[i].x>>p[i].y;\n    ld small = (ld)Polygon()/2;\n    vector<pt> hull = solve();\n    int area = 0,sz = hull.size();\n    rep(i,0,sz-2)area += (hull[i]^hull[i+1]);\n    ld big = (ld)area/2;\n    int ans = ceil((big-small)/a);\n    cout<<ans<<endl;\n}\n```\n\n### ZJ d269: 11579 - Triangle Trouble\n[題目連結](https://zerojudge.tw/ShowProblem?problemid=d269)\n\n> 題目敘述\n有一個三角形工廠有一個很大的問題。給你一些邊的邊長，想辦法找出用這些邊長圍出最大的三角形。\n\n根據海龍公式，三角形面積：\n$$\\triangle ABC = \\sqrt{s\\cdot(s-a)\\cdot(s-b)\\cdot(s-c)}$$\n\n可以利用貪婪法，將所有邊長由大到小進行排序，每一次拿最大的三個邊長進行枚舉，即可算出最大的三角形面積。不難理解，當換上一個比較大的邊，算出來的s也會比較大，跟邊相減的值也會比較大，總面積自然較大（好啦，這是非常不嚴謹的證明XD）\n\n在想題過程中，我有思考到，如果周長一樣的情況下，到底何種面積的三角形面積會比較大？答案是正三角形！\n\n{% note default %}\n**三角形周長固定下面積的比較**\n根據海龍公式：\n$$s = \\frac{1}{2}(a+b+c)$$\n\n想要比較在周長固定下三角形的面積，可以用算幾不等式比較，因為 $s$ 是定值，所以可以列出以下式子：\n$$\\frac{(s-a)+(s-b)+(s-c)}{3} ≥ \\sqrt[3]{(s-a)(s-b)(s-c)}$$\n等好成立時，$a=b=c$。因為$s = \\frac{a+b+c}{2}$，因此：\n$$(\\frac{a}{2})^2 ≥ (s-a)(s-b)(s-c)$$\n\n得到海龍公式\n$$\\triangle ABC = \\sqrt{s\\cdot(s-a)\\cdot(s-b)\\cdot(s-c)} ≤ \\sqrt{\\frac{3a}{2}\\cdot\\frac{a^3}{8}}=\\frac{\\sqrt{3}}{4}a^2$$\n{% endnote %}\n\n以下是使用貪婪法的AC Code：\n```cpp=\n#include <bits/stdc++.h>\n#define Orz ios::sync_with_stdio(0),cin.tie(0)\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pii pair<int,int>\n#define pdd pair<double,double>\n#define ll long long\n#define ld double\n#define N 100001\n#define all(x) x.begin(),x.end()\n#define eps 1e-9\n#define x first\n#define y second\nusing namespace std;\nint t,n;\nvector<ld> p;\n\nld area(ld a ,ld b, ld c){\n    if(a > b + c)return -1;\n    ld p = (a+b+c)/2;\n    return p*(p-a)*(p-b)*(p-c);\n}\n\nsigned main(){\n    Orz;\n    cin>>t;\n    while(t--){\n        cin>>n;\n        p.assign(n,0);\n        rep(i,0,n-1)cin>>p[i];\n        sort(all(p),greater<>());\n        ld ans = 0;\n        rep(i,0,n-3)\n            ans = max(ans,area(p[i],p[i+1],p[i+2]));\n        cout<<fixed<<setprecision(2);\n        cout<<sqrt(ans)<<endl;\n    }\n}\n```\n\n## 心得\n\n計算幾何，顧名思義就是在電腦完成幾何的運算，要怎麼把平面的東西轉化成電腦看得懂的東西就是計算幾何在做的事情。常常我們覺得很容易判斷的事情，例如判斷線段是否相交，我們可以利用肉眼直輕易判斷出來，因為我們有強大的空間感幫助我們進行判斷，但換作是電腦就必須用一些數學的技巧，對於不同的情況做各自的判斷，才能讓電腦正確回答兩條線段的相交情形。\n\n除此之外，在寫題過程中，使用到ggb進行輔助，讓我可以對程式的執行過程有更是覺化的概念，也幫助我在解題時能更理解解題的策略！上面一題三角形個數的判斷，就使用了ggb判定將點搬移的所有情況。利用它我抓到了當點的y座標為零時並沒進行好特殊情況的判斷，這也是一個視覺化之後的好處！\n\n有一題沒有做的是模擬退火的題目實作，要求圓與三角形的交集面積，感覺超級複雜，以後有時間來慢慢實作！\n","slug":"Geomertry_problem","published":1,"updated":"2021-09-19T11:26:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvyspmm80037muyxcmd63zl4","content":"<h2 id=\"題目目錄\"><a href=\"#題目目錄\" class=\"headerlink\" title=\"題目目錄\"></a>題目目錄</h2><ul>\n<li>向量加法</li>\n<li>等長線段對</li>\n<li>向左轉向右轉</li>\n<li>線段相交</li>\n<li>最小凸多邊形</li>\n<li>TIOJ 1178 Convex Hull</li>\n<li>來吧，遊戲開始了</li>\n<li>遊戲：最終回</li>\n<li>TIOJ 1205 直角三角形<span id=\"more\"></span></li>\n<li>TIOJ 1105 H.PS3</li>\n<li>ZJ b288: 夏季大三角</li>\n<li>TIOJ 1500 Clean up on aisle 3</li>\n<li>ZJ a871: Museum Area</li>\n<li>TIOJ 1280 領土 (Territory)</li>\n<li>TIOJ 1678 剪多邊形（molding）</li>\n<li>ZJ d269: 11579 - Triangle Trouble</li>\n</ul>\n<h3 id=\"向量加法\"><a href=\"#向量加法\" class=\"headerlink\" title=\"向量加法\"></a>向量加法</h3><p><a href=\"https://neoj.sprout.tw/problem/398/\">題目連結</a><br><a href=\"https://neoj.sprout.tw/challenge/178462/\">Submission</a></p>\n<blockquote>\n<p>題目敘述：<br>給你n個數字（0≤i&lt;1，小數點精度到末九位），想知道到底有多少組 $(i,j,k)$ 滿足 $v_i+v_j=v_k$，其中 $i,j,k$ 可以重複。</p>\n</blockquote>\n<p>這題其實跟計算幾何沒什麼關係，直接用unordered_map去做（有點像two sum，不過下面的code好像也不用開到multi），簡單！不過我在浮點數的地方吃了一些WA，最後算了直接改用字串處理這個惱人的東西XD</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> double long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep2(i,l,r) for(int i=l;i&lt;r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps (1e-9)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1e10</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 2001</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">vec</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep2</span>(i,<span class=\"number\">0</span>,n)&#123;</span><br><span class=\"line\">        string s;cin&gt;&gt;s;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>,times = <span class=\"number\">1000000000</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">            num += (s[i]-<span class=\"string\">&#x27;0&#x27;</span>)*times;</span><br><span class=\"line\">            times/=<span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vec[i] = num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    unordered_multimap&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; mp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        mp.<span class=\"built_in\">insert</span>(&#123;vec[i],i&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">            ans += mp.<span class=\"built_in\">count</span>(vec[i] + vec[j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"等長線段對\"><a href=\"#等長線段對\" class=\"headerlink\" title=\"等長線段對\"></a>等長線段對</h3><p><a href=\"https://neoj.sprout.tw/problem/399/\">題目連結</a><br><a href=\"https://neoj.sprout.tw/challenge/178471/\">Submission</a></p>\n<blockquote>\n<p>題目敘述：<br>給定平面上很多個點，求出有幾對線段等長（輸入有重複的點）。</p>\n</blockquote>\n<p>既然n≤500，那就直接枚舉吧，沒啥特別難度。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a,i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep2(i,a,b) for(int i=a;i&lt;b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 1003</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\">pii p[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dist</span><span class=\"params\">(pii a,pii b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = a.x-b.x,y = a.y-b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*x+y*y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"built_in\">rep2</span>(i,<span class=\"number\">0</span>,n)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">    map&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt;mp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> dis = <span class=\"built_in\">dist</span>(p[i],p[j]);</span><br><span class=\"line\">            mp[dis]+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i:mp)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt = i.second;</span><br><span class=\"line\">        ans+=((cnt*(cnt<span class=\"number\">-1</span>))/<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"向左轉向右轉\"><a href=\"#向左轉向右轉\" class=\"headerlink\" title=\"向左轉向右轉\"></a>向左轉向右轉</h3><p><a href=\"https://neoj.sprout.tw/problem/400/\">題目連結</a><br><a href=\"https://neoj.sprout.tw/challenge/178524/\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>給你平面上n個點，依序走訪每一個點，試問走訪過程中共執行幾次的左轉、右轉以及迴轉。</p>\n</blockquote>\n<p>很特別，計算幾何讓電腦可以處理平常我們所看到的平面圖形，可以利用向量內積、外積等方式判斷方向。這一題最重要的就是<strong>方向函數</strong>。傳入3個點$(A,B,O)$，方向函數會會回傳$\\stackrel\\longrightarrow{OA}\\times \\stackrel\\longrightarrow{OB}$ 的正負數值。</p>\n<p>下圖為外積$\\stackrel\\longrightarrow{OA}\\times \\stackrel\\longrightarrow{OB}$ 的結果，當 $\\sin\\theta$的結果為負，也就是下圖的情況，從B走到A就需要往左邊走；反之亦然。<br><img src=\"https://i.imgur.com/eDNRLhm.png\" alt=\"\"></p>\n<p>至於如何判斷當兩個向量的方向呈現一直線時，也就是外積回傳的值為0時（$\\sin\\theta = 0$），應該是同向還是異向呢？這時候就需要搭配向量內積（這我想了很久），因為內積公式是$A\\cdot B = |A||B|\\cos\\theta$，將兩個向量內積之後就可以很明確的判斷到底是朝原本的方向走，還是反方向的行走！</p>\n<div class=\"note info\">\n            <p><strong>內積、外積公式</strong><br>有一點數學，不過蠻有趣的。可以利用$\\sin$與$\\cos$達到計算角度的目的，利用兩者不同的值域，互相搭配，就可以更輕鬆的進行判斷！注意到外積的正負就代表著A到B是順時針或是逆時鐘。</p><script type=\"math/tex; mode=display\">A\\cdot B = |A||B|\\cos\\theta = A_xB_x+A_yB_y\\\\A\\times B = |A||B|\\sin\\theta = A_xB_y-A_yB_x</script><p><br></p><p><strong>方向函數</strong></p><p>當我們要判斷方向的時候，會利用正弦函數，逆時針正、順時針為負進行判斷！<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dir</span><span class=\"params\">(pt a, pt b, pt o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cross = (a - o) ^ (b - o);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(cross) &lt;= eps) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cross &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>注意到此時在判斷是否為平行的時候（cross==0），使用到$fabs()$這個函數，目的是為了避免誤差而導致判斷錯誤，因此需要進行誤差的處理（其實不用也沒差啦，只是這樣嚴謹一點）</p>\n          </div>\n<p>以下是AC Code：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 1003</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &lt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &lt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &gt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &gt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &gt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x-b.x&lt;=eps &amp;&amp; y-b.y&lt;=eps)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>+(pt b) &#123;<span class=\"keyword\">return</span> &#123;x + b.x, y + b.y&#125;;&#125; <span class=\"comment\">//向量相加</span></span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>-(pt b) &#123;<span class=\"keyword\">return</span> &#123;x - b.x, y - b.y&#125;;&#125; <span class=\"comment\">//向量相減</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>^(pt b) &#123;<span class=\"keyword\">return</span> x * b.y - y * b.x;&#125; <span class=\"comment\">//向量外積cross</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>*(pt b) &#123;<span class=\"keyword\">return</span> x * b.x + y * b.y;&#125; <span class=\"comment\">//向量內積dot</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector&lt;pt&gt; a;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dir</span><span class=\"params\">(pt a, pt b, pt o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cross = (a - o) ^ (b - o);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(cross) &lt;= eps) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cross &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    a.<span class=\"built_in\">resize</span>(n+<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,n)cin&gt;&gt;a[i].x&gt;&gt;a[i].y;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = <span class=\"number\">0</span>,left = <span class=\"number\">0</span>,turn = <span class=\"number\">0</span>;</span><br><span class=\"line\">    pt pre = a[<span class=\"number\">1</span>],from = a[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">3</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ori = <span class=\"built_in\">dir</span>(a[i],from,pre);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ori == <span class=\"number\">1</span>)right+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ori == <span class=\"number\">-1</span>)left+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ori == <span class=\"number\">0</span> &amp;&amp; ((a[i]-from)*(from-pre))&lt;<span class=\"number\">0</span>)turn+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        pre = from;from = a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;left&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;right&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;turn&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"線段相交\"><a href=\"#線段相交\" class=\"headerlink\" title=\"線段相交\"></a>線段相交</h3><p><a href=\"https://neoj.sprout.tw/problem/401/\">題目連結</a><br><a href=\"https://neoj.sprout.tw/challenge/178537/\">Submission</a><br>線段相交 = <del>線段香蕉</del>，自動選字永遠都是香蕉，有點煩XDD</p>\n<p>如何判斷兩線段是否相交？首先需要一個函數可以判斷點是否在一個線段上，如此一來就可以判斷端點在另一條線段上的特殊情況。以下程式碼為判斷點$P_o$ 是否在 $\\overline{P_aP_b}$ 上。利用向量外積可以判斷兩線段是否平行，而使用內積公式可以判斷$P_o$是否在線段中，而非線段的兩側！<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">onseg</span><span class=\"params\">(pt a, pt b, pt o)</span></span>&#123;       <span class=\"comment\">//o是否在ab線段上</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cross = (a - o) ^ (b - o);  <span class=\"comment\">//是否平行</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> dot = (a - o) * (b - o);    <span class=\"comment\">//是否在線段中</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (cross == <span class=\"number\">0</span>)&amp;&amp;(dot &lt;= <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>說明：由點$P_o$指向a和b的向量必須呈現180度角（也就是異向），才可確保在ab線段中（跟a,b重合也算是跟ab線段相交）。</p>\n<p>接下來是主要的部分，首先先確認4個端點是否恰好在另外一條線段上，判斷完之後就是處理一般相交的情況。若線段 $\\overline{P_1P_2}$ 與 $\\overline{P_3P_4}$ 相交，則點 $P_1$ 與點 $P_2$ 會在線段$\\overline{P_3P_4}$ 的異側。用方向函數表示：$dir(a,b,c)\\times dir(a,b,d)<0$。確認完兩個線段之後即完成線段相交的判斷！\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Intersection</span><span class=\"params\">(pt a, pt b, pt c, pt d)</span></span>&#123;      <span class=\"comment\">//線段ab是否與cd相交</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">onseg</span>(a,b,c)||<span class=\"built_in\">onseg</span>(a,b,d))<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  <span class=\"comment\">//點c、d是否洽在線段ab上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">onseg</span>(c,d,a)||<span class=\"built_in\">onseg</span>(c,d,b))<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  <span class=\"comment\">//點a、b是否洽在線段cd上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">dir</span>(a,b,c)*<span class=\"built_in\">dir</span>(a,b,d)==<span class=\"number\">-1</span> &amp;&amp; <span class=\"built_in\">dir</span>(c,d,a)*<span class=\"built_in\">dir</span>(c,d,b)==<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;                            <span class=\"comment\">//對於線段兩端點看另外兩端點必須方向相反</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>由下圖可以得到上面的結論，當兩線段相交時，方向函數得到的值（用外積，也就是下圖 $\\theta_1$ 以及 $\\theta_2$）的方向），會呈現一正一負，從兩個相反的方向看同一條線段得出來的結論！<br><img src=\"https://i.imgur.com/b5pW6IS.png\" alt=\"\"></p>\n<p>AC Code:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 1003</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &lt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &lt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &gt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &gt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &gt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x-b.x&lt;=eps &amp;&amp; y-b.y&lt;=eps)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>+(pt b) &#123;<span class=\"keyword\">return</span> &#123;x + b.x, y + b.y&#125;;&#125; <span class=\"comment\">//向量相加</span></span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>-(pt b) &#123;<span class=\"keyword\">return</span> &#123;x - b.x, y - b.y&#125;;&#125; <span class=\"comment\">//向量相減</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>^(pt b) &#123;<span class=\"keyword\">return</span> x * b.y - y * b.x;&#125; <span class=\"comment\">//向量外積cross</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>*(pt b) &#123;<span class=\"keyword\">return</span> x * b.x + y * b.y;&#125; <span class=\"comment\">//向量內積dot</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector&lt;pt&gt; point;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dir</span><span class=\"params\">(pt a, pt b, pt o)</span> </span>&#123;                         <span class=\"comment\">//方向函數</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cross = (a - o) ^ (b - o);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(cross) &lt;= eps) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cross &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">onseg</span><span class=\"params\">(pt a, pt b, pt o)</span></span>&#123;                       <span class=\"comment\">//o是否在ab線段上</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cross = (a - o) ^ (b - o);                  <span class=\"comment\">//是否平行</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> dot = (a - o) * (b - o);                    <span class=\"comment\">//是否在線段中</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (cross == <span class=\"number\">0</span>)&amp;&amp;(dot &lt;= <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Intersection</span><span class=\"params\">(pt a, pt b, pt c, pt d)</span></span>&#123;          <span class=\"comment\">//線段ab是否與cd相交</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">onseg</span>(a,b,c)||<span class=\"built_in\">onseg</span>(a,b,d))<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;      <span class=\"comment\">//點c、d是否洽在線段ab上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">onseg</span>(c,d,a)||<span class=\"built_in\">onseg</span>(c,d,b))<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;      <span class=\"comment\">//點a、b是否洽在線段cd上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">dir</span>(a,b,c)*<span class=\"built_in\">dir</span>(a,b,d)==<span class=\"number\">-1</span> &amp;&amp; <span class=\"built_in\">dir</span>(c,d,a)*<span class=\"built_in\">dir</span>(c,d,b)==<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;                                <span class=\"comment\">//對於線段兩端點看另外兩端點必須方向相反</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    point.<span class=\"built_in\">assign</span>(<span class=\"number\">4</span>,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,<span class=\"number\">3</span>)cin&gt;&gt;point[i].x&gt;&gt;point[i].y;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">Intersection</span>(point[<span class=\"number\">0</span>],point[<span class=\"number\">1</span>],point[<span class=\"number\">2</span>],point[<span class=\"number\">3</span>]))&#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> cout&lt;&lt;<span class=\"string\">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t;cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"TIOJ-1178-Convex-Hull\"><a href=\"#TIOJ-1178-Convex-Hull\" class=\"headerlink\" title=\"TIOJ 1178 Convex Hull\"></a>TIOJ 1178 Convex Hull</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1178\">題目連結</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/262532\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>給定n個二維平面的點，找出位在凸包上的所有點的個數</p>\n</blockquote>\n<p>最小凸多邊形 = 凸包，要找出能包住所有點的最小凸多邊形，簡稱凸包。聽說最好寫的凸包演算法是：Andrew’s Monotone Chain，翻成中文叫做Andrew’s 單調鍊？有一點單調+鍊的味道。下圖是我用照片合成起來的GIF，大致模擬出使用Andrew’s Monotone Chain 找凸包的方法。</p>\n<p><img src=\"https://i.imgur.com/YUOC9xZ.gif\" alt=\"\"></p>\n<div class=\"note default\">\n            <p><strong>Andrew’s Monotone Chain</strong><br>這個演算法的時間複雜度是 $O(n\\log n)$，空間複雜度 $O(n)$，資料說它可以解決了凸包有重疊的點、共線的點、退化成線段和點的情況。它的名字叫做「單調鍊」，要維護一個有點像單調隊列的東西，對於在容器中第 $i$ 個位置的點都滿足 $\\stackrel\\longrightarrow{P<em>i P</em>{i+1}}\\times \\stackrel\\longrightarrow{P<em>{i+1} P</em>{i+2}} &gt; 0$ ，如果有點做外積後的結果小於等於0，則它會被pop掉（這是依照上圖逆時針完成凸包的描述，如果方向相反則會變號）。<br><br></p><p>以下是此演算法的執行步驟：</p><ol><li>先把所有的點按照 $(x,y)$ 排序</li><li>將下凸包圍出來，有點像維護單調隊列，對所有新加入的點i計算點i-2、i-1與i之間的外積，如果不符合情況代表圍不到新加入的點，需要將舊的點pop出來</li><li>將原本已經排序好的點逆序</li><li>再把上凸包由x座標大到小圍出來，將上下合併就是凸包了（必須注意起終點被push的次數問題）！</li></ol>\n          </div>\n<p>一般會用一個vector儲存在凸包上面的點（不包含在邊上的點，只有位於轉折點的點），在頭尾的部分（x座標最大與最小）需要特別處理，讓每一個點最多近到vector一次。</p>\n<div class=\"note success\">\n            <p><strong>實作細節</strong><br>以下是確認是否需要將vector中元素pop出來的關鍵，對向量$\\stackrel\\longrightarrow{OA}\\times \\stackrel\\longrightarrow{OB}$ 做外積的結果，必須排除外積結果為0的情況，如果將0也納入，會造成一個點被push進去很多次，在數量和計算上出現問題。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(pt a,pt b,pt o)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cross = (a - o)^(b - o);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cross &gt;= <span class=\"number\">0</span>;         <span class=\"comment\">//這裡很關鍵，別吃WA</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>除此之外，上凸包在範圍限制上是需要注意的。假設x座標最大的點i，當在圍上凸包的過程中i是不可以被pop出去的，因此vector的大小必須大於下凸包的大小。</p><p>凸包使用第i-1跟第i個點的向量去看第i到第i+1個點的向量，決定一個點要不要被推入vector中。當我們逆序從x座標最大的點往前看時，要確保每一輪結束之後在i點後都必須要有至少一個點，設定hull.size() &gt; down_hull的原因是防止在下凸包的點被圍上凸包的過程更新到。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> down_hull = hull.<span class=\"built_in\">size</span>();    <span class=\"comment\">//圍上凸包的程式碼片段</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i: p)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(hull.<span class=\"built_in\">size</span>() &gt; down_hull </span><br><span class=\"line\">        &amp;&amp; <span class=\"built_in\">check</span>(i,hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))&#123;</span><br><span class=\"line\">        hull.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hull.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n          </div>\n<p>以下是AC Code:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100001</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &lt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &lt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &gt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &gt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &gt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x-b.x&lt;=eps &amp;&amp; y-b.y&lt;=eps)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>+(pt b) &#123;<span class=\"keyword\">return</span> &#123;x + b.x, y + b.y&#125;;&#125; <span class=\"comment\">//向量相加</span></span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>-(pt b) &#123;<span class=\"keyword\">return</span> &#123;x - b.x, y - b.y&#125;;&#125; <span class=\"comment\">//向量相減</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>^(pt b) &#123;<span class=\"keyword\">return</span> x * b.y - y * b.x;&#125; <span class=\"comment\">//向量外積cross</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>*(pt b) &#123;<span class=\"keyword\">return</span> x * b.x + y * b.y;&#125; <span class=\"comment\">//向量內積dot</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pt a, pt b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.x == b.x)<span class=\"keyword\">return</span> a.y &lt; b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x &lt; b.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vector&lt;pt&gt; p;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(pt a,pt b,pt o)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cross = (a - o)^(b - o);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cross &gt;= <span class=\"number\">0</span>;                              <span class=\"comment\">//這裡很關鍵，別吃WA</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;pt&gt; <span class=\"title\">convex_hull</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    vector&lt;pt&gt; hull;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(p.<span class=\"built_in\">begin</span>(),p.<span class=\"built_in\">end</span>(),cmp);       <span class=\"comment\">//首先對x進行排序</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : p)&#123;                   <span class=\"comment\">//依序走訪，如果遇到外積&lt;0則不在凸包上</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(hull.<span class=\"built_in\">size</span>()&gt;=<span class=\"number\">2</span> &amp;&amp; <span class=\"built_in\">check</span>(i,hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))&#123;</span><br><span class=\"line\">            hull.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hull.<span class=\"built_in\">push_back</span>(i);             <span class=\"comment\">//在凸包hull的每一點都符合外積小於0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> down_hull = hull.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    hull.<span class=\"built_in\">pop_back</span>();                   <span class=\"comment\">//x最大的點會在凸包上，不用做兩次先pop一次</span></span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(p.<span class=\"built_in\">begin</span>(),p.<span class=\"built_in\">end</span>());        <span class=\"comment\">//將所有點逆序之後做一次上面的凸包</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i: p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(hull.<span class=\"built_in\">size</span>() &gt; down_hull &amp;&amp; <span class=\"built_in\">check</span>(i,hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))&#123;</span><br><span class=\"line\">            hull.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hull.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hull;                       <span class=\"comment\">//起點會經過兩次，剛好來算有向面積</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    p.<span class=\"built_in\">assign</span>(n,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">    vector&lt;pt&gt; hull = <span class=\"built_in\">convex_hull</span>();</span><br><span class=\"line\">    cout&lt;&lt;hull.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"最小凸多邊形\"><a href=\"#最小凸多邊形\" class=\"headerlink\" title=\"最小凸多邊形\"></a>最小凸多邊形</h3><p><a href=\"https://neoj.sprout.tw/problem/402/\">題目連結</a><br><a href=\"https://neoj.sprout.tw/challenge/178589/\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>找出二維平面上n個點的凸包所圍出來的面積為何？</p>\n</blockquote>\n<p>跟上一題類似，在找到全部在凸包上面的點後，就可以利用<strong>有向面積</strong>把凸包面積算出來，有一個公式可以計算多邊形面積，利用外積得到正負值，轉一圈後得到面積！對於多邊形的頂點 $P<em>0,P_1,…,P</em>{n-1},P_n=P_0$ 的面積如下：</p>\n<script type=\"math/tex; mode=display\">Area = \\frac{1}{2}\\sum_{i=0}^{n-1}\\stackrel\\longrightarrow{P_i}\\times \\stackrel\\longrightarrow{P_{i+1}}</script><p>其中最後一個點會回到起點，形成一個封閉的迴路。</p>\n<p>以下是AC Code：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100001</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &lt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &lt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &gt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &gt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &gt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x-b.x&lt;=eps &amp;&amp; y-b.y&lt;=eps)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>+(pt b) &#123;<span class=\"keyword\">return</span> &#123;x + b.x, y + b.y&#125;;&#125; <span class=\"comment\">//向量相加</span></span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>-(pt b) &#123;<span class=\"keyword\">return</span> &#123;x - b.x, y - b.y&#125;;&#125; <span class=\"comment\">//向量相減</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>^(pt b) &#123;<span class=\"keyword\">return</span> x * b.y - y * b.x;&#125; <span class=\"comment\">//向量外積cross</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>*(pt b) &#123;<span class=\"keyword\">return</span> x * b.x + y * b.y;&#125; <span class=\"comment\">//向量內積dot</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pt a, pt b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.x == b.x)<span class=\"keyword\">return</span> a.y &lt; b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x &lt; b.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;pt&gt; p;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(pt a,pt b,pt o)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cross = (a - o)^(b - o);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cross &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;pt&gt; <span class=\"title\">convex_hull</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    vector&lt;pt&gt; hull;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(p.<span class=\"built_in\">begin</span>(),p.<span class=\"built_in\">end</span>(),cmp);       <span class=\"comment\">//首先對x進行排序</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : p)&#123;                   <span class=\"comment\">//依序走訪，如果遇到外積&lt;0則不在凸包上</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(hull.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">check</span>(i,hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))&#123;</span><br><span class=\"line\">            hull.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hull.<span class=\"built_in\">push_back</span>(i);             <span class=\"comment\">//在凸包hull的每一點都符合外積小於0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> down_hull = hull.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    hull.<span class=\"built_in\">pop_back</span>();                   <span class=\"comment\">//x最大的點會在凸包上，不用做兩次先pop一次</span></span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(p.<span class=\"built_in\">begin</span>(),p.<span class=\"built_in\">end</span>());        <span class=\"comment\">//將所有點逆序之後做一次上面的凸包</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i: p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(hull.<span class=\"built_in\">size</span>() &gt; down_hull &amp;&amp; <span class=\"built_in\">check</span>(i,hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))&#123;</span><br><span class=\"line\">            hull.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hull.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hull;                       <span class=\"comment\">//起點會經過兩次，剛好來算有向面積</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        cin&gt;&gt;n;</span><br><span class=\"line\">        p.<span class=\"built_in\">assign</span>(n,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">        vector&lt;pt&gt; hull = <span class=\"built_in\">convex_hull</span>();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> area = <span class=\"number\">0</span>,len = hull.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;len<span class=\"number\">-1</span>;i++)area += (hull[i]^hull[i+<span class=\"number\">1</span>]);</span><br><span class=\"line\">        cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">1</span>)&lt;&lt;((ld)area/<span class=\"number\">2</span>)&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"來吧，遊戲開始了。\"><a href=\"#來吧，遊戲開始了。\" class=\"headerlink\" title=\"來吧，遊戲開始了。\"></a>來吧，遊戲開始了。</h3><p><a href=\"https://neoj.sprout.tw/problem/790/\">題目連結</a><br><a href=\"https://neoj.sprout.tw/challenge/178691/\">Submission</a><br><a href=\"https://www.geogebra.org/graphing/h4fxdquw\">GGB模擬</a></p>\n<blockquote>\n<p>題目敘述<br>給你二維平面上n個點(n≤2400)，每一個點座標皆不相同，求出總共可以圍出多少個三角形？</p>\n</blockquote>\n<p>這是NEOJ上的加分題，好像是一個題組吧，反正總共有三題，這是第一題。如果 $O(n^3)$ 的枚舉，複雜度會爆炸（量級約$10^{10}$），根據電神的說法，這一題要用極角排序以及雙指標找到共線，接著就可以利用排列組合把因為共線而不能形成三角形的組合扣掉，就是答案了。</p>\n<p><img src=\"https://i.imgur.com/t5TF96I.png\" alt=\"\"></p>\n<p>這一題的核心概念是找共線，具體來說的作法是枚舉每一個點的同時，以它為原點對其他的點進行排序，如果遇到有相同的極角座標表示這些點共線，同時利用陣列cnt[x]統計共線點數為x的線段總共有幾條。</p>\n<p>以下的GIF就是大致上程式執行的樣子。因為一條長度為x的線段會因為枚舉x次的關係，在最後扣掉的情況會重複x次因此需要除掉。</p>\n<p><img src=\"https://i.imgur.com/MVfEx4i.gif\" alt=\"\"></p>\n<div class=\"note primary\">\n            <p><strong>共線與三角形</strong></p><p>一般情況下（任三點不共線），總共可以形成 $C^n_3$ 個三角形，如果有一條m個點共線的情況下（其他點不共線），則可以形成的三角形數量就必須扣除共線限制的情況，變成 $C^n_3-C^m_3$ 個三角形。</p>\n          </div>\n<p>時間複雜度為：枚舉每一個點 $O(n)$，極角排序 $O(n\\log n)$，總時間複雜度 $O(n^2\\log n)$</p>\n<div class=\"note default\">\n            <p><strong>實作小細節</strong></p><p><strong>1. 維護共線連續區間</strong></p><p>我們要想辦法讓有共線的點們所在位置是一個連續的位置。三個點共線可能為在對角線的象限中，也就是點差了180度，如此一來就沒辦法讓共線的點為在連續的區間。為了達到這個目的，我們將所有位於下半平面的點都移到上半平面（在上半平面找到有相同 $\\tan\\theta$ 值的位置），接著就能利用雙指針找極角座標排序後有相同極角的區間之最大值！</p><p><strong>2. 特例判斷</strong></p><p>如果有一點y座標為0但x座標為負，要將其移到x軸正向的地方，不能把這種情況涵蓋為一般情況，否則原本在x軸正向的點會被移到x軸負向，沒有達到預期的效果。</p>\n          </div>\n<p>以下是AC Code：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100001</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &lt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &lt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &gt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &gt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &gt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x-b.x == <span class=\"number\">0</span> &amp;&amp; y-b.y == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>+(pt b) &#123;<span class=\"keyword\">return</span> &#123;x + b.x, y + b.y&#125;;&#125; <span class=\"comment\">//向量相加</span></span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>-(pt b) &#123;<span class=\"keyword\">return</span> &#123;x - b.x, y - b.y&#125;;&#125; <span class=\"comment\">//向量相減</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>^(pt b) &#123;<span class=\"keyword\">return</span> x * b.y - y * b.x;&#125; <span class=\"comment\">//向量外積cross</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>*(pt b) &#123;<span class=\"keyword\">return</span> x * b.x + y * b.y;&#125; <span class=\"comment\">//向量內積dot</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;pt&gt; p;</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; cnt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pt a, pt b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> f1 = a &lt; pt&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> f2 = b &lt; pt&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f1 != f2)<span class=\"keyword\">return</span> f1 &lt; f2;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a ^ b) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//逆時針將點進行極角排序，從270度開始逆時針</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用cnt[i]統計區間長度為i的線段數量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(pt id)</span></span>&#123;</span><br><span class=\"line\">    vector&lt;pt&gt; pp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : p)&#123;                         <span class=\"comment\">//以id為原點</span></span><br><span class=\"line\">        pt cur = i-id;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur == pt&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.y &lt; <span class=\"number\">0</span>)&#123;cur.x = -cur.x;cur.y = -cur.y;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.x &lt; <span class=\"number\">0</span> &amp;&amp; cur.y==<span class=\"number\">0</span>)&#123;cur.x = -cur.x;&#125;</span><br><span class=\"line\">        pp.<span class=\"built_in\">push_back</span>(cur);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(pp),cmp);                      <span class=\"comment\">//將id當作原點進行排序</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> p1 = <span class=\"number\">0</span>,p2 = <span class=\"number\">0</span>,len = pp.<span class=\"built_in\">size</span>();      <span class=\"comment\">//雙指針找共線區間</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p1 &lt; n<span class=\"number\">-1</span>)&#123;                        <span class=\"comment\">//最大化區間</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p2+<span class=\"number\">1</span> &lt; len &amp;&amp; (pp[p1]^pp[p2+<span class=\"number\">1</span>]) == <span class=\"number\">0</span>)p2++;</span><br><span class=\"line\">        cnt[p2-p1+<span class=\"number\">2</span>]+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        p1 = p2+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    p.<span class=\"built_in\">assign</span>(n,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    cnt.<span class=\"built_in\">resize</span>(n+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)<span class=\"built_in\">solve</span>(p[i]);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = (n*(n<span class=\"number\">-1</span>)*(n<span class=\"number\">-2</span>))/<span class=\"number\">6</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">3</span>,n)ans-=(cnt[i]*(i<span class=\"number\">-1</span>)*(i<span class=\"number\">-2</span>))/<span class=\"number\">6</span>;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"遊戲：最終回\"><a href=\"#遊戲：最終回\" class=\"headerlink\" title=\"遊戲：最終回\"></a>遊戲：最終回</h3><p><a href=\"https://neoj.sprout.tw/problem/792/\">題目連結</a><br><a href=\"https://neoj.sprout.tw/challenge/178786/\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>共有n個二維平面上的格子點，這些點會形成簡單多邊形。試求或在簡單多邊形內部的格線總長（包括垂直與水平格線）。</p>\n</blockquote>\n<p>這邊有一個不嚴謹的推導方式，不過他是正確的。令多邊形內部格線長度為S，多邊形的邊落在的格線長度為T，多邊形面積T，則有以下關係式：</p>\n<script type=\"math/tex; mode=display\">S = 2A-\\frac{T}{2}</script><p>詳細的公式推導可以可以參閱下圖，平行四邊形（斜線部分）內部<strong>垂直</strong>的格線長度為： 大矩形 $(x_1+x_2)(y_1+y_2)$ 扣掉左右上下共四個三角形兩兩拼成一個矩形 $x_1y_1$ 以及 $x_2y_2$，還有左上右下兩個正方形 $2x_2y_1$，整理之後會發現其實跟面積是一樣的。對於垂直部分也是類似的情況。</p>\n<p><img src=\"https://i.imgur.com/wemDPMp.jpg\" alt=\"\"></p>\n<p>好像隱約發現到面積與格線長度有十分密切的關係，算出面積，把在格線上的邊進行特判扣掉，就可以得到格線長度。</p>\n<p>這一題我想了很久，一直看不出來關係式到底長怎樣，直到大神提點才發現原來有這樣的關係，我反應好遲鈍:cry:</p>\n<p><img src=\"https://i.imgur.com/Fy1wSky.png\" alt=\"\"></p>\n<p>以下是AC Code：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100001</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &lt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &lt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &gt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &gt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &gt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x-b.x == <span class=\"number\">0</span> &amp;&amp; y-b.y == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>+(pt b) &#123;<span class=\"keyword\">return</span> &#123;x + b.x, y + b.y&#125;;&#125; <span class=\"comment\">//向量相加</span></span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>-(pt b) &#123;<span class=\"keyword\">return</span> &#123;x - b.x, y - b.y&#125;;&#125; <span class=\"comment\">//向量相減</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>^(pt b) &#123;<span class=\"keyword\">return</span> x * b.y - y * b.x;&#125; <span class=\"comment\">//向量外積cross</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>*(pt b) &#123;<span class=\"keyword\">return</span> x * b.x + y * b.y;&#125; <span class=\"comment\">//向量內積dot</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;pt&gt; p;</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt;  cnt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,edge,ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> area = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        area += (p[i]^p[i+<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p[i].y == p[i+<span class=\"number\">1</span>].y)edge += <span class=\"built_in\">abs</span>(p[i].x-p[i+<span class=\"number\">1</span>].x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p[i].x == p[i+<span class=\"number\">1</span>].x)edge += <span class=\"built_in\">abs</span>(p[i].y-p[i+<span class=\"number\">1</span>].y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    area = <span class=\"built_in\">abs</span>(area);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> area;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin&gt;&gt;n)&#123;</span><br><span class=\"line\">        p.<span class=\"built_in\">assign</span>(n+<span class=\"number\">1</span>,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">        edge = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">        p[n] = p[<span class=\"number\">0</span>];</span><br><span class=\"line\">        ans = <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">        cout&lt;&lt;ans-((ld)edge/<span class=\"number\">2</span>)&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"TIOJ-1205-直角三角形\"><a href=\"#TIOJ-1205-直角三角形\" class=\"headerlink\" title=\"TIOJ 1205 直角三角形\"></a>TIOJ 1205 直角三角形</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1205\">題目連結</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/262842\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>給你N（N≤1500）個座標平面上的點，請問總共可形成多少個直角三角形呢？</p>\n</blockquote>\n<p>從極角排序後的第一個點開始逆時針進行雙指針的枚舉。這邊使用到一個很特別的手法，對於共線的情況我們先透過預處理的方式將共線的點合併起來，並用cnt[x]陣列紀錄第x個點是由幾個點所合併起來的，如此一來，在進行計算的時候就不會有共線要分別處理的問題（不需擔心是不是可以跟之前的點形成直角三角形，因為相同斜率的點已經被合併剩下一個），直接將數量相乘就可以知道直角三角形的數量！</p>\n<p>時間複雜度：枚舉所有點 $O(n)\\times$ 進行極角排序$O(n\\log n)$ 以及雙指標$O(n)$，總時間複雜度為 $O(n^2\\log n)$。</p>\n<div class=\"note info\">\n            <p><strong>實作小細節</strong></p><p>雙指針進行枚舉的過程中，很有可能會指標指向的索引值會超出範圍。解決的方法有兩種：</p><ol><li>超出了即代表繞了一圈，只需要對索引值取餘數即可。</li><li>除了取餘數的方法之外，其實也可以直接在點集後面將所有點再推入一次，讓角度從360延伸成720度，就不會有超出範圍的問題！</li></ol>\n          </div>\n<p>以下是AC Code：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100001</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &lt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &lt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &gt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &gt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &gt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x-b.x == <span class=\"number\">0</span> &amp;&amp; y-b.y == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>+(pt b) &#123;<span class=\"keyword\">return</span> &#123;x + b.x, y + b.y&#125;;&#125; <span class=\"comment\">//向量相加</span></span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>-(pt b) &#123;<span class=\"keyword\">return</span> &#123;x - b.x, y - b.y&#125;;&#125; <span class=\"comment\">//向量相減</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>^(pt b) &#123;<span class=\"keyword\">return</span> x * b.y - y * b.x;&#125; <span class=\"comment\">//向量外積cross</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>*(pt b) &#123;<span class=\"keyword\">return</span> x * b.x + y * b.y;&#125; <span class=\"comment\">//向量內積dot</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;pt&gt; p,temp,pp;</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt;  cnt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pt a, pt b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> f1 = a &lt; pt&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> f2 = b &lt; pt&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f1 != f2)<span class=\"keyword\">return</span> f1 &lt; f2;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a ^ b) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//逆時針將點進行極角排序，從270度開始逆時針</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//O(n)枚舉每個點當直角情況</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">solve</span><span class=\"params\">(pt id)</span></span>&#123;</span><br><span class=\"line\">    pp.<span class=\"built_in\">clear</span>();cnt.<span class=\"built_in\">clear</span>();temp.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(pt i : p)&#123;</span><br><span class=\"line\">        pt cur = i - id;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur == pt&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        temp.<span class=\"built_in\">push_back</span>(cur);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(temp),cmp);            <span class=\"comment\">//以id為原點進行極角排序</span></span><br><span class=\"line\">    pp.<span class=\"built_in\">push_back</span>(temp[<span class=\"number\">0</span>]);          <span class=\"comment\">//pp每一角度只存至多一個點</span></span><br><span class=\"line\">    cnt.<span class=\"built_in\">push_back</span>(<span class=\"number\">1</span>);               <span class=\"comment\">//考慮每個點共線情況</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = temp.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,len<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cross = temp[i]^temp[i<span class=\"number\">-1</span>],dot = temp[i]*temp[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cross == <span class=\"number\">0</span> &amp;&amp; dot &gt;= <span class=\"number\">0</span>)cnt[cnt.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>] += <span class=\"number\">1</span>;   <span class=\"comment\">//共線數量+=1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;pp.<span class=\"built_in\">push_back</span>(temp[i]);cnt.<span class=\"built_in\">push_back</span>(<span class=\"number\">1</span>);&#125;      <span class=\"comment\">//非共線設定數量為1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    len = pp.<span class=\"built_in\">size</span>();            <span class=\"comment\">//考慮橫跨一周的情況</span></span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,len<span class=\"number\">-1</span>)&#123;             <span class=\"comment\">//雙指針i,p1可能會超過一圈</span></span><br><span class=\"line\">        pp.<span class=\"built_in\">push_back</span>(pp[i]);    <span class=\"comment\">//將點再繞一圈</span></span><br><span class=\"line\">        cnt.<span class=\"built_in\">push_back</span>(cnt[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>,p1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, len<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p1 &lt; i+len &amp;&amp; (pp[i]^pp[p1]) &gt;= <span class=\"number\">0</span> &amp;&amp; (pp[i]*pp[p1]) &gt; <span class=\"number\">0</span>)p1 += <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//夾銳角的情況要p1+=1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((pp[i]^pp[p1]) &gt; <span class=\"number\">0</span> &amp;&amp; (pp[i]*pp[p1]) == <span class=\"number\">0</span>)ans += cnt[i]*cnt[p1];</span><br><span class=\"line\">        <span class=\"comment\">//正向的直角三角形，若共線則兩者數量相乘</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin&gt;&gt;n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        p.<span class=\"built_in\">assign</span>(n,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            ans += <span class=\"built_in\">solve</span>(p[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"TIOJ-1105-H-PS3\"><a href=\"#TIOJ-1105-H-PS3\" class=\"headerlink\" title=\"TIOJ 1105 H.PS3\"></a>TIOJ 1105 H.PS3</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1105\">題目連結</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/262930\">Submission $O(n^2)$</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/262947\">Submission $O(n\\log n)$</a></p>\n<blockquote>\n<p>題目敘述<br>給你平面上N個點（N≤3000），請求出最遠點對的索引值（小的在前、大的在後）</p>\n</blockquote>\n<p>我做了一份<a href=\"/hVplrqxCRdGiMkn2lwXGAA\">最近點對：不同複雜度之解決方式</a>的筆記，共有四種方法可以解決那個問題，這一題要求的是最遠點對，作法與最近點對其實差蠻遠的。由上幾題知道凸包的求法，因為凸包是可以圍住所有點的多邊形，因此最遠點對也應該在凸包上，而且所在的位置會為在凸包的兩側上（如果不落在凸包上，一定可以把點向兩側延伸到凸包上，且移動過後的點對距離一定比原始的點對距離大）。</p>\n<p>找完凸包之後，可以用旋轉卡尺的方式尋找最遠點對。想像兩條平行線中間夾著凸包，逆時鐘旋轉繞行凸包一圈，過程不斷更新最遠點對的距離。在實作上兩條平行線可以被想像成由 $P<em>i$ 指向 $P</em>{i+1}$ 的向量，透過外積三角形面積公式決定卡尺該如何移動。</p>\n<script type=\"math/tex; mode=display\">AREA = |\\overrightarrow{AB}\\times \\overrightarrow{AC}|</script><p>以下圖為例，我們要找 $\\overline{HM}$ 為底可以形成的最大三角形面積的頂點，因為在同底的情況下面積就代表點與邊的垂直距離，最大的垂直距離意味著這條底邊可以垂直延伸的最遠距離。因為凸包必定是凸多邊形，因此三角形的面積會呈現單峰函數，因此只需要從下一個三角形面積的大小，決定雙指針中比較快的指標的移動情況。</p>\n<p><img src=\"https://i.imgur.com/SXv0gfN.png\" alt=\"\"></p>\n<p>如果仔細來看，以下圖為例，當前較快的指標指向的位置是 $D$ 點，考慮一條與與 $\\overline{HM}$ 平行的直線，若下一個點 $J$ 在平行線段的另外一側，則將指標移往 $J$ 點。可能會有一個疑問，如果比較下圖的線段長度，會發現到 $\\overline{DH}$ 的長度比經過 $J$ 點的兩條線段都還要長，那為何還要更新至 $J$ 點？舉這個例子不太好，不過可以想像當旋轉卡尺轉到以 $\\overline{FH}$ 為底的時候，會將最遠點對的距離更新成 $\\overline{HD}$ 的長度。如果今天 $H$ 的左側又多加了一個新點 $P$，則最遠點對會變成 $\\overline{PD}$ 的距離。</p>\n<p>簡單來說，最遠點對一定會發生對角的凸包點上面，即使現在以 $\\overline{HM}$ 為底最遠點並非 $J$ 而是 $D$ ，但在旋轉卡尺旋轉到 $\\overline{FH}$ 時就能將距離更新成 $\\overline{HD}$ 的距離。</p>\n<p><img src=\"https://i.imgur.com/6Jeg2U8.png\" alt=\"\"></p>\n<div class=\"note success\">\n            <p><strong>實作小細節</strong></p><p>這一題有點麻煩，因為他要輸出的是最遠點對的索引值，而不是最遠點對之間的距離。在尋找凸包的過程中，會對所有點進行排序，因此原有的索引值順序會被打亂，需要在一開始輸入的時後就好好維護每一個座標的索引值。</p>\n          </div>\n<p>以下是AC Code：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100001</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y,ind;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &lt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &lt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &gt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &gt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &gt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x-b.x == <span class=\"number\">0</span> &amp;&amp; y-b.y == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>+(pt b) &#123;<span class=\"keyword\">return</span> &#123;x + b.x, y + b.y&#125;;&#125; <span class=\"comment\">//向量相加</span></span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>-(pt b) &#123;<span class=\"keyword\">return</span> &#123;x - b.x, y - b.y&#125;;&#125; <span class=\"comment\">//向量相減</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>^(pt b) &#123;<span class=\"keyword\">return</span> x * b.y - y * b.x;&#125; <span class=\"comment\">//向量外積cross</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>*(pt b) &#123;<span class=\"keyword\">return</span> x * b.x + y * b.y;&#125; <span class=\"comment\">//向量內積dot</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dis</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> x*x + y*y;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;pt&gt; p,hull;</span><br><span class=\"line\">pt pt_ans;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,h;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(pt a, pt b, pt o)</span></span>&#123;</span><br><span class=\"line\">    pt aa = a - o;</span><br><span class=\"line\">    pt bb = b - o;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (aa ^ bb) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check2</span><span class=\"params\">(pt a,pt b,pt c,pt d)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> aa = <span class=\"built_in\">abs</span>((a - c)^(b - c));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> bb = <span class=\"built_in\">abs</span>((a - d)^(b - d));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> aa &lt; bb;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pt a, pt b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a == b)<span class=\"keyword\">return</span> a.ind &lt; b.ind;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.x == b.x)<span class=\"keyword\">return</span> a.y &lt; b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x &lt; b.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">convex_hull</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">stable_sort</span>(<span class=\"built_in\">all</span>(p),cmp);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-2</span>)<span class=\"keyword\">if</span>(p[i] == p[i+<span class=\"number\">1</span>])p[i+<span class=\"number\">1</span>].ind = p[i].ind;</span><br><span class=\"line\">    hull.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(hull.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">check</span>(i,hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))</span><br><span class=\"line\">            hull.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        hull.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sz = hull.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    h = hull.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;</span><br><span class=\"line\">    hull.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(<span class=\"built_in\">all</span>(p));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(hull.<span class=\"built_in\">size</span>() &gt; sz &amp;&amp; <span class=\"built_in\">check</span>(i,hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))</span><br><span class=\"line\">            hull.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        hull.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hull.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>,d = h,sz = hull.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,sz<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"built_in\">check2</span>(hull[i],hull[(i+<span class=\"number\">1</span>)%sz],hull[d],hull[(d+<span class=\"number\">1</span>)%sz]))</span><br><span class=\"line\">            d = (d+<span class=\"number\">1</span>)%sz;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans &lt; (hull[i]-hull[d]).<span class=\"built_in\">dis</span>())&#123;</span><br><span class=\"line\">            ans = (hull[i]-hull[d]).<span class=\"built_in\">dis</span>();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> a = hull[i].ind,b = hull[d].ind;<span class=\"keyword\">if</span>(a &gt; b)<span class=\"built_in\">swap</span>(a,b);</span><br><span class=\"line\">            pt_ans = &#123;a,b&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ans == (hull[i]-hull[d]).<span class=\"built_in\">dis</span>())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> a = hull[i].ind,b = hull[d].ind;<span class=\"keyword\">if</span>(a &gt; b)<span class=\"built_in\">swap</span>(a,b);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(pt_ans &gt; (pt)&#123;a,b&#125;)pt_ans = &#123;a,b&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans &lt; (hull[(i+<span class=\"number\">1</span>)%sz]-hull[d]).<span class=\"built_in\">dis</span>())&#123;</span><br><span class=\"line\">            ans = (hull[(i+<span class=\"number\">1</span>)%sz]-hull[d]).<span class=\"built_in\">dis</span>();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> a = hull[(i+<span class=\"number\">1</span>)%sz].ind,b = hull[d].ind;<span class=\"keyword\">if</span>(a &gt; b)<span class=\"built_in\">swap</span>(a,b);</span><br><span class=\"line\">            pt_ans = &#123;a,b&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ans == (hull[(i+<span class=\"number\">1</span>)%sz]-hull[d]).<span class=\"built_in\">dis</span>())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> a = hull[(i+<span class=\"number\">1</span>)%sz].ind,b = hull[d].ind;<span class=\"keyword\">if</span>(a &gt; b)<span class=\"built_in\">swap</span>(a,b);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(pt_ans &gt; (pt)&#123;a,b&#125;)pt_ans = &#123;a,b&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin&gt;&gt;n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        pt_ans = (pt)&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        p.<span class=\"built_in\">resize</span>(n,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">            p[i].ind = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">convex_hull</span>();</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">        cout&lt;&lt;pt_ans.x&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;pt_ans.y&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">5</span></span><br><span class=\"line\"><span class=\"comment\">9 1</span></span><br><span class=\"line\"><span class=\"comment\">1 5</span></span><br><span class=\"line\"><span class=\"comment\">1 2</span></span><br><span class=\"line\"><span class=\"comment\">9 9</span></span><br><span class=\"line\"><span class=\"comment\">5 1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ZJ-b288-夏季大三角\"><a href=\"#ZJ-b288-夏季大三角\" class=\"headerlink\" title=\"ZJ b288: 夏季大三角\"></a>ZJ b288: 夏季大三角</h3><p><a href=\"https://zerojudge.tw/ShowProblem?problemid=b288\">題目連結</a><br><a href=\"https://zerojudge.tw/ShowThread?postid=26741&amp;reply=0\">解題報告</a></p>\n<blockquote>\n<p>題目敘述<br>請輸出在N個二維平面的座標，挑選3顆出來成組成三角形的最大面積</p>\n</blockquote>\n<p>比較一下兩個複雜度的作法，第一個是使用 $O(n^3)$ 枚舉所有的點並計算面積，所需要的時間是0.4sec，而且需要特別注意不能使用到海龍公式計算面積，否則有很大的機會會超時。</p>\n<p><img src=\"https://i.imgur.com/oN26CR4.png\" alt=\"\"></p>\n<p>以下作法是先進行 $O(n\\log n)$ 找尋凸包，因為面積最大的三角形必定三個點都在凸包上，因此用 $n^2$ 的時間進行枚舉，旋轉卡尺（類似最遠點對的作法）找面積最大的第三個點，就能在總時間複雜度 $O(n^2)$ 完成！（會再更少，因為只要枚舉凸包上的點）</p>\n<p><img src=\"https://i.imgur.com/SUwVRWv.png\" alt=\"\"></p>\n<p>以下是AC Code：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100001</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    ld x,y;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &lt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &lt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &gt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &gt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &gt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">abs</span>(x-b.x)&lt;=eps &amp;&amp; <span class=\"built_in\">abs</span>(y-b.y)&lt;=eps)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>+(pt b) &#123;<span class=\"keyword\">return</span> &#123;x + b.x, y + b.y&#125;;&#125; <span class=\"comment\">//向量相加</span></span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>-(pt b) &#123;<span class=\"keyword\">return</span> &#123;x - b.x, y - b.y&#125;;&#125; <span class=\"comment\">//向量相減</span></span><br><span class=\"line\">    ld <span class=\"keyword\">operator</span>^(pt b) &#123;<span class=\"keyword\">return</span> x * b.y - y * b.x;&#125; <span class=\"comment\">//向量外積cross</span></span><br><span class=\"line\">    ld <span class=\"keyword\">operator</span>*(pt b) &#123;<span class=\"keyword\">return</span> x * b.x + y * b.y;&#125; <span class=\"comment\">//向量內積dot</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pt a, pt b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.x == b.x)<span class=\"keyword\">return</span> a.y &lt; b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x &lt; b.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vector&lt;pt&gt; p,hull;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,t,h;</span><br><span class=\"line\">ld ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(pt a,pt b,pt o)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cross = (a - o)^(b - o);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cross &gt;= <span class=\"number\">0</span>;                              <span class=\"comment\">//這裡很關鍵，別吃WA</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check2</span><span class=\"params\">(pt a,pt b,pt c,pt d)</span></span>&#123;</span><br><span class=\"line\">    ld aa = (a - c)^(b - c);</span><br><span class=\"line\">    ld bb = (a - d)^(b - d);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> aa &lt; bb;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ld <span class=\"title\">area</span><span class=\"params\">(pt a,pt b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">abs</span>(a^b)/<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">convex_hull</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    hull.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(p.<span class=\"built_in\">begin</span>(),p.<span class=\"built_in\">end</span>(),cmp);       <span class=\"comment\">//首先對x進行排序</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : p)&#123;                   <span class=\"comment\">//依序走訪，如果遇到外積&lt;0則不在凸包上</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(hull.<span class=\"built_in\">size</span>()&gt;=<span class=\"number\">2</span> &amp;&amp; <span class=\"built_in\">check</span>(i,hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))&#123;</span><br><span class=\"line\">            hull.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hull.<span class=\"built_in\">push_back</span>(i);             <span class=\"comment\">//在凸包hull的每一點都符合外積小於0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> down_hull = hull.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    h = down_hull<span class=\"number\">-1</span>;</span><br><span class=\"line\">    hull.<span class=\"built_in\">pop_back</span>();                   <span class=\"comment\">//x最大的點會在凸包上，不用做兩次先pop一次</span></span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(p.<span class=\"built_in\">begin</span>(),p.<span class=\"built_in\">end</span>());        <span class=\"comment\">//將所有點逆序之後做一次上面的凸包</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i: p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(hull.<span class=\"built_in\">size</span>() &gt; down_hull &amp;&amp; <span class=\"built_in\">check</span>(i,hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))&#123;</span><br><span class=\"line\">            hull.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hull.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hull.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> d,sz = hull.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,sz<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j,i+<span class=\"number\">1</span>,sz<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            d = (j+<span class=\"number\">1</span>)%sz;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(<span class=\"built_in\">check2</span>(hull[i],hull[(j)%sz],hull[d],hull[(d+<span class=\"number\">1</span>)%sz]))</span><br><span class=\"line\">                d = (d+<span class=\"number\">1</span>)%sz;</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans,<span class=\"built_in\">area</span>((hull[d]-hull[i]),(hull[d]-hull[j])));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    p.<span class=\"built_in\">assign</span>(n,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">    <span class=\"built_in\">convex_hull</span>();</span><br><span class=\"line\">    ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">    cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"TIOJ-1500-Clean-up-on-aisle-3\"><a href=\"#TIOJ-1500-Clean-up-on-aisle-3\" class=\"headerlink\" title=\"TIOJ 1500 Clean up on aisle 3\"></a>TIOJ 1500 Clean up on aisle 3</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1500\">題目連結</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/262966\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>平面上n個點找最近點對的距離</p>\n</blockquote>\n<p>最近點對真的有超多種作法的，枚舉、掃描線、分治、隨機都可以做！這邊有<a href=\"/hVplrqxCRdGiMkn2lwXGAA\">一篇筆記</a>比較各種時間複雜度的最近點對作法，這邊不多做贅述！</p>\n<p>以下程式碼是掃描線演算法，最差情況下的時間複雜度是 $O(n^2)$，因為需要排序，所以下限為 $\\Omega(n\\log n)$！</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 50005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 5e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\">pii p[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ld <span class=\"title\">dis</span><span class=\"params\">(pii a, pii b)</span></span>&#123;</span><br><span class=\"line\">    ld x = a.x-b.x, y = a.y-b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(x*x + y*y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin&gt;&gt;n)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(p,p+n);</span><br><span class=\"line\">        ld d = INF;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(j,i+<span class=\"number\">1</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p[j].x &gt; p[i].x + d)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                d = <span class=\"built_in\">min</span>(d, <span class=\"built_in\">dis</span>(p[i],p[j]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout&lt;&lt;d&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"TIOJ-1280-領土-Territory\"><a href=\"#TIOJ-1280-領土-Territory\" class=\"headerlink\" title=\"TIOJ 1280 領土 (Territory)\"></a>TIOJ 1280 領土 (Territory)</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1280\">題目連結</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/262848\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>一個國家有 n 個安全哨，每一個都有座標 $(x,y)$ ，代表在座標軸上的位置。輸出該國安全哨所能圍出的最大領土。</p>\n</blockquote>\n<p>n個點所能圍成的最大面積，其實等價於凸包的面積。與前幾題的<strong>最小凸多邊形</strong>是一模一樣的題目！</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100001</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &lt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &lt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &gt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &gt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &gt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x-b.x == <span class=\"number\">0</span> &amp;&amp; y-b.y == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>+(pt b) &#123;<span class=\"keyword\">return</span> &#123;x + b.x, y + b.y&#125;;&#125; <span class=\"comment\">//向量相加</span></span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>-(pt b) &#123;<span class=\"keyword\">return</span> &#123;x - b.x, y - b.y&#125;;&#125; <span class=\"comment\">//向量相減</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>^(pt b) &#123;<span class=\"keyword\">return</span> x * b.y - y * b.x;&#125; <span class=\"comment\">//向量外積cross</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>*(pt b) &#123;<span class=\"keyword\">return</span> x * b.x + y * b.y;&#125; <span class=\"comment\">//向量內積dot</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;pt&gt; p,temp,pp;</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt;  cnt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pt a, pt b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.x == b.x)<span class=\"keyword\">return</span> a.y &lt; b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x &lt; b.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(pt a,pt b,pt o)</span></span>&#123;</span><br><span class=\"line\">    pt aa = a - o;</span><br><span class=\"line\">    pt bb = b - o;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (aa^bb) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;pt&gt; <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(p),cmp);</span><br><span class=\"line\">    vector&lt;pt&gt; h;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(pt i : p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(h.<span class=\"built_in\">size</span>()&gt;=<span class=\"number\">2</span> &amp;&amp; <span class=\"built_in\">check</span>(i,h[h.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],h[h.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))</span><br><span class=\"line\">            h.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        h.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sz = h.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    h.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(<span class=\"built_in\">all</span>(p));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(h.<span class=\"built_in\">size</span>()&gt;sz &amp;&amp; <span class=\"built_in\">check</span>(i,h[h.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],h[h.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))</span><br><span class=\"line\">            h.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        h.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    p.<span class=\"built_in\">resize</span>(n,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">    vector&lt;pt&gt; hull = <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> area = <span class=\"number\">0</span>,sz = hull.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,sz<span class=\"number\">-2</span>)&#123;</span><br><span class=\"line\">        area += (hull[i]^hull[i+<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;((area%<span class=\"number\">2</span>)?(area/<span class=\"number\">2</span>)+<span class=\"number\">1</span>:(area/<span class=\"number\">2</span>))&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ZJ-a871-Museum-Area\"><a href=\"#ZJ-a871-Museum-Area\" class=\"headerlink\" title=\"ZJ a871: Museum Area\"></a>ZJ a871: Museum Area</h3><p><a href=\"https://zerojudge.tw/ShowProblem?problemid=a871\">題目連結</a></p>\n<blockquote>\n<p>題目敘述<br>n個點圍成的多邊形，求面積</p>\n</blockquote>\n<p>水題，直接套行列式公式即可算出答案！</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 15</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\">pdd p[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ld <span class=\"title\">check</span><span class=\"params\">(pdd a, pdd b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x*b.y - a.y*b.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin&gt;&gt;n)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">        p[n] = p[<span class=\"number\">0</span>];</span><br><span class=\"line\">        ld area = <span class=\"number\">0.0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)area += <span class=\"built_in\">check</span>(p[i],p[i+<span class=\"number\">1</span>]);</span><br><span class=\"line\">        ld ans = (ld)area/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans&lt;<span class=\"number\">0</span>)ans = -ans;</span><br><span class=\"line\">        cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"TIOJ-1678-剪多邊形（molding）\"><a href=\"#TIOJ-1678-剪多邊形（molding）\" class=\"headerlink\" title=\"TIOJ 1678 剪多邊形（molding）\"></a>TIOJ 1678 剪多邊形（molding）</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1678\">題目連結TIOJ</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/262849\">TIOJ Submission</a><br><a href=\"https://zerojudge.tw/ShowProblem?problemid=d546\">題目連結ZJ</a></p>\n<blockquote>\n<p>題目敘述<br>間單來說是求出多邊形面積以及凸包面積的差，詳細可以點上面題目連結。</p>\n</blockquote>\n<p>題目說多邊形需要才剪下的面積，我們就算凸包面積以及多邊形面積，兩者的差去除上題目給的色塊面積即是答案！</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100001</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &lt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &lt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &gt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &gt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &gt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x-b.x == <span class=\"number\">0</span> &amp;&amp; y-b.y == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>+(pt b) &#123;<span class=\"keyword\">return</span> &#123;x + b.x, y + b.y&#125;;&#125; <span class=\"comment\">//向量相加</span></span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>-(pt b) &#123;<span class=\"keyword\">return</span> &#123;x - b.x, y - b.y&#125;;&#125; <span class=\"comment\">//向量相減</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>^(pt b) &#123;<span class=\"keyword\">return</span> x * b.y - y * b.x;&#125; <span class=\"comment\">//向量外積cross</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>*(pt b) &#123;<span class=\"keyword\">return</span> x * b.x + y * b.y;&#125; <span class=\"comment\">//向量內積dot</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;pt&gt; p,temp,pp;</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt;  cnt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,a,ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pt a, pt b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.x == b.x)<span class=\"keyword\">return</span> a.y &lt; b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x &lt; b.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(pt a,pt b,pt o)</span></span>&#123;</span><br><span class=\"line\">    pt aa = a - o;</span><br><span class=\"line\">    pt bb = b - o;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (aa^bb) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;pt&gt; <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(p),cmp);</span><br><span class=\"line\">    vector&lt;pt&gt; h;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(pt i : p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(h.<span class=\"built_in\">size</span>()&gt;=<span class=\"number\">2</span> &amp;&amp; <span class=\"built_in\">check</span>(i,h[h.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],h[h.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))</span><br><span class=\"line\">            h.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        h.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sz = h.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    h.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(<span class=\"built_in\">all</span>(p));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(h.<span class=\"built_in\">size</span>()&gt;sz &amp;&amp; <span class=\"built_in\">check</span>(i,h[h.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],h[h.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))</span><br><span class=\"line\">            h.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        h.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Polygon</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;pt&gt; <span class=\"title\">temp</span><span class=\"params\">(p)</span></span>;</span><br><span class=\"line\">    temp.<span class=\"built_in\">push_back</span>(temp[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> area = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)area += (temp[i]^temp[i+<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">abs</span>(area);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;a;</span><br><span class=\"line\">    p.<span class=\"built_in\">resize</span>(n,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">    ld small = (ld)<span class=\"built_in\">Polygon</span>()/<span class=\"number\">2</span>;</span><br><span class=\"line\">    vector&lt;pt&gt; hull = <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> area = <span class=\"number\">0</span>,sz = hull.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,sz<span class=\"number\">-2</span>)area += (hull[i]^hull[i+<span class=\"number\">1</span>]);</span><br><span class=\"line\">    ld big = (ld)area/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"built_in\">ceil</span>((big-small)/a);</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ZJ-d269-11579-Triangle-Trouble\"><a href=\"#ZJ-d269-11579-Triangle-Trouble\" class=\"headerlink\" title=\"ZJ d269: 11579 - Triangle Trouble\"></a>ZJ d269: 11579 - Triangle Trouble</h3><p><a href=\"https://zerojudge.tw/ShowProblem?problemid=d269\">題目連結</a></p>\n<blockquote>\n<p>題目敘述<br>有一個三角形工廠有一個很大的問題。給你一些邊的邊長，想辦法找出用這些邊長圍出最大的三角形。</p>\n</blockquote>\n<p>根據海龍公式，三角形面積：</p>\n<script type=\"math/tex; mode=display\">\\triangle ABC = \\sqrt{s\\cdot(s-a)\\cdot(s-b)\\cdot(s-c)}</script><p>可以利用貪婪法，將所有邊長由大到小進行排序，每一次拿最大的三個邊長進行枚舉，即可算出最大的三角形面積。不難理解，當換上一個比較大的邊，算出來的s也會比較大，跟邊相減的值也會比較大，總面積自然較大（好啦，這是非常不嚴謹的證明XD）</p>\n<p>在想題過程中，我有思考到，如果周長一樣的情況下，到底何種面積的三角形面積會比較大？答案是正三角形！</p>\n<div class=\"note default\">\n            <p><strong>三角形周長固定下面積的比較</strong><br>根據海龍公式：</p><script type=\"math/tex; mode=display\">s = \\frac{1}{2}(a+b+c)</script><p>想要比較在周長固定下三角形的面積，可以用算幾不等式比較，因為 $s$ 是定值，所以可以列出以下式子：</p><script type=\"math/tex; mode=display\">\\frac{(s-a)+(s-b)+(s-c)}{3} ≥ \\sqrt[3]{(s-a)(s-b)(s-c)}</script><p>等好成立時，$a=b=c$。因為$s = \\frac{a+b+c}{2}$，因此：</p><script type=\"math/tex; mode=display\">(\\frac{a}{2})^2 ≥ (s-a)(s-b)(s-c)</script><p>得到海龍公式</p><script type=\"math/tex; mode=display\">\\triangle ABC = \\sqrt{s\\cdot(s-a)\\cdot(s-b)\\cdot(s-c)} ≤ \\sqrt{\\frac{3a}{2}\\cdot\\frac{a^3}{8}}=\\frac{\\sqrt{3}}{4}a^2</script>\n          </div>\n<p>以下是使用貪婪法的AC Code：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100001</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> t,n;</span><br><span class=\"line\">vector&lt;ld&gt; p;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ld <span class=\"title\">area</span><span class=\"params\">(ld a ,ld b, ld c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a &gt; b + c)<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    ld p = (a+b+c)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p*(p-a)*(p-b)*(p-c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        cin&gt;&gt;n;</span><br><span class=\"line\">        p.<span class=\"built_in\">assign</span>(n,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cin&gt;&gt;p[i];</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(p),greater&lt;&gt;());</span><br><span class=\"line\">        ld ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-3</span>)</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans,<span class=\"built_in\">area</span>(p[i],p[i+<span class=\"number\">1</span>],p[i+<span class=\"number\">2</span>]));</span><br><span class=\"line\">        cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"built_in\">sqrt</span>(ans)&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><p>計算幾何，顧名思義就是在電腦完成幾何的運算，要怎麼把平面的東西轉化成電腦看得懂的東西就是計算幾何在做的事情。常常我們覺得很容易判斷的事情，例如判斷線段是否相交，我們可以利用肉眼直輕易判斷出來，因為我們有強大的空間感幫助我們進行判斷，但換作是電腦就必須用一些數學的技巧，對於不同的情況做各自的判斷，才能讓電腦正確回答兩條線段的相交情形。</p>\n<p>除此之外，在寫題過程中，使用到ggb進行輔助，讓我可以對程式的執行過程有更是覺化的概念，也幫助我在解題時能更理解解題的策略！上面一題三角形個數的判斷，就使用了ggb判定將點搬移的所有情況。利用它我抓到了當點的y座標為零時並沒進行好特殊情況的判斷，這也是一個視覺化之後的好處！</p>\n<p>有一題沒有做的是模擬退火的題目實作，要求圓與三角形的交集面積，感覺超級複雜，以後有時間來慢慢實作！</p>\n","site":{"data":{}},"length":5187,"excerpt":"<h2 id=\"題目目錄\"><a href=\"#題目目錄\" class=\"headerlink\" title=\"題目目錄\"></a>題目目錄</h2><ul>\n<li>向量加法</li>\n<li>等長線段對</li>\n<li>向左轉向右轉</li>\n<li>線段相交</li>\n<li>最小凸多邊形</li>\n<li>TIOJ 1178 Convex Hull</li>\n<li>來吧，遊戲開始了</li>\n<li>遊戲：最終回</li>\n<li>TIOJ 1205 直角三角形","more":"</li>\n<li>TIOJ 1105 H.PS3</li>\n<li>ZJ b288: 夏季大三角</li>\n<li>TIOJ 1500 Clean up on aisle 3</li>\n<li>ZJ a871: Museum Area</li>\n<li>TIOJ 1280 領土 (Territory)</li>\n<li>TIOJ 1678 剪多邊形（molding）</li>\n<li>ZJ d269: 11579 - Triangle Trouble</li>\n</ul>\n<h3 id=\"向量加法\"><a href=\"#向量加法\" class=\"headerlink\" title=\"向量加法\"></a>向量加法</h3><p><a href=\"https://neoj.sprout.tw/problem/398/\">題目連結</a><br><a href=\"https://neoj.sprout.tw/challenge/178462/\">Submission</a></p>\n<blockquote>\n<p>題目敘述：<br>給你n個數字（0≤i&lt;1，小數點精度到末九位），想知道到底有多少組 $(i,j,k)$ 滿足 $v_i+v_j=v_k$，其中 $i,j,k$ 可以重複。</p>\n</blockquote>\n<p>這題其實跟計算幾何沒什麼關係，直接用unordered_map去做（有點像two sum，不過下面的code好像也不用開到multi），簡單！不過我在浮點數的地方吃了一些WA，最後算了直接改用字串處理這個惱人的東西XD</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> double long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,l,r) for(int i=l;i&lt;=r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep2(i,l,r) for(int i=l;i&lt;r;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps (1e-9)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1e10</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 2001</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">vec</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep2</span>(i,<span class=\"number\">0</span>,n)&#123;</span><br><span class=\"line\">        string s;cin&gt;&gt;s;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>,times = <span class=\"number\">1000000000</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">            num += (s[i]-<span class=\"string\">&#x27;0&#x27;</span>)*times;</span><br><span class=\"line\">            times/=<span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vec[i] = num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    unordered_multimap&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; mp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        mp.<span class=\"built_in\">insert</span>(&#123;vec[i],i&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">            ans += mp.<span class=\"built_in\">count</span>(vec[i] + vec[j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"等長線段對\"><a href=\"#等長線段對\" class=\"headerlink\" title=\"等長線段對\"></a>等長線段對</h3><p><a href=\"https://neoj.sprout.tw/problem/399/\">題目連結</a><br><a href=\"https://neoj.sprout.tw/challenge/178471/\">Submission</a></p>\n<blockquote>\n<p>題目敘述：<br>給定平面上很多個點，求出有幾對線段等長（輸入有重複的點）。</p>\n</blockquote>\n<p>既然n≤500，那就直接枚舉吧，沒啥特別難度。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a,i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep2(i,a,b) for(int i=a;i&lt;b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 1003</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\">pii p[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dist</span><span class=\"params\">(pii a,pii b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = a.x-b.x,y = a.y-b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x*x+y*y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"built_in\">rep2</span>(i,<span class=\"number\">0</span>,n)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">    map&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt;mp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> dis = <span class=\"built_in\">dist</span>(p[i],p[j]);</span><br><span class=\"line\">            mp[dis]+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i:mp)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt = i.second;</span><br><span class=\"line\">        ans+=((cnt*(cnt<span class=\"number\">-1</span>))/<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"向左轉向右轉\"><a href=\"#向左轉向右轉\" class=\"headerlink\" title=\"向左轉向右轉\"></a>向左轉向右轉</h3><p><a href=\"https://neoj.sprout.tw/problem/400/\">題目連結</a><br><a href=\"https://neoj.sprout.tw/challenge/178524/\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>給你平面上n個點，依序走訪每一個點，試問走訪過程中共執行幾次的左轉、右轉以及迴轉。</p>\n</blockquote>\n<p>很特別，計算幾何讓電腦可以處理平常我們所看到的平面圖形，可以利用向量內積、外積等方式判斷方向。這一題最重要的就是<strong>方向函數</strong>。傳入3個點$(A,B,O)$，方向函數會會回傳$\\stackrel\\longrightarrow{OA}\\times \\stackrel\\longrightarrow{OB}$ 的正負數值。</p>\n<p>下圖為外積$\\stackrel\\longrightarrow{OA}\\times \\stackrel\\longrightarrow{OB}$ 的結果，當 $\\sin\\theta$的結果為負，也就是下圖的情況，從B走到A就需要往左邊走；反之亦然。<br><img src=\"https://i.imgur.com/eDNRLhm.png\" alt=\"\"></p>\n<p>至於如何判斷當兩個向量的方向呈現一直線時，也就是外積回傳的值為0時（$\\sin\\theta = 0$），應該是同向還是異向呢？這時候就需要搭配向量內積（這我想了很久），因為內積公式是$A\\cdot B = |A||B|\\cos\\theta$，將兩個向量內積之後就可以很明確的判斷到底是朝原本的方向走，還是反方向的行走！</p>\n<div class=\"note info\">\n            <p><strong>內積、外積公式</strong><br>有一點數學，不過蠻有趣的。可以利用$\\sin$與$\\cos$達到計算角度的目的，利用兩者不同的值域，互相搭配，就可以更輕鬆的進行判斷！注意到外積的正負就代表著A到B是順時針或是逆時鐘。</p><script type=\"math/tex; mode=display\">A\\cdot B = |A||B|\\cos\\theta = A_xB_x+A_yB_y\\\\A\\times B = |A||B|\\sin\\theta = A_xB_y-A_yB_x</script><p><br></p><p><strong>方向函數</strong></p><p>當我們要判斷方向的時候，會利用正弦函數，逆時針正、順時針為負進行判斷！<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dir</span><span class=\"params\">(pt a, pt b, pt o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cross = (a - o) ^ (b - o);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(cross) &lt;= eps) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cross &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>注意到此時在判斷是否為平行的時候（cross==0），使用到$fabs()$這個函數，目的是為了避免誤差而導致判斷錯誤，因此需要進行誤差的處理（其實不用也沒差啦，只是這樣嚴謹一點）</p>\n          </div>\n<p>以下是AC Code：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 1003</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &lt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &lt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &gt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &gt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &gt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x-b.x&lt;=eps &amp;&amp; y-b.y&lt;=eps)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>+(pt b) &#123;<span class=\"keyword\">return</span> &#123;x + b.x, y + b.y&#125;;&#125; <span class=\"comment\">//向量相加</span></span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>-(pt b) &#123;<span class=\"keyword\">return</span> &#123;x - b.x, y - b.y&#125;;&#125; <span class=\"comment\">//向量相減</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>^(pt b) &#123;<span class=\"keyword\">return</span> x * b.y - y * b.x;&#125; <span class=\"comment\">//向量外積cross</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>*(pt b) &#123;<span class=\"keyword\">return</span> x * b.x + y * b.y;&#125; <span class=\"comment\">//向量內積dot</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector&lt;pt&gt; a;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dir</span><span class=\"params\">(pt a, pt b, pt o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cross = (a - o) ^ (b - o);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(cross) &lt;= eps) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cross &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    a.<span class=\"built_in\">resize</span>(n+<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,n)cin&gt;&gt;a[i].x&gt;&gt;a[i].y;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = <span class=\"number\">0</span>,left = <span class=\"number\">0</span>,turn = <span class=\"number\">0</span>;</span><br><span class=\"line\">    pt pre = a[<span class=\"number\">1</span>],from = a[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">3</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ori = <span class=\"built_in\">dir</span>(a[i],from,pre);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ori == <span class=\"number\">1</span>)right+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ori == <span class=\"number\">-1</span>)left+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ori == <span class=\"number\">0</span> &amp;&amp; ((a[i]-from)*(from-pre))&lt;<span class=\"number\">0</span>)turn+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        pre = from;from = a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;left&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;right&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;turn&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"線段相交\"><a href=\"#線段相交\" class=\"headerlink\" title=\"線段相交\"></a>線段相交</h3><p><a href=\"https://neoj.sprout.tw/problem/401/\">題目連結</a><br><a href=\"https://neoj.sprout.tw/challenge/178537/\">Submission</a><br>線段相交 = <del>線段香蕉</del>，自動選字永遠都是香蕉，有點煩XDD</p>\n<p>如何判斷兩線段是否相交？首先需要一個函數可以判斷點是否在一個線段上，如此一來就可以判斷端點在另一條線段上的特殊情況。以下程式碼為判斷點$P_o$ 是否在 $\\overline{P_aP_b}$ 上。利用向量外積可以判斷兩線段是否平行，而使用內積公式可以判斷$P_o$是否在線段中，而非線段的兩側！<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">onseg</span><span class=\"params\">(pt a, pt b, pt o)</span></span>&#123;       <span class=\"comment\">//o是否在ab線段上</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cross = (a - o) ^ (b - o);  <span class=\"comment\">//是否平行</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> dot = (a - o) * (b - o);    <span class=\"comment\">//是否在線段中</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (cross == <span class=\"number\">0</span>)&amp;&amp;(dot &lt;= <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>說明：由點$P_o$指向a和b的向量必須呈現180度角（也就是異向），才可確保在ab線段中（跟a,b重合也算是跟ab線段相交）。</p>\n<p>接下來是主要的部分，首先先確認4個端點是否恰好在另外一條線段上，判斷完之後就是處理一般相交的情況。若線段 $\\overline{P_1P_2}$ 與 $\\overline{P_3P_4}$ 相交，則點 $P_1$ 與點 $P_2$ 會在線段$\\overline{P_3P_4}$ 的異側。用方向函數表示：$dir(a,b,c)\\times dir(a,b,d)<0$。確認完兩個線段之後即完成線段相交的判斷！\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Intersection</span><span class=\"params\">(pt a, pt b, pt c, pt d)</span></span>&#123;      <span class=\"comment\">//線段ab是否與cd相交</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">onseg</span>(a,b,c)||<span class=\"built_in\">onseg</span>(a,b,d))<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  <span class=\"comment\">//點c、d是否洽在線段ab上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">onseg</span>(c,d,a)||<span class=\"built_in\">onseg</span>(c,d,b))<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  <span class=\"comment\">//點a、b是否洽在線段cd上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">dir</span>(a,b,c)*<span class=\"built_in\">dir</span>(a,b,d)==<span class=\"number\">-1</span> &amp;&amp; <span class=\"built_in\">dir</span>(c,d,a)*<span class=\"built_in\">dir</span>(c,d,b)==<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;                            <span class=\"comment\">//對於線段兩端點看另外兩端點必須方向相反</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>由下圖可以得到上面的結論，當兩線段相交時，方向函數得到的值（用外積，也就是下圖 $\\theta_1$ 以及 $\\theta_2$）的方向），會呈現一正一負，從兩個相反的方向看同一條線段得出來的結論！<br><img src=\"https://i.imgur.com/b5pW6IS.png\" alt=\"\"></p>\n<p>AC Code:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 1003</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &lt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &lt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &gt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &gt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &gt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x-b.x&lt;=eps &amp;&amp; y-b.y&lt;=eps)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>+(pt b) &#123;<span class=\"keyword\">return</span> &#123;x + b.x, y + b.y&#125;;&#125; <span class=\"comment\">//向量相加</span></span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>-(pt b) &#123;<span class=\"keyword\">return</span> &#123;x - b.x, y - b.y&#125;;&#125; <span class=\"comment\">//向量相減</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>^(pt b) &#123;<span class=\"keyword\">return</span> x * b.y - y * b.x;&#125; <span class=\"comment\">//向量外積cross</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>*(pt b) &#123;<span class=\"keyword\">return</span> x * b.x + y * b.y;&#125; <span class=\"comment\">//向量內積dot</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector&lt;pt&gt; point;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dir</span><span class=\"params\">(pt a, pt b, pt o)</span> </span>&#123;                         <span class=\"comment\">//方向函數</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cross = (a - o) ^ (b - o);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">fabs</span>(cross) &lt;= eps) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cross &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">onseg</span><span class=\"params\">(pt a, pt b, pt o)</span></span>&#123;                       <span class=\"comment\">//o是否在ab線段上</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cross = (a - o) ^ (b - o);                  <span class=\"comment\">//是否平行</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> dot = (a - o) * (b - o);                    <span class=\"comment\">//是否在線段中</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (cross == <span class=\"number\">0</span>)&amp;&amp;(dot &lt;= <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Intersection</span><span class=\"params\">(pt a, pt b, pt c, pt d)</span></span>&#123;          <span class=\"comment\">//線段ab是否與cd相交</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">onseg</span>(a,b,c)||<span class=\"built_in\">onseg</span>(a,b,d))<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;      <span class=\"comment\">//點c、d是否洽在線段ab上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">onseg</span>(c,d,a)||<span class=\"built_in\">onseg</span>(c,d,b))<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;      <span class=\"comment\">//點a、b是否洽在線段cd上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">dir</span>(a,b,c)*<span class=\"built_in\">dir</span>(a,b,d)==<span class=\"number\">-1</span> &amp;&amp; <span class=\"built_in\">dir</span>(c,d,a)*<span class=\"built_in\">dir</span>(c,d,b)==<span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;                                <span class=\"comment\">//對於線段兩端點看另外兩端點必須方向相反</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    point.<span class=\"built_in\">assign</span>(<span class=\"number\">4</span>,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,<span class=\"number\">3</span>)cin&gt;&gt;point[i].x&gt;&gt;point[i].y;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">Intersection</span>(point[<span class=\"number\">0</span>],point[<span class=\"number\">1</span>],point[<span class=\"number\">2</span>],point[<span class=\"number\">3</span>]))&#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> cout&lt;&lt;<span class=\"string\">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t;cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"TIOJ-1178-Convex-Hull\"><a href=\"#TIOJ-1178-Convex-Hull\" class=\"headerlink\" title=\"TIOJ 1178 Convex Hull\"></a>TIOJ 1178 Convex Hull</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1178\">題目連結</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/262532\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>給定n個二維平面的點，找出位在凸包上的所有點的個數</p>\n</blockquote>\n<p>最小凸多邊形 = 凸包，要找出能包住所有點的最小凸多邊形，簡稱凸包。聽說最好寫的凸包演算法是：Andrew’s Monotone Chain，翻成中文叫做Andrew’s 單調鍊？有一點單調+鍊的味道。下圖是我用照片合成起來的GIF，大致模擬出使用Andrew’s Monotone Chain 找凸包的方法。</p>\n<p><img src=\"https://i.imgur.com/YUOC9xZ.gif\" alt=\"\"></p>\n<div class=\"note default\">\n            <p><strong>Andrew’s Monotone Chain</strong><br>這個演算法的時間複雜度是 $O(n\\log n)$，空間複雜度 $O(n)$，資料說它可以解決了凸包有重疊的點、共線的點、退化成線段和點的情況。它的名字叫做「單調鍊」，要維護一個有點像單調隊列的東西，對於在容器中第 $i$ 個位置的點都滿足 $\\stackrel\\longrightarrow{P<em>i P</em>{i+1}}\\times \\stackrel\\longrightarrow{P<em>{i+1} P</em>{i+2}} &gt; 0$ ，如果有點做外積後的結果小於等於0，則它會被pop掉（這是依照上圖逆時針完成凸包的描述，如果方向相反則會變號）。<br><br></p><p>以下是此演算法的執行步驟：</p><ol><li>先把所有的點按照 $(x,y)$ 排序</li><li>將下凸包圍出來，有點像維護單調隊列，對所有新加入的點i計算點i-2、i-1與i之間的外積，如果不符合情況代表圍不到新加入的點，需要將舊的點pop出來</li><li>將原本已經排序好的點逆序</li><li>再把上凸包由x座標大到小圍出來，將上下合併就是凸包了（必須注意起終點被push的次數問題）！</li></ol>\n          </div>\n<p>一般會用一個vector儲存在凸包上面的點（不包含在邊上的點，只有位於轉折點的點），在頭尾的部分（x座標最大與最小）需要特別處理，讓每一個點最多近到vector一次。</p>\n<div class=\"note success\">\n            <p><strong>實作細節</strong><br>以下是確認是否需要將vector中元素pop出來的關鍵，對向量$\\stackrel\\longrightarrow{OA}\\times \\stackrel\\longrightarrow{OB}$ 做外積的結果，必須排除外積結果為0的情況，如果將0也納入，會造成一個點被push進去很多次，在數量和計算上出現問題。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(pt a,pt b,pt o)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cross = (a - o)^(b - o);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cross &gt;= <span class=\"number\">0</span>;         <span class=\"comment\">//這裡很關鍵，別吃WA</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>除此之外，上凸包在範圍限制上是需要注意的。假設x座標最大的點i，當在圍上凸包的過程中i是不可以被pop出去的，因此vector的大小必須大於下凸包的大小。</p><p>凸包使用第i-1跟第i個點的向量去看第i到第i+1個點的向量，決定一個點要不要被推入vector中。當我們逆序從x座標最大的點往前看時，要確保每一輪結束之後在i點後都必須要有至少一個點，設定hull.size() &gt; down_hull的原因是防止在下凸包的點被圍上凸包的過程更新到。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> down_hull = hull.<span class=\"built_in\">size</span>();    <span class=\"comment\">//圍上凸包的程式碼片段</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i: p)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(hull.<span class=\"built_in\">size</span>() &gt; down_hull </span><br><span class=\"line\">        &amp;&amp; <span class=\"built_in\">check</span>(i,hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))&#123;</span><br><span class=\"line\">        hull.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hull.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n          </div>\n<p>以下是AC Code:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100001</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &lt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &lt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &gt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &gt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &gt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x-b.x&lt;=eps &amp;&amp; y-b.y&lt;=eps)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>+(pt b) &#123;<span class=\"keyword\">return</span> &#123;x + b.x, y + b.y&#125;;&#125; <span class=\"comment\">//向量相加</span></span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>-(pt b) &#123;<span class=\"keyword\">return</span> &#123;x - b.x, y - b.y&#125;;&#125; <span class=\"comment\">//向量相減</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>^(pt b) &#123;<span class=\"keyword\">return</span> x * b.y - y * b.x;&#125; <span class=\"comment\">//向量外積cross</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>*(pt b) &#123;<span class=\"keyword\">return</span> x * b.x + y * b.y;&#125; <span class=\"comment\">//向量內積dot</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pt a, pt b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.x == b.x)<span class=\"keyword\">return</span> a.y &lt; b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x &lt; b.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vector&lt;pt&gt; p;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(pt a,pt b,pt o)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cross = (a - o)^(b - o);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cross &gt;= <span class=\"number\">0</span>;                              <span class=\"comment\">//這裡很關鍵，別吃WA</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;pt&gt; <span class=\"title\">convex_hull</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    vector&lt;pt&gt; hull;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(p.<span class=\"built_in\">begin</span>(),p.<span class=\"built_in\">end</span>(),cmp);       <span class=\"comment\">//首先對x進行排序</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : p)&#123;                   <span class=\"comment\">//依序走訪，如果遇到外積&lt;0則不在凸包上</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(hull.<span class=\"built_in\">size</span>()&gt;=<span class=\"number\">2</span> &amp;&amp; <span class=\"built_in\">check</span>(i,hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))&#123;</span><br><span class=\"line\">            hull.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hull.<span class=\"built_in\">push_back</span>(i);             <span class=\"comment\">//在凸包hull的每一點都符合外積小於0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> down_hull = hull.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    hull.<span class=\"built_in\">pop_back</span>();                   <span class=\"comment\">//x最大的點會在凸包上，不用做兩次先pop一次</span></span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(p.<span class=\"built_in\">begin</span>(),p.<span class=\"built_in\">end</span>());        <span class=\"comment\">//將所有點逆序之後做一次上面的凸包</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i: p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(hull.<span class=\"built_in\">size</span>() &gt; down_hull &amp;&amp; <span class=\"built_in\">check</span>(i,hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))&#123;</span><br><span class=\"line\">            hull.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hull.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hull;                       <span class=\"comment\">//起點會經過兩次，剛好來算有向面積</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    p.<span class=\"built_in\">assign</span>(n,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">    vector&lt;pt&gt; hull = <span class=\"built_in\">convex_hull</span>();</span><br><span class=\"line\">    cout&lt;&lt;hull.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"最小凸多邊形\"><a href=\"#最小凸多邊形\" class=\"headerlink\" title=\"最小凸多邊形\"></a>最小凸多邊形</h3><p><a href=\"https://neoj.sprout.tw/problem/402/\">題目連結</a><br><a href=\"https://neoj.sprout.tw/challenge/178589/\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>找出二維平面上n個點的凸包所圍出來的面積為何？</p>\n</blockquote>\n<p>跟上一題類似，在找到全部在凸包上面的點後，就可以利用<strong>有向面積</strong>把凸包面積算出來，有一個公式可以計算多邊形面積，利用外積得到正負值，轉一圈後得到面積！對於多邊形的頂點 $P<em>0,P_1,…,P</em>{n-1},P_n=P_0$ 的面積如下：</p>\n<script type=\"math/tex; mode=display\">Area = \\frac{1}{2}\\sum_{i=0}^{n-1}\\stackrel\\longrightarrow{P_i}\\times \\stackrel\\longrightarrow{P_{i+1}}</script><p>其中最後一個點會回到起點，形成一個封閉的迴路。</p>\n<p>以下是AC Code：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100001</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &lt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &lt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &gt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &gt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &gt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x-b.x&lt;=eps &amp;&amp; y-b.y&lt;=eps)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>+(pt b) &#123;<span class=\"keyword\">return</span> &#123;x + b.x, y + b.y&#125;;&#125; <span class=\"comment\">//向量相加</span></span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>-(pt b) &#123;<span class=\"keyword\">return</span> &#123;x - b.x, y - b.y&#125;;&#125; <span class=\"comment\">//向量相減</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>^(pt b) &#123;<span class=\"keyword\">return</span> x * b.y - y * b.x;&#125; <span class=\"comment\">//向量外積cross</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>*(pt b) &#123;<span class=\"keyword\">return</span> x * b.x + y * b.y;&#125; <span class=\"comment\">//向量內積dot</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pt a, pt b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.x == b.x)<span class=\"keyword\">return</span> a.y &lt; b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x &lt; b.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;pt&gt; p;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(pt a,pt b,pt o)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cross = (a - o)^(b - o);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cross &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;pt&gt; <span class=\"title\">convex_hull</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    vector&lt;pt&gt; hull;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(p.<span class=\"built_in\">begin</span>(),p.<span class=\"built_in\">end</span>(),cmp);       <span class=\"comment\">//首先對x進行排序</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : p)&#123;                   <span class=\"comment\">//依序走訪，如果遇到外積&lt;0則不在凸包上</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(hull.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">check</span>(i,hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))&#123;</span><br><span class=\"line\">            hull.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hull.<span class=\"built_in\">push_back</span>(i);             <span class=\"comment\">//在凸包hull的每一點都符合外積小於0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> down_hull = hull.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    hull.<span class=\"built_in\">pop_back</span>();                   <span class=\"comment\">//x最大的點會在凸包上，不用做兩次先pop一次</span></span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(p.<span class=\"built_in\">begin</span>(),p.<span class=\"built_in\">end</span>());        <span class=\"comment\">//將所有點逆序之後做一次上面的凸包</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i: p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(hull.<span class=\"built_in\">size</span>() &gt; down_hull &amp;&amp; <span class=\"built_in\">check</span>(i,hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))&#123;</span><br><span class=\"line\">            hull.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hull.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hull;                       <span class=\"comment\">//起點會經過兩次，剛好來算有向面積</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        cin&gt;&gt;n;</span><br><span class=\"line\">        p.<span class=\"built_in\">assign</span>(n,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">        vector&lt;pt&gt; hull = <span class=\"built_in\">convex_hull</span>();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> area = <span class=\"number\">0</span>,len = hull.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;len<span class=\"number\">-1</span>;i++)area += (hull[i]^hull[i+<span class=\"number\">1</span>]);</span><br><span class=\"line\">        cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">1</span>)&lt;&lt;((ld)area/<span class=\"number\">2</span>)&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"來吧，遊戲開始了。\"><a href=\"#來吧，遊戲開始了。\" class=\"headerlink\" title=\"來吧，遊戲開始了。\"></a>來吧，遊戲開始了。</h3><p><a href=\"https://neoj.sprout.tw/problem/790/\">題目連結</a><br><a href=\"https://neoj.sprout.tw/challenge/178691/\">Submission</a><br><a href=\"https://www.geogebra.org/graphing/h4fxdquw\">GGB模擬</a></p>\n<blockquote>\n<p>題目敘述<br>給你二維平面上n個點(n≤2400)，每一個點座標皆不相同，求出總共可以圍出多少個三角形？</p>\n</blockquote>\n<p>這是NEOJ上的加分題，好像是一個題組吧，反正總共有三題，這是第一題。如果 $O(n^3)$ 的枚舉，複雜度會爆炸（量級約$10^{10}$），根據電神的說法，這一題要用極角排序以及雙指標找到共線，接著就可以利用排列組合把因為共線而不能形成三角形的組合扣掉，就是答案了。</p>\n<p><img src=\"https://i.imgur.com/t5TF96I.png\" alt=\"\"></p>\n<p>這一題的核心概念是找共線，具體來說的作法是枚舉每一個點的同時，以它為原點對其他的點進行排序，如果遇到有相同的極角座標表示這些點共線，同時利用陣列cnt[x]統計共線點數為x的線段總共有幾條。</p>\n<p>以下的GIF就是大致上程式執行的樣子。因為一條長度為x的線段會因為枚舉x次的關係，在最後扣掉的情況會重複x次因此需要除掉。</p>\n<p><img src=\"https://i.imgur.com/MVfEx4i.gif\" alt=\"\"></p>\n<div class=\"note primary\">\n            <p><strong>共線與三角形</strong></p><p>一般情況下（任三點不共線），總共可以形成 $C^n_3$ 個三角形，如果有一條m個點共線的情況下（其他點不共線），則可以形成的三角形數量就必須扣除共線限制的情況，變成 $C^n_3-C^m_3$ 個三角形。</p>\n          </div>\n<p>時間複雜度為：枚舉每一個點 $O(n)$，極角排序 $O(n\\log n)$，總時間複雜度 $O(n^2\\log n)$</p>\n<div class=\"note default\">\n            <p><strong>實作小細節</strong></p><p><strong>1. 維護共線連續區間</strong></p><p>我們要想辦法讓有共線的點們所在位置是一個連續的位置。三個點共線可能為在對角線的象限中，也就是點差了180度，如此一來就沒辦法讓共線的點為在連續的區間。為了達到這個目的，我們將所有位於下半平面的點都移到上半平面（在上半平面找到有相同 $\\tan\\theta$ 值的位置），接著就能利用雙指針找極角座標排序後有相同極角的區間之最大值！</p><p><strong>2. 特例判斷</strong></p><p>如果有一點y座標為0但x座標為負，要將其移到x軸正向的地方，不能把這種情況涵蓋為一般情況，否則原本在x軸正向的點會被移到x軸負向，沒有達到預期的效果。</p>\n          </div>\n<p>以下是AC Code：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100001</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &lt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &lt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &gt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &gt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &gt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x-b.x == <span class=\"number\">0</span> &amp;&amp; y-b.y == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>+(pt b) &#123;<span class=\"keyword\">return</span> &#123;x + b.x, y + b.y&#125;;&#125; <span class=\"comment\">//向量相加</span></span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>-(pt b) &#123;<span class=\"keyword\">return</span> &#123;x - b.x, y - b.y&#125;;&#125; <span class=\"comment\">//向量相減</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>^(pt b) &#123;<span class=\"keyword\">return</span> x * b.y - y * b.x;&#125; <span class=\"comment\">//向量外積cross</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>*(pt b) &#123;<span class=\"keyword\">return</span> x * b.x + y * b.y;&#125; <span class=\"comment\">//向量內積dot</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;pt&gt; p;</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; cnt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pt a, pt b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> f1 = a &lt; pt&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> f2 = b &lt; pt&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f1 != f2)<span class=\"keyword\">return</span> f1 &lt; f2;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a ^ b) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//逆時針將點進行極角排序，從270度開始逆時針</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用cnt[i]統計區間長度為i的線段數量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(pt id)</span></span>&#123;</span><br><span class=\"line\">    vector&lt;pt&gt; pp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : p)&#123;                         <span class=\"comment\">//以id為原點</span></span><br><span class=\"line\">        pt cur = i-id;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur == pt&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.y &lt; <span class=\"number\">0</span>)&#123;cur.x = -cur.x;cur.y = -cur.y;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.x &lt; <span class=\"number\">0</span> &amp;&amp; cur.y==<span class=\"number\">0</span>)&#123;cur.x = -cur.x;&#125;</span><br><span class=\"line\">        pp.<span class=\"built_in\">push_back</span>(cur);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(pp),cmp);                      <span class=\"comment\">//將id當作原點進行排序</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> p1 = <span class=\"number\">0</span>,p2 = <span class=\"number\">0</span>,len = pp.<span class=\"built_in\">size</span>();      <span class=\"comment\">//雙指針找共線區間</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p1 &lt; n<span class=\"number\">-1</span>)&#123;                        <span class=\"comment\">//最大化區間</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p2+<span class=\"number\">1</span> &lt; len &amp;&amp; (pp[p1]^pp[p2+<span class=\"number\">1</span>]) == <span class=\"number\">0</span>)p2++;</span><br><span class=\"line\">        cnt[p2-p1+<span class=\"number\">2</span>]+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        p1 = p2+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    p.<span class=\"built_in\">assign</span>(n,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    cnt.<span class=\"built_in\">resize</span>(n+<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)<span class=\"built_in\">solve</span>(p[i]);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = (n*(n<span class=\"number\">-1</span>)*(n<span class=\"number\">-2</span>))/<span class=\"number\">6</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">3</span>,n)ans-=(cnt[i]*(i<span class=\"number\">-1</span>)*(i<span class=\"number\">-2</span>))/<span class=\"number\">6</span>;</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"遊戲：最終回\"><a href=\"#遊戲：最終回\" class=\"headerlink\" title=\"遊戲：最終回\"></a>遊戲：最終回</h3><p><a href=\"https://neoj.sprout.tw/problem/792/\">題目連結</a><br><a href=\"https://neoj.sprout.tw/challenge/178786/\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>共有n個二維平面上的格子點，這些點會形成簡單多邊形。試求或在簡單多邊形內部的格線總長（包括垂直與水平格線）。</p>\n</blockquote>\n<p>這邊有一個不嚴謹的推導方式，不過他是正確的。令多邊形內部格線長度為S，多邊形的邊落在的格線長度為T，多邊形面積T，則有以下關係式：</p>\n<script type=\"math/tex; mode=display\">S = 2A-\\frac{T}{2}</script><p>詳細的公式推導可以可以參閱下圖，平行四邊形（斜線部分）內部<strong>垂直</strong>的格線長度為： 大矩形 $(x_1+x_2)(y_1+y_2)$ 扣掉左右上下共四個三角形兩兩拼成一個矩形 $x_1y_1$ 以及 $x_2y_2$，還有左上右下兩個正方形 $2x_2y_1$，整理之後會發現其實跟面積是一樣的。對於垂直部分也是類似的情況。</p>\n<p><img src=\"https://i.imgur.com/wemDPMp.jpg\" alt=\"\"></p>\n<p>好像隱約發現到面積與格線長度有十分密切的關係，算出面積，把在格線上的邊進行特判扣掉，就可以得到格線長度。</p>\n<p>這一題我想了很久，一直看不出來關係式到底長怎樣，直到大神提點才發現原來有這樣的關係，我反應好遲鈍:cry:</p>\n<p><img src=\"https://i.imgur.com/Fy1wSky.png\" alt=\"\"></p>\n<p>以下是AC Code：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100001</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &lt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &lt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &gt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &gt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &gt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x-b.x == <span class=\"number\">0</span> &amp;&amp; y-b.y == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>+(pt b) &#123;<span class=\"keyword\">return</span> &#123;x + b.x, y + b.y&#125;;&#125; <span class=\"comment\">//向量相加</span></span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>-(pt b) &#123;<span class=\"keyword\">return</span> &#123;x - b.x, y - b.y&#125;;&#125; <span class=\"comment\">//向量相減</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>^(pt b) &#123;<span class=\"keyword\">return</span> x * b.y - y * b.x;&#125; <span class=\"comment\">//向量外積cross</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>*(pt b) &#123;<span class=\"keyword\">return</span> x * b.x + y * b.y;&#125; <span class=\"comment\">//向量內積dot</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;pt&gt; p;</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt;  cnt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,edge,ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> area = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        area += (p[i]^p[i+<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p[i].y == p[i+<span class=\"number\">1</span>].y)edge += <span class=\"built_in\">abs</span>(p[i].x-p[i+<span class=\"number\">1</span>].x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p[i].x == p[i+<span class=\"number\">1</span>].x)edge += <span class=\"built_in\">abs</span>(p[i].y-p[i+<span class=\"number\">1</span>].y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    area = <span class=\"built_in\">abs</span>(area);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> area;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin&gt;&gt;n)&#123;</span><br><span class=\"line\">        p.<span class=\"built_in\">assign</span>(n+<span class=\"number\">1</span>,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">        edge = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">        p[n] = p[<span class=\"number\">0</span>];</span><br><span class=\"line\">        ans = <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">        cout&lt;&lt;ans-((ld)edge/<span class=\"number\">2</span>)&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"TIOJ-1205-直角三角形\"><a href=\"#TIOJ-1205-直角三角形\" class=\"headerlink\" title=\"TIOJ 1205 直角三角形\"></a>TIOJ 1205 直角三角形</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1205\">題目連結</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/262842\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>給你N（N≤1500）個座標平面上的點，請問總共可形成多少個直角三角形呢？</p>\n</blockquote>\n<p>從極角排序後的第一個點開始逆時針進行雙指針的枚舉。這邊使用到一個很特別的手法，對於共線的情況我們先透過預處理的方式將共線的點合併起來，並用cnt[x]陣列紀錄第x個點是由幾個點所合併起來的，如此一來，在進行計算的時候就不會有共線要分別處理的問題（不需擔心是不是可以跟之前的點形成直角三角形，因為相同斜率的點已經被合併剩下一個），直接將數量相乘就可以知道直角三角形的數量！</p>\n<p>時間複雜度：枚舉所有點 $O(n)\\times$ 進行極角排序$O(n\\log n)$ 以及雙指標$O(n)$，總時間複雜度為 $O(n^2\\log n)$。</p>\n<div class=\"note info\">\n            <p><strong>實作小細節</strong></p><p>雙指針進行枚舉的過程中，很有可能會指標指向的索引值會超出範圍。解決的方法有兩種：</p><ol><li>超出了即代表繞了一圈，只需要對索引值取餘數即可。</li><li>除了取餘數的方法之外，其實也可以直接在點集後面將所有點再推入一次，讓角度從360延伸成720度，就不會有超出範圍的問題！</li></ol>\n          </div>\n<p>以下是AC Code：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100001</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &lt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &lt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &gt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &gt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &gt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x-b.x == <span class=\"number\">0</span> &amp;&amp; y-b.y == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>+(pt b) &#123;<span class=\"keyword\">return</span> &#123;x + b.x, y + b.y&#125;;&#125; <span class=\"comment\">//向量相加</span></span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>-(pt b) &#123;<span class=\"keyword\">return</span> &#123;x - b.x, y - b.y&#125;;&#125; <span class=\"comment\">//向量相減</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>^(pt b) &#123;<span class=\"keyword\">return</span> x * b.y - y * b.x;&#125; <span class=\"comment\">//向量外積cross</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>*(pt b) &#123;<span class=\"keyword\">return</span> x * b.x + y * b.y;&#125; <span class=\"comment\">//向量內積dot</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;pt&gt; p,temp,pp;</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt;  cnt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pt a, pt b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> f1 = a &lt; pt&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> f2 = b &lt; pt&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f1 != f2)<span class=\"keyword\">return</span> f1 &lt; f2;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a ^ b) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//逆時針將點進行極角排序，從270度開始逆時針</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//O(n)枚舉每個點當直角情況</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">solve</span><span class=\"params\">(pt id)</span></span>&#123;</span><br><span class=\"line\">    pp.<span class=\"built_in\">clear</span>();cnt.<span class=\"built_in\">clear</span>();temp.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(pt i : p)&#123;</span><br><span class=\"line\">        pt cur = i - id;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur == pt&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        temp.<span class=\"built_in\">push_back</span>(cur);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(temp),cmp);            <span class=\"comment\">//以id為原點進行極角排序</span></span><br><span class=\"line\">    pp.<span class=\"built_in\">push_back</span>(temp[<span class=\"number\">0</span>]);          <span class=\"comment\">//pp每一角度只存至多一個點</span></span><br><span class=\"line\">    cnt.<span class=\"built_in\">push_back</span>(<span class=\"number\">1</span>);               <span class=\"comment\">//考慮每個點共線情況</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = temp.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">1</span>,len<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cross = temp[i]^temp[i<span class=\"number\">-1</span>],dot = temp[i]*temp[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cross == <span class=\"number\">0</span> &amp;&amp; dot &gt;= <span class=\"number\">0</span>)cnt[cnt.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>] += <span class=\"number\">1</span>;   <span class=\"comment\">//共線數量+=1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;pp.<span class=\"built_in\">push_back</span>(temp[i]);cnt.<span class=\"built_in\">push_back</span>(<span class=\"number\">1</span>);&#125;      <span class=\"comment\">//非共線設定數量為1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    len = pp.<span class=\"built_in\">size</span>();            <span class=\"comment\">//考慮橫跨一周的情況</span></span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,len<span class=\"number\">-1</span>)&#123;             <span class=\"comment\">//雙指針i,p1可能會超過一圈</span></span><br><span class=\"line\">        pp.<span class=\"built_in\">push_back</span>(pp[i]);    <span class=\"comment\">//將點再繞一圈</span></span><br><span class=\"line\">        cnt.<span class=\"built_in\">push_back</span>(cnt[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>,p1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, len<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p1 &lt; i+len &amp;&amp; (pp[i]^pp[p1]) &gt;= <span class=\"number\">0</span> &amp;&amp; (pp[i]*pp[p1]) &gt; <span class=\"number\">0</span>)p1 += <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//夾銳角的情況要p1+=1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((pp[i]^pp[p1]) &gt; <span class=\"number\">0</span> &amp;&amp; (pp[i]*pp[p1]) == <span class=\"number\">0</span>)ans += cnt[i]*cnt[p1];</span><br><span class=\"line\">        <span class=\"comment\">//正向的直角三角形，若共線則兩者數量相乘</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin&gt;&gt;n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        p.<span class=\"built_in\">assign</span>(n,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            ans += <span class=\"built_in\">solve</span>(p[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"TIOJ-1105-H-PS3\"><a href=\"#TIOJ-1105-H-PS3\" class=\"headerlink\" title=\"TIOJ 1105 H.PS3\"></a>TIOJ 1105 H.PS3</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1105\">題目連結</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/262930\">Submission $O(n^2)$</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/262947\">Submission $O(n\\log n)$</a></p>\n<blockquote>\n<p>題目敘述<br>給你平面上N個點（N≤3000），請求出最遠點對的索引值（小的在前、大的在後）</p>\n</blockquote>\n<p>我做了一份<a href=\"/hVplrqxCRdGiMkn2lwXGAA\">最近點對：不同複雜度之解決方式</a>的筆記，共有四種方法可以解決那個問題，這一題要求的是最遠點對，作法與最近點對其實差蠻遠的。由上幾題知道凸包的求法，因為凸包是可以圍住所有點的多邊形，因此最遠點對也應該在凸包上，而且所在的位置會為在凸包的兩側上（如果不落在凸包上，一定可以把點向兩側延伸到凸包上，且移動過後的點對距離一定比原始的點對距離大）。</p>\n<p>找完凸包之後，可以用旋轉卡尺的方式尋找最遠點對。想像兩條平行線中間夾著凸包，逆時鐘旋轉繞行凸包一圈，過程不斷更新最遠點對的距離。在實作上兩條平行線可以被想像成由 $P<em>i$ 指向 $P</em>{i+1}$ 的向量，透過外積三角形面積公式決定卡尺該如何移動。</p>\n<script type=\"math/tex; mode=display\">AREA = |\\overrightarrow{AB}\\times \\overrightarrow{AC}|</script><p>以下圖為例，我們要找 $\\overline{HM}$ 為底可以形成的最大三角形面積的頂點，因為在同底的情況下面積就代表點與邊的垂直距離，最大的垂直距離意味著這條底邊可以垂直延伸的最遠距離。因為凸包必定是凸多邊形，因此三角形的面積會呈現單峰函數，因此只需要從下一個三角形面積的大小，決定雙指針中比較快的指標的移動情況。</p>\n<p><img src=\"https://i.imgur.com/SXv0gfN.png\" alt=\"\"></p>\n<p>如果仔細來看，以下圖為例，當前較快的指標指向的位置是 $D$ 點，考慮一條與與 $\\overline{HM}$ 平行的直線，若下一個點 $J$ 在平行線段的另外一側，則將指標移往 $J$ 點。可能會有一個疑問，如果比較下圖的線段長度，會發現到 $\\overline{DH}$ 的長度比經過 $J$ 點的兩條線段都還要長，那為何還要更新至 $J$ 點？舉這個例子不太好，不過可以想像當旋轉卡尺轉到以 $\\overline{FH}$ 為底的時候，會將最遠點對的距離更新成 $\\overline{HD}$ 的長度。如果今天 $H$ 的左側又多加了一個新點 $P$，則最遠點對會變成 $\\overline{PD}$ 的距離。</p>\n<p>簡單來說，最遠點對一定會發生對角的凸包點上面，即使現在以 $\\overline{HM}$ 為底最遠點並非 $J$ 而是 $D$ ，但在旋轉卡尺旋轉到 $\\overline{FH}$ 時就能將距離更新成 $\\overline{HD}$ 的距離。</p>\n<p><img src=\"https://i.imgur.com/6Jeg2U8.png\" alt=\"\"></p>\n<div class=\"note success\">\n            <p><strong>實作小細節</strong></p><p>這一題有點麻煩，因為他要輸出的是最遠點對的索引值，而不是最遠點對之間的距離。在尋找凸包的過程中，會對所有點進行排序，因此原有的索引值順序會被打亂，需要在一開始輸入的時後就好好維護每一個座標的索引值。</p>\n          </div>\n<p>以下是AC Code：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100001</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y,ind;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &lt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &lt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &gt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &gt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &gt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x-b.x == <span class=\"number\">0</span> &amp;&amp; y-b.y == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>+(pt b) &#123;<span class=\"keyword\">return</span> &#123;x + b.x, y + b.y&#125;;&#125; <span class=\"comment\">//向量相加</span></span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>-(pt b) &#123;<span class=\"keyword\">return</span> &#123;x - b.x, y - b.y&#125;;&#125; <span class=\"comment\">//向量相減</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>^(pt b) &#123;<span class=\"keyword\">return</span> x * b.y - y * b.x;&#125; <span class=\"comment\">//向量外積cross</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>*(pt b) &#123;<span class=\"keyword\">return</span> x * b.x + y * b.y;&#125; <span class=\"comment\">//向量內積dot</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dis</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> x*x + y*y;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;pt&gt; p,hull;</span><br><span class=\"line\">pt pt_ans;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,h;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(pt a, pt b, pt o)</span></span>&#123;</span><br><span class=\"line\">    pt aa = a - o;</span><br><span class=\"line\">    pt bb = b - o;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (aa ^ bb) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check2</span><span class=\"params\">(pt a,pt b,pt c,pt d)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> aa = <span class=\"built_in\">abs</span>((a - c)^(b - c));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> bb = <span class=\"built_in\">abs</span>((a - d)^(b - d));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> aa &lt; bb;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pt a, pt b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a == b)<span class=\"keyword\">return</span> a.ind &lt; b.ind;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.x == b.x)<span class=\"keyword\">return</span> a.y &lt; b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x &lt; b.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">convex_hull</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">stable_sort</span>(<span class=\"built_in\">all</span>(p),cmp);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-2</span>)<span class=\"keyword\">if</span>(p[i] == p[i+<span class=\"number\">1</span>])p[i+<span class=\"number\">1</span>].ind = p[i].ind;</span><br><span class=\"line\">    hull.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(hull.<span class=\"built_in\">size</span>() &gt; <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">check</span>(i,hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))</span><br><span class=\"line\">            hull.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        hull.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sz = hull.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    h = hull.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;</span><br><span class=\"line\">    hull.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(<span class=\"built_in\">all</span>(p));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(hull.<span class=\"built_in\">size</span>() &gt; sz &amp;&amp; <span class=\"built_in\">check</span>(i,hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))</span><br><span class=\"line\">            hull.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        hull.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hull.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>,d = h,sz = hull.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,sz<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"built_in\">check2</span>(hull[i],hull[(i+<span class=\"number\">1</span>)%sz],hull[d],hull[(d+<span class=\"number\">1</span>)%sz]))</span><br><span class=\"line\">            d = (d+<span class=\"number\">1</span>)%sz;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans &lt; (hull[i]-hull[d]).<span class=\"built_in\">dis</span>())&#123;</span><br><span class=\"line\">            ans = (hull[i]-hull[d]).<span class=\"built_in\">dis</span>();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> a = hull[i].ind,b = hull[d].ind;<span class=\"keyword\">if</span>(a &gt; b)<span class=\"built_in\">swap</span>(a,b);</span><br><span class=\"line\">            pt_ans = &#123;a,b&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ans == (hull[i]-hull[d]).<span class=\"built_in\">dis</span>())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> a = hull[i].ind,b = hull[d].ind;<span class=\"keyword\">if</span>(a &gt; b)<span class=\"built_in\">swap</span>(a,b);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(pt_ans &gt; (pt)&#123;a,b&#125;)pt_ans = &#123;a,b&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans &lt; (hull[(i+<span class=\"number\">1</span>)%sz]-hull[d]).<span class=\"built_in\">dis</span>())&#123;</span><br><span class=\"line\">            ans = (hull[(i+<span class=\"number\">1</span>)%sz]-hull[d]).<span class=\"built_in\">dis</span>();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> a = hull[(i+<span class=\"number\">1</span>)%sz].ind,b = hull[d].ind;<span class=\"keyword\">if</span>(a &gt; b)<span class=\"built_in\">swap</span>(a,b);</span><br><span class=\"line\">            pt_ans = &#123;a,b&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ans == (hull[(i+<span class=\"number\">1</span>)%sz]-hull[d]).<span class=\"built_in\">dis</span>())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> a = hull[(i+<span class=\"number\">1</span>)%sz].ind,b = hull[d].ind;<span class=\"keyword\">if</span>(a &gt; b)<span class=\"built_in\">swap</span>(a,b);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(pt_ans &gt; (pt)&#123;a,b&#125;)pt_ans = &#123;a,b&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin&gt;&gt;n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        pt_ans = (pt)&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        p.<span class=\"built_in\">resize</span>(n,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">            p[i].ind = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">convex_hull</span>();</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">        cout&lt;&lt;pt_ans.x&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;pt_ans.y&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">5</span></span><br><span class=\"line\"><span class=\"comment\">9 1</span></span><br><span class=\"line\"><span class=\"comment\">1 5</span></span><br><span class=\"line\"><span class=\"comment\">1 2</span></span><br><span class=\"line\"><span class=\"comment\">9 9</span></span><br><span class=\"line\"><span class=\"comment\">5 1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ZJ-b288-夏季大三角\"><a href=\"#ZJ-b288-夏季大三角\" class=\"headerlink\" title=\"ZJ b288: 夏季大三角\"></a>ZJ b288: 夏季大三角</h3><p><a href=\"https://zerojudge.tw/ShowProblem?problemid=b288\">題目連結</a><br><a href=\"https://zerojudge.tw/ShowThread?postid=26741&amp;reply=0\">解題報告</a></p>\n<blockquote>\n<p>題目敘述<br>請輸出在N個二維平面的座標，挑選3顆出來成組成三角形的最大面積</p>\n</blockquote>\n<p>比較一下兩個複雜度的作法，第一個是使用 $O(n^3)$ 枚舉所有的點並計算面積，所需要的時間是0.4sec，而且需要特別注意不能使用到海龍公式計算面積，否則有很大的機會會超時。</p>\n<p><img src=\"https://i.imgur.com/oN26CR4.png\" alt=\"\"></p>\n<p>以下作法是先進行 $O(n\\log n)$ 找尋凸包，因為面積最大的三角形必定三個點都在凸包上，因此用 $n^2$ 的時間進行枚舉，旋轉卡尺（類似最遠點對的作法）找面積最大的第三個點，就能在總時間複雜度 $O(n^2)$ 完成！（會再更少，因為只要枚舉凸包上的點）</p>\n<p><img src=\"https://i.imgur.com/SUwVRWv.png\" alt=\"\"></p>\n<p>以下是AC Code：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100001</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    ld x,y;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &lt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &lt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &gt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &gt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &gt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">abs</span>(x-b.x)&lt;=eps &amp;&amp; <span class=\"built_in\">abs</span>(y-b.y)&lt;=eps)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>+(pt b) &#123;<span class=\"keyword\">return</span> &#123;x + b.x, y + b.y&#125;;&#125; <span class=\"comment\">//向量相加</span></span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>-(pt b) &#123;<span class=\"keyword\">return</span> &#123;x - b.x, y - b.y&#125;;&#125; <span class=\"comment\">//向量相減</span></span><br><span class=\"line\">    ld <span class=\"keyword\">operator</span>^(pt b) &#123;<span class=\"keyword\">return</span> x * b.y - y * b.x;&#125; <span class=\"comment\">//向量外積cross</span></span><br><span class=\"line\">    ld <span class=\"keyword\">operator</span>*(pt b) &#123;<span class=\"keyword\">return</span> x * b.x + y * b.y;&#125; <span class=\"comment\">//向量內積dot</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pt a, pt b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.x == b.x)<span class=\"keyword\">return</span> a.y &lt; b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x &lt; b.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vector&lt;pt&gt; p,hull;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,t,h;</span><br><span class=\"line\">ld ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(pt a,pt b,pt o)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cross = (a - o)^(b - o);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cross &gt;= <span class=\"number\">0</span>;                              <span class=\"comment\">//這裡很關鍵，別吃WA</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check2</span><span class=\"params\">(pt a,pt b,pt c,pt d)</span></span>&#123;</span><br><span class=\"line\">    ld aa = (a - c)^(b - c);</span><br><span class=\"line\">    ld bb = (a - d)^(b - d);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> aa &lt; bb;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ld <span class=\"title\">area</span><span class=\"params\">(pt a,pt b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">abs</span>(a^b)/<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">convex_hull</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    hull.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(p.<span class=\"built_in\">begin</span>(),p.<span class=\"built_in\">end</span>(),cmp);       <span class=\"comment\">//首先對x進行排序</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : p)&#123;                   <span class=\"comment\">//依序走訪，如果遇到外積&lt;0則不在凸包上</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(hull.<span class=\"built_in\">size</span>()&gt;=<span class=\"number\">2</span> &amp;&amp; <span class=\"built_in\">check</span>(i,hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))&#123;</span><br><span class=\"line\">            hull.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hull.<span class=\"built_in\">push_back</span>(i);             <span class=\"comment\">//在凸包hull的每一點都符合外積小於0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> down_hull = hull.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    h = down_hull<span class=\"number\">-1</span>;</span><br><span class=\"line\">    hull.<span class=\"built_in\">pop_back</span>();                   <span class=\"comment\">//x最大的點會在凸包上，不用做兩次先pop一次</span></span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(p.<span class=\"built_in\">begin</span>(),p.<span class=\"built_in\">end</span>());        <span class=\"comment\">//將所有點逆序之後做一次上面的凸包</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i: p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(hull.<span class=\"built_in\">size</span>() &gt; down_hull &amp;&amp; <span class=\"built_in\">check</span>(i,hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],hull[hull.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))&#123;</span><br><span class=\"line\">            hull.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        hull.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    hull.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> d,sz = hull.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,sz<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j,i+<span class=\"number\">1</span>,sz<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            d = (j+<span class=\"number\">1</span>)%sz;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(<span class=\"built_in\">check2</span>(hull[i],hull[(j)%sz],hull[d],hull[(d+<span class=\"number\">1</span>)%sz]))</span><br><span class=\"line\">                d = (d+<span class=\"number\">1</span>)%sz;</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans,<span class=\"built_in\">area</span>((hull[d]-hull[i]),(hull[d]-hull[j])));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    p.<span class=\"built_in\">assign</span>(n,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">    <span class=\"built_in\">convex_hull</span>();</span><br><span class=\"line\">    ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">    cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"TIOJ-1500-Clean-up-on-aisle-3\"><a href=\"#TIOJ-1500-Clean-up-on-aisle-3\" class=\"headerlink\" title=\"TIOJ 1500 Clean up on aisle 3\"></a>TIOJ 1500 Clean up on aisle 3</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1500\">題目連結</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/262966\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>平面上n個點找最近點對的距離</p>\n</blockquote>\n<p>最近點對真的有超多種作法的，枚舉、掃描線、分治、隨機都可以做！這邊有<a href=\"/hVplrqxCRdGiMkn2lwXGAA\">一篇筆記</a>比較各種時間複雜度的最近點對作法，這邊不多做贅述！</p>\n<p>以下程式碼是掃描線演算法，最差情況下的時間複雜度是 $O(n^2)$，因為需要排序，所以下限為 $\\Omega(n\\log n)$！</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 50005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 5e18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\">pii p[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ld <span class=\"title\">dis</span><span class=\"params\">(pii a, pii b)</span></span>&#123;</span><br><span class=\"line\">    ld x = a.x-b.x, y = a.y-b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(x*x + y*y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin&gt;&gt;n)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(p,p+n);</span><br><span class=\"line\">        ld d = INF;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(j,i+<span class=\"number\">1</span>,n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p[j].x &gt; p[i].x + d)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                d = <span class=\"built_in\">min</span>(d, <span class=\"built_in\">dis</span>(p[i],p[j]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout&lt;&lt;d&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"TIOJ-1280-領土-Territory\"><a href=\"#TIOJ-1280-領土-Territory\" class=\"headerlink\" title=\"TIOJ 1280 領土 (Territory)\"></a>TIOJ 1280 領土 (Territory)</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1280\">題目連結</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/262848\">Submission</a></p>\n<blockquote>\n<p>題目敘述<br>一個國家有 n 個安全哨，每一個都有座標 $(x,y)$ ，代表在座標軸上的位置。輸出該國安全哨所能圍出的最大領土。</p>\n</blockquote>\n<p>n個點所能圍成的最大面積，其實等價於凸包的面積。與前幾題的<strong>最小凸多邊形</strong>是一模一樣的題目！</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100001</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &lt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &lt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &gt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &gt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &gt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x-b.x == <span class=\"number\">0</span> &amp;&amp; y-b.y == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>+(pt b) &#123;<span class=\"keyword\">return</span> &#123;x + b.x, y + b.y&#125;;&#125; <span class=\"comment\">//向量相加</span></span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>-(pt b) &#123;<span class=\"keyword\">return</span> &#123;x - b.x, y - b.y&#125;;&#125; <span class=\"comment\">//向量相減</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>^(pt b) &#123;<span class=\"keyword\">return</span> x * b.y - y * b.x;&#125; <span class=\"comment\">//向量外積cross</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>*(pt b) &#123;<span class=\"keyword\">return</span> x * b.x + y * b.y;&#125; <span class=\"comment\">//向量內積dot</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;pt&gt; p,temp,pp;</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt;  cnt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pt a, pt b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.x == b.x)<span class=\"keyword\">return</span> a.y &lt; b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x &lt; b.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(pt a,pt b,pt o)</span></span>&#123;</span><br><span class=\"line\">    pt aa = a - o;</span><br><span class=\"line\">    pt bb = b - o;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (aa^bb) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;pt&gt; <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(p),cmp);</span><br><span class=\"line\">    vector&lt;pt&gt; h;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(pt i : p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(h.<span class=\"built_in\">size</span>()&gt;=<span class=\"number\">2</span> &amp;&amp; <span class=\"built_in\">check</span>(i,h[h.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],h[h.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))</span><br><span class=\"line\">            h.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        h.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sz = h.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    h.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(<span class=\"built_in\">all</span>(p));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(h.<span class=\"built_in\">size</span>()&gt;sz &amp;&amp; <span class=\"built_in\">check</span>(i,h[h.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],h[h.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))</span><br><span class=\"line\">            h.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        h.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    p.<span class=\"built_in\">resize</span>(n,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">    vector&lt;pt&gt; hull = <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> area = <span class=\"number\">0</span>,sz = hull.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,sz<span class=\"number\">-2</span>)&#123;</span><br><span class=\"line\">        area += (hull[i]^hull[i+<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;((area%<span class=\"number\">2</span>)?(area/<span class=\"number\">2</span>)+<span class=\"number\">1</span>:(area/<span class=\"number\">2</span>))&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ZJ-a871-Museum-Area\"><a href=\"#ZJ-a871-Museum-Area\" class=\"headerlink\" title=\"ZJ a871: Museum Area\"></a>ZJ a871: Museum Area</h3><p><a href=\"https://zerojudge.tw/ShowProblem?problemid=a871\">題目連結</a></p>\n<blockquote>\n<p>題目敘述<br>n個點圍成的多邊形，求面積</p>\n</blockquote>\n<p>水題，直接套行列式公式即可算出答案！</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 15</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\">pdd p[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ld <span class=\"title\">check</span><span class=\"params\">(pdd a, pdd b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x*b.y - a.y*b.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin&gt;&gt;n)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">        p[n] = p[<span class=\"number\">0</span>];</span><br><span class=\"line\">        ld area = <span class=\"number\">0.0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)area += <span class=\"built_in\">check</span>(p[i],p[i+<span class=\"number\">1</span>]);</span><br><span class=\"line\">        ld ans = (ld)area/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans&lt;<span class=\"number\">0</span>)ans = -ans;</span><br><span class=\"line\">        cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"TIOJ-1678-剪多邊形（molding）\"><a href=\"#TIOJ-1678-剪多邊形（molding）\" class=\"headerlink\" title=\"TIOJ 1678 剪多邊形（molding）\"></a>TIOJ 1678 剪多邊形（molding）</h3><p><a href=\"https://tioj.ck.tp.edu.tw/problems/1678\">題目連結TIOJ</a><br><a href=\"https://tioj.ck.tp.edu.tw/submissions/262849\">TIOJ Submission</a><br><a href=\"https://zerojudge.tw/ShowProblem?problemid=d546\">題目連結ZJ</a></p>\n<blockquote>\n<p>題目敘述<br>間單來說是求出多邊形面積以及凸包面積的差，詳細可以點上面題目連結。</p>\n</blockquote>\n<p>題目說多邊形需要才剪下的面積，我們就算凸包面積以及多邊形面積，兩者的差去除上題目給的色塊面積即是答案！</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld long double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100001</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pt</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &lt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &lt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &gt; (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == b.x)<span class=\"keyword\">return</span> y &gt; b.y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x &gt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> == (pt b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x-b.x == <span class=\"number\">0</span> &amp;&amp; y-b.y == <span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>+(pt b) &#123;<span class=\"keyword\">return</span> &#123;x + b.x, y + b.y&#125;;&#125; <span class=\"comment\">//向量相加</span></span><br><span class=\"line\">    pt <span class=\"keyword\">operator</span>-(pt b) &#123;<span class=\"keyword\">return</span> &#123;x - b.x, y - b.y&#125;;&#125; <span class=\"comment\">//向量相減</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>^(pt b) &#123;<span class=\"keyword\">return</span> x * b.y - y * b.x;&#125; <span class=\"comment\">//向量外積cross</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">operator</span>*(pt b) &#123;<span class=\"keyword\">return</span> x * b.x + y * b.y;&#125; <span class=\"comment\">//向量內積dot</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;pt&gt; p,temp,pp;</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt;  cnt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,a,ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(pt a, pt b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.x == b.x)<span class=\"keyword\">return</span> a.y &lt; b.y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.x &lt; b.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(pt a,pt b,pt o)</span></span>&#123;</span><br><span class=\"line\">    pt aa = a - o;</span><br><span class=\"line\">    pt bb = b - o;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (aa^bb) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;pt&gt; <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(p),cmp);</span><br><span class=\"line\">    vector&lt;pt&gt; h;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(pt i : p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(h.<span class=\"built_in\">size</span>()&gt;=<span class=\"number\">2</span> &amp;&amp; <span class=\"built_in\">check</span>(i,h[h.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],h[h.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))</span><br><span class=\"line\">            h.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        h.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sz = h.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    h.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(<span class=\"built_in\">all</span>(p));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : p)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(h.<span class=\"built_in\">size</span>()&gt;sz &amp;&amp; <span class=\"built_in\">check</span>(i,h[h.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],h[h.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>]))</span><br><span class=\"line\">            h.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        h.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Polygon</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;pt&gt; <span class=\"title\">temp</span><span class=\"params\">(p)</span></span>;</span><br><span class=\"line\">    temp.<span class=\"built_in\">push_back</span>(temp[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> area = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)area += (temp[i]^temp[i+<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">abs</span>(area);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;a;</span><br><span class=\"line\">    p.<span class=\"built_in\">resize</span>(n,&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class=\"line\">    ld small = (ld)<span class=\"built_in\">Polygon</span>()/<span class=\"number\">2</span>;</span><br><span class=\"line\">    vector&lt;pt&gt; hull = <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> area = <span class=\"number\">0</span>,sz = hull.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,sz<span class=\"number\">-2</span>)area += (hull[i]^hull[i+<span class=\"number\">1</span>]);</span><br><span class=\"line\">    ld big = (ld)area/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"built_in\">ceil</span>((big-small)/a);</span><br><span class=\"line\">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ZJ-d269-11579-Triangle-Trouble\"><a href=\"#ZJ-d269-11579-Triangle-Trouble\" class=\"headerlink\" title=\"ZJ d269: 11579 - Triangle Trouble\"></a>ZJ d269: 11579 - Triangle Trouble</h3><p><a href=\"https://zerojudge.tw/ShowProblem?problemid=d269\">題目連結</a></p>\n<blockquote>\n<p>題目敘述<br>有一個三角形工廠有一個很大的問題。給你一些邊的邊長，想辦法找出用這些邊長圍出最大的三角形。</p>\n</blockquote>\n<p>根據海龍公式，三角形面積：</p>\n<script type=\"math/tex; mode=display\">\\triangle ABC = \\sqrt{s\\cdot(s-a)\\cdot(s-b)\\cdot(s-c)}</script><p>可以利用貪婪法，將所有邊長由大到小進行排序，每一次拿最大的三個邊長進行枚舉，即可算出最大的三角形面積。不難理解，當換上一個比較大的邊，算出來的s也會比較大，跟邊相減的值也會比較大，總面積自然較大（好啦，這是非常不嚴謹的證明XD）</p>\n<p>在想題過程中，我有思考到，如果周長一樣的情況下，到底何種面積的三角形面積會比較大？答案是正三角形！</p>\n<div class=\"note default\">\n            <p><strong>三角形周長固定下面積的比較</strong><br>根據海龍公式：</p><script type=\"math/tex; mode=display\">s = \\frac{1}{2}(a+b+c)</script><p>想要比較在周長固定下三角形的面積，可以用算幾不等式比較，因為 $s$ 是定值，所以可以列出以下式子：</p><script type=\"math/tex; mode=display\">\\frac{(s-a)+(s-b)+(s-c)}{3} ≥ \\sqrt[3]{(s-a)(s-b)(s-c)}</script><p>等好成立時，$a=b=c$。因為$s = \\frac{a+b+c}{2}$，因此：</p><script type=\"math/tex; mode=display\">(\\frac{a}{2})^2 ≥ (s-a)(s-b)(s-c)</script><p>得到海龍公式</p><script type=\"math/tex; mode=display\">\\triangle ABC = \\sqrt{s\\cdot(s-a)\\cdot(s-b)\\cdot(s-c)} ≤ \\sqrt{\\frac{3a}{2}\\cdot\\frac{a^3}{8}}=\\frac{\\sqrt{3}}{4}a^2</script>\n          </div>\n<p>以下是使用貪婪法的AC Code：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Orz ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pii pair<span class=\"meta-string\">&lt;int,int&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pdd pair<span class=\"meta-string\">&lt;double,double&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ld double</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 100001</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) x.begin(),x.end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">int</span> t,n;</span><br><span class=\"line\">vector&lt;ld&gt; p;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ld <span class=\"title\">area</span><span class=\"params\">(ld a ,ld b, ld c)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a &gt; b + c)<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    ld p = (a+b+c)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p*(p-a)*(p-b)*(p-c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Orz;</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        cin&gt;&gt;n;</span><br><span class=\"line\">        p.<span class=\"built_in\">assign</span>(n,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-1</span>)cin&gt;&gt;p[i];</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(p),greater&lt;&gt;());</span><br><span class=\"line\">        ld ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i,<span class=\"number\">0</span>,n<span class=\"number\">-3</span>)</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans,<span class=\"built_in\">area</span>(p[i],p[i+<span class=\"number\">1</span>],p[i+<span class=\"number\">2</span>]));</span><br><span class=\"line\">        cout&lt;&lt;fixed&lt;&lt;<span class=\"built_in\">setprecision</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"built_in\">sqrt</span>(ans)&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><p>計算幾何，顧名思義就是在電腦完成幾何的運算，要怎麼把平面的東西轉化成電腦看得懂的東西就是計算幾何在做的事情。常常我們覺得很容易判斷的事情，例如判斷線段是否相交，我們可以利用肉眼直輕易判斷出來，因為我們有強大的空間感幫助我們進行判斷，但換作是電腦就必須用一些數學的技巧，對於不同的情況做各自的判斷，才能讓電腦正確回答兩條線段的相交情形。</p>\n<p>除此之外，在寫題過程中，使用到ggb進行輔助，讓我可以對程式的執行過程有更是覺化的概念，也幫助我在解題時能更理解解題的策略！上面一題三角形個數的判斷，就使用了ggb判定將點搬移的所有情況。利用它我抓到了當點的y座標為零時並沒進行好特殊情況的判斷，這也是一個視覺化之後的好處！</p>\n<p>有一題沒有做的是模擬退火的題目實作，要求圓與三角形的交集面積，感覺超級複雜，以後有時間來慢慢實作！</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckvyspmg30001muyxfnenbuqh","category_id":"ckvyspmgf0004muyxdh0852u1","_id":"ckvyspmgz000gmuyx2o6s3vz8"},{"post_id":"ckvyspmg90003muyx7olt4rtq","category_id":"ckvyspmgf0004muyxdh0852u1","_id":"ckvyspmh6000mmuyxbesb46y4"},{"post_id":"ckvyspmgk0007muyx74se8ieo","category_id":"ckvyspmgf0004muyxdh0852u1","_id":"ckvyspmhi000rmuyxh5ayep1b"},{"post_id":"ckvyspmgx000emuyxdf4w3i3v","category_id":"ckvyspmhn000ymuyx5sut3hkl","_id":"ckvyspmhu0014muyx390e6ydo"},{"post_id":"ckvyspmh1000imuyxdcfbcc7p","category_id":"ckvyspmhp0012muyx4qmdfztl","_id":"ckvyspmi0001amuyx5epc8l24"},{"post_id":"ckvyspmhf000pmuyxf4gmeq1l","category_id":"ckvyspmhn000ymuyx5sut3hkl","_id":"ckvyspmi2001fmuyx0hv04y1m"},{"post_id":"ckvyspmgm0009muyxfl4s7l6a","category_id":"ckvyspmh5000lmuyx9rx65ndp","_id":"ckvyspmi4001kmuyxddgbddwl"},{"post_id":"ckvyspmgm0009muyxfl4s7l6a","category_id":"ckvyspmi1001cmuyxcqet89f8","_id":"ckvyspmi5001mmuyxdkmz4fs5"},{"post_id":"ckvyspmhh000qmuyx4dnx3u6y","category_id":"ckvyspmhn000ymuyx5sut3hkl","_id":"ckvyspmi5001omuyx0y818e8f"},{"post_id":"ckvyspmgo000amuyx4ktteibv","category_id":"ckvyspmh5000lmuyx9rx65ndp","_id":"ckvyspmib001smuyx2lpfhm3v"},{"post_id":"ckvyspmgo000amuyx4ktteibv","category_id":"ckvyspmi4001jmuyx2z9rdciy","_id":"ckvyspmid001vmuyxf9g9cva7"},{"post_id":"ckvyspmgv000dmuyxag3l4ifb","category_id":"ckvyspmh5000lmuyx9rx65ndp","_id":"ckvyspmid001xmuyxgcg0bmux"},{"post_id":"ckvyspmgv000dmuyxag3l4ifb","category_id":"ckvyspmi5001pmuyxauzb93ky","_id":"ckvyspmie0020muyx8bssgbn6"},{"post_id":"ckvyspmh4000kmuyx4kv06s6w","category_id":"ckvyspmh5000lmuyx9rx65ndp","_id":"ckvyspmif0021muyxc1w60uhe"},{"post_id":"ckvyspmh4000kmuyx4kv06s6w","category_id":"ckvyspmic001tmuyxcm5r848b","_id":"ckvyspmif0023muyxbfiica84"},{"post_id":"ckvyspmim002hmuyxg922gdwg","category_id":"ckvyspmh5000lmuyx9rx65ndp","_id":"ckvyspmiz002omuyx1l92hl8b"},{"post_id":"ckvyspmim002hmuyxg922gdwg","category_id":"ckvyspmi4001jmuyx2z9rdciy","_id":"ckvyspmiz002pmuyx3i2d1sob"},{"post_id":"ckvyspmiq002imuyxazl7dcb7","category_id":"ckvyspmh5000lmuyx9rx65ndp","_id":"ckvyspmj1002smuyx4sn48e2u"},{"post_id":"ckvyspmiq002imuyxazl7dcb7","category_id":"ckvyspmiy002nmuyx9pef0qvf","_id":"ckvyspmj2002vmuyx19t1d6uk"},{"post_id":"ckvyspmis002kmuyxfgc597e3","category_id":"ckvyspmh5000lmuyx9rx65ndp","_id":"ckvyspmj9002xmuyx49mlbkdw"},{"post_id":"ckvyspmis002kmuyxfgc597e3","category_id":"ckvyspmiy002nmuyx9pef0qvf","_id":"ckvyspmja002zmuyx7048begl"},{"post_id":"ckvyspml70032muyx4noy369r","category_id":"ckvyspmh5000lmuyx9rx65ndp","_id":"ckvyspml90035muyxdq8ydheu"},{"post_id":"ckvyspml70032muyx4noy369r","category_id":"ckvyspmi5001pmuyxauzb93ky","_id":"ckvyspml90036muyxfwm89wg1"},{"post_id":"ckvyspmm80037muyxcmd63zl4","category_id":"ckvyspmh5000lmuyx9rx65ndp","_id":"ckvyspmma003amuyx0hpi6hfj"},{"post_id":"ckvyspmm80037muyxcmd63zl4","category_id":"ckvyspmi1001cmuyxcqet89f8","_id":"ckvyspmma003bmuyxauq8cj2k"}],"PostTag":[{"post_id":"ckvyspmg30001muyxfnenbuqh","tag_id":"ckvyspmgi0005muyxdn1s7z6q","_id":"ckvyspmh3000jmuyx6xk478xu"},{"post_id":"ckvyspmg30001muyxfnenbuqh","tag_id":"ckvyspmgp000cmuyx4tspbvji","_id":"ckvyspmh6000nmuyxa4v7f8ka"},{"post_id":"ckvyspmg90003muyx7olt4rtq","tag_id":"ckvyspmgi0005muyxdn1s7z6q","_id":"ckvyspmhk000umuyx8jkh6uhv"},{"post_id":"ckvyspmg90003muyx7olt4rtq","tag_id":"ckvyspmgp000cmuyx4tspbvji","_id":"ckvyspmhk000vmuyx37p12idh"},{"post_id":"ckvyspmgk0007muyx74se8ieo","tag_id":"ckvyspmgi0005muyxdn1s7z6q","_id":"ckvyspmhp0010muyx495v4gxw"},{"post_id":"ckvyspmgk0007muyx74se8ieo","tag_id":"ckvyspmgp000cmuyx4tspbvji","_id":"ckvyspmhp0011muyxcg65bh5g"},{"post_id":"ckvyspmgm0009muyxfl4s7l6a","tag_id":"ckvyspmho000zmuyxc36z7zdb","_id":"ckvyspmhz0017muyxem559bm2"},{"post_id":"ckvyspmgm0009muyxfl4s7l6a","tag_id":"ckvyspmht0013muyx625jaen3","_id":"ckvyspmhz0018muyx30j6b4pr"},{"post_id":"ckvyspmgo000amuyx4ktteibv","tag_id":"ckvyspmhy0016muyx03baccry","_id":"ckvyspmi2001emuyx60ie63jd"},{"post_id":"ckvyspmgo000amuyx4ktteibv","tag_id":"ckvyspmi0001bmuyxh3f2c4ru","_id":"ckvyspmi2001hmuyxeixn2cmi"},{"post_id":"ckvyspmgv000dmuyxag3l4ifb","tag_id":"ckvyspmhy0016muyx03baccry","_id":"ckvyspmi5001nmuyx6bqc7g3n"},{"post_id":"ckvyspmgv000dmuyxag3l4ifb","tag_id":"ckvyspmi3001imuyx7t09cxv5","_id":"ckvyspmi6001qmuyx4926e2bg"},{"post_id":"ckvyspmgx000emuyxdf4w3i3v","tag_id":"ckvyspmi4001lmuyx0pbig49z","_id":"ckvyspmid001wmuyxfi9mctii"},{"post_id":"ckvyspmgx000emuyxdf4w3i3v","tag_id":"ckvyspmi3001imuyx7t09cxv5","_id":"ckvyspmie001ymuyx5je72vwv"},{"post_id":"ckvyspmh1000imuyxdcfbcc7p","tag_id":"ckvyspmic001umuyxhy3042ch","_id":"ckvyspmig0024muyx60ir7576"},{"post_id":"ckvyspmh1000imuyxdcfbcc7p","tag_id":"ckvyspmie001zmuyxf2ab9yqb","_id":"ckvyspmig0025muyxapjbhvc7"},{"post_id":"ckvyspmh4000kmuyx4kv06s6w","tag_id":"ckvyspmif0022muyxgico68t7","_id":"ckvyspmih0028muyxhn1j86vb"},{"post_id":"ckvyspmh4000kmuyx4kv06s6w","tag_id":"ckvyspmig0026muyx9by2h3zo","_id":"ckvyspmih0029muyxcqll3i19"},{"post_id":"ckvyspmhf000pmuyxf4gmeq1l","tag_id":"ckvyspmi4001lmuyx0pbig49z","_id":"ckvyspmii002cmuyx0se7fqhr"},{"post_id":"ckvyspmhf000pmuyxf4gmeq1l","tag_id":"ckvyspmi3001imuyx7t09cxv5","_id":"ckvyspmii002dmuyx7ry8g5nn"},{"post_id":"ckvyspmhh000qmuyx4dnx3u6y","tag_id":"ckvyspmi4001lmuyx0pbig49z","_id":"ckvyspmij002fmuyxatz0flsl"},{"post_id":"ckvyspmhh000qmuyx4dnx3u6y","tag_id":"ckvyspmi0001bmuyxh3f2c4ru","_id":"ckvyspmij002gmuyxdoy41nyd"},{"post_id":"ckvyspmim002hmuyxg922gdwg","tag_id":"ckvyspmhy0016muyx03baccry","_id":"ckvyspmir002jmuyx5mzybesv"},{"post_id":"ckvyspmim002hmuyxg922gdwg","tag_id":"ckvyspmi0001bmuyxh3f2c4ru","_id":"ckvyspmiy002mmuyxb9jt6aqp"},{"post_id":"ckvyspmiq002imuyxazl7dcb7","tag_id":"ckvyspmit002lmuyx93gube56","_id":"ckvyspmj2002umuyx8vw207lr"},{"post_id":"ckvyspmiq002imuyxazl7dcb7","tag_id":"ckvyspmiz002qmuyxc5xkd94o","_id":"ckvyspmj3002wmuyx9ycbfmct"},{"post_id":"ckvyspmis002kmuyxfgc597e3","tag_id":"ckvyspmit002lmuyx93gube56","_id":"ckvyspmja0030muyx0npw45nb"},{"post_id":"ckvyspmis002kmuyxfgc597e3","tag_id":"ckvyspmiz002qmuyxc5xkd94o","_id":"ckvyspmja0031muyx45159t48"},{"post_id":"ckvyspml70032muyx4noy369r","tag_id":"ckvyspmhy0016muyx03baccry","_id":"ckvyspml80033muyxg091cxh1"},{"post_id":"ckvyspml70032muyx4noy369r","tag_id":"ckvyspmi3001imuyx7t09cxv5","_id":"ckvyspml90034muyx01m09f36"},{"post_id":"ckvyspmm80037muyxcmd63zl4","tag_id":"ckvyspmho000zmuyxc36z7zdb","_id":"ckvyspmma0038muyx6oxdadyq"},{"post_id":"ckvyspmm80037muyxcmd63zl4","tag_id":"ckvyspmht0013muyx625jaen3","_id":"ckvyspmma0039muyxbkzj4miu"}],"Tag":[{"name":"APCS","_id":"ckvyspmgi0005muyxdn1s7z6q"},{"name":"競賽筆記","_id":"ckvyspmgp000cmuyx4tspbvji"},{"name":"計算幾何","_id":"ckvyspmho000zmuyxc36z7zdb"},{"name":"暑期筆記","_id":"ckvyspmht0013muyx625jaen3"},{"name":"2020資訊之芽","_id":"ckvyspmhy0016muyx03baccry"},{"name":"2021暑假筆記","_id":"ckvyspmi0001bmuyxh3f2c4ru"},{"name":"2021暑期筆記","_id":"ckvyspmi3001imuyx7t09cxv5"},{"name":"數學","_id":"ckvyspmi4001lmuyx0pbig49z"},{"name":"個人部落格","_id":"ckvyspmic001umuyxhy3042ch"},{"name":"網站架設","_id":"ckvyspmie001zmuyxf2ab9yqb"},{"name":"分治法","_id":"ckvyspmif0022muyxgico68t7"},{"name":"暑假筆記","_id":"ckvyspmig0026muyx9by2h3zo"},{"name":"字串","_id":"ckvyspmit002lmuyx93gube56"},{"name":"演算法","_id":"ckvyspmiz002qmuyxc5xkd94o"}]}}